{"ast":null,"code":"import \"core-js/modules/es.array.with.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A position in the editor.\n */\nexport class Position {\n  constructor(lineNumber, column) {\n    this.lineNumber = lineNumber;\n    this.column = column;\n  }\n  /**\n   * Create a new position from this position.\n   *\n   * @param newLineNumber new line number\n   * @param newColumn new column\n   */\n  with(newLineNumber = this.lineNumber, newColumn = this.column) {\n    if (newLineNumber === this.lineNumber && newColumn === this.column) {\n      return this;\n    } else {\n      return new Position(newLineNumber, newColumn);\n    }\n  }\n  /**\n   * Derive a new position from this position.\n   *\n   * @param deltaLineNumber line number delta\n   * @param deltaColumn column delta\n   */\n  delta(deltaLineNumber = 0, deltaColumn = 0) {\n    return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n  }\n  /**\n   * Test if this position equals other position\n   */\n  equals(other) {\n    return Position.equals(this, other);\n  }\n  /**\n   * Test if position `a` equals position `b`\n   */\n  static equals(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n    return !!a && !!b && a.lineNumber === b.lineNumber && a.column === b.column;\n  }\n  /**\n   * Test if this position is before other position.\n   * If the two positions are equal, the result will be false.\n   */\n  isBefore(other) {\n    return Position.isBefore(this, other);\n  }\n  /**\n   * Test if position `a` is before position `b`.\n   * If the two positions are equal, the result will be false.\n   */\n  static isBefore(a, b) {\n    if (a.lineNumber < b.lineNumber) {\n      return true;\n    }\n    if (b.lineNumber < a.lineNumber) {\n      return false;\n    }\n    return a.column < b.column;\n  }\n  /**\n   * Test if this position is before other position.\n   * If the two positions are equal, the result will be true.\n   */\n  isBeforeOrEqual(other) {\n    return Position.isBeforeOrEqual(this, other);\n  }\n  /**\n   * Test if position `a` is before position `b`.\n   * If the two positions are equal, the result will be true.\n   */\n  static isBeforeOrEqual(a, b) {\n    if (a.lineNumber < b.lineNumber) {\n      return true;\n    }\n    if (b.lineNumber < a.lineNumber) {\n      return false;\n    }\n    return a.column <= b.column;\n  }\n  /**\n   * A function that compares positions, useful for sorting\n   */\n  static compare(a, b) {\n    const aLineNumber = a.lineNumber | 0;\n    const bLineNumber = b.lineNumber | 0;\n    if (aLineNumber === bLineNumber) {\n      const aColumn = a.column | 0;\n      const bColumn = b.column | 0;\n      return aColumn - bColumn;\n    }\n    return aLineNumber - bLineNumber;\n  }\n  /**\n   * Clone this position.\n   */\n  clone() {\n    return new Position(this.lineNumber, this.column);\n  }\n  /**\n   * Convert to a human-readable representation.\n   */\n  toString() {\n    return '(' + this.lineNumber + ',' + this.column + ')';\n  }\n  // ---\n  /**\n   * Create a `Position` from an `IPosition`.\n   */\n  static lift(pos) {\n    return new Position(pos.lineNumber, pos.column);\n  }\n  /**\n   * Test if `obj` is an `IPosition`.\n   */\n  static isIPosition(obj) {\n    return obj && typeof obj.lineNumber === 'number' && typeof obj.column === 'number';\n  }\n  toJSON() {\n    return {\n      lineNumber: this.lineNumber,\n      column: this.column\n    };\n  }\n}","map":{"version":3,"names":["Position","constructor","lineNumber","column","with","newLineNumber","newColumn","delta","deltaLineNumber","deltaColumn","equals","other","a","b","isBefore","isBeforeOrEqual","compare","aLineNumber","bLineNumber","aColumn","bColumn","clone","toString","lift","pos","isIPosition","obj","toJSON"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/core/position.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A position in the editor.\n */\nexport class Position {\n    constructor(lineNumber, column) {\n        this.lineNumber = lineNumber;\n        this.column = column;\n    }\n    /**\n     * Create a new position from this position.\n     *\n     * @param newLineNumber new line number\n     * @param newColumn new column\n     */\n    with(newLineNumber = this.lineNumber, newColumn = this.column) {\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\n            return this;\n        }\n        else {\n            return new Position(newLineNumber, newColumn);\n        }\n    }\n    /**\n     * Derive a new position from this position.\n     *\n     * @param deltaLineNumber line number delta\n     * @param deltaColumn column delta\n     */\n    delta(deltaLineNumber = 0, deltaColumn = 0) {\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n    }\n    /**\n     * Test if this position equals other position\n     */\n    equals(other) {\n        return Position.equals(this, other);\n    }\n    /**\n     * Test if position `a` equals position `b`\n     */\n    static equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        return (!!a &&\n            !!b &&\n            a.lineNumber === b.lineNumber &&\n            a.column === b.column);\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be false.\n     */\n    isBefore(other) {\n        return Position.isBefore(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be false.\n     */\n    static isBefore(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column < b.column;\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be true.\n     */\n    isBeforeOrEqual(other) {\n        return Position.isBeforeOrEqual(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be true.\n     */\n    static isBeforeOrEqual(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column <= b.column;\n    }\n    /**\n     * A function that compares positions, useful for sorting\n     */\n    static compare(a, b) {\n        const aLineNumber = a.lineNumber | 0;\n        const bLineNumber = b.lineNumber | 0;\n        if (aLineNumber === bLineNumber) {\n            const aColumn = a.column | 0;\n            const bColumn = b.column | 0;\n            return aColumn - bColumn;\n        }\n        return aLineNumber - bLineNumber;\n    }\n    /**\n     * Clone this position.\n     */\n    clone() {\n        return new Position(this.lineNumber, this.column);\n    }\n    /**\n     * Convert to a human-readable representation.\n     */\n    toString() {\n        return '(' + this.lineNumber + ',' + this.column + ')';\n    }\n    // ---\n    /**\n     * Create a `Position` from an `IPosition`.\n     */\n    static lift(pos) {\n        return new Position(pos.lineNumber, pos.column);\n    }\n    /**\n     * Test if `obj` is an `IPosition`.\n     */\n    static isIPosition(obj) {\n        return (obj\n            && (typeof obj.lineNumber === 'number')\n            && (typeof obj.column === 'number'));\n    }\n    toJSON() {\n        return {\n            lineNumber: this.lineNumber,\n            column: this.column\n        };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}