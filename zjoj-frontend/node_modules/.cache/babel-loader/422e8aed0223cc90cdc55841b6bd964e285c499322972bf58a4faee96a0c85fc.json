{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from './browser.js';\nimport { mainWindow } from './window.js';\nimport * as platform from '../common/platform.js';\n/**\n * Browser feature we can support in current platform, browser and environment.\n */\nexport const BrowserFeatures = {\n  clipboard: {\n    writeText: platform.isNative || document.queryCommandSupported && document.queryCommandSupported('copy') || !!(navigator && navigator.clipboard && navigator.clipboard.writeText),\n    readText: platform.isNative || !!(navigator && navigator.clipboard && navigator.clipboard.readText)\n  },\n  keyboard: (() => {\n    if (platform.isNative || browser.isStandalone()) {\n      return 0 /* KeyboardSupport.Always */;\n    }\n    if (navigator.keyboard || browser.isSafari) {\n      return 1 /* KeyboardSupport.FullScreen */;\n    }\n    return 2 /* KeyboardSupport.None */;\n  })(),\n  // 'ontouchstart' in window always evaluates to true with typescript's modern typings. This causes `window` to be\n  // `never` later in `window.navigator`. That's why we need the explicit `window as Window` cast\n  touch: 'ontouchstart' in mainWindow || navigator.maxTouchPoints > 0,\n  pointerEvents: mainWindow.PointerEvent && ('ontouchstart' in mainWindow || navigator.maxTouchPoints > 0 || navigator.maxTouchPoints > 0)\n};","map":{"version":3,"names":["browser","mainWindow","platform","BrowserFeatures","clipboard","writeText","isNative","document","queryCommandSupported","navigator","readText","keyboard","isStandalone","isSafari","touch","maxTouchPoints","pointerEvents","PointerEvent"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/base/browser/canIUse.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from './browser.js';\nimport { mainWindow } from './window.js';\nimport * as platform from '../common/platform.js';\n/**\n * Browser feature we can support in current platform, browser and environment.\n */\nexport const BrowserFeatures = {\n    clipboard: {\n        writeText: (platform.isNative\n            || (document.queryCommandSupported && document.queryCommandSupported('copy'))\n            || !!(navigator && navigator.clipboard && navigator.clipboard.writeText)),\n        readText: (platform.isNative\n            || !!(navigator && navigator.clipboard && navigator.clipboard.readText))\n    },\n    keyboard: (() => {\n        if (platform.isNative || browser.isStandalone()) {\n            return 0 /* KeyboardSupport.Always */;\n        }\n        if (navigator.keyboard || browser.isSafari) {\n            return 1 /* KeyboardSupport.FullScreen */;\n        }\n        return 2 /* KeyboardSupport.None */;\n    })(),\n    // 'ontouchstart' in window always evaluates to true with typescript's modern typings. This causes `window` to be\n    // `never` later in `window.navigator`. That's why we need the explicit `window as Window` cast\n    touch: 'ontouchstart' in mainWindow || navigator.maxTouchPoints > 0,\n    pointerEvents: mainWindow.PointerEvent && ('ontouchstart' in mainWindow || navigator.maxTouchPoints > 0 || navigator.maxTouchPoints > 0)\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAO,MAAM,cAAc;AACvC,SAASC,UAAU,QAAQ,aAAa;AACxC,OAAO,KAAKC,QAAQ,MAAM,uBAAuB;AACjD;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG;EAC3BC,SAAS,EAAE;IACPC,SAAS,EAAGH,QAAQ,CAACI,QAAQ,IACrBC,QAAQ,CAACC,qBAAqB,IAAID,QAAQ,CAACC,qBAAqB,CAAC,MAAM,CAAE,IAC1E,CAAC,EAAEC,SAAS,IAAIA,SAAS,CAACL,SAAS,IAAIK,SAAS,CAACL,SAAS,CAACC,SAAS,CAAE;IAC7EK,QAAQ,EAAGR,QAAQ,CAACI,QAAQ,IACrB,CAAC,EAAEG,SAAS,IAAIA,SAAS,CAACL,SAAS,IAAIK,SAAS,CAACL,SAAS,CAACM,QAAQ;EAC9E,CAAC;EACDC,QAAQ,EAAE,CAAC,MAAM;IACb,IAAIT,QAAQ,CAACI,QAAQ,IAAIN,OAAO,CAACY,YAAY,CAAC,CAAC,EAAE;MAC7C,OAAO,CAAC,CAAC;IACb;IACA,IAAIH,SAAS,CAACE,QAAQ,IAAIX,OAAO,CAACa,QAAQ,EAAE;MACxC,OAAO,CAAC,CAAC;IACb;IACA,OAAO,CAAC,CAAC;EACb,CAAC,EAAE,CAAC;EACJ;EACA;EACAC,KAAK,EAAE,cAAc,IAAIb,UAAU,IAAIQ,SAAS,CAACM,cAAc,GAAG,CAAC;EACnEC,aAAa,EAAEf,UAAU,CAACgB,YAAY,KAAK,cAAc,IAAIhB,UAAU,IAAIQ,SAAS,CAACM,cAAc,GAAG,CAAC,IAAIN,SAAS,CAACM,cAAc,GAAG,CAAC;AAC3I,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}