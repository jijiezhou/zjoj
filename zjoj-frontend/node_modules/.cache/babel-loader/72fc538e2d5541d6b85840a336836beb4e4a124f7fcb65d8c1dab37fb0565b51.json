{"ast":null,"code":"/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n * @typedef {import('../types.js').Text} Text\n */\n\nimport { stringifyEntities } from 'stringify-entities';\n\n/**\n * Serialize a text node.\n *\n * @param {Text | Raw} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent && parent.type === 'element' && (parent.tagName === 'script' || parent.tagName === 'style') ? node.value : stringifyEntities(node.value, Object.assign({}, state.settings.characterReferences, {\n    subset: ['<', '&']\n  }));\n}","map":{"version":3,"names":["stringifyEntities","text","node","_","parent","state","type","tagName","value","Object","assign","settings","characterReferences","subset"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/hast-util-to-html/lib/handle/text.js"],"sourcesContent":["/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n * @typedef {import('../types.js').Text} Text\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * Serialize a text node.\n *\n * @param {Text | Raw} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: ['<', '&']\n        })\n      )\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,iBAAiB,QAAO,oBAAoB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACC,IAAI,EAAEC,CAAC,EAAEC,MAAM,EAAEC,KAAK,EAAE;EAC3C;EACA,OAAOD,MAAM,IACXA,MAAM,CAACE,IAAI,KAAK,SAAS,KACxBF,MAAM,CAACG,OAAO,KAAK,QAAQ,IAAIH,MAAM,CAACG,OAAO,KAAK,OAAO,CAAC,GACzDL,IAAI,CAACM,KAAK,GACVR,iBAAiB,CACfE,IAAI,CAACM,KAAK,EACVC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,KAAK,CAACM,QAAQ,CAACC,mBAAmB,EAAE;IACpDC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG;EACnB,CAAC,CACH,CAAC;AACP"},"metadata":{},"sourceType":"module","externalDependencies":[]}