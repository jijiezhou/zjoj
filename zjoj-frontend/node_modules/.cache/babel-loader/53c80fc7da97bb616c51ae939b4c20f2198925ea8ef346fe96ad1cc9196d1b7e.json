{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from './trustedTypes.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\nconst ttPolicy = createTrustedTypesPolicy('defaultWorkerFactory', {\n  createScriptURL: value => value\n});\nfunction getWorker(label) {\n  const monacoEnvironment = globalThis.MonacoEnvironment;\n  if (monacoEnvironment) {\n    if (typeof monacoEnvironment.getWorker === 'function') {\n      return monacoEnvironment.getWorker('workerMain.js', label);\n    }\n    if (typeof monacoEnvironment.getWorkerUrl === 'function') {\n      const workerUrl = monacoEnvironment.getWorkerUrl('workerMain.js', label);\n      return new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, {\n        name: label\n      });\n    }\n  }\n  // ESM-comment-begin\n  // \tif (typeof require === 'function') {\n  // \t\t// check if the JS lives on a different origin\n  // \t\tconst workerMain = require.toUrl('vs/base/worker/workerMain.js'); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n  // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\n  // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label });\n  // \t}\n  // ESM-comment-end\n  throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);\n}\n// ESM-comment-begin\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string): string {\n// \tif (/^((http:)|(https:)|(file:))/.test(scriptPath) && scriptPath.substring(0, globalThis.origin.length) !== globalThis.origin) {\n// \t\t// this is the cross-origin case\n// \t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n// \t\tconst myPath = 'vs/base/worker/defaultWorkerFactory.js';\n// \t\tconst workerBaseUrl = require.toUrl(myPath).slice(0, -myPath.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n// \t\tconst js = `/*${label}*/globalThis.MonacoEnvironment={baseUrl: '${workerBaseUrl}'};const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });importScripts(ttPolicy?.createScriptURL('${scriptPath}') ?? '${scriptPath}');/*${label}*/`;\n// \t\tconst blob = new Blob([js], { type: 'application/javascript' });\n// \t\treturn URL.createObjectURL(blob);\n// \t}\n// \n// \tconst start = scriptPath.lastIndexOf('?');\n// \tconst end = scriptPath.lastIndexOf('#', start);\n// \tconst params = start > 0\n// \t\t? new URLSearchParams(scriptPath.substring(start + 1, ~end ? end : undefined))\n// \t\t: new URLSearchParams();\n// \n// \tCOI.addSearchParam(params, true, true);\n// \tconst search = params.toString();\n// \n// \tif (!search) {\n// \t\treturn `${scriptPath}#${label}`;\n// \t} else {\n// \t\treturn `${scriptPath}?${params.toString()}#${label}`;\n// \t}\n// }\n// ESM-comment-end\nfunction isPromiseLike(obj) {\n  if (typeof obj.then === 'function') {\n    return true;\n  }\n  return false;\n}\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\nclass WebWorker {\n  constructor(moduleId, id, label, onMessageCallback, onErrorCallback) {\n    this.id = id;\n    this.label = label;\n    const workerOrPromise = getWorker(label);\n    if (isPromiseLike(workerOrPromise)) {\n      this.worker = workerOrPromise;\n    } else {\n      this.worker = Promise.resolve(workerOrPromise);\n    }\n    this.postMessage(moduleId, []);\n    this.worker.then(w => {\n      w.onmessage = function (ev) {\n        onMessageCallback(ev.data);\n      };\n      w.onmessageerror = onErrorCallback;\n      if (typeof w.addEventListener === 'function') {\n        w.addEventListener('error', onErrorCallback);\n      }\n    });\n  }\n  getId() {\n    return this.id;\n  }\n  postMessage(message, transfer) {\n    var _a;\n    (_a = this.worker) === null || _a === void 0 ? void 0 : _a.then(w => {\n      try {\n        w.postMessage(message, transfer);\n      } catch (err) {\n        onUnexpectedError(err);\n        onUnexpectedError(new Error(`FAILED to post message to '${this.label}'-worker`, {\n          cause: err\n        }));\n      }\n    });\n  }\n  dispose() {\n    var _a;\n    (_a = this.worker) === null || _a === void 0 ? void 0 : _a.then(w => w.terminate());\n    this.worker = null;\n  }\n}\nexport class DefaultWorkerFactory {\n  constructor(label) {\n    this._label = label;\n    this._webWorkerFailedBeforeError = false;\n  }\n  create(moduleId, onMessageCallback, onErrorCallback) {\n    const workerId = ++DefaultWorkerFactory.LAST_WORKER_ID;\n    if (this._webWorkerFailedBeforeError) {\n      throw this._webWorkerFailedBeforeError;\n    }\n    return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, err => {\n      logOnceWebWorkerWarning(err);\n      this._webWorkerFailedBeforeError = err;\n      onErrorCallback(err);\n    });\n  }\n}\nDefaultWorkerFactory.LAST_WORKER_ID = 0;","map":{"version":3,"names":["createTrustedTypesPolicy","onUnexpectedError","logOnceWebWorkerWarning","ttPolicy","createScriptURL","value","getWorker","label","monacoEnvironment","globalThis","MonacoEnvironment","getWorkerUrl","workerUrl","Worker","name","Error","isPromiseLike","obj","then","WebWorker","constructor","moduleId","id","onMessageCallback","onErrorCallback","workerOrPromise","worker","Promise","resolve","postMessage","w","onmessage","ev","data","onmessageerror","addEventListener","getId","message","transfer","_a","err","cause","dispose","terminate","DefaultWorkerFactory","_label","_webWorkerFailedBeforeError","create","workerId","LAST_WORKER_ID"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/base/browser/defaultWorkerFactory.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from './trustedTypes.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\nconst ttPolicy = createTrustedTypesPolicy('defaultWorkerFactory', { createScriptURL: value => value });\nfunction getWorker(label) {\n    const monacoEnvironment = globalThis.MonacoEnvironment;\n    if (monacoEnvironment) {\n        if (typeof monacoEnvironment.getWorker === 'function') {\n            return monacoEnvironment.getWorker('workerMain.js', label);\n        }\n        if (typeof monacoEnvironment.getWorkerUrl === 'function') {\n            const workerUrl = monacoEnvironment.getWorkerUrl('workerMain.js', label);\n            return new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, { name: label });\n        }\n    }\n    // ESM-comment-begin\n    // \tif (typeof require === 'function') {\n    // \t\t// check if the JS lives on a different origin\n    // \t\tconst workerMain = require.toUrl('vs/base/worker/workerMain.js'); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n    // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\n    // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label });\n    // \t}\n    // ESM-comment-end\n    throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);\n}\n// ESM-comment-begin\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string): string {\n// \tif (/^((http:)|(https:)|(file:))/.test(scriptPath) && scriptPath.substring(0, globalThis.origin.length) !== globalThis.origin) {\n// \t\t// this is the cross-origin case\n// \t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n// \t\tconst myPath = 'vs/base/worker/defaultWorkerFactory.js';\n// \t\tconst workerBaseUrl = require.toUrl(myPath).slice(0, -myPath.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n// \t\tconst js = `/*${label}*/globalThis.MonacoEnvironment={baseUrl: '${workerBaseUrl}'};const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });importScripts(ttPolicy?.createScriptURL('${scriptPath}') ?? '${scriptPath}');/*${label}*/`;\n// \t\tconst blob = new Blob([js], { type: 'application/javascript' });\n// \t\treturn URL.createObjectURL(blob);\n// \t}\n// \n// \tconst start = scriptPath.lastIndexOf('?');\n// \tconst end = scriptPath.lastIndexOf('#', start);\n// \tconst params = start > 0\n// \t\t? new URLSearchParams(scriptPath.substring(start + 1, ~end ? end : undefined))\n// \t\t: new URLSearchParams();\n// \n// \tCOI.addSearchParam(params, true, true);\n// \tconst search = params.toString();\n// \n// \tif (!search) {\n// \t\treturn `${scriptPath}#${label}`;\n// \t} else {\n// \t\treturn `${scriptPath}?${params.toString()}#${label}`;\n// \t}\n// }\n// ESM-comment-end\nfunction isPromiseLike(obj) {\n    if (typeof obj.then === 'function') {\n        return true;\n    }\n    return false;\n}\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\nclass WebWorker {\n    constructor(moduleId, id, label, onMessageCallback, onErrorCallback) {\n        this.id = id;\n        this.label = label;\n        const workerOrPromise = getWorker(label);\n        if (isPromiseLike(workerOrPromise)) {\n            this.worker = workerOrPromise;\n        }\n        else {\n            this.worker = Promise.resolve(workerOrPromise);\n        }\n        this.postMessage(moduleId, []);\n        this.worker.then((w) => {\n            w.onmessage = function (ev) {\n                onMessageCallback(ev.data);\n            };\n            w.onmessageerror = onErrorCallback;\n            if (typeof w.addEventListener === 'function') {\n                w.addEventListener('error', onErrorCallback);\n            }\n        });\n    }\n    getId() {\n        return this.id;\n    }\n    postMessage(message, transfer) {\n        var _a;\n        (_a = this.worker) === null || _a === void 0 ? void 0 : _a.then(w => {\n            try {\n                w.postMessage(message, transfer);\n            }\n            catch (err) {\n                onUnexpectedError(err);\n                onUnexpectedError(new Error(`FAILED to post message to '${this.label}'-worker`, { cause: err }));\n            }\n        });\n    }\n    dispose() {\n        var _a;\n        (_a = this.worker) === null || _a === void 0 ? void 0 : _a.then(w => w.terminate());\n        this.worker = null;\n    }\n}\nexport class DefaultWorkerFactory {\n    constructor(label) {\n        this._label = label;\n        this._webWorkerFailedBeforeError = false;\n    }\n    create(moduleId, onMessageCallback, onErrorCallback) {\n        const workerId = (++DefaultWorkerFactory.LAST_WORKER_ID);\n        if (this._webWorkerFailedBeforeError) {\n            throw this._webWorkerFailedBeforeError;\n        }\n        return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, (err) => {\n            logOnceWebWorkerWarning(err);\n            this._webWorkerFailedBeforeError = err;\n            onErrorCallback(err);\n        });\n    }\n}\nDefaultWorkerFactory.LAST_WORKER_ID = 0;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}