{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { IndentAction } from '../languageConfiguration.js';\nexport class OnEnterSupport {\n  constructor(opts) {\n    opts = opts || {};\n    opts.brackets = opts.brackets || [['(', ')'], ['{', '}'], ['[', ']']];\n    this._brackets = [];\n    opts.brackets.forEach(bracket => {\n      const openRegExp = OnEnterSupport._createOpenBracketRegExp(bracket[0]);\n      const closeRegExp = OnEnterSupport._createCloseBracketRegExp(bracket[1]);\n      if (openRegExp && closeRegExp) {\n        this._brackets.push({\n          open: bracket[0],\n          openRegExp: openRegExp,\n          close: bracket[1],\n          closeRegExp: closeRegExp\n        });\n      }\n    });\n    this._regExpRules = opts.onEnterRules || [];\n  }\n  onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n    // (1): `regExpRules`\n    if (autoIndent >= 3 /* EditorAutoIndentStrategy.Advanced */) {\n      for (let i = 0, len = this._regExpRules.length; i < len; i++) {\n        const rule = this._regExpRules[i];\n        const regResult = [{\n          reg: rule.beforeText,\n          text: beforeEnterText\n        }, {\n          reg: rule.afterText,\n          text: afterEnterText\n        }, {\n          reg: rule.previousLineText,\n          text: previousLineText\n        }].every(obj => {\n          if (!obj.reg) {\n            return true;\n          }\n          obj.reg.lastIndex = 0; // To disable the effect of the \"g\" flag.\n          return obj.reg.test(obj.text);\n        });\n        if (regResult) {\n          return rule.action;\n        }\n      }\n    }\n    // (2): Special indent-outdent\n    if (autoIndent >= 2 /* EditorAutoIndentStrategy.Brackets */) {\n      if (beforeEnterText.length > 0 && afterEnterText.length > 0) {\n        for (let i = 0, len = this._brackets.length; i < len; i++) {\n          const bracket = this._brackets[i];\n          if (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\n            return {\n              indentAction: IndentAction.IndentOutdent\n            };\n          }\n        }\n      }\n    }\n    // (4): Open bracket based logic\n    if (autoIndent >= 2 /* EditorAutoIndentStrategy.Brackets */) {\n      if (beforeEnterText.length > 0) {\n        for (let i = 0, len = this._brackets.length; i < len; i++) {\n          const bracket = this._brackets[i];\n          if (bracket.openRegExp.test(beforeEnterText)) {\n            return {\n              indentAction: IndentAction.Indent\n            };\n          }\n        }\n      }\n    }\n    return null;\n  }\n  static _createOpenBracketRegExp(bracket) {\n    let str = strings.escapeRegExpCharacters(bracket);\n    if (!/\\B/.test(str.charAt(0))) {\n      str = '\\\\b' + str;\n    }\n    str += '\\\\s*$';\n    return OnEnterSupport._safeRegExp(str);\n  }\n  static _createCloseBracketRegExp(bracket) {\n    let str = strings.escapeRegExpCharacters(bracket);\n    if (!/\\B/.test(str.charAt(str.length - 1))) {\n      str = str + '\\\\b';\n    }\n    str = '^\\\\s*' + str;\n    return OnEnterSupport._safeRegExp(str);\n  }\n  static _safeRegExp(def) {\n    try {\n      return new RegExp(def);\n    } catch (err) {\n      onUnexpectedError(err);\n      return null;\n    }\n  }\n}","map":{"version":3,"names":["onUnexpectedError","strings","IndentAction","OnEnterSupport","constructor","opts","brackets","_brackets","forEach","bracket","openRegExp","_createOpenBracketRegExp","closeRegExp","_createCloseBracketRegExp","push","open","close","_regExpRules","onEnterRules","onEnter","autoIndent","previousLineText","beforeEnterText","afterEnterText","i","len","length","rule","regResult","reg","beforeText","text","afterText","every","obj","lastIndex","test","action","indentAction","IndentOutdent","Indent","str","escapeRegExpCharacters","charAt","_safeRegExp","def","RegExp","err"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/onEnter.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { IndentAction } from '../languageConfiguration.js';\nexport class OnEnterSupport {\n    constructor(opts) {\n        opts = opts || {};\n        opts.brackets = opts.brackets || [\n            ['(', ')'],\n            ['{', '}'],\n            ['[', ']']\n        ];\n        this._brackets = [];\n        opts.brackets.forEach((bracket) => {\n            const openRegExp = OnEnterSupport._createOpenBracketRegExp(bracket[0]);\n            const closeRegExp = OnEnterSupport._createCloseBracketRegExp(bracket[1]);\n            if (openRegExp && closeRegExp) {\n                this._brackets.push({\n                    open: bracket[0],\n                    openRegExp: openRegExp,\n                    close: bracket[1],\n                    closeRegExp: closeRegExp,\n                });\n            }\n        });\n        this._regExpRules = opts.onEnterRules || [];\n    }\n    onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n        // (1): `regExpRules`\n        if (autoIndent >= 3 /* EditorAutoIndentStrategy.Advanced */) {\n            for (let i = 0, len = this._regExpRules.length; i < len; i++) {\n                const rule = this._regExpRules[i];\n                const regResult = [{\n                        reg: rule.beforeText,\n                        text: beforeEnterText\n                    }, {\n                        reg: rule.afterText,\n                        text: afterEnterText\n                    }, {\n                        reg: rule.previousLineText,\n                        text: previousLineText\n                    }].every((obj) => {\n                    if (!obj.reg) {\n                        return true;\n                    }\n                    obj.reg.lastIndex = 0; // To disable the effect of the \"g\" flag.\n                    return obj.reg.test(obj.text);\n                });\n                if (regResult) {\n                    return rule.action;\n                }\n            }\n        }\n        // (2): Special indent-outdent\n        if (autoIndent >= 2 /* EditorAutoIndentStrategy.Brackets */) {\n            if (beforeEnterText.length > 0 && afterEnterText.length > 0) {\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\n                    const bracket = this._brackets[i];\n                    if (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\n                        return { indentAction: IndentAction.IndentOutdent };\n                    }\n                }\n            }\n        }\n        // (4): Open bracket based logic\n        if (autoIndent >= 2 /* EditorAutoIndentStrategy.Brackets */) {\n            if (beforeEnterText.length > 0) {\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\n                    const bracket = this._brackets[i];\n                    if (bracket.openRegExp.test(beforeEnterText)) {\n                        return { indentAction: IndentAction.Indent };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    static _createOpenBracketRegExp(bracket) {\n        let str = strings.escapeRegExpCharacters(bracket);\n        if (!/\\B/.test(str.charAt(0))) {\n            str = '\\\\b' + str;\n        }\n        str += '\\\\s*$';\n        return OnEnterSupport._safeRegExp(str);\n    }\n    static _createCloseBracketRegExp(bracket) {\n        let str = strings.escapeRegExpCharacters(bracket);\n        if (!/\\B/.test(str.charAt(str.length - 1))) {\n            str = str + '\\\\b';\n        }\n        str = '^\\\\s*' + str;\n        return OnEnterSupport._safeRegExp(str);\n    }\n    static _safeRegExp(def) {\n        try {\n            return new RegExp(def);\n        }\n        catch (err) {\n            onUnexpectedError(err);\n            return null;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}