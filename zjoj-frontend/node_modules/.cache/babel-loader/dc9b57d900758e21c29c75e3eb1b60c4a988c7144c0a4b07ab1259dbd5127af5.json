{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction roundFloat(number, decimalPoints) {\n  const decimal = Math.pow(10, decimalPoints);\n  return Math.round(number * decimal) / decimal;\n}\nexport class RGBA {\n  constructor(r, g, b, a = 1) {\n    this._rgbaBrand = undefined;\n    this.r = Math.min(255, Math.max(0, r)) | 0;\n    this.g = Math.min(255, Math.max(0, g)) | 0;\n    this.b = Math.min(255, Math.max(0, b)) | 0;\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  static equals(a, b) {\n    return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n  }\n}\nexport class HSLA {\n  constructor(h, s, l, a) {\n    this._hslaBrand = undefined;\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  static equals(a, b) {\n    return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n  }\n  /**\n   * Converts an RGB color value to HSL. Conversion formula\n   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n   * Assumes r, g, and b are contained in the set [0, 255] and\n   * returns h in the set [0, 360], s, and l in the set [0, 1].\n   */\n  static fromRGBA(rgba) {\n    const r = rgba.r / 255;\n    const g = rgba.g / 255;\n    const b = rgba.b / 255;\n    const a = rgba.a;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0;\n    let s = 0;\n    const l = (min + max) / 2;\n    const chroma = max - min;\n    if (chroma > 0) {\n      s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);\n      switch (max) {\n        case r:\n          h = (g - b) / chroma + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / chroma + 2;\n          break;\n        case b:\n          h = (r - g) / chroma + 4;\n          break;\n      }\n      h *= 60;\n      h = Math.round(h);\n    }\n    return new HSLA(h, s, l, a);\n  }\n  static _hue2rgb(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n    if (t > 1) {\n      t -= 1;\n    }\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n      return q;\n    }\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n  }\n  /**\n   * Converts an HSL color value to RGB. Conversion formula\n   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n   * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\n   * returns r, g, and b in the set [0, 255].\n   */\n  static toRGBA(hsla) {\n    const h = hsla.h / 360;\n    const {\n      s,\n      l,\n      a\n    } = hsla;\n    let r, g, b;\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      const p = 2 * l - q;\n      r = HSLA._hue2rgb(p, q, h + 1 / 3);\n      g = HSLA._hue2rgb(p, q, h);\n      b = HSLA._hue2rgb(p, q, h - 1 / 3);\n    }\n    return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n  }\n}\nexport class HSVA {\n  constructor(h, s, v, a) {\n    this._hsvaBrand = undefined;\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  static equals(a, b) {\n    return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n  }\n  // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n  static fromRGBA(rgba) {\n    const r = rgba.r / 255;\n    const g = rgba.g / 255;\n    const b = rgba.b / 255;\n    const cmax = Math.max(r, g, b);\n    const cmin = Math.min(r, g, b);\n    const delta = cmax - cmin;\n    const s = cmax === 0 ? 0 : delta / cmax;\n    let m;\n    if (delta === 0) {\n      m = 0;\n    } else if (cmax === r) {\n      m = ((g - b) / delta % 6 + 6) % 6;\n    } else if (cmax === g) {\n      m = (b - r) / delta + 2;\n    } else {\n      m = (r - g) / delta + 4;\n    }\n    return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n  }\n  // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n  static toRGBA(hsva) {\n    const {\n      h,\n      s,\n      v,\n      a\n    } = hsva;\n    const c = v * s;\n    const x = c * (1 - Math.abs(h / 60 % 2 - 1));\n    const m = v - c;\n    let [r, g, b] = [0, 0, 0];\n    if (h < 60) {\n      r = c;\n      g = x;\n    } else if (h < 120) {\n      r = x;\n      g = c;\n    } else if (h < 180) {\n      g = c;\n      b = x;\n    } else if (h < 240) {\n      g = x;\n      b = c;\n    } else if (h < 300) {\n      r = x;\n      b = c;\n    } else if (h <= 360) {\n      r = c;\n      b = x;\n    }\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n    return new RGBA(r, g, b, a);\n  }\n}\nexport class Color {\n  static fromHex(hex) {\n    return Color.Format.CSS.parseHex(hex) || Color.red;\n  }\n  static equals(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n    if (!a || !b) {\n      return false;\n    }\n    return a.equals(b);\n  }\n  get hsla() {\n    if (this._hsla) {\n      return this._hsla;\n    } else {\n      return HSLA.fromRGBA(this.rgba);\n    }\n  }\n  get hsva() {\n    if (this._hsva) {\n      return this._hsva;\n    }\n    return HSVA.fromRGBA(this.rgba);\n  }\n  constructor(arg) {\n    if (!arg) {\n      throw new Error('Color needs a value');\n    } else if (arg instanceof RGBA) {\n      this.rgba = arg;\n    } else if (arg instanceof HSLA) {\n      this._hsla = arg;\n      this.rgba = HSLA.toRGBA(arg);\n    } else if (arg instanceof HSVA) {\n      this._hsva = arg;\n      this.rgba = HSVA.toRGBA(arg);\n    } else {\n      throw new Error('Invalid color ctor argument');\n    }\n  }\n  equals(other) {\n    return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n  }\n  /**\n   * http://www.w3.org/TR/WCAG20/#relativeluminancedef\n   * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\n   */\n  getRelativeLuminance() {\n    const R = Color._relativeLuminanceForComponent(this.rgba.r);\n    const G = Color._relativeLuminanceForComponent(this.rgba.g);\n    const B = Color._relativeLuminanceForComponent(this.rgba.b);\n    const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    return roundFloat(luminance, 4);\n  }\n  static _relativeLuminanceForComponent(color) {\n    const c = color / 255;\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  }\n  /**\n   *\thttp://24ways.org/2010/calculating-color-contrast\n   *  Return 'true' if lighter color otherwise 'false'\n   */\n  isLighter() {\n    const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n    return yiq >= 128;\n  }\n  isLighterThan(another) {\n    const lum1 = this.getRelativeLuminance();\n    const lum2 = another.getRelativeLuminance();\n    return lum1 > lum2;\n  }\n  isDarkerThan(another) {\n    const lum1 = this.getRelativeLuminance();\n    const lum2 = another.getRelativeLuminance();\n    return lum1 < lum2;\n  }\n  lighten(factor) {\n    return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n  }\n  darken(factor) {\n    return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n  }\n  transparent(factor) {\n    const {\n      r,\n      g,\n      b,\n      a\n    } = this.rgba;\n    return new Color(new RGBA(r, g, b, a * factor));\n  }\n  isTransparent() {\n    return this.rgba.a === 0;\n  }\n  isOpaque() {\n    return this.rgba.a === 1;\n  }\n  opposite() {\n    return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n  }\n  makeOpaque(opaqueBackground) {\n    if (this.isOpaque() || opaqueBackground.rgba.a !== 1) {\n      // only allow to blend onto a non-opaque color onto a opaque color\n      return this;\n    }\n    const {\n      r,\n      g,\n      b,\n      a\n    } = this.rgba;\n    // https://stackoverflow.com/questions/12228548/finding-equivalent-color-with-opacity\n    return new Color(new RGBA(opaqueBackground.rgba.r - a * (opaqueBackground.rgba.r - r), opaqueBackground.rgba.g - a * (opaqueBackground.rgba.g - g), opaqueBackground.rgba.b - a * (opaqueBackground.rgba.b - b), 1));\n  }\n  toString() {\n    if (!this._toString) {\n      this._toString = Color.Format.CSS.format(this);\n    }\n    return this._toString;\n  }\n  static getLighterColor(of, relative, factor) {\n    if (of.isLighterThan(relative)) {\n      return of;\n    }\n    factor = factor ? factor : 0.5;\n    const lum1 = of.getRelativeLuminance();\n    const lum2 = relative.getRelativeLuminance();\n    factor = factor * (lum2 - lum1) / lum2;\n    return of.lighten(factor);\n  }\n  static getDarkerColor(of, relative, factor) {\n    if (of.isDarkerThan(relative)) {\n      return of;\n    }\n    factor = factor ? factor : 0.5;\n    const lum1 = of.getRelativeLuminance();\n    const lum2 = relative.getRelativeLuminance();\n    factor = factor * (lum1 - lum2) / lum1;\n    return of.darken(factor);\n  }\n}\nColor.white = new Color(new RGBA(255, 255, 255, 1));\nColor.black = new Color(new RGBA(0, 0, 0, 1));\nColor.red = new Color(new RGBA(255, 0, 0, 1));\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\nColor.green = new Color(new RGBA(0, 255, 0, 1));\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\n(function (Color) {\n  let Format;\n  (function (Format) {\n    let CSS;\n    (function (CSS) {\n      function formatRGB(color) {\n        if (color.rgba.a === 1) {\n          return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;\n        }\n        return Color.Format.CSS.formatRGBA(color);\n      }\n      CSS.formatRGB = formatRGB;\n      function formatRGBA(color) {\n        return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+color.rgba.a.toFixed(2)})`;\n      }\n      CSS.formatRGBA = formatRGBA;\n      function formatHSL(color) {\n        if (color.hsla.a === 1) {\n          return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;\n        }\n        return Color.Format.CSS.formatHSLA(color);\n      }\n      CSS.formatHSL = formatHSL;\n      function formatHSLA(color) {\n        return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;\n      }\n      CSS.formatHSLA = formatHSLA;\n      function _toTwoDigitHex(n) {\n        const r = n.toString(16);\n        return r.length !== 2 ? '0' + r : r;\n      }\n      /**\n       * Formats the color as #RRGGBB\n       */\n      function formatHex(color) {\n        return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;\n      }\n      CSS.formatHex = formatHex;\n      /**\n       * Formats the color as #RRGGBBAA\n       * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\n       */\n      function formatHexA(color, compact = false) {\n        if (compact && color.rgba.a === 1) {\n          return Color.Format.CSS.formatHex(color);\n        }\n        return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;\n      }\n      CSS.formatHexA = formatHexA;\n      /**\n       * The default format will use HEX if opaque and RGBA otherwise.\n       */\n      function format(color) {\n        if (color.isOpaque()) {\n          return Color.Format.CSS.formatHex(color);\n        }\n        return Color.Format.CSS.formatRGBA(color);\n      }\n      CSS.format = format;\n      /**\n       * Converts an Hex color value to a Color.\n       * returns r, g, and b are contained in the set [0, 255]\n       * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\n       */\n      function parseHex(hex) {\n        const length = hex.length;\n        if (length === 0) {\n          // Invalid color\n          return null;\n        }\n        if (hex.charCodeAt(0) !== 35 /* CharCode.Hash */) {\n          // Does not begin with a #\n          return null;\n        }\n        if (length === 7) {\n          // #RRGGBB format\n          const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n          const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n          const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n          return new Color(new RGBA(r, g, b, 1));\n        }\n        if (length === 9) {\n          // #RRGGBBAA format\n          const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n          const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n          const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n          const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n          return new Color(new RGBA(r, g, b, a / 255));\n        }\n        if (length === 4) {\n          // #RGB format\n          const r = _parseHexDigit(hex.charCodeAt(1));\n          const g = _parseHexDigit(hex.charCodeAt(2));\n          const b = _parseHexDigit(hex.charCodeAt(3));\n          return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\n        }\n        if (length === 5) {\n          // #RGBA format\n          const r = _parseHexDigit(hex.charCodeAt(1));\n          const g = _parseHexDigit(hex.charCodeAt(2));\n          const b = _parseHexDigit(hex.charCodeAt(3));\n          const a = _parseHexDigit(hex.charCodeAt(4));\n          return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\n        }\n        // Invalid color\n        return null;\n      }\n      CSS.parseHex = parseHex;\n      function _parseHexDigit(charCode) {\n        switch (charCode) {\n          case 48 /* CharCode.Digit0 */:\n            return 0;\n          case 49 /* CharCode.Digit1 */:\n            return 1;\n          case 50 /* CharCode.Digit2 */:\n            return 2;\n          case 51 /* CharCode.Digit3 */:\n            return 3;\n          case 52 /* CharCode.Digit4 */:\n            return 4;\n          case 53 /* CharCode.Digit5 */:\n            return 5;\n          case 54 /* CharCode.Digit6 */:\n            return 6;\n          case 55 /* CharCode.Digit7 */:\n            return 7;\n          case 56 /* CharCode.Digit8 */:\n            return 8;\n          case 57 /* CharCode.Digit9 */:\n            return 9;\n          case 97 /* CharCode.a */:\n            return 10;\n          case 65 /* CharCode.A */:\n            return 10;\n          case 98 /* CharCode.b */:\n            return 11;\n          case 66 /* CharCode.B */:\n            return 11;\n          case 99 /* CharCode.c */:\n            return 12;\n          case 67 /* CharCode.C */:\n            return 12;\n          case 100 /* CharCode.d */:\n            return 13;\n          case 68 /* CharCode.D */:\n            return 13;\n          case 101 /* CharCode.e */:\n            return 14;\n          case 69 /* CharCode.E */:\n            return 14;\n          case 102 /* CharCode.f */:\n            return 15;\n          case 70 /* CharCode.F */:\n            return 15;\n        }\n        return 0;\n      }\n    })(CSS = Format.CSS || (Format.CSS = {}));\n  })(Format = Color.Format || (Color.Format = {}));\n})(Color || (Color = {}));","map":{"version":3,"names":["roundFloat","number","decimalPoints","decimal","Math","pow","round","RGBA","constructor","r","g","b","a","_rgbaBrand","undefined","min","max","equals","HSLA","h","s","l","_hslaBrand","fromRGBA","rgba","chroma","_hue2rgb","p","q","t","toRGBA","hsla","HSVA","v","_hsvaBrand","cmax","cmin","delta","m","hsva","c","x","abs","Color","fromHex","hex","Format","CSS","parseHex","red","_hsla","_hsva","arg","Error","other","getRelativeLuminance","R","_relativeLuminanceForComponent","G","B","luminance","color","isLighter","yiq","isLighterThan","another","lum1","lum2","isDarkerThan","lighten","factor","darken","transparent","isTransparent","isOpaque","opposite","makeOpaque","opaqueBackground","toString","_toString","format","getLighterColor","of","relative","getDarkerColor","white","black","blue","green","cyan","lightgrey","formatRGB","formatRGBA","toFixed","formatHSL","formatHSLA","_toTwoDigitHex","n","length","formatHex","formatHexA","compact","charCodeAt","_parseHexDigit","charCode"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/base/common/color.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction roundFloat(number, decimalPoints) {\n    const decimal = Math.pow(10, decimalPoints);\n    return Math.round(number * decimal) / decimal;\n}\nexport class RGBA {\n    constructor(r, g, b, a = 1) {\n        this._rgbaBrand = undefined;\n        this.r = Math.min(255, Math.max(0, r)) | 0;\n        this.g = Math.min(255, Math.max(0, g)) | 0;\n        this.b = Math.min(255, Math.max(0, b)) | 0;\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n    }\n    static equals(a, b) {\n        return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n    }\n}\nexport class HSLA {\n    constructor(h, s, l, a) {\n        this._hslaBrand = undefined;\n        this.h = Math.max(Math.min(360, h), 0) | 0;\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n        this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n    }\n    static equals(a, b) {\n        return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n    }\n    /**\n     * Converts an RGB color value to HSL. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes r, g, and b are contained in the set [0, 255] and\n     * returns h in the set [0, 360], s, and l in the set [0, 1].\n     */\n    static fromRGBA(rgba) {\n        const r = rgba.r / 255;\n        const g = rgba.g / 255;\n        const b = rgba.b / 255;\n        const a = rgba.a;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h = 0;\n        let s = 0;\n        const l = (min + max) / 2;\n        const chroma = max - min;\n        if (chroma > 0) {\n            s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);\n            switch (max) {\n                case r:\n                    h = (g - b) / chroma + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / chroma + 2;\n                    break;\n                case b:\n                    h = (r - g) / chroma + 4;\n                    break;\n            }\n            h *= 60;\n            h = Math.round(h);\n        }\n        return new HSLA(h, s, l, a);\n    }\n    static _hue2rgb(p, q, t) {\n        if (t < 0) {\n            t += 1;\n        }\n        if (t > 1) {\n            t -= 1;\n        }\n        if (t < 1 / 6) {\n            return p + (q - p) * 6 * t;\n        }\n        if (t < 1 / 2) {\n            return q;\n        }\n        if (t < 2 / 3) {\n            return p + (q - p) * (2 / 3 - t) * 6;\n        }\n        return p;\n    }\n    /**\n     * Converts an HSL color value to RGB. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\n     * returns r, g, and b in the set [0, 255].\n     */\n    static toRGBA(hsla) {\n        const h = hsla.h / 360;\n        const { s, l, a } = hsla;\n        let r, g, b;\n        if (s === 0) {\n            r = g = b = l; // achromatic\n        }\n        else {\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n            r = HSLA._hue2rgb(p, q, h + 1 / 3);\n            g = HSLA._hue2rgb(p, q, h);\n            b = HSLA._hue2rgb(p, q, h - 1 / 3);\n        }\n        return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n    }\n}\nexport class HSVA {\n    constructor(h, s, v, a) {\n        this._hsvaBrand = undefined;\n        this.h = Math.max(Math.min(360, h), 0) | 0;\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n        this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n    }\n    static equals(a, b) {\n        return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n    }\n    // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n    static fromRGBA(rgba) {\n        const r = rgba.r / 255;\n        const g = rgba.g / 255;\n        const b = rgba.b / 255;\n        const cmax = Math.max(r, g, b);\n        const cmin = Math.min(r, g, b);\n        const delta = cmax - cmin;\n        const s = cmax === 0 ? 0 : (delta / cmax);\n        let m;\n        if (delta === 0) {\n            m = 0;\n        }\n        else if (cmax === r) {\n            m = ((((g - b) / delta) % 6) + 6) % 6;\n        }\n        else if (cmax === g) {\n            m = ((b - r) / delta) + 2;\n        }\n        else {\n            m = ((r - g) / delta) + 4;\n        }\n        return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n    }\n    // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n    static toRGBA(hsva) {\n        const { h, s, v, a } = hsva;\n        const c = v * s;\n        const x = c * (1 - Math.abs((h / 60) % 2 - 1));\n        const m = v - c;\n        let [r, g, b] = [0, 0, 0];\n        if (h < 60) {\n            r = c;\n            g = x;\n        }\n        else if (h < 120) {\n            r = x;\n            g = c;\n        }\n        else if (h < 180) {\n            g = c;\n            b = x;\n        }\n        else if (h < 240) {\n            g = x;\n            b = c;\n        }\n        else if (h < 300) {\n            r = x;\n            b = c;\n        }\n        else if (h <= 360) {\n            r = c;\n            b = x;\n        }\n        r = Math.round((r + m) * 255);\n        g = Math.round((g + m) * 255);\n        b = Math.round((b + m) * 255);\n        return new RGBA(r, g, b, a);\n    }\n}\nexport class Color {\n    static fromHex(hex) {\n        return Color.Format.CSS.parseHex(hex) || Color.red;\n    }\n    static equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        return a.equals(b);\n    }\n    get hsla() {\n        if (this._hsla) {\n            return this._hsla;\n        }\n        else {\n            return HSLA.fromRGBA(this.rgba);\n        }\n    }\n    get hsva() {\n        if (this._hsva) {\n            return this._hsva;\n        }\n        return HSVA.fromRGBA(this.rgba);\n    }\n    constructor(arg) {\n        if (!arg) {\n            throw new Error('Color needs a value');\n        }\n        else if (arg instanceof RGBA) {\n            this.rgba = arg;\n        }\n        else if (arg instanceof HSLA) {\n            this._hsla = arg;\n            this.rgba = HSLA.toRGBA(arg);\n        }\n        else if (arg instanceof HSVA) {\n            this._hsva = arg;\n            this.rgba = HSVA.toRGBA(arg);\n        }\n        else {\n            throw new Error('Invalid color ctor argument');\n        }\n    }\n    equals(other) {\n        return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n    }\n    /**\n     * http://www.w3.org/TR/WCAG20/#relativeluminancedef\n     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\n     */\n    getRelativeLuminance() {\n        const R = Color._relativeLuminanceForComponent(this.rgba.r);\n        const G = Color._relativeLuminanceForComponent(this.rgba.g);\n        const B = Color._relativeLuminanceForComponent(this.rgba.b);\n        const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n        return roundFloat(luminance, 4);\n    }\n    static _relativeLuminanceForComponent(color) {\n        const c = color / 255;\n        return (c <= 0.03928) ? c / 12.92 : Math.pow(((c + 0.055) / 1.055), 2.4);\n    }\n    /**\n     *\thttp://24ways.org/2010/calculating-color-contrast\n     *  Return 'true' if lighter color otherwise 'false'\n     */\n    isLighter() {\n        const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n        return yiq >= 128;\n    }\n    isLighterThan(another) {\n        const lum1 = this.getRelativeLuminance();\n        const lum2 = another.getRelativeLuminance();\n        return lum1 > lum2;\n    }\n    isDarkerThan(another) {\n        const lum1 = this.getRelativeLuminance();\n        const lum2 = another.getRelativeLuminance();\n        return lum1 < lum2;\n    }\n    lighten(factor) {\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n    }\n    darken(factor) {\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n    }\n    transparent(factor) {\n        const { r, g, b, a } = this.rgba;\n        return new Color(new RGBA(r, g, b, a * factor));\n    }\n    isTransparent() {\n        return this.rgba.a === 0;\n    }\n    isOpaque() {\n        return this.rgba.a === 1;\n    }\n    opposite() {\n        return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n    }\n    makeOpaque(opaqueBackground) {\n        if (this.isOpaque() || opaqueBackground.rgba.a !== 1) {\n            // only allow to blend onto a non-opaque color onto a opaque color\n            return this;\n        }\n        const { r, g, b, a } = this.rgba;\n        // https://stackoverflow.com/questions/12228548/finding-equivalent-color-with-opacity\n        return new Color(new RGBA(opaqueBackground.rgba.r - a * (opaqueBackground.rgba.r - r), opaqueBackground.rgba.g - a * (opaqueBackground.rgba.g - g), opaqueBackground.rgba.b - a * (opaqueBackground.rgba.b - b), 1));\n    }\n    toString() {\n        if (!this._toString) {\n            this._toString = Color.Format.CSS.format(this);\n        }\n        return this._toString;\n    }\n    static getLighterColor(of, relative, factor) {\n        if (of.isLighterThan(relative)) {\n            return of;\n        }\n        factor = factor ? factor : 0.5;\n        const lum1 = of.getRelativeLuminance();\n        const lum2 = relative.getRelativeLuminance();\n        factor = factor * (lum2 - lum1) / lum2;\n        return of.lighten(factor);\n    }\n    static getDarkerColor(of, relative, factor) {\n        if (of.isDarkerThan(relative)) {\n            return of;\n        }\n        factor = factor ? factor : 0.5;\n        const lum1 = of.getRelativeLuminance();\n        const lum2 = relative.getRelativeLuminance();\n        factor = factor * (lum1 - lum2) / lum1;\n        return of.darken(factor);\n    }\n}\nColor.white = new Color(new RGBA(255, 255, 255, 1));\nColor.black = new Color(new RGBA(0, 0, 0, 1));\nColor.red = new Color(new RGBA(255, 0, 0, 1));\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\nColor.green = new Color(new RGBA(0, 255, 0, 1));\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\n(function (Color) {\n    let Format;\n    (function (Format) {\n        let CSS;\n        (function (CSS) {\n            function formatRGB(color) {\n                if (color.rgba.a === 1) {\n                    return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;\n                }\n                return Color.Format.CSS.formatRGBA(color);\n            }\n            CSS.formatRGB = formatRGB;\n            function formatRGBA(color) {\n                return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+(color.rgba.a).toFixed(2)})`;\n            }\n            CSS.formatRGBA = formatRGBA;\n            function formatHSL(color) {\n                if (color.hsla.a === 1) {\n                    return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;\n                }\n                return Color.Format.CSS.formatHSLA(color);\n            }\n            CSS.formatHSL = formatHSL;\n            function formatHSLA(color) {\n                return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;\n            }\n            CSS.formatHSLA = formatHSLA;\n            function _toTwoDigitHex(n) {\n                const r = n.toString(16);\n                return r.length !== 2 ? '0' + r : r;\n            }\n            /**\n             * Formats the color as #RRGGBB\n             */\n            function formatHex(color) {\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;\n            }\n            CSS.formatHex = formatHex;\n            /**\n             * Formats the color as #RRGGBBAA\n             * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\n             */\n            function formatHexA(color, compact = false) {\n                if (compact && color.rgba.a === 1) {\n                    return Color.Format.CSS.formatHex(color);\n                }\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;\n            }\n            CSS.formatHexA = formatHexA;\n            /**\n             * The default format will use HEX if opaque and RGBA otherwise.\n             */\n            function format(color) {\n                if (color.isOpaque()) {\n                    return Color.Format.CSS.formatHex(color);\n                }\n                return Color.Format.CSS.formatRGBA(color);\n            }\n            CSS.format = format;\n            /**\n             * Converts an Hex color value to a Color.\n             * returns r, g, and b are contained in the set [0, 255]\n             * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\n             */\n            function parseHex(hex) {\n                const length = hex.length;\n                if (length === 0) {\n                    // Invalid color\n                    return null;\n                }\n                if (hex.charCodeAt(0) !== 35 /* CharCode.Hash */) {\n                    // Does not begin with a #\n                    return null;\n                }\n                if (length === 7) {\n                    // #RRGGBB format\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n                    return new Color(new RGBA(r, g, b, 1));\n                }\n                if (length === 9) {\n                    // #RRGGBBAA format\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n                    const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n                    return new Color(new RGBA(r, g, b, a / 255));\n                }\n                if (length === 4) {\n                    // #RGB format\n                    const r = _parseHexDigit(hex.charCodeAt(1));\n                    const g = _parseHexDigit(hex.charCodeAt(2));\n                    const b = _parseHexDigit(hex.charCodeAt(3));\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\n                }\n                if (length === 5) {\n                    // #RGBA format\n                    const r = _parseHexDigit(hex.charCodeAt(1));\n                    const g = _parseHexDigit(hex.charCodeAt(2));\n                    const b = _parseHexDigit(hex.charCodeAt(3));\n                    const a = _parseHexDigit(hex.charCodeAt(4));\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\n                }\n                // Invalid color\n                return null;\n            }\n            CSS.parseHex = parseHex;\n            function _parseHexDigit(charCode) {\n                switch (charCode) {\n                    case 48 /* CharCode.Digit0 */: return 0;\n                    case 49 /* CharCode.Digit1 */: return 1;\n                    case 50 /* CharCode.Digit2 */: return 2;\n                    case 51 /* CharCode.Digit3 */: return 3;\n                    case 52 /* CharCode.Digit4 */: return 4;\n                    case 53 /* CharCode.Digit5 */: return 5;\n                    case 54 /* CharCode.Digit6 */: return 6;\n                    case 55 /* CharCode.Digit7 */: return 7;\n                    case 56 /* CharCode.Digit8 */: return 8;\n                    case 57 /* CharCode.Digit9 */: return 9;\n                    case 97 /* CharCode.a */: return 10;\n                    case 65 /* CharCode.A */: return 10;\n                    case 98 /* CharCode.b */: return 11;\n                    case 66 /* CharCode.B */: return 11;\n                    case 99 /* CharCode.c */: return 12;\n                    case 67 /* CharCode.C */: return 12;\n                    case 100 /* CharCode.d */: return 13;\n                    case 68 /* CharCode.D */: return 13;\n                    case 101 /* CharCode.e */: return 14;\n                    case 69 /* CharCode.E */: return 14;\n                    case 102 /* CharCode.f */: return 15;\n                    case 70 /* CharCode.F */: return 15;\n                }\n                return 0;\n            }\n        })(CSS = Format.CSS || (Format.CSS = {}));\n    })(Format = Color.Format || (Color.Format = {}));\n})(Color || (Color = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}