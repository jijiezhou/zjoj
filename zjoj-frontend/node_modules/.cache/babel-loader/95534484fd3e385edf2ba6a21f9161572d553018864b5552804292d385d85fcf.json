{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { localize } from '../../../nls.js';\nimport { basename } from '../../../base/common/path.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IWorkspaceContextService = createDecorator('contextService');\nexport function isSingleFolderWorkspaceIdentifier(obj) {\n  const singleFolderIdentifier = obj;\n  return typeof (singleFolderIdentifier === null || singleFolderIdentifier === void 0 ? void 0 : singleFolderIdentifier.id) === 'string' && URI.isUri(singleFolderIdentifier.uri);\n}\nexport function isEmptyWorkspaceIdentifier(obj) {\n  const emptyWorkspaceIdentifier = obj;\n  return typeof (emptyWorkspaceIdentifier === null || emptyWorkspaceIdentifier === void 0 ? void 0 : emptyWorkspaceIdentifier.id) === 'string' && !isSingleFolderWorkspaceIdentifier(obj) && !isWorkspaceIdentifier(obj);\n}\nexport const EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE = {\n  id: 'ext-dev'\n};\nexport const UNKNOWN_EMPTY_WINDOW_WORKSPACE = {\n  id: 'empty-window'\n};\nexport function toWorkspaceIdentifier(arg0, isExtensionDevelopment) {\n  // Empty workspace\n  if (typeof arg0 === 'string' || typeof arg0 === 'undefined') {\n    // With a backupPath, the basename is the empty workspace identifier\n    if (typeof arg0 === 'string') {\n      return {\n        id: basename(arg0)\n      };\n    }\n    // Extension development empty windows have backups disabled\n    // so we return a constant workspace identifier for extension\n    // authors to allow to restore their workspace state even then.\n    if (isExtensionDevelopment) {\n      return EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE;\n    }\n    return UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n  }\n  // Multi root\n  const workspace = arg0;\n  if (workspace.configuration) {\n    return {\n      id: workspace.id,\n      configPath: workspace.configuration\n    };\n  }\n  // Single folder\n  if (workspace.folders.length === 1) {\n    return {\n      id: workspace.id,\n      uri: workspace.folders[0].uri\n    };\n  }\n  // Empty window\n  return {\n    id: workspace.id\n  };\n}\nexport function isWorkspaceIdentifier(obj) {\n  const workspaceIdentifier = obj;\n  return typeof (workspaceIdentifier === null || workspaceIdentifier === void 0 ? void 0 : workspaceIdentifier.id) === 'string' && URI.isUri(workspaceIdentifier.configPath);\n}\nexport class Workspace {\n  constructor(_id, folders, _transient, _configuration, _ignorePathCasing) {\n    this._id = _id;\n    this._transient = _transient;\n    this._configuration = _configuration;\n    this._ignorePathCasing = _ignorePathCasing;\n    this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, () => true);\n    this.folders = folders;\n  }\n  get folders() {\n    return this._folders;\n  }\n  set folders(folders) {\n    this._folders = folders;\n    this.updateFoldersMap();\n  }\n  get id() {\n    return this._id;\n  }\n  get transient() {\n    return this._transient;\n  }\n  get configuration() {\n    return this._configuration;\n  }\n  set configuration(configuration) {\n    this._configuration = configuration;\n  }\n  getFolder(resource) {\n    if (!resource) {\n      return null;\n    }\n    return this._foldersMap.findSubstr(resource) || null;\n  }\n  updateFoldersMap() {\n    this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, () => true);\n    for (const folder of this.folders) {\n      this._foldersMap.set(folder.uri, folder);\n    }\n  }\n  toJSON() {\n    return {\n      id: this.id,\n      folders: this.folders,\n      transient: this.transient,\n      configuration: this.configuration\n    };\n  }\n}\nexport class WorkspaceFolder {\n  constructor(data,\n  /**\n   * Provides access to the original metadata for this workspace\n   * folder. This can be different from the metadata provided in\n   * this class:\n   * - raw paths can be relative\n   * - raw paths are not normalized\n   */\n  raw) {\n    this.raw = raw;\n    this.uri = data.uri;\n    this.index = data.index;\n    this.name = data.name;\n  }\n  toJSON() {\n    return {\n      uri: this.uri,\n      name: this.name,\n      index: this.index\n    };\n  }\n}\nexport const WORKSPACE_EXTENSION = 'code-workspace';\nexport const WORKSPACE_FILTER = [{\n  name: localize('codeWorkspace', \"Code Workspace\"),\n  extensions: [WORKSPACE_EXTENSION]\n}];\nexport const STANDALONE_EDITOR_WORKSPACE_ID = '4064f6ec-cb38-4ad0-af64-ee6467e63c82';\nexport function isStandaloneEditorWorkspace(workspace) {\n  return workspace.id === STANDALONE_EDITOR_WORKSPACE_ID;\n}","map":{"version":3,"names":["localize","basename","TernarySearchTree","URI","createDecorator","IWorkspaceContextService","isSingleFolderWorkspaceIdentifier","obj","singleFolderIdentifier","id","isUri","uri","isEmptyWorkspaceIdentifier","emptyWorkspaceIdentifier","isWorkspaceIdentifier","EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE","UNKNOWN_EMPTY_WINDOW_WORKSPACE","toWorkspaceIdentifier","arg0","isExtensionDevelopment","workspace","configuration","configPath","folders","length","workspaceIdentifier","Workspace","constructor","_id","_transient","_configuration","_ignorePathCasing","_foldersMap","forUris","_folders","updateFoldersMap","transient","getFolder","resource","findSubstr","folder","set","toJSON","WorkspaceFolder","data","raw","index","name","WORKSPACE_EXTENSION","WORKSPACE_FILTER","extensions","STANDALONE_EDITOR_WORKSPACE_ID","isStandaloneEditorWorkspace"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/platform/workspace/common/workspace.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { localize } from '../../../nls.js';\nimport { basename } from '../../../base/common/path.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IWorkspaceContextService = createDecorator('contextService');\nexport function isSingleFolderWorkspaceIdentifier(obj) {\n    const singleFolderIdentifier = obj;\n    return typeof (singleFolderIdentifier === null || singleFolderIdentifier === void 0 ? void 0 : singleFolderIdentifier.id) === 'string' && URI.isUri(singleFolderIdentifier.uri);\n}\nexport function isEmptyWorkspaceIdentifier(obj) {\n    const emptyWorkspaceIdentifier = obj;\n    return typeof (emptyWorkspaceIdentifier === null || emptyWorkspaceIdentifier === void 0 ? void 0 : emptyWorkspaceIdentifier.id) === 'string'\n        && !isSingleFolderWorkspaceIdentifier(obj)\n        && !isWorkspaceIdentifier(obj);\n}\nexport const EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE = { id: 'ext-dev' };\nexport const UNKNOWN_EMPTY_WINDOW_WORKSPACE = { id: 'empty-window' };\nexport function toWorkspaceIdentifier(arg0, isExtensionDevelopment) {\n    // Empty workspace\n    if (typeof arg0 === 'string' || typeof arg0 === 'undefined') {\n        // With a backupPath, the basename is the empty workspace identifier\n        if (typeof arg0 === 'string') {\n            return {\n                id: basename(arg0)\n            };\n        }\n        // Extension development empty windows have backups disabled\n        // so we return a constant workspace identifier for extension\n        // authors to allow to restore their workspace state even then.\n        if (isExtensionDevelopment) {\n            return EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE;\n        }\n        return UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n    }\n    // Multi root\n    const workspace = arg0;\n    if (workspace.configuration) {\n        return {\n            id: workspace.id,\n            configPath: workspace.configuration\n        };\n    }\n    // Single folder\n    if (workspace.folders.length === 1) {\n        return {\n            id: workspace.id,\n            uri: workspace.folders[0].uri\n        };\n    }\n    // Empty window\n    return {\n        id: workspace.id\n    };\n}\nexport function isWorkspaceIdentifier(obj) {\n    const workspaceIdentifier = obj;\n    return typeof (workspaceIdentifier === null || workspaceIdentifier === void 0 ? void 0 : workspaceIdentifier.id) === 'string' && URI.isUri(workspaceIdentifier.configPath);\n}\nexport class Workspace {\n    constructor(_id, folders, _transient, _configuration, _ignorePathCasing) {\n        this._id = _id;\n        this._transient = _transient;\n        this._configuration = _configuration;\n        this._ignorePathCasing = _ignorePathCasing;\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, () => true);\n        this.folders = folders;\n    }\n    get folders() {\n        return this._folders;\n    }\n    set folders(folders) {\n        this._folders = folders;\n        this.updateFoldersMap();\n    }\n    get id() {\n        return this._id;\n    }\n    get transient() {\n        return this._transient;\n    }\n    get configuration() {\n        return this._configuration;\n    }\n    set configuration(configuration) {\n        this._configuration = configuration;\n    }\n    getFolder(resource) {\n        if (!resource) {\n            return null;\n        }\n        return this._foldersMap.findSubstr(resource) || null;\n    }\n    updateFoldersMap() {\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, () => true);\n        for (const folder of this.folders) {\n            this._foldersMap.set(folder.uri, folder);\n        }\n    }\n    toJSON() {\n        return { id: this.id, folders: this.folders, transient: this.transient, configuration: this.configuration };\n    }\n}\nexport class WorkspaceFolder {\n    constructor(data, \n    /**\n     * Provides access to the original metadata for this workspace\n     * folder. This can be different from the metadata provided in\n     * this class:\n     * - raw paths can be relative\n     * - raw paths are not normalized\n     */\n    raw) {\n        this.raw = raw;\n        this.uri = data.uri;\n        this.index = data.index;\n        this.name = data.name;\n    }\n    toJSON() {\n        return { uri: this.uri, name: this.name, index: this.index };\n    }\n}\nexport const WORKSPACE_EXTENSION = 'code-workspace';\nexport const WORKSPACE_FILTER = [{ name: localize('codeWorkspace', \"Code Workspace\"), extensions: [WORKSPACE_EXTENSION] }];\nexport const STANDALONE_EDITOR_WORKSPACE_ID = '4064f6ec-cb38-4ad0-af64-ee6467e63c82';\nexport function isStandaloneEditorWorkspace(workspace) {\n    return workspace.id === STANDALONE_EDITOR_WORKSPACE_ID;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}