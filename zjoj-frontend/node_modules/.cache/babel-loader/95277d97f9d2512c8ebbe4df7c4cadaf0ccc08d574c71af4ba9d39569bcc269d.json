{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $window } from './window.js';\nimport { Emitter } from '../common/event.js';\nimport { Disposable, markAsSingleton } from '../common/lifecycle.js';\nclass WindowManager {\n  constructor() {\n    // --- Zoom Factor\n    this._zoomFactor = 1;\n  }\n  getZoomFactor() {\n    return this._zoomFactor;\n  }\n}\nWindowManager.INSTANCE = new WindowManager();\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes\n */\nclass DevicePixelRatioMonitor extends Disposable {\n  constructor() {\n    super();\n    this._onDidChange = this._register(new Emitter());\n    this.onDidChange = this._onDidChange.event;\n    this._listener = () => this._handleChange(true);\n    this._mediaQueryList = null;\n    this._handleChange(false);\n  }\n  _handleChange(fireEvent) {\n    var _a;\n    (_a = this._mediaQueryList) === null || _a === void 0 ? void 0 : _a.removeEventListener('change', this._listener);\n    this._mediaQueryList = $window.matchMedia(`(resolution: ${$window.devicePixelRatio}dppx)`);\n    this._mediaQueryList.addEventListener('change', this._listener);\n    if (fireEvent) {\n      this._onDidChange.fire();\n    }\n  }\n}\nclass PixelRatioImpl extends Disposable {\n  get value() {\n    return this._value;\n  }\n  constructor() {\n    super();\n    this._onDidChange = this._register(new Emitter());\n    this.onDidChange = this._onDidChange.event;\n    this._value = this._getPixelRatio();\n    const dprMonitor = this._register(new DevicePixelRatioMonitor());\n    this._register(dprMonitor.onDidChange(() => {\n      this._value = this._getPixelRatio();\n      this._onDidChange.fire(this._value);\n    }));\n  }\n  _getPixelRatio() {\n    const ctx = document.createElement('canvas').getContext('2d');\n    const dpr = $window.devicePixelRatio || 1;\n    const bsr = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n    return dpr / bsr;\n  }\n}\nclass PixelRatioFacade {\n  constructor() {\n    this._pixelRatioMonitor = null;\n  }\n  _getOrCreatePixelRatioMonitor() {\n    if (!this._pixelRatioMonitor) {\n      this._pixelRatioMonitor = markAsSingleton(new PixelRatioImpl());\n    }\n    return this._pixelRatioMonitor;\n  }\n  /**\n   * Get the current value.\n   */\n  get value() {\n    return this._getOrCreatePixelRatioMonitor().value;\n  }\n  /**\n   * Listen for changes.\n   */\n  get onDidChange() {\n    return this._getOrCreatePixelRatioMonitor().onDidChange;\n  }\n}\nexport function addMatchMediaChangeListener(query, callback) {\n  if (typeof query === 'string') {\n    query = $window.matchMedia(query);\n  }\n  query.addEventListener('change', callback);\n}\n/**\n * Returns the pixel ratio.\n *\n * This is useful for rendering <canvas> elements at native screen resolution or for being used as\n * a cache key when storing font measurements. Fonts might render differently depending on resolution\n * and any measurements need to be discarded for example when a window is moved from a monitor to another.\n */\nexport const PixelRatio = new PixelRatioFacade();\n/** The zoom scale for an index, e.g. 1, 1.2, 1.4 */\nexport function getZoomFactor() {\n  return WindowManager.INSTANCE.getZoomFactor();\n}\nconst userAgent = navigator.userAgent;\nexport const isFirefox = userAgent.indexOf('Firefox') >= 0;\nexport const isWebKit = userAgent.indexOf('AppleWebKit') >= 0;\nexport const isChrome = userAgent.indexOf('Chrome') >= 0;\nexport const isSafari = !isChrome && userAgent.indexOf('Safari') >= 0;\nexport const isWebkitWebView = !isChrome && !isSafari && isWebKit;\nexport const isElectron = userAgent.indexOf('Electron/') >= 0;\nexport const isAndroid = userAgent.indexOf('Android') >= 0;\nlet standalone = false;\nif ($window.matchMedia) {\n  const standaloneMatchMedia = $window.matchMedia('(display-mode: standalone) or (display-mode: window-controls-overlay)');\n  const fullScreenMatchMedia = $window.matchMedia('(display-mode: fullscreen)');\n  standalone = standaloneMatchMedia.matches;\n  addMatchMediaChangeListener(standaloneMatchMedia, ({\n    matches\n  }) => {\n    // entering fullscreen would change standaloneMatchMedia.matches to false\n    // if standalone is true (running as PWA) and entering fullscreen, skip this change\n    if (standalone && fullScreenMatchMedia.matches) {\n      return;\n    }\n    // otherwise update standalone (browser to PWA or PWA to browser)\n    standalone = matches;\n  });\n}\nexport function isStandalone() {\n  return standalone;\n}","map":{"version":3,"names":["$window","Emitter","Disposable","markAsSingleton","WindowManager","constructor","_zoomFactor","getZoomFactor","INSTANCE","DevicePixelRatioMonitor","_onDidChange","_register","onDidChange","event","_listener","_handleChange","_mediaQueryList","fireEvent","_a","removeEventListener","matchMedia","devicePixelRatio","addEventListener","fire","PixelRatioImpl","value","_value","_getPixelRatio","dprMonitor","ctx","document","createElement","getContext","dpr","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","PixelRatioFacade","_pixelRatioMonitor","_getOrCreatePixelRatioMonitor","addMatchMediaChangeListener","query","callback","PixelRatio","userAgent","navigator","isFirefox","indexOf","isWebKit","isChrome","isSafari","isWebkitWebView","isElectron","isAndroid","standalone","standaloneMatchMedia","fullScreenMatchMedia","matches","isStandalone"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/base/browser/browser.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $window } from './window.js';\nimport { Emitter } from '../common/event.js';\nimport { Disposable, markAsSingleton } from '../common/lifecycle.js';\nclass WindowManager {\n    constructor() {\n        // --- Zoom Factor\n        this._zoomFactor = 1;\n    }\n    getZoomFactor() {\n        return this._zoomFactor;\n    }\n}\nWindowManager.INSTANCE = new WindowManager();\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes\n */\nclass DevicePixelRatioMonitor extends Disposable {\n    constructor() {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._listener = () => this._handleChange(true);\n        this._mediaQueryList = null;\n        this._handleChange(false);\n    }\n    _handleChange(fireEvent) {\n        var _a;\n        (_a = this._mediaQueryList) === null || _a === void 0 ? void 0 : _a.removeEventListener('change', this._listener);\n        this._mediaQueryList = $window.matchMedia(`(resolution: ${$window.devicePixelRatio}dppx)`);\n        this._mediaQueryList.addEventListener('change', this._listener);\n        if (fireEvent) {\n            this._onDidChange.fire();\n        }\n    }\n}\nclass PixelRatioImpl extends Disposable {\n    get value() {\n        return this._value;\n    }\n    constructor() {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._value = this._getPixelRatio();\n        const dprMonitor = this._register(new DevicePixelRatioMonitor());\n        this._register(dprMonitor.onDidChange(() => {\n            this._value = this._getPixelRatio();\n            this._onDidChange.fire(this._value);\n        }));\n    }\n    _getPixelRatio() {\n        const ctx = document.createElement('canvas').getContext('2d');\n        const dpr = $window.devicePixelRatio || 1;\n        const bsr = ctx.webkitBackingStorePixelRatio ||\n            ctx.mozBackingStorePixelRatio ||\n            ctx.msBackingStorePixelRatio ||\n            ctx.oBackingStorePixelRatio ||\n            ctx.backingStorePixelRatio || 1;\n        return dpr / bsr;\n    }\n}\nclass PixelRatioFacade {\n    constructor() {\n        this._pixelRatioMonitor = null;\n    }\n    _getOrCreatePixelRatioMonitor() {\n        if (!this._pixelRatioMonitor) {\n            this._pixelRatioMonitor = markAsSingleton(new PixelRatioImpl());\n        }\n        return this._pixelRatioMonitor;\n    }\n    /**\n     * Get the current value.\n     */\n    get value() {\n        return this._getOrCreatePixelRatioMonitor().value;\n    }\n    /**\n     * Listen for changes.\n     */\n    get onDidChange() {\n        return this._getOrCreatePixelRatioMonitor().onDidChange;\n    }\n}\nexport function addMatchMediaChangeListener(query, callback) {\n    if (typeof query === 'string') {\n        query = $window.matchMedia(query);\n    }\n    query.addEventListener('change', callback);\n}\n/**\n * Returns the pixel ratio.\n *\n * This is useful for rendering <canvas> elements at native screen resolution or for being used as\n * a cache key when storing font measurements. Fonts might render differently depending on resolution\n * and any measurements need to be discarded for example when a window is moved from a monitor to another.\n */\nexport const PixelRatio = new PixelRatioFacade();\n/** The zoom scale for an index, e.g. 1, 1.2, 1.4 */\nexport function getZoomFactor() {\n    return WindowManager.INSTANCE.getZoomFactor();\n}\nconst userAgent = navigator.userAgent;\nexport const isFirefox = (userAgent.indexOf('Firefox') >= 0);\nexport const isWebKit = (userAgent.indexOf('AppleWebKit') >= 0);\nexport const isChrome = (userAgent.indexOf('Chrome') >= 0);\nexport const isSafari = (!isChrome && (userAgent.indexOf('Safari') >= 0));\nexport const isWebkitWebView = (!isChrome && !isSafari && isWebKit);\nexport const isElectron = (userAgent.indexOf('Electron/') >= 0);\nexport const isAndroid = (userAgent.indexOf('Android') >= 0);\nlet standalone = false;\nif ($window.matchMedia) {\n    const standaloneMatchMedia = $window.matchMedia('(display-mode: standalone) or (display-mode: window-controls-overlay)');\n    const fullScreenMatchMedia = $window.matchMedia('(display-mode: fullscreen)');\n    standalone = standaloneMatchMedia.matches;\n    addMatchMediaChangeListener(standaloneMatchMedia, ({ matches }) => {\n        // entering fullscreen would change standaloneMatchMedia.matches to false\n        // if standalone is true (running as PWA) and entering fullscreen, skip this change\n        if (standalone && fullScreenMatchMedia.matches) {\n            return;\n        }\n        // otherwise update standalone (browser to PWA or PWA to browser)\n        standalone = matches;\n    });\n}\nexport function isStandalone() {\n    return standalone;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}