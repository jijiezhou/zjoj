{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction SetAdd(set) {\n  return Set.prototype.add.bind(set);\n}\nfunction SetDelete(set) {\n  return Set.prototype.delete.bind(set);\n}\nfunction isNodeCheckable(node) {\n  if (node.disabled || node.disableCheckbox) return false;\n  return !!node.checkable;\n}\nfunction getChildrenKeys(node) {\n  var _a;\n  const keys = [];\n  (_a = node.children) == null ? void 0 : _a.forEach(child => {\n    if (isNodeCheckable(child)) {\n      keys.push(child.key, ...getChildrenKeys(child));\n    }\n  });\n  return keys;\n}\nfunction updateParent(options) {\n  var _a;\n  const {\n    node,\n    checkedKeySet,\n    indeterminateKeySet\n  } = options;\n  let parentNode = node.parent;\n  while (parentNode) {\n    if (isNodeCheckable(parentNode)) {\n      const parentKey = parentNode.key;\n      const children = ((_a = parentNode.children) == null ? void 0 : _a.filter(isNodeCheckable)) || [];\n      let checkedCount = 0;\n      const total = children.length;\n      children.some(({\n        key: childKey\n      }) => {\n        if (checkedKeySet.has(childKey)) {\n          checkedCount += 1;\n        } else if (indeterminateKeySet.has(childKey)) {\n          checkedCount += 0.5;\n          return true;\n        }\n        return false;\n      });\n      if (checkedCount && checkedCount !== total) {\n        indeterminateKeySet.add(parentKey);\n      } else {\n        indeterminateKeySet.delete(parentKey);\n      }\n      if (checkedCount && checkedCount === total) {\n        checkedKeySet.add(parentKey);\n      } else {\n        checkedKeySet.delete(parentKey);\n      }\n    }\n    parentNode = parentNode.parent;\n  }\n}\nfunction getCheckedStateByCheck(options) {\n  const {\n    node,\n    checked,\n    checkedKeys,\n    indeterminateKeys,\n    checkStrictly = false\n  } = options;\n  const {\n    key\n  } = node;\n  const checkedKeySet = new Set(checkedKeys);\n  const indeterminateKeySet = new Set(indeterminateKeys);\n  checked ? checkedKeySet.add(key) : checkedKeySet.delete(key);\n  indeterminateKeySet.delete(key);\n  if (!checkStrictly) {\n    const childKeys = getChildrenKeys(node);\n    if (checked) {\n      childKeys.forEach(SetAdd(checkedKeySet));\n    } else {\n      childKeys.forEach(SetDelete(checkedKeySet));\n    }\n    childKeys.forEach(SetDelete(indeterminateKeySet));\n    updateParent({\n      node,\n      checkedKeySet,\n      indeterminateKeySet\n    });\n  }\n  return [[...checkedKeySet], [...indeterminateKeySet]];\n}\nfunction getCheckedStateByInitKeys(options) {\n  const {\n    initCheckedKeys,\n    key2TreeNode,\n    checkStrictly,\n    onlyCheckLeaf\n  } = options;\n  const checkedKeySet = new Set();\n  const childCheckedKeySet = new Set();\n  const indeterminateKeySet = new Set();\n  if (!checkStrictly) {\n    initCheckedKeys.forEach(key => {\n      var _a;\n      const node = key2TreeNode.get(key);\n      if (!node || childCheckedKeySet.has(key) || onlyCheckLeaf && ((_a = node.children) == null ? void 0 : _a.length)) {\n        return;\n      }\n      const childKeys = getChildrenKeys(node);\n      childKeys.forEach(SetAdd(childCheckedKeySet));\n      childKeys.forEach(SetDelete(indeterminateKeySet));\n      checkedKeySet.add(key);\n      indeterminateKeySet.delete(key);\n      updateParent({\n        node,\n        checkedKeySet,\n        indeterminateKeySet\n      });\n    });\n  } else {\n    initCheckedKeys.forEach(SetAdd(checkedKeySet));\n  }\n  return [[...checkedKeySet, ...childCheckedKeySet], [...indeterminateKeySet]];\n}\nexport { getCheckedStateByCheck, getCheckedStateByInitKeys, isNodeCheckable };","map":{"version":3,"names":["SetAdd","set","Set","prototype","add","bind","SetDelete","delete","isNodeCheckable","node","disabled","disableCheckbox","checkable","getChildrenKeys","_a","keys","children","forEach","child","push","key","updateParent","options","checkedKeySet","indeterminateKeySet","parentNode","parent","parentKey","filter","checkedCount","total","length","some","childKey","has","getCheckedStateByCheck","checked","checkedKeys","indeterminateKeys","checkStrictly","childKeys","getCheckedStateByInitKeys","initCheckedKeys","key2TreeNode","onlyCheckLeaf","childCheckedKeySet","get"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/@arco-design/web-vue/es/tree/utils/check-utils.js"],"sourcesContent":["function SetAdd(set) {\n  return Set.prototype.add.bind(set);\n}\nfunction SetDelete(set) {\n  return Set.prototype.delete.bind(set);\n}\nfunction isNodeCheckable(node) {\n  if (node.disabled || node.disableCheckbox)\n    return false;\n  return !!node.checkable;\n}\nfunction getChildrenKeys(node) {\n  var _a;\n  const keys = [];\n  (_a = node.children) == null ? void 0 : _a.forEach((child) => {\n    if (isNodeCheckable(child)) {\n      keys.push(child.key, ...getChildrenKeys(child));\n    }\n  });\n  return keys;\n}\nfunction updateParent(options) {\n  var _a;\n  const { node, checkedKeySet, indeterminateKeySet } = options;\n  let parentNode = node.parent;\n  while (parentNode) {\n    if (isNodeCheckable(parentNode)) {\n      const parentKey = parentNode.key;\n      const children = ((_a = parentNode.children) == null ? void 0 : _a.filter(isNodeCheckable)) || [];\n      let checkedCount = 0;\n      const total = children.length;\n      children.some(({ key: childKey }) => {\n        if (checkedKeySet.has(childKey)) {\n          checkedCount += 1;\n        } else if (indeterminateKeySet.has(childKey)) {\n          checkedCount += 0.5;\n          return true;\n        }\n        return false;\n      });\n      if (checkedCount && checkedCount !== total) {\n        indeterminateKeySet.add(parentKey);\n      } else {\n        indeterminateKeySet.delete(parentKey);\n      }\n      if (checkedCount && checkedCount === total) {\n        checkedKeySet.add(parentKey);\n      } else {\n        checkedKeySet.delete(parentKey);\n      }\n    }\n    parentNode = parentNode.parent;\n  }\n}\nfunction getCheckedStateByCheck(options) {\n  const {\n    node,\n    checked,\n    checkedKeys,\n    indeterminateKeys,\n    checkStrictly = false\n  } = options;\n  const { key } = node;\n  const checkedKeySet = new Set(checkedKeys);\n  const indeterminateKeySet = new Set(indeterminateKeys);\n  checked ? checkedKeySet.add(key) : checkedKeySet.delete(key);\n  indeterminateKeySet.delete(key);\n  if (!checkStrictly) {\n    const childKeys = getChildrenKeys(node);\n    if (checked) {\n      childKeys.forEach(SetAdd(checkedKeySet));\n    } else {\n      childKeys.forEach(SetDelete(checkedKeySet));\n    }\n    childKeys.forEach(SetDelete(indeterminateKeySet));\n    updateParent({ node, checkedKeySet, indeterminateKeySet });\n  }\n  return [[...checkedKeySet], [...indeterminateKeySet]];\n}\nfunction getCheckedStateByInitKeys(options) {\n  const { initCheckedKeys, key2TreeNode, checkStrictly, onlyCheckLeaf } = options;\n  const checkedKeySet = new Set();\n  const childCheckedKeySet = new Set();\n  const indeterminateKeySet = new Set();\n  if (!checkStrictly) {\n    initCheckedKeys.forEach((key) => {\n      var _a;\n      const node = key2TreeNode.get(key);\n      if (!node || childCheckedKeySet.has(key) || onlyCheckLeaf && ((_a = node.children) == null ? void 0 : _a.length)) {\n        return;\n      }\n      const childKeys = getChildrenKeys(node);\n      childKeys.forEach(SetAdd(childCheckedKeySet));\n      childKeys.forEach(SetDelete(indeterminateKeySet));\n      checkedKeySet.add(key);\n      indeterminateKeySet.delete(key);\n      updateParent({ node, checkedKeySet, indeterminateKeySet });\n    });\n  } else {\n    initCheckedKeys.forEach(SetAdd(checkedKeySet));\n  }\n  return [[...checkedKeySet, ...childCheckedKeySet], [...indeterminateKeySet]];\n}\nexport { getCheckedStateByCheck, getCheckedStateByInitKeys, isNodeCheckable };\n"],"mappings":";AAAA,SAASA,MAAMA,CAACC,GAAG,EAAE;EACnB,OAAOC,GAAG,CAACC,SAAS,CAACC,GAAG,CAACC,IAAI,CAACJ,GAAG,CAAC;AACpC;AACA,SAASK,SAASA,CAACL,GAAG,EAAE;EACtB,OAAOC,GAAG,CAACC,SAAS,CAACI,MAAM,CAACF,IAAI,CAACJ,GAAG,CAAC;AACvC;AACA,SAASO,eAAeA,CAACC,IAAI,EAAE;EAC7B,IAAIA,IAAI,CAACC,QAAQ,IAAID,IAAI,CAACE,eAAe,EACvC,OAAO,KAAK;EACd,OAAO,CAAC,CAACF,IAAI,CAACG,SAAS;AACzB;AACA,SAASC,eAAeA,CAACJ,IAAI,EAAE;EAC7B,IAAIK,EAAE;EACN,MAAMC,IAAI,GAAG,EAAE;EACf,CAACD,EAAE,GAAGL,IAAI,CAACO,QAAQ,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGF,EAAE,CAACG,OAAO,CAAEC,KAAK,IAAK;IAC5D,IAAIV,eAAe,CAACU,KAAK,CAAC,EAAE;MAC1BH,IAAI,CAACI,IAAI,CAACD,KAAK,CAACE,GAAG,EAAE,GAAGP,eAAe,CAACK,KAAK,CAAC,CAAC;IACjD;EACF,CAAC,CAAC;EACF,OAAOH,IAAI;AACb;AACA,SAASM,YAAYA,CAACC,OAAO,EAAE;EAC7B,IAAIR,EAAE;EACN,MAAM;IAAEL,IAAI;IAAEc,aAAa;IAAEC;EAAoB,CAAC,GAAGF,OAAO;EAC5D,IAAIG,UAAU,GAAGhB,IAAI,CAACiB,MAAM;EAC5B,OAAOD,UAAU,EAAE;IACjB,IAAIjB,eAAe,CAACiB,UAAU,CAAC,EAAE;MAC/B,MAAME,SAAS,GAAGF,UAAU,CAACL,GAAG;MAChC,MAAMJ,QAAQ,GAAG,CAAC,CAACF,EAAE,GAAGW,UAAU,CAACT,QAAQ,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGF,EAAE,CAACc,MAAM,CAACpB,eAAe,CAAC,KAAK,EAAE;MACjG,IAAIqB,YAAY,GAAG,CAAC;MACpB,MAAMC,KAAK,GAAGd,QAAQ,CAACe,MAAM;MAC7Bf,QAAQ,CAACgB,IAAI,CAAC,CAAC;QAAEZ,GAAG,EAAEa;MAAS,CAAC,KAAK;QACnC,IAAIV,aAAa,CAACW,GAAG,CAACD,QAAQ,CAAC,EAAE;UAC/BJ,YAAY,IAAI,CAAC;QACnB,CAAC,MAAM,IAAIL,mBAAmB,CAACU,GAAG,CAACD,QAAQ,CAAC,EAAE;UAC5CJ,YAAY,IAAI,GAAG;UACnB,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd,CAAC,CAAC;MACF,IAAIA,YAAY,IAAIA,YAAY,KAAKC,KAAK,EAAE;QAC1CN,mBAAmB,CAACpB,GAAG,CAACuB,SAAS,CAAC;MACpC,CAAC,MAAM;QACLH,mBAAmB,CAACjB,MAAM,CAACoB,SAAS,CAAC;MACvC;MACA,IAAIE,YAAY,IAAIA,YAAY,KAAKC,KAAK,EAAE;QAC1CP,aAAa,CAACnB,GAAG,CAACuB,SAAS,CAAC;MAC9B,CAAC,MAAM;QACLJ,aAAa,CAAChB,MAAM,CAACoB,SAAS,CAAC;MACjC;IACF;IACAF,UAAU,GAAGA,UAAU,CAACC,MAAM;EAChC;AACF;AACA,SAASS,sBAAsBA,CAACb,OAAO,EAAE;EACvC,MAAM;IACJb,IAAI;IACJ2B,OAAO;IACPC,WAAW;IACXC,iBAAiB;IACjBC,aAAa,GAAG;EAClB,CAAC,GAAGjB,OAAO;EACX,MAAM;IAAEF;EAAI,CAAC,GAAGX,IAAI;EACpB,MAAMc,aAAa,GAAG,IAAIrB,GAAG,CAACmC,WAAW,CAAC;EAC1C,MAAMb,mBAAmB,GAAG,IAAItB,GAAG,CAACoC,iBAAiB,CAAC;EACtDF,OAAO,GAAGb,aAAa,CAACnB,GAAG,CAACgB,GAAG,CAAC,GAAGG,aAAa,CAAChB,MAAM,CAACa,GAAG,CAAC;EAC5DI,mBAAmB,CAACjB,MAAM,CAACa,GAAG,CAAC;EAC/B,IAAI,CAACmB,aAAa,EAAE;IAClB,MAAMC,SAAS,GAAG3B,eAAe,CAACJ,IAAI,CAAC;IACvC,IAAI2B,OAAO,EAAE;MACXI,SAAS,CAACvB,OAAO,CAACjB,MAAM,CAACuB,aAAa,CAAC,CAAC;IAC1C,CAAC,MAAM;MACLiB,SAAS,CAACvB,OAAO,CAACX,SAAS,CAACiB,aAAa,CAAC,CAAC;IAC7C;IACAiB,SAAS,CAACvB,OAAO,CAACX,SAAS,CAACkB,mBAAmB,CAAC,CAAC;IACjDH,YAAY,CAAC;MAAEZ,IAAI;MAAEc,aAAa;MAAEC;IAAoB,CAAC,CAAC;EAC5D;EACA,OAAO,CAAC,CAAC,GAAGD,aAAa,CAAC,EAAE,CAAC,GAAGC,mBAAmB,CAAC,CAAC;AACvD;AACA,SAASiB,yBAAyBA,CAACnB,OAAO,EAAE;EAC1C,MAAM;IAAEoB,eAAe;IAAEC,YAAY;IAAEJ,aAAa;IAAEK;EAAc,CAAC,GAAGtB,OAAO;EAC/E,MAAMC,aAAa,GAAG,IAAIrB,GAAG,CAAC,CAAC;EAC/B,MAAM2C,kBAAkB,GAAG,IAAI3C,GAAG,CAAC,CAAC;EACpC,MAAMsB,mBAAmB,GAAG,IAAItB,GAAG,CAAC,CAAC;EACrC,IAAI,CAACqC,aAAa,EAAE;IAClBG,eAAe,CAACzB,OAAO,CAAEG,GAAG,IAAK;MAC/B,IAAIN,EAAE;MACN,MAAML,IAAI,GAAGkC,YAAY,CAACG,GAAG,CAAC1B,GAAG,CAAC;MAClC,IAAI,CAACX,IAAI,IAAIoC,kBAAkB,CAACX,GAAG,CAACd,GAAG,CAAC,IAAIwB,aAAa,KAAK,CAAC9B,EAAE,GAAGL,IAAI,CAACO,QAAQ,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGF,EAAE,CAACiB,MAAM,CAAC,EAAE;QAChH;MACF;MACA,MAAMS,SAAS,GAAG3B,eAAe,CAACJ,IAAI,CAAC;MACvC+B,SAAS,CAACvB,OAAO,CAACjB,MAAM,CAAC6C,kBAAkB,CAAC,CAAC;MAC7CL,SAAS,CAACvB,OAAO,CAACX,SAAS,CAACkB,mBAAmB,CAAC,CAAC;MACjDD,aAAa,CAACnB,GAAG,CAACgB,GAAG,CAAC;MACtBI,mBAAmB,CAACjB,MAAM,CAACa,GAAG,CAAC;MAC/BC,YAAY,CAAC;QAAEZ,IAAI;QAAEc,aAAa;QAAEC;MAAoB,CAAC,CAAC;IAC5D,CAAC,CAAC;EACJ,CAAC,MAAM;IACLkB,eAAe,CAACzB,OAAO,CAACjB,MAAM,CAACuB,aAAa,CAAC,CAAC;EAChD;EACA,OAAO,CAAC,CAAC,GAAGA,aAAa,EAAE,GAAGsB,kBAAkB,CAAC,EAAE,CAAC,GAAGrB,mBAAmB,CAAC,CAAC;AAC9E;AACA,SAASW,sBAAsB,EAAEM,yBAAyB,EAAEjC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}