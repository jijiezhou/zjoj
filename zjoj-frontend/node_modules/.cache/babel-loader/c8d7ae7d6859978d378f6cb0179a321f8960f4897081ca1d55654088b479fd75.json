{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { MoveCaretCommand } from './moveCaretCommand.js';\nimport * as nls from '../../../../nls.js';\nclass MoveCaretAction extends EditorAction {\n  constructor(left, opts) {\n    super(opts);\n    this.left = left;\n  }\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const commands = [];\n    const selections = editor.getSelections();\n    for (const selection of selections) {\n      commands.push(new MoveCaretCommand(selection, this.left));\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nclass MoveCaretLeftAction extends MoveCaretAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.moveCarretLeftAction',\n      label: nls.localize('caret.moveLeft', \"Move Selected Text Left\"),\n      alias: 'Move Selected Text Left',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nclass MoveCaretRightAction extends MoveCaretAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.moveCarretRightAction',\n      label: nls.localize('caret.moveRight', \"Move Selected Text Right\"),\n      alias: 'Move Selected Text Right',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nregisterEditorAction(MoveCaretLeftAction);\nregisterEditorAction(MoveCaretRightAction);","map":{"version":3,"names":["EditorAction","registerEditorAction","EditorContextKeys","MoveCaretCommand","nls","MoveCaretAction","constructor","left","opts","run","accessor","editor","hasModel","commands","selections","getSelections","selection","push","pushUndoStop","executeCommands","id","MoveCaretLeftAction","label","localize","alias","precondition","writable","MoveCaretRightAction"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/browser/caretOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { MoveCaretCommand } from './moveCaretCommand.js';\nimport * as nls from '../../../../nls.js';\nclass MoveCaretAction extends EditorAction {\n    constructor(left, opts) {\n        super(opts);\n        this.left = left;\n    }\n    run(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const commands = [];\n        const selections = editor.getSelections();\n        for (const selection of selections) {\n            commands.push(new MoveCaretCommand(selection, this.left));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass MoveCaretLeftAction extends MoveCaretAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.moveCarretLeftAction',\n            label: nls.localize('caret.moveLeft', \"Move Selected Text Left\"),\n            alias: 'Move Selected Text Left',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nclass MoveCaretRightAction extends MoveCaretAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.moveCarretRightAction',\n            label: nls.localize('caret.moveRight', \"Move Selected Text Right\"),\n            alias: 'Move Selected Text Right',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nregisterEditorAction(MoveCaretLeftAction);\nregisterEditorAction(MoveCaretRightAction);\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA,SAASA,YAAY,EAAEC,oBAAoB,QAAQ,sCAAsC;AACzF,SAASC,iBAAiB,QAAQ,sCAAsC;AACxE,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,OAAO,KAAKC,GAAG,MAAM,oBAAoB;AACzC,MAAMC,eAAe,SAASL,YAAY,CAAC;EACvCM,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAE;IACpB,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACD,IAAI,GAAGA,IAAI;EACpB;EACAE,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAE;IAClB,IAAI,CAACA,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE;MACpB;IACJ;IACA,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,UAAU,GAAGH,MAAM,CAACI,aAAa,CAAC,CAAC;IACzC,KAAK,MAAMC,SAAS,IAAIF,UAAU,EAAE;MAChCD,QAAQ,CAACI,IAAI,CAAC,IAAId,gBAAgB,CAACa,SAAS,EAAE,IAAI,CAACT,IAAI,CAAC,CAAC;IAC7D;IACAI,MAAM,CAACO,YAAY,CAAC,CAAC;IACrBP,MAAM,CAACQ,eAAe,CAAC,IAAI,CAACC,EAAE,EAAEP,QAAQ,CAAC;IACzCF,MAAM,CAACO,YAAY,CAAC,CAAC;EACzB;AACJ;AACA,MAAMG,mBAAmB,SAAShB,eAAe,CAAC;EAC9CC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,IAAI,EAAE;MACRc,EAAE,EAAE,oCAAoC;MACxCE,KAAK,EAAElB,GAAG,CAACmB,QAAQ,CAAC,gBAAgB,EAAE,yBAAyB,CAAC;MAChEC,KAAK,EAAE,yBAAyB;MAChCC,YAAY,EAAEvB,iBAAiB,CAACwB;IACpC,CAAC,CAAC;EACN;AACJ;AACA,MAAMC,oBAAoB,SAAStB,eAAe,CAAC;EAC/CC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,KAAK,EAAE;MACTc,EAAE,EAAE,qCAAqC;MACzCE,KAAK,EAAElB,GAAG,CAACmB,QAAQ,CAAC,iBAAiB,EAAE,0BAA0B,CAAC;MAClEC,KAAK,EAAE,0BAA0B;MACjCC,YAAY,EAAEvB,iBAAiB,CAACwB;IACpC,CAAC,CAAC;EACN;AACJ;AACAzB,oBAAoB,CAACoB,mBAAmB,CAAC;AACzCpB,oBAAoB,CAAC0B,oBAAoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}