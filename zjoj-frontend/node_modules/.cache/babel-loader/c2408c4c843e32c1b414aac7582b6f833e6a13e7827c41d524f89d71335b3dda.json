{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function isFuzzyActionArr(what) {\n  return Array.isArray(what);\n}\nexport function isFuzzyAction(what) {\n  return !isFuzzyActionArr(what);\n}\nexport function isString(what) {\n  return typeof what === 'string';\n}\nexport function isIAction(what) {\n  return !isString(what);\n}\n// Small helper functions\n/**\n * Is a string null, undefined, or empty?\n */\nexport function empty(s) {\n  return s ? false : true;\n}\n/**\n * Puts a string to lower case if 'ignoreCase' is set.\n */\nexport function fixCase(lexer, str) {\n  return lexer.ignoreCase && str ? str.toLowerCase() : str;\n}\n/**\n * Ensures there are no bad characters in a CSS token class.\n */\nexport function sanitize(s) {\n  return s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\n}\n// Logging\n/**\n * Logs a message.\n */\nexport function log(lexer, msg) {\n  console.log(`${lexer.languageId}: ${msg}`);\n}\n// Throwing errors\nexport function createError(lexer, msg) {\n  return new Error(`${lexer.languageId}: ${msg}`);\n}\n// Helper functions for rule finding and substitution\n/**\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\n * \t\t$$  => $\n * \t\t$#  => id\n * \t\t$n  => matched entry n\n * \t\t@attr => contents of lexer[attr]\n *\n * See documentation for more info\n */\nexport function substituteMatches(lexer, str, id, matches, state) {\n  const re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\n  let stateMatches = null;\n  return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {\n    if (!empty(dollar)) {\n      return '$'; // $$\n    }\n    if (!empty(hash)) {\n      return fixCase(lexer, id); // default $#\n    }\n    if (!empty(n) && n < matches.length) {\n      return fixCase(lexer, matches[n]); // $n\n    }\n    if (!empty(attr) && lexer && typeof lexer[attr] === 'string') {\n      return lexer[attr]; //@attribute\n    }\n    if (stateMatches === null) {\n      // split state on demand\n      stateMatches = state.split('.');\n      stateMatches.unshift(state);\n    }\n    if (!empty(s) && s < stateMatches.length) {\n      return fixCase(lexer, stateMatches[s]); //$Sn\n    }\n    return '';\n  });\n}\n/**\n * Find the tokenizer rules for a specific state (i.e. next action)\n */\nexport function findRules(lexer, inState) {\n  let state = inState;\n  while (state && state.length > 0) {\n    const rules = lexer.tokenizer[state];\n    if (rules) {\n      return rules;\n    }\n    const idx = state.lastIndexOf('.');\n    if (idx < 0) {\n      state = null; // no further parent\n    } else {\n      state = state.substr(0, idx);\n    }\n  }\n  return null;\n}\n/**\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\n * This is used during compilation where we may know the defined states\n * but not yet whether the corresponding rules are correct.\n */\nexport function stateExists(lexer, inState) {\n  let state = inState;\n  while (state && state.length > 0) {\n    const exist = lexer.stateNames[state];\n    if (exist) {\n      return true;\n    }\n    const idx = state.lastIndexOf('.');\n    if (idx < 0) {\n      state = null; // no further parent\n    } else {\n      state = state.substr(0, idx);\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["isFuzzyActionArr","what","Array","isArray","isFuzzyAction","isString","isIAction","empty","s","fixCase","lexer","str","ignoreCase","toLowerCase","sanitize","replace","log","msg","console","languageId","createError","Error","substituteMatches","id","matches","state","re","stateMatches","full","sub","dollar","hash","n","attr","ofs","total","length","split","unshift","findRules","inState","rules","tokenizer","idx","lastIndexOf","substr","stateExists","exist","stateNames"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchCommon.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function isFuzzyActionArr(what) {\n    return (Array.isArray(what));\n}\nexport function isFuzzyAction(what) {\n    return !isFuzzyActionArr(what);\n}\nexport function isString(what) {\n    return (typeof what === 'string');\n}\nexport function isIAction(what) {\n    return !isString(what);\n}\n// Small helper functions\n/**\n * Is a string null, undefined, or empty?\n */\nexport function empty(s) {\n    return (s ? false : true);\n}\n/**\n * Puts a string to lower case if 'ignoreCase' is set.\n */\nexport function fixCase(lexer, str) {\n    return (lexer.ignoreCase && str ? str.toLowerCase() : str);\n}\n/**\n * Ensures there are no bad characters in a CSS token class.\n */\nexport function sanitize(s) {\n    return s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\n}\n// Logging\n/**\n * Logs a message.\n */\nexport function log(lexer, msg) {\n    console.log(`${lexer.languageId}: ${msg}`);\n}\n// Throwing errors\nexport function createError(lexer, msg) {\n    return new Error(`${lexer.languageId}: ${msg}`);\n}\n// Helper functions for rule finding and substitution\n/**\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\n * \t\t$$  => $\n * \t\t$#  => id\n * \t\t$n  => matched entry n\n * \t\t@attr => contents of lexer[attr]\n *\n * See documentation for more info\n */\nexport function substituteMatches(lexer, str, id, matches, state) {\n    const re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\n    let stateMatches = null;\n    return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {\n        if (!empty(dollar)) {\n            return '$'; // $$\n        }\n        if (!empty(hash)) {\n            return fixCase(lexer, id); // default $#\n        }\n        if (!empty(n) && n < matches.length) {\n            return fixCase(lexer, matches[n]); // $n\n        }\n        if (!empty(attr) && lexer && typeof (lexer[attr]) === 'string') {\n            return lexer[attr]; //@attribute\n        }\n        if (stateMatches === null) { // split state on demand\n            stateMatches = state.split('.');\n            stateMatches.unshift(state);\n        }\n        if (!empty(s) && s < stateMatches.length) {\n            return fixCase(lexer, stateMatches[s]); //$Sn\n        }\n        return '';\n    });\n}\n/**\n * Find the tokenizer rules for a specific state (i.e. next action)\n */\nexport function findRules(lexer, inState) {\n    let state = inState;\n    while (state && state.length > 0) {\n        const rules = lexer.tokenizer[state];\n        if (rules) {\n            return rules;\n        }\n        const idx = state.lastIndexOf('.');\n        if (idx < 0) {\n            state = null; // no further parent\n        }\n        else {\n            state = state.substr(0, idx);\n        }\n    }\n    return null;\n}\n/**\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\n * This is used during compilation where we may know the defined states\n * but not yet whether the corresponding rules are correct.\n */\nexport function stateExists(lexer, inState) {\n    let state = inState;\n    while (state && state.length > 0) {\n        const exist = lexer.stateNames[state];\n        if (exist) {\n            return true;\n        }\n        const idx = state.lastIndexOf('.');\n        if (idx < 0) {\n            state = null; // no further parent\n        }\n        else {\n            state = state.substr(0, idx);\n        }\n    }\n    return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}