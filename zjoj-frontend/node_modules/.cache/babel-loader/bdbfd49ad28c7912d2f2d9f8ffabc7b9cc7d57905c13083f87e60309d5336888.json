{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, append, clearNode, createStyleSheet, getWindow, h, hasParentWithClass } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { StandardKeyboardEvent } from '../../keyboardEvent.js';\nimport { ActionBar } from '../actionbar/actionbar.js';\nimport { FindInput } from '../findinput/findInput.js';\nimport { unthemedInboxStyles } from '../inputbox/inputBox.js';\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { isActionItem, isButton, isInputElement, isMonacoCustomToggle, isMonacoEditor, isStickyScrollElement, List, MouseController } from '../list/listWidget.js';\nimport { Toggle, unthemedToggleStyles } from '../toggle/toggle.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { TreeMouseEventTarget } from './tree.js';\nimport { Action } from '../../../common/actions.js';\nimport { distinct, equals, range } from '../../../common/arrays.js';\nimport { Delayer, disposableTimeout, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { SetMap } from '../../../common/map.js';\nimport { Emitter, Event, EventBufferer, Relay } from '../../../common/event.js';\nimport { fuzzyScore, FuzzyScore } from '../../../common/filters.js';\nimport { Disposable, DisposableStore, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { isNumber } from '../../../common/types.js';\nimport './media/tree.css';\nimport { localize } from '../../../../nls.js';\nclass TreeElementsDragAndDropData extends ElementsDragAndDropData {\n  constructor(data) {\n    super(data.elements.map(node => node.element));\n    this.data = data;\n  }\n}\nfunction asTreeDragAndDropData(data) {\n  if (data instanceof ElementsDragAndDropData) {\n    return new TreeElementsDragAndDropData(data);\n  }\n  return data;\n}\nclass TreeNodeListDragAndDrop {\n  constructor(modelProvider, dnd) {\n    this.modelProvider = modelProvider;\n    this.dnd = dnd;\n    this.autoExpandDisposable = Disposable.None;\n    this.disposables = new DisposableStore();\n  }\n  getDragURI(node) {\n    return this.dnd.getDragURI(node.element);\n  }\n  getDragLabel(nodes, originalEvent) {\n    if (this.dnd.getDragLabel) {\n      return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n    }\n    return undefined;\n  }\n  onDragStart(data, originalEvent) {\n    var _a, _b;\n    (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asTreeDragAndDropData(data), originalEvent);\n  }\n  onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\n    const result = this.dnd.onDragOver(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    const didChangeAutoExpandNode = this.autoExpandNode !== targetNode;\n    if (didChangeAutoExpandNode) {\n      this.autoExpandDisposable.dispose();\n      this.autoExpandNode = targetNode;\n    }\n    if (typeof targetNode === 'undefined') {\n      return result;\n    }\n    if (didChangeAutoExpandNode && typeof result !== 'boolean' && result.autoExpand) {\n      this.autoExpandDisposable = disposableTimeout(() => {\n        const model = this.modelProvider();\n        const ref = model.getNodeLocation(targetNode);\n        if (model.isCollapsed(ref)) {\n          model.setCollapsed(ref, false);\n        }\n        this.autoExpandNode = undefined;\n      }, 500, this.disposables);\n    }\n    if (typeof result === 'boolean' || !result.accept || typeof result.bubble === 'undefined' || result.feedback) {\n      if (!raw) {\n        const accept = typeof result === 'boolean' ? result : result.accept;\n        const effect = typeof result === 'boolean' ? undefined : result.effect;\n        return {\n          accept,\n          effect,\n          feedback: [targetIndex]\n        };\n      }\n      return result;\n    }\n    if (result.bubble === 1 /* TreeDragOverBubble.Up */) {\n      const model = this.modelProvider();\n      const ref = model.getNodeLocation(targetNode);\n      const parentRef = model.getParentNodeLocation(ref);\n      const parentNode = model.getNode(parentRef);\n      const parentIndex = parentRef && model.getListIndex(parentRef);\n      return this.onDragOver(data, parentNode, parentIndex, originalEvent, false);\n    }\n    const model = this.modelProvider();\n    const ref = model.getNodeLocation(targetNode);\n    const start = model.getListIndex(ref);\n    const length = model.getListRenderCount(ref);\n    return {\n      ...result,\n      feedback: range(start, start + length)\n    };\n  }\n  drop(data, targetNode, targetIndex, originalEvent) {\n    this.autoExpandDisposable.dispose();\n    this.autoExpandNode = undefined;\n    this.dnd.drop(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n  }\n  onDragEnd(originalEvent) {\n    var _a, _b;\n    (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n  }\n  dispose() {\n    this.disposables.dispose();\n    this.dnd.dispose();\n  }\n}\nfunction asListOptions(modelProvider, options) {\n  return options && {\n    ...options,\n    identityProvider: options.identityProvider && {\n      getId(el) {\n        return options.identityProvider.getId(el.element);\n      }\n    },\n    dnd: options.dnd && new TreeNodeListDragAndDrop(modelProvider, options.dnd),\n    multipleSelectionController: options.multipleSelectionController && {\n      isSelectionSingleChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionSingleChangeEvent({\n          ...e,\n          element: e.element\n        });\n      },\n      isSelectionRangeChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionRangeChangeEvent({\n          ...e,\n          element: e.element\n        });\n      }\n    },\n    accessibilityProvider: options.accessibilityProvider && {\n      ...options.accessibilityProvider,\n      getSetSize(node) {\n        const model = modelProvider();\n        const ref = model.getNodeLocation(node);\n        const parentRef = model.getParentNodeLocation(ref);\n        const parentNode = model.getNode(parentRef);\n        return parentNode.visibleChildrenCount;\n      },\n      getPosInSet(node) {\n        return node.visibleChildIndex + 1;\n      },\n      isChecked: options.accessibilityProvider && options.accessibilityProvider.isChecked ? node => {\n        return options.accessibilityProvider.isChecked(node.element);\n      } : undefined,\n      getRole: options.accessibilityProvider && options.accessibilityProvider.getRole ? node => {\n        return options.accessibilityProvider.getRole(node.element);\n      } : () => 'treeitem',\n      getAriaLabel(e) {\n        return options.accessibilityProvider.getAriaLabel(e.element);\n      },\n      getWidgetAriaLabel() {\n        return options.accessibilityProvider.getWidgetAriaLabel();\n      },\n      getWidgetRole: options.accessibilityProvider && options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n      getAriaLevel: options.accessibilityProvider && options.accessibilityProvider.getAriaLevel ? node => options.accessibilityProvider.getAriaLevel(node.element) : node => {\n        return node.depth;\n      },\n      getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n        return options.accessibilityProvider.getActiveDescendantId(node.element);\n      })\n    },\n    keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n      ...options.keyboardNavigationLabelProvider,\n      getKeyboardNavigationLabel(node) {\n        return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(node.element);\n      }\n    }\n  };\n}\nexport class ComposedTreeDelegate {\n  constructor(delegate) {\n    this.delegate = delegate;\n  }\n  getHeight(element) {\n    return this.delegate.getHeight(element.element);\n  }\n  getTemplateId(element) {\n    return this.delegate.getTemplateId(element.element);\n  }\n  hasDynamicHeight(element) {\n    return !!this.delegate.hasDynamicHeight && this.delegate.hasDynamicHeight(element.element);\n  }\n  setDynamicHeight(element, height) {\n    var _a, _b;\n    (_b = (_a = this.delegate).setDynamicHeight) === null || _b === void 0 ? void 0 : _b.call(_a, element.element, height);\n  }\n}\nexport var RenderIndentGuides;\n(function (RenderIndentGuides) {\n  RenderIndentGuides[\"None\"] = \"none\";\n  RenderIndentGuides[\"OnHover\"] = \"onHover\";\n  RenderIndentGuides[\"Always\"] = \"always\";\n})(RenderIndentGuides || (RenderIndentGuides = {}));\nclass EventCollection {\n  get elements() {\n    return this._elements;\n  }\n  constructor(onDidChange, _elements = []) {\n    this._elements = _elements;\n    this.disposables = new DisposableStore();\n    this.onDidChange = Event.forEach(onDidChange, elements => this._elements = elements, this.disposables);\n  }\n  dispose() {\n    this.disposables.dispose();\n  }\n}\nexport class TreeRenderer {\n  constructor(renderer, modelProvider, onDidChangeCollapseState, activeNodes, renderedIndentGuides, options = {}) {\n    var _a;\n    this.renderer = renderer;\n    this.modelProvider = modelProvider;\n    this.activeNodes = activeNodes;\n    this.renderedIndentGuides = renderedIndentGuides;\n    this.renderedElements = new Map();\n    this.renderedNodes = new Map();\n    this.indent = TreeRenderer.DefaultIndent;\n    this.hideTwistiesOfChildlessElements = false;\n    this.shouldRenderIndentGuides = false;\n    this.activeIndentNodes = new Set();\n    this.indentGuidesDisposable = Disposable.None;\n    this.disposables = new DisposableStore();\n    this.templateId = renderer.templateId;\n    this.updateOptions(options);\n    Event.map(onDidChangeCollapseState, e => e.node)(this.onDidChangeNodeTwistieState, this, this.disposables);\n    (_a = renderer.onDidChangeTwistieState) === null || _a === void 0 ? void 0 : _a.call(renderer, this.onDidChangeTwistieState, this, this.disposables);\n  }\n  updateOptions(options = {}) {\n    if (typeof options.indent !== 'undefined') {\n      const indent = clamp(options.indent, 0, 40);\n      if (indent !== this.indent) {\n        this.indent = indent;\n        for (const [node, templateData] of this.renderedNodes) {\n          this.renderTreeElement(node, templateData);\n        }\n      }\n    }\n    if (typeof options.renderIndentGuides !== 'undefined') {\n      const shouldRenderIndentGuides = options.renderIndentGuides !== RenderIndentGuides.None;\n      if (shouldRenderIndentGuides !== this.shouldRenderIndentGuides) {\n        this.shouldRenderIndentGuides = shouldRenderIndentGuides;\n        for (const [node, templateData] of this.renderedNodes) {\n          this._renderIndentGuides(node, templateData);\n        }\n        this.indentGuidesDisposable.dispose();\n        if (shouldRenderIndentGuides) {\n          const disposables = new DisposableStore();\n          this.activeNodes.onDidChange(this._onDidChangeActiveNodes, this, disposables);\n          this.indentGuidesDisposable = disposables;\n          this._onDidChangeActiveNodes(this.activeNodes.elements);\n        }\n      }\n    }\n    if (typeof options.hideTwistiesOfChildlessElements !== 'undefined') {\n      this.hideTwistiesOfChildlessElements = options.hideTwistiesOfChildlessElements;\n    }\n  }\n  renderTemplate(container) {\n    const el = append(container, $('.monaco-tl-row'));\n    const indent = append(el, $('.monaco-tl-indent'));\n    const twistie = append(el, $('.monaco-tl-twistie'));\n    const contents = append(el, $('.monaco-tl-contents'));\n    const templateData = this.renderer.renderTemplate(contents);\n    return {\n      container,\n      indent,\n      twistie,\n      indentGuidesDisposable: Disposable.None,\n      templateData\n    };\n  }\n  renderElement(node, index, templateData, height) {\n    this.renderedNodes.set(node, templateData);\n    this.renderedElements.set(node.element, node);\n    this.renderTreeElement(node, templateData);\n    this.renderer.renderElement(node, index, templateData.templateData, height);\n  }\n  disposeElement(node, index, templateData, height) {\n    var _a, _b;\n    templateData.indentGuidesDisposable.dispose();\n    (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, node, index, templateData.templateData, height);\n    if (typeof height === 'number') {\n      this.renderedNodes.delete(node);\n      this.renderedElements.delete(node.element);\n    }\n  }\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.templateData);\n  }\n  onDidChangeTwistieState(element) {\n    const node = this.renderedElements.get(element);\n    if (!node) {\n      return;\n    }\n    this.onDidChangeNodeTwistieState(node);\n  }\n  onDidChangeNodeTwistieState(node) {\n    const templateData = this.renderedNodes.get(node);\n    if (!templateData) {\n      return;\n    }\n    this._onDidChangeActiveNodes(this.activeNodes.elements);\n    this.renderTreeElement(node, templateData);\n  }\n  renderTreeElement(node, templateData) {\n    const indent = TreeRenderer.DefaultIndent + (node.depth - 1) * this.indent;\n    templateData.twistie.style.paddingLeft = `${indent}px`;\n    templateData.indent.style.width = `${indent + this.indent - 16}px`;\n    if (node.collapsible) {\n      templateData.container.setAttribute('aria-expanded', String(!node.collapsed));\n    } else {\n      templateData.container.removeAttribute('aria-expanded');\n    }\n    templateData.twistie.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n    let twistieRendered = false;\n    if (this.renderer.renderTwistie) {\n      twistieRendered = this.renderer.renderTwistie(node.element, templateData.twistie);\n    }\n    if (node.collapsible && (!this.hideTwistiesOfChildlessElements || node.visibleChildrenCount > 0)) {\n      if (!twistieRendered) {\n        templateData.twistie.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n      }\n      templateData.twistie.classList.add('collapsible');\n      templateData.twistie.classList.toggle('collapsed', node.collapsed);\n    } else {\n      templateData.twistie.classList.remove('collapsible', 'collapsed');\n    }\n    this._renderIndentGuides(node, templateData);\n  }\n  _renderIndentGuides(node, templateData) {\n    clearNode(templateData.indent);\n    templateData.indentGuidesDisposable.dispose();\n    if (!this.shouldRenderIndentGuides) {\n      return;\n    }\n    const disposableStore = new DisposableStore();\n    const model = this.modelProvider();\n    while (true) {\n      const ref = model.getNodeLocation(node);\n      const parentRef = model.getParentNodeLocation(ref);\n      if (!parentRef) {\n        break;\n      }\n      const parent = model.getNode(parentRef);\n      const guide = $('.indent-guide', {\n        style: `width: ${this.indent}px`\n      });\n      if (this.activeIndentNodes.has(parent)) {\n        guide.classList.add('active');\n      }\n      if (templateData.indent.childElementCount === 0) {\n        templateData.indent.appendChild(guide);\n      } else {\n        templateData.indent.insertBefore(guide, templateData.indent.firstElementChild);\n      }\n      this.renderedIndentGuides.add(parent, guide);\n      disposableStore.add(toDisposable(() => this.renderedIndentGuides.delete(parent, guide)));\n      node = parent;\n    }\n    templateData.indentGuidesDisposable = disposableStore;\n  }\n  _onDidChangeActiveNodes(nodes) {\n    if (!this.shouldRenderIndentGuides) {\n      return;\n    }\n    const set = new Set();\n    const model = this.modelProvider();\n    nodes.forEach(node => {\n      const ref = model.getNodeLocation(node);\n      try {\n        const parentRef = model.getParentNodeLocation(ref);\n        if (node.collapsible && node.children.length > 0 && !node.collapsed) {\n          set.add(node);\n        } else if (parentRef) {\n          set.add(model.getNode(parentRef));\n        }\n      } catch (_a) {\n        // noop\n      }\n    });\n    this.activeIndentNodes.forEach(node => {\n      if (!set.has(node)) {\n        this.renderedIndentGuides.forEach(node, line => line.classList.remove('active'));\n      }\n    });\n    set.forEach(node => {\n      if (!this.activeIndentNodes.has(node)) {\n        this.renderedIndentGuides.forEach(node, line => line.classList.add('active'));\n      }\n    });\n    this.activeIndentNodes = set;\n  }\n  dispose() {\n    this.renderedNodes.clear();\n    this.renderedElements.clear();\n    this.indentGuidesDisposable.dispose();\n    dispose(this.disposables);\n  }\n}\nTreeRenderer.DefaultIndent = 8;\nclass FindFilter {\n  get totalCount() {\n    return this._totalCount;\n  }\n  get matchCount() {\n    return this._matchCount;\n  }\n  constructor(tree, keyboardNavigationLabelProvider, _filter) {\n    this.tree = tree;\n    this.keyboardNavigationLabelProvider = keyboardNavigationLabelProvider;\n    this._filter = _filter;\n    this._totalCount = 0;\n    this._matchCount = 0;\n    this._pattern = '';\n    this._lowercasePattern = '';\n    this.disposables = new DisposableStore();\n    tree.onWillRefilter(this.reset, this, this.disposables);\n  }\n  filter(element, parentVisibility) {\n    let visibility = 1 /* TreeVisibility.Visible */;\n    if (this._filter) {\n      const result = this._filter.filter(element, parentVisibility);\n      if (typeof result === 'boolean') {\n        visibility = result ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n      } else if (isFilterResult(result)) {\n        visibility = getVisibleState(result.visibility);\n      } else {\n        visibility = result;\n      }\n      if (visibility === 0 /* TreeVisibility.Hidden */) {\n        return false;\n      }\n    }\n    this._totalCount++;\n    if (!this._pattern) {\n      this._matchCount++;\n      return {\n        data: FuzzyScore.Default,\n        visibility\n      };\n    }\n    const label = this.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(element);\n    const labels = Array.isArray(label) ? label : [label];\n    for (const l of labels) {\n      const labelStr = l && l.toString();\n      if (typeof labelStr === 'undefined') {\n        return {\n          data: FuzzyScore.Default,\n          visibility\n        };\n      }\n      let score;\n      if (this.tree.findMatchType === TreeFindMatchType.Contiguous) {\n        const index = labelStr.toLowerCase().indexOf(this._lowercasePattern);\n        if (index > -1) {\n          score = [Number.MAX_SAFE_INTEGER, 0];\n          for (let i = this._lowercasePattern.length; i > 0; i--) {\n            score.push(index + i - 1);\n          }\n        }\n      } else {\n        score = fuzzyScore(this._pattern, this._lowercasePattern, 0, labelStr, labelStr.toLowerCase(), 0, {\n          firstMatchCanBeWeak: true,\n          boostFullMatch: true\n        });\n      }\n      if (score) {\n        this._matchCount++;\n        return labels.length === 1 ? {\n          data: score,\n          visibility\n        } : {\n          data: {\n            label: labelStr,\n            score: score\n          },\n          visibility\n        };\n      }\n    }\n    if (this.tree.findMode === TreeFindMode.Filter) {\n      if (typeof this.tree.options.defaultFindVisibility === 'number') {\n        return this.tree.options.defaultFindVisibility;\n      } else if (this.tree.options.defaultFindVisibility) {\n        return this.tree.options.defaultFindVisibility(element);\n      } else {\n        return 2 /* TreeVisibility.Recurse */;\n      }\n    } else {\n      return {\n        data: FuzzyScore.Default,\n        visibility\n      };\n    }\n  }\n  reset() {\n    this._totalCount = 0;\n    this._matchCount = 0;\n  }\n  dispose() {\n    dispose(this.disposables);\n  }\n}\nexport class ModeToggle extends Toggle {\n  constructor(opts) {\n    var _a;\n    super({\n      icon: Codicon.listFilter,\n      title: localize('filter', \"Filter\"),\n      isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n      inputActiveOptionBorder: opts.inputActiveOptionBorder,\n      inputActiveOptionForeground: opts.inputActiveOptionForeground,\n      inputActiveOptionBackground: opts.inputActiveOptionBackground\n    });\n  }\n}\nexport class FuzzyToggle extends Toggle {\n  constructor(opts) {\n    var _a;\n    super({\n      icon: Codicon.searchFuzzy,\n      title: localize('fuzzySearch', \"Fuzzy Match\"),\n      isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n      inputActiveOptionBorder: opts.inputActiveOptionBorder,\n      inputActiveOptionForeground: opts.inputActiveOptionForeground,\n      inputActiveOptionBackground: opts.inputActiveOptionBackground\n    });\n  }\n}\nconst unthemedFindWidgetStyles = {\n  inputBoxStyles: unthemedInboxStyles,\n  toggleStyles: unthemedToggleStyles,\n  listFilterWidgetBackground: undefined,\n  listFilterWidgetNoMatchesOutline: undefined,\n  listFilterWidgetOutline: undefined,\n  listFilterWidgetShadow: undefined\n};\nexport var TreeFindMode;\n(function (TreeFindMode) {\n  TreeFindMode[TreeFindMode[\"Highlight\"] = 0] = \"Highlight\";\n  TreeFindMode[TreeFindMode[\"Filter\"] = 1] = \"Filter\";\n})(TreeFindMode || (TreeFindMode = {}));\nexport var TreeFindMatchType;\n(function (TreeFindMatchType) {\n  TreeFindMatchType[TreeFindMatchType[\"Fuzzy\"] = 0] = \"Fuzzy\";\n  TreeFindMatchType[TreeFindMatchType[\"Contiguous\"] = 1] = \"Contiguous\";\n})(TreeFindMatchType || (TreeFindMatchType = {}));\nclass FindWidget extends Disposable {\n  set mode(mode) {\n    this.modeToggle.checked = mode === TreeFindMode.Filter;\n    this.findInput.inputBox.setPlaceHolder(mode === TreeFindMode.Filter ? localize('type to filter', \"Type to filter\") : localize('type to search', \"Type to search\"));\n  }\n  set matchType(matchType) {\n    this.matchTypeToggle.checked = matchType === TreeFindMatchType.Fuzzy;\n  }\n  constructor(container, tree, contextViewProvider, mode, matchType, options) {\n    var _a;\n    super();\n    this.tree = tree;\n    this.elements = h('.monaco-tree-type-filter', [h('.monaco-tree-type-filter-grab.codicon.codicon-debug-gripper@grab', {\n      tabIndex: 0\n    }), h('.monaco-tree-type-filter-input@findInput'), h('.monaco-tree-type-filter-actionbar@actionbar')]);\n    this.width = 0;\n    this.right = 0;\n    this.top = 0;\n    this._onDidDisable = new Emitter();\n    container.appendChild(this.elements.root);\n    this._register(toDisposable(() => container.removeChild(this.elements.root)));\n    const styles = (_a = options === null || options === void 0 ? void 0 : options.styles) !== null && _a !== void 0 ? _a : unthemedFindWidgetStyles;\n    if (styles.listFilterWidgetBackground) {\n      this.elements.root.style.backgroundColor = styles.listFilterWidgetBackground;\n    }\n    if (styles.listFilterWidgetShadow) {\n      this.elements.root.style.boxShadow = `0 0 8px 2px ${styles.listFilterWidgetShadow}`;\n    }\n    this.modeToggle = this._register(new ModeToggle({\n      ...styles.toggleStyles,\n      isChecked: mode === TreeFindMode.Filter\n    }));\n    this.matchTypeToggle = this._register(new FuzzyToggle({\n      ...styles.toggleStyles,\n      isChecked: matchType === TreeFindMatchType.Fuzzy\n    }));\n    this.onDidChangeMode = Event.map(this.modeToggle.onChange, () => this.modeToggle.checked ? TreeFindMode.Filter : TreeFindMode.Highlight, this._store);\n    this.onDidChangeMatchType = Event.map(this.matchTypeToggle.onChange, () => this.matchTypeToggle.checked ? TreeFindMatchType.Fuzzy : TreeFindMatchType.Contiguous, this._store);\n    this.findInput = this._register(new FindInput(this.elements.findInput, contextViewProvider, {\n      label: localize('type to search', \"Type to search\"),\n      additionalToggles: [this.modeToggle, this.matchTypeToggle],\n      showCommonFindToggles: false,\n      inputBoxStyles: styles.inputBoxStyles,\n      toggleStyles: styles.toggleStyles,\n      history: options === null || options === void 0 ? void 0 : options.history\n    }));\n    this.actionbar = this._register(new ActionBar(this.elements.actionbar));\n    this.mode = mode;\n    const emitter = this._register(new DomEmitter(this.findInput.inputBox.inputElement, 'keydown'));\n    const onKeyDown = Event.chain(emitter.event, $ => $.map(e => new StandardKeyboardEvent(e)));\n    this._register(onKeyDown(e => {\n      // Using equals() so we reserve modified keys for future use\n      if (e.equals(3 /* KeyCode.Enter */)) {\n        // This is the only keyboard way to return to the tree from a history item that isn't the last one\n        e.preventDefault();\n        e.stopPropagation();\n        this.findInput.inputBox.addToHistory();\n        this.tree.domFocus();\n        return;\n      }\n      if (e.equals(18 /* KeyCode.DownArrow */)) {\n        e.preventDefault();\n        e.stopPropagation();\n        if (this.findInput.inputBox.isAtLastInHistory() || this.findInput.inputBox.isNowhereInHistory()) {\n          // Retain original pre-history DownArrow behavior\n          this.findInput.inputBox.addToHistory();\n          this.tree.domFocus();\n        } else {\n          // Downward through history\n          this.findInput.inputBox.showNextValue();\n        }\n        return;\n      }\n      if (e.equals(16 /* KeyCode.UpArrow */)) {\n        e.preventDefault();\n        e.stopPropagation();\n        // Upward through history\n        this.findInput.inputBox.showPreviousValue();\n        return;\n      }\n    }));\n    const closeAction = this._register(new Action('close', localize('close', \"Close\"), 'codicon codicon-close', true, () => this.dispose()));\n    this.actionbar.push(closeAction, {\n      icon: true,\n      label: false\n    });\n    const onGrabMouseDown = this._register(new DomEmitter(this.elements.grab, 'mousedown'));\n    this._register(onGrabMouseDown.event(e => {\n      const disposables = new DisposableStore();\n      const onWindowMouseMove = disposables.add(new DomEmitter(getWindow(e), 'mousemove'));\n      const onWindowMouseUp = disposables.add(new DomEmitter(getWindow(e), 'mouseup'));\n      const startRight = this.right;\n      const startX = e.pageX;\n      const startTop = this.top;\n      const startY = e.pageY;\n      this.elements.grab.classList.add('grabbing');\n      const transition = this.elements.root.style.transition;\n      this.elements.root.style.transition = 'unset';\n      const update = e => {\n        const deltaX = e.pageX - startX;\n        this.right = startRight - deltaX;\n        const deltaY = e.pageY - startY;\n        this.top = startTop + deltaY;\n        this.layout();\n      };\n      disposables.add(onWindowMouseMove.event(update));\n      disposables.add(onWindowMouseUp.event(e => {\n        update(e);\n        this.elements.grab.classList.remove('grabbing');\n        this.elements.root.style.transition = transition;\n        disposables.dispose();\n      }));\n    }));\n    const onGrabKeyDown = Event.chain(this._register(new DomEmitter(this.elements.grab, 'keydown')).event, $ => $.map(e => new StandardKeyboardEvent(e)));\n    this._register(onGrabKeyDown(e => {\n      let right;\n      let top;\n      if (e.keyCode === 15 /* KeyCode.LeftArrow */) {\n        right = Number.POSITIVE_INFINITY;\n      } else if (e.keyCode === 17 /* KeyCode.RightArrow */) {\n        right = 0;\n      } else if (e.keyCode === 10 /* KeyCode.Space */) {\n        right = this.right === 0 ? Number.POSITIVE_INFINITY : 0;\n      }\n      if (e.keyCode === 16 /* KeyCode.UpArrow */) {\n        top = 0;\n      } else if (e.keyCode === 18 /* KeyCode.DownArrow */) {\n        top = Number.POSITIVE_INFINITY;\n      }\n      if (right !== undefined) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.right = right;\n        this.layout();\n      }\n      if (top !== undefined) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.top = top;\n        const transition = this.elements.root.style.transition;\n        this.elements.root.style.transition = 'unset';\n        this.layout();\n        setTimeout(() => {\n          this.elements.root.style.transition = transition;\n        }, 0);\n      }\n    }));\n    this.onDidChangeValue = this.findInput.onDidChange;\n  }\n  layout(width = this.width) {\n    this.width = width;\n    this.right = clamp(this.right, 0, Math.max(0, width - 212));\n    this.elements.root.style.right = `${this.right}px`;\n    this.top = clamp(this.top, 0, 24);\n    this.elements.root.style.top = `${this.top}px`;\n  }\n  showMessage(message) {\n    this.findInput.showMessage(message);\n  }\n  clearMessage() {\n    this.findInput.clearMessage();\n  }\n  async dispose() {\n    this._onDidDisable.fire();\n    this.elements.root.classList.add('disabled');\n    await timeout(300);\n    super.dispose();\n  }\n}\nclass FindController {\n  get pattern() {\n    return this._pattern;\n  }\n  get mode() {\n    return this._mode;\n  }\n  set mode(mode) {\n    if (mode === this._mode) {\n      return;\n    }\n    this._mode = mode;\n    if (this.widget) {\n      this.widget.mode = this._mode;\n    }\n    this.tree.refilter();\n    this.render();\n    this._onDidChangeMode.fire(mode);\n  }\n  get matchType() {\n    return this._matchType;\n  }\n  set matchType(matchType) {\n    if (matchType === this._matchType) {\n      return;\n    }\n    this._matchType = matchType;\n    if (this.widget) {\n      this.widget.matchType = this._matchType;\n    }\n    this.tree.refilter();\n    this.render();\n    this._onDidChangeMatchType.fire(matchType);\n  }\n  constructor(tree, model, view, filter, contextViewProvider, options = {}) {\n    var _a, _b;\n    this.tree = tree;\n    this.view = view;\n    this.filter = filter;\n    this.contextViewProvider = contextViewProvider;\n    this.options = options;\n    this._pattern = '';\n    this.width = 0;\n    this._onDidChangeMode = new Emitter();\n    this.onDidChangeMode = this._onDidChangeMode.event;\n    this._onDidChangeMatchType = new Emitter();\n    this.onDidChangeMatchType = this._onDidChangeMatchType.event;\n    this._onDidChangePattern = new Emitter();\n    this._onDidChangeOpenState = new Emitter();\n    this.onDidChangeOpenState = this._onDidChangeOpenState.event;\n    this.enabledDisposables = new DisposableStore();\n    this.disposables = new DisposableStore();\n    this._mode = (_a = tree.options.defaultFindMode) !== null && _a !== void 0 ? _a : TreeFindMode.Highlight;\n    this._matchType = (_b = tree.options.defaultFindMatchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy;\n    model.onDidSplice(this.onDidSpliceModel, this, this.disposables);\n  }\n  updateOptions(optionsUpdate = {}) {\n    if (optionsUpdate.defaultFindMode !== undefined) {\n      this.mode = optionsUpdate.defaultFindMode;\n    }\n    if (optionsUpdate.defaultFindMatchType !== undefined) {\n      this.matchType = optionsUpdate.defaultFindMatchType;\n    }\n  }\n  onDidSpliceModel() {\n    if (!this.widget || this.pattern.length === 0) {\n      return;\n    }\n    this.tree.refilter();\n    this.render();\n  }\n  render() {\n    var _a, _b, _c, _d;\n    const noMatches = this.filter.totalCount > 0 && this.filter.matchCount === 0;\n    if (this.pattern && noMatches) {\n      if ((_a = this.tree.options.showNotFoundMessage) !== null && _a !== void 0 ? _a : true) {\n        (_b = this.widget) === null || _b === void 0 ? void 0 : _b.showMessage({\n          type: 2 /* MessageType.WARNING */,\n          content: localize('not found', \"No elements found.\")\n        });\n      } else {\n        (_c = this.widget) === null || _c === void 0 ? void 0 : _c.showMessage({\n          type: 2 /* MessageType.WARNING */\n        });\n      }\n    } else {\n      (_d = this.widget) === null || _d === void 0 ? void 0 : _d.clearMessage();\n    }\n  }\n  shouldAllowFocus(node) {\n    if (!this.widget || !this.pattern || this._mode === TreeFindMode.Filter) {\n      return true;\n    }\n    if (this.filter.totalCount > 0 && this.filter.matchCount <= 1) {\n      return true;\n    }\n    return !FuzzyScore.isDefault(node.filterData);\n  }\n  layout(width) {\n    var _a;\n    this.width = width;\n    (_a = this.widget) === null || _a === void 0 ? void 0 : _a.layout(width);\n  }\n  dispose() {\n    this._history = undefined;\n    this._onDidChangePattern.dispose();\n    this.enabledDisposables.dispose();\n    this.disposables.dispose();\n  }\n}\nfunction stickyScrollNodeEquals(node1, node2) {\n  return node1.position === node2.position && node1.node.element === node2.node.element && node1.startIndex === node2.startIndex && node1.height === node2.height && node1.endIndex === node2.endIndex;\n}\nclass StickyScrollState extends Disposable {\n  constructor(stickyNodes = []) {\n    super();\n    this.stickyNodes = stickyNodes;\n  }\n  get count() {\n    return this.stickyNodes.length;\n  }\n  equal(state) {\n    return equals(this.stickyNodes, state.stickyNodes, stickyScrollNodeEquals);\n  }\n  addDisposable(disposable) {\n    this._register(disposable);\n  }\n}\nclass StickyScrollController extends Disposable {\n  get firstVisibleNode() {\n    const index = this.view.firstVisibleIndex;\n    if (index < 0 || index >= this.view.length) {\n      return undefined;\n    }\n    return this.view.element(index);\n  }\n  constructor(tree, model, view, renderers, treeDelegate, options = {}) {\n    super();\n    this.tree = tree;\n    this.model = model;\n    this.view = view;\n    this.treeDelegate = treeDelegate;\n    this.maxWidgetViewRatio = 0.4;\n    const stickyScrollOptions = this.validateStickySettings(options);\n    this.stickyScrollMaxItemCount = stickyScrollOptions.stickyScrollMaxItemCount;\n    this._widget = this._register(new StickyScrollWidget(view.getScrollableElement(), view, model, renderers, treeDelegate));\n    this._register(view.onDidScroll(() => this.update()));\n    this._register(view.onDidChangeContentHeight(() => this.update()));\n    this._register(tree.onDidChangeCollapseState(() => this.update()));\n    this.update();\n  }\n  update() {\n    const firstVisibleNode = this.firstVisibleNode;\n    // Don't render anything if there are no elements\n    if (!firstVisibleNode || this.tree.scrollTop === 0) {\n      this._widget.setState(undefined);\n      return;\n    }\n    const stickyState = this.findStickyState(firstVisibleNode);\n    this._widget.setState(stickyState);\n  }\n  findStickyState(firstVisibleNode) {\n    const stickyNodes = [];\n    const maximumStickyWidgetHeight = this.view.renderHeight * this.maxWidgetViewRatio;\n    let firstVisibleNodeUnderWidget = firstVisibleNode;\n    let stickyNodesHeight = 0;\n    let nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, undefined, stickyNodesHeight);\n    while (nextStickyNode && stickyNodesHeight + nextStickyNode.height < maximumStickyWidgetHeight) {\n      stickyNodes.push(nextStickyNode);\n      stickyNodesHeight += nextStickyNode.height;\n      if (stickyNodes.length >= this.stickyScrollMaxItemCount) {\n        break;\n      }\n      firstVisibleNodeUnderWidget = this.getNextVisibleNode(firstVisibleNodeUnderWidget);\n      if (!firstVisibleNodeUnderWidget) {\n        break;\n      }\n      nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, nextStickyNode.node, stickyNodesHeight);\n    }\n    return stickyNodes.length ? new StickyScrollState(stickyNodes) : undefined;\n  }\n  getNextVisibleNode(node) {\n    const nodeIndex = this.getNodeIndex(node);\n    if (nodeIndex === -1 || nodeIndex === this.view.length - 1) {\n      return undefined;\n    }\n    const nextNode = this.view.element(nodeIndex + 1);\n    return nextNode;\n  }\n  getNextStickyNode(firstVisibleNodeUnderWidget, previousStickyNode, stickyNodesHeight) {\n    const nextStickyNode = this.getAncestorUnderPrevious(firstVisibleNodeUnderWidget, previousStickyNode);\n    if (!nextStickyNode) {\n      return undefined;\n    }\n    if (nextStickyNode === firstVisibleNodeUnderWidget) {\n      if (!this.nodeIsUncollapsedParent(firstVisibleNodeUnderWidget)) {\n        return undefined;\n      }\n      if (this.nodeTopAlignsWithStickyNodesBottom(firstVisibleNodeUnderWidget, stickyNodesHeight)) {\n        return undefined;\n      }\n    }\n    return this.createStickyScrollNode(nextStickyNode, stickyNodesHeight);\n  }\n  nodeTopAlignsWithStickyNodesBottom(node, stickyNodesHeight) {\n    const nodeIndex = this.getNodeIndex(node);\n    const elementTop = this.view.getElementTop(nodeIndex);\n    const stickyPosition = stickyNodesHeight;\n    return this.view.scrollTop === elementTop - stickyPosition;\n  }\n  createStickyScrollNode(node, currentStickyNodesHeight) {\n    const height = this.treeDelegate.getHeight(node);\n    const {\n      startIndex,\n      endIndex\n    } = this.getNodeRange(node);\n    const position = this.calculateStickyNodePosition(endIndex, currentStickyNodesHeight);\n    return {\n      node,\n      position,\n      height,\n      startIndex,\n      endIndex\n    };\n  }\n  getAncestorUnderPrevious(node, previousAncestor = undefined) {\n    let currentAncestor = node;\n    let parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n    while (parentOfcurrentAncestor) {\n      if (parentOfcurrentAncestor === previousAncestor) {\n        return currentAncestor;\n      }\n      currentAncestor = parentOfcurrentAncestor;\n      parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n    }\n    if (previousAncestor === undefined) {\n      return currentAncestor;\n    }\n    return undefined;\n  }\n  calculateStickyNodePosition(lastDescendantIndex, stickyRowPositionTop) {\n    let lastChildRelativeTop = this.view.getRelativeTop(lastDescendantIndex);\n    // If the last descendant is only partially visible at the top of the view, getRelativeTop() returns null\n    // In that case, utilize the next node's relative top to calculate the sticky node's position\n    if (lastChildRelativeTop === null && this.view.firstVisibleIndex === lastDescendantIndex && lastDescendantIndex + 1 < this.view.length) {\n      const nodeHeight = this.treeDelegate.getHeight(this.view.element(lastDescendantIndex));\n      const nextNodeRelativeTop = this.view.getRelativeTop(lastDescendantIndex + 1);\n      lastChildRelativeTop = nextNodeRelativeTop ? nextNodeRelativeTop - nodeHeight / this.view.renderHeight : null;\n    }\n    if (lastChildRelativeTop === null) {\n      return stickyRowPositionTop;\n    }\n    const lastChildNode = this.view.element(lastDescendantIndex);\n    const lastChildHeight = this.treeDelegate.getHeight(lastChildNode);\n    const topOfLastChild = lastChildRelativeTop * this.view.renderHeight;\n    const bottomOfLastChild = topOfLastChild + lastChildHeight;\n    if (stickyRowPositionTop > topOfLastChild && stickyRowPositionTop <= bottomOfLastChild) {\n      return topOfLastChild;\n    }\n    return stickyRowPositionTop;\n  }\n  getParentNode(node) {\n    const nodeLocation = this.model.getNodeLocation(node);\n    const parentLocation = this.model.getParentNodeLocation(nodeLocation);\n    return parentLocation ? this.model.getNode(parentLocation) : undefined;\n  }\n  nodeIsUncollapsedParent(node) {\n    const nodeLocation = this.model.getNodeLocation(node);\n    return this.model.getListRenderCount(nodeLocation) > 1;\n  }\n  getNodeIndex(node, nodeLocation) {\n    if (nodeLocation === undefined) {\n      nodeLocation = this.model.getNodeLocation(node);\n    }\n    const nodeIndex = this.model.getListIndex(nodeLocation);\n    return nodeIndex;\n  }\n  getNodeRange(node) {\n    const nodeLocation = this.model.getNodeLocation(node);\n    const startIndex = this.model.getListIndex(nodeLocation);\n    if (startIndex < 0) {\n      throw new Error('Node not found in tree');\n    }\n    const renderCount = this.model.getListRenderCount(nodeLocation);\n    const endIndex = startIndex + renderCount - 1;\n    return {\n      startIndex,\n      endIndex\n    };\n  }\n  nodePositionTopBelowWidget(node) {\n    const ancestors = [];\n    let currentAncestor = this.getParentNode(node);\n    while (currentAncestor) {\n      ancestors.push(currentAncestor);\n      currentAncestor = this.getParentNode(currentAncestor);\n    }\n    let widgetHeight = 0;\n    for (let i = 0; i < ancestors.length && i < this.stickyScrollMaxItemCount; i++) {\n      widgetHeight += this.treeDelegate.getHeight(ancestors[i]);\n    }\n    return widgetHeight;\n  }\n  updateOptions(optionsUpdate = {}) {\n    const validatedOptions = this.validateStickySettings(optionsUpdate);\n    if (this.stickyScrollMaxItemCount !== validatedOptions.stickyScrollMaxItemCount) {\n      this.stickyScrollMaxItemCount = validatedOptions.stickyScrollMaxItemCount;\n      this.update();\n    }\n  }\n  validateStickySettings(options) {\n    let stickyScrollMaxItemCount = 5;\n    if (typeof options.stickyScrollMaxItemCount === 'number') {\n      stickyScrollMaxItemCount = Math.max(options.stickyScrollMaxItemCount, 1);\n    }\n    return {\n      stickyScrollMaxItemCount\n    };\n  }\n}\nclass StickyScrollWidget {\n  constructor(container, view, model, treeRenderers, treeDelegate) {\n    this.view = view;\n    this.model = model;\n    this.treeRenderers = treeRenderers;\n    this.treeDelegate = treeDelegate;\n    this._rootDomNode = document.createElement('div');\n    this._rootDomNode.classList.add('monaco-tree-sticky-container');\n    container.appendChild(this._rootDomNode);\n  }\n  setState(state) {\n    var _a;\n    const wasVisible = !!this._previousState && this._previousState.count > 0;\n    const isVisible = !!state && state.count > 0;\n    // If state has not changed, do nothing\n    if (!wasVisible && !isVisible || wasVisible && isVisible && this._previousState.equal(state)) {\n      return;\n    }\n    // Update visibility of the widget if changed\n    if (wasVisible !== isVisible) {\n      this.setVisible(isVisible);\n    }\n    // Remove previous state\n    (_a = this._previousState) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._previousState = state;\n    if (!isVisible) {\n      return;\n    }\n    for (let stickyIndex = state.count - 1; stickyIndex >= 0; stickyIndex--) {\n      const stickyNode = state.stickyNodes[stickyIndex];\n      const previousStickyNode = stickyIndex ? state.stickyNodes[stickyIndex - 1] : undefined;\n      const currentWidgetHieght = previousStickyNode ? previousStickyNode.position + previousStickyNode.height : 0;\n      const {\n        element,\n        disposable\n      } = this.createElement(stickyNode, currentWidgetHieght);\n      this._rootDomNode.appendChild(element);\n      state.addDisposable(disposable);\n    }\n    // Add shadow element to the end of the widget\n    const shadow = $('.monaco-tree-sticky-container-shadow');\n    this._rootDomNode.appendChild(shadow);\n    state.addDisposable(toDisposable(() => shadow.remove()));\n    // Set the height of the widget to the bottom of the last sticky node\n    const lastStickyNode = state.stickyNodes[state.count - 1];\n    this._rootDomNode.style.height = `${lastStickyNode.position + lastStickyNode.height}px`;\n  }\n  createElement(stickyNode, currentWidgetHeight) {\n    const nodeLocation = this.model.getNodeLocation(stickyNode.node);\n    const nodeIndex = this.model.getListIndex(nodeLocation);\n    // Sticky element container\n    const stickyElement = document.createElement('div');\n    stickyElement.style.top = `${stickyNode.position}px`;\n    stickyElement.style.height = `${stickyNode.height}px`;\n    stickyElement.style.lineHeight = `${stickyNode.height}px`;\n    stickyElement.classList.add('monaco-tree-sticky-row');\n    stickyElement.classList.add('monaco-list-row');\n    stickyElement.setAttribute('data-index', `${nodeIndex}`);\n    stickyElement.setAttribute('data-parity', nodeIndex % 2 === 0 ? 'even' : 'odd');\n    stickyElement.setAttribute('id', this.view.getElementID(nodeIndex));\n    // Get the renderer for the node\n    const nodeTemplateId = this.treeDelegate.getTemplateId(stickyNode.node);\n    const renderer = this.treeRenderers.find(renderer => renderer.templateId === nodeTemplateId);\n    if (!renderer) {\n      throw new Error(`No renderer found for template id ${nodeTemplateId}`);\n    }\n    const nodeCopy = new Proxy(stickyNode.node, {});\n    // Render the element\n    const templateData = renderer.renderTemplate(stickyElement);\n    renderer.renderElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n    // Remove the element from the DOM when state is disposed\n    const disposable = toDisposable(() => {\n      renderer.disposeElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n      renderer.disposeTemplate(templateData);\n      stickyElement.remove();\n    });\n    return {\n      element: stickyElement,\n      disposable\n    };\n  }\n  setVisible(visible) {\n    this._rootDomNode.style.display = visible ? 'block' : 'none';\n  }\n  dispose() {\n    var _a;\n    (_a = this._previousState) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._rootDomNode.remove();\n  }\n}\nfunction asTreeMouseEvent(event) {\n  let target = TreeMouseEventTarget.Unknown;\n  if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-twistie', 'monaco-tl-row')) {\n    target = TreeMouseEventTarget.Twistie;\n  } else if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-contents', 'monaco-tl-row')) {\n    target = TreeMouseEventTarget.Element;\n  } else if (hasParentWithClass(event.browserEvent.target, 'monaco-tree-type-filter', 'monaco-list')) {\n    target = TreeMouseEventTarget.Filter;\n  }\n  return {\n    browserEvent: event.browserEvent,\n    element: event.element ? event.element.element : null,\n    target\n  };\n}\nfunction dfs(node, fn) {\n  fn(node);\n  node.children.forEach(child => dfs(child, fn));\n}\n/**\n * The trait concept needs to exist at the tree level, because collapsed\n * tree nodes will not be known by the list.\n */\nclass Trait {\n  get nodeSet() {\n    if (!this._nodeSet) {\n      this._nodeSet = this.createNodeSet();\n    }\n    return this._nodeSet;\n  }\n  constructor(getFirstViewElementWithTrait, identityProvider) {\n    this.getFirstViewElementWithTrait = getFirstViewElementWithTrait;\n    this.identityProvider = identityProvider;\n    this.nodes = [];\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n  }\n  set(nodes, browserEvent) {\n    if (!(browserEvent === null || browserEvent === void 0 ? void 0 : browserEvent.__forceEvent) && equals(this.nodes, nodes)) {\n      return;\n    }\n    this._set(nodes, false, browserEvent);\n  }\n  _set(nodes, silent, browserEvent) {\n    this.nodes = [...nodes];\n    this.elements = undefined;\n    this._nodeSet = undefined;\n    if (!silent) {\n      const that = this;\n      this._onDidChange.fire({\n        get elements() {\n          return that.get();\n        },\n        browserEvent\n      });\n    }\n  }\n  get() {\n    if (!this.elements) {\n      this.elements = this.nodes.map(node => node.element);\n    }\n    return [...this.elements];\n  }\n  getNodes() {\n    return this.nodes;\n  }\n  has(node) {\n    return this.nodeSet.has(node);\n  }\n  onDidModelSplice({\n    insertedNodes,\n    deletedNodes\n  }) {\n    if (!this.identityProvider) {\n      const set = this.createNodeSet();\n      const visit = node => set.delete(node);\n      deletedNodes.forEach(node => dfs(node, visit));\n      this.set([...set.values()]);\n      return;\n    }\n    const deletedNodesIdSet = new Set();\n    const deletedNodesVisitor = node => deletedNodesIdSet.add(this.identityProvider.getId(node.element).toString());\n    deletedNodes.forEach(node => dfs(node, deletedNodesVisitor));\n    const insertedNodesMap = new Map();\n    const insertedNodesVisitor = node => insertedNodesMap.set(this.identityProvider.getId(node.element).toString(), node);\n    insertedNodes.forEach(node => dfs(node, insertedNodesVisitor));\n    const nodes = [];\n    for (const node of this.nodes) {\n      const id = this.identityProvider.getId(node.element).toString();\n      const wasDeleted = deletedNodesIdSet.has(id);\n      if (!wasDeleted) {\n        nodes.push(node);\n      } else {\n        const insertedNode = insertedNodesMap.get(id);\n        if (insertedNode && insertedNode.visible) {\n          nodes.push(insertedNode);\n        }\n      }\n    }\n    if (this.nodes.length > 0 && nodes.length === 0) {\n      const node = this.getFirstViewElementWithTrait();\n      if (node) {\n        nodes.push(node);\n      }\n    }\n    this._set(nodes, true);\n  }\n  createNodeSet() {\n    const set = new Set();\n    for (const node of this.nodes) {\n      set.add(node);\n    }\n    return set;\n  }\n}\nclass TreeNodeListMouseController extends MouseController {\n  constructor(list, tree, stickyScrollProvider) {\n    super(list);\n    this.tree = tree;\n    this.stickyScrollProvider = stickyScrollProvider;\n  }\n  onViewPointer(e) {\n    if (isButton(e.browserEvent.target) || isInputElement(e.browserEvent.target) || isMonacoEditor(e.browserEvent.target)) {\n      return;\n    }\n    if (e.browserEvent.isHandledByList) {\n      return;\n    }\n    const node = e.element;\n    if (!node) {\n      return super.onViewPointer(e);\n    }\n    if (this.isSelectionRangeChangeEvent(e) || this.isSelectionSingleChangeEvent(e)) {\n      return super.onViewPointer(e);\n    }\n    const target = e.browserEvent.target;\n    const onTwistie = target.classList.contains('monaco-tl-twistie') || target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && e.browserEvent.offsetX < 16;\n    const isStickyElement = isStickyScrollElement(e.browserEvent.target);\n    let expandOnlyOnTwistieClick = false;\n    if (isStickyElement) {\n      expandOnlyOnTwistieClick = true;\n    } else if (typeof this.tree.expandOnlyOnTwistieClick === 'function') {\n      expandOnlyOnTwistieClick = this.tree.expandOnlyOnTwistieClick(node.element);\n    } else {\n      expandOnlyOnTwistieClick = !!this.tree.expandOnlyOnTwistieClick;\n    }\n    if (!isStickyElement) {\n      if (expandOnlyOnTwistieClick && !onTwistie && e.browserEvent.detail !== 2) {\n        return super.onViewPointer(e);\n      }\n      if (!this.tree.expandOnDoubleClick && e.browserEvent.detail === 2) {\n        return super.onViewPointer(e);\n      }\n    } else {\n      this.handleStickyScrollMouseEvent(e, node);\n    }\n    if (node.collapsible && (!isStickyElement || onTwistie)) {\n      const location = this.tree.getNodeLocation(node);\n      const recursive = e.browserEvent.altKey;\n      this.tree.setFocus([location]);\n      this.tree.toggleCollapsed(location, recursive);\n      if (expandOnlyOnTwistieClick && onTwistie) {\n        // Do not set this before calling a handler on the super class, because it will reject it as handled\n        e.browserEvent.isHandledByList = true;\n        return;\n      }\n    }\n    if (!isStickyElement) {\n      super.onViewPointer(e);\n    }\n  }\n  handleStickyScrollMouseEvent(e, node) {\n    if (isMonacoCustomToggle(e.browserEvent.target) || isActionItem(e.browserEvent.target)) {\n      return;\n    }\n    const stickyScrollController = this.stickyScrollProvider();\n    if (!stickyScrollController) {\n      throw new Error('Sticky scroll controller not found');\n    }\n    const nodeIndex = this.list.indexOf(node);\n    const elementScrollTop = this.list.getElementTop(nodeIndex);\n    const elementTargetViewTop = stickyScrollController.nodePositionTopBelowWidget(node);\n    this.tree.scrollTop = elementScrollTop - elementTargetViewTop;\n    this.list.setFocus([nodeIndex]);\n    this.list.setSelection([nodeIndex]);\n  }\n  onDoubleClick(e) {\n    const onTwistie = e.browserEvent.target.classList.contains('monaco-tl-twistie');\n    if (onTwistie || !this.tree.expandOnDoubleClick) {\n      return;\n    }\n    if (e.browserEvent.isHandledByList) {\n      return;\n    }\n    super.onDoubleClick(e);\n  }\n}\n/**\n * We use this List subclass to restore selection and focus as nodes\n * get rendered in the list, possibly due to a node expand() call.\n */\nclass TreeNodeList extends List {\n  constructor(user, container, virtualDelegate, renderers, focusTrait, selectionTrait, anchorTrait, options) {\n    super(user, container, virtualDelegate, renderers, options);\n    this.focusTrait = focusTrait;\n    this.selectionTrait = selectionTrait;\n    this.anchorTrait = anchorTrait;\n  }\n  createMouseController(options) {\n    return new TreeNodeListMouseController(this, options.tree, options.stickyScrollProvider);\n  }\n  splice(start, deleteCount, elements = []) {\n    super.splice(start, deleteCount, elements);\n    if (elements.length === 0) {\n      return;\n    }\n    const additionalFocus = [];\n    const additionalSelection = [];\n    let anchor;\n    elements.forEach((node, index) => {\n      if (this.focusTrait.has(node)) {\n        additionalFocus.push(start + index);\n      }\n      if (this.selectionTrait.has(node)) {\n        additionalSelection.push(start + index);\n      }\n      if (this.anchorTrait.has(node)) {\n        anchor = start + index;\n      }\n    });\n    if (additionalFocus.length > 0) {\n      super.setFocus(distinct([...super.getFocus(), ...additionalFocus]));\n    }\n    if (additionalSelection.length > 0) {\n      super.setSelection(distinct([...super.getSelection(), ...additionalSelection]));\n    }\n    if (typeof anchor === 'number') {\n      super.setAnchor(anchor);\n    }\n  }\n  setFocus(indexes, browserEvent, fromAPI = false) {\n    super.setFocus(indexes, browserEvent);\n    if (!fromAPI) {\n      this.focusTrait.set(indexes.map(i => this.element(i)), browserEvent);\n    }\n  }\n  setSelection(indexes, browserEvent, fromAPI = false) {\n    super.setSelection(indexes, browserEvent);\n    if (!fromAPI) {\n      this.selectionTrait.set(indexes.map(i => this.element(i)), browserEvent);\n    }\n  }\n  setAnchor(index, fromAPI = false) {\n    super.setAnchor(index);\n    if (!fromAPI) {\n      if (typeof index === 'undefined') {\n        this.anchorTrait.set([]);\n      } else {\n        this.anchorTrait.set([this.element(index)]);\n      }\n    }\n  }\n}\nexport class AbstractTree {\n  get onDidScroll() {\n    return this.view.onDidScroll;\n  }\n  get onDidChangeFocus() {\n    return this.eventBufferer.wrapEvent(this.focus.onDidChange);\n  }\n  get onDidChangeSelection() {\n    return this.eventBufferer.wrapEvent(this.selection.onDidChange);\n  }\n  get onMouseDblClick() {\n    return Event.filter(Event.map(this.view.onMouseDblClick, asTreeMouseEvent), e => e.target !== TreeMouseEventTarget.Filter);\n  }\n  get onPointer() {\n    return Event.map(this.view.onPointer, asTreeMouseEvent);\n  }\n  get onDidFocus() {\n    return this.view.onDidFocus;\n  }\n  get onDidChangeModel() {\n    return Event.signal(this.model.onDidSplice);\n  }\n  get onDidChangeCollapseState() {\n    return this.model.onDidChangeCollapseState;\n  }\n  get findMode() {\n    var _a, _b;\n    return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : TreeFindMode.Highlight;\n  }\n  set findMode(findMode) {\n    if (this.findController) {\n      this.findController.mode = findMode;\n    }\n  }\n  get findMatchType() {\n    var _a, _b;\n    return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.matchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy;\n  }\n  set findMatchType(findFuzzy) {\n    if (this.findController) {\n      this.findController.matchType = findFuzzy;\n    }\n  }\n  get expandOnDoubleClick() {\n    return typeof this._options.expandOnDoubleClick === 'undefined' ? true : this._options.expandOnDoubleClick;\n  }\n  get expandOnlyOnTwistieClick() {\n    return typeof this._options.expandOnlyOnTwistieClick === 'undefined' ? true : this._options.expandOnlyOnTwistieClick;\n  }\n  get onDidDispose() {\n    return this.view.onDidDispose;\n  }\n  constructor(_user, container, delegate, renderers, _options = {}) {\n    var _a;\n    this._user = _user;\n    this._options = _options;\n    this.eventBufferer = new EventBufferer();\n    this.onDidChangeFindOpenState = Event.None;\n    this.disposables = new DisposableStore();\n    this._onWillRefilter = new Emitter();\n    this.onWillRefilter = this._onWillRefilter.event;\n    this._onDidUpdateOptions = new Emitter();\n    this.treeDelegate = new ComposedTreeDelegate(delegate);\n    const onDidChangeCollapseStateRelay = new Relay();\n    const onDidChangeActiveNodes = new Relay();\n    const activeNodes = this.disposables.add(new EventCollection(onDidChangeActiveNodes.event));\n    const renderedIndentGuides = new SetMap();\n    this.renderers = renderers.map(r => new TreeRenderer(r, () => this.model, onDidChangeCollapseStateRelay.event, activeNodes, renderedIndentGuides, _options));\n    for (const r of this.renderers) {\n      this.disposables.add(r);\n    }\n    let filter;\n    if (_options.keyboardNavigationLabelProvider) {\n      filter = new FindFilter(this, _options.keyboardNavigationLabelProvider, _options.filter);\n      _options = {\n        ..._options,\n        filter: filter\n      }; // TODO need typescript help here\n      this.disposables.add(filter);\n    }\n    this.focus = new Trait(() => this.view.getFocusedElements()[0], _options.identityProvider);\n    this.selection = new Trait(() => this.view.getSelectedElements()[0], _options.identityProvider);\n    this.anchor = new Trait(() => this.view.getAnchorElement(), _options.identityProvider);\n    this.view = new TreeNodeList(_user, container, this.treeDelegate, this.renderers, this.focus, this.selection, this.anchor, {\n      ...asListOptions(() => this.model, _options),\n      tree: this,\n      stickyScrollProvider: () => this.stickyScrollController\n    });\n    this.model = this.createModel(_user, this.view, _options);\n    onDidChangeCollapseStateRelay.input = this.model.onDidChangeCollapseState;\n    const onDidModelSplice = Event.forEach(this.model.onDidSplice, e => {\n      this.eventBufferer.bufferEvents(() => {\n        this.focus.onDidModelSplice(e);\n        this.selection.onDidModelSplice(e);\n      });\n    }, this.disposables);\n    // Make sure the `forEach` always runs\n    onDidModelSplice(() => null, null, this.disposables);\n    // Active nodes can change when the model changes or when focus or selection change.\n    // We debounce it with 0 delay since these events may fire in the same stack and we only\n    // want to run this once. It also doesn't matter if it runs on the next tick since it's only\n    // a nice to have UI feature.\n    const activeNodesEmitter = this.disposables.add(new Emitter());\n    const activeNodesDebounce = this.disposables.add(new Delayer(0));\n    this.disposables.add(Event.any(onDidModelSplice, this.focus.onDidChange, this.selection.onDidChange)(() => {\n      activeNodesDebounce.trigger(() => {\n        const set = new Set();\n        for (const node of this.focus.getNodes()) {\n          set.add(node);\n        }\n        for (const node of this.selection.getNodes()) {\n          set.add(node);\n        }\n        activeNodesEmitter.fire([...set.values()]);\n      });\n    }));\n    onDidChangeActiveNodes.input = activeNodesEmitter.event;\n    if (_options.keyboardSupport !== false) {\n      const onKeyDown = Event.chain(this.view.onKeyDown, $ => $.filter(e => !isInputElement(e.target)).map(e => new StandardKeyboardEvent(e)));\n      Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 15 /* KeyCode.LeftArrow */))(this.onLeftArrow, this, this.disposables);\n      Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 17 /* KeyCode.RightArrow */))(this.onRightArrow, this, this.disposables);\n      Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 10 /* KeyCode.Space */))(this.onSpace, this, this.disposables);\n    }\n    if (((_a = _options.findWidgetEnabled) !== null && _a !== void 0 ? _a : true) && _options.keyboardNavigationLabelProvider && _options.contextViewProvider) {\n      const opts = this.options.findWidgetStyles ? {\n        styles: this.options.findWidgetStyles\n      } : undefined;\n      this.findController = new FindController(this, this.model, this.view, filter, _options.contextViewProvider, opts);\n      this.focusNavigationFilter = node => this.findController.shouldAllowFocus(node);\n      this.onDidChangeFindOpenState = this.findController.onDidChangeOpenState;\n      this.disposables.add(this.findController);\n      this.onDidChangeFindMode = this.findController.onDidChangeMode;\n      this.onDidChangeFindMatchType = this.findController.onDidChangeMatchType;\n    } else {\n      this.onDidChangeFindMode = Event.None;\n      this.onDidChangeFindMatchType = Event.None;\n    }\n    if (_options.enableStickyScroll) {\n      this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, _options);\n    }\n    this.styleElement = createStyleSheet(this.view.getHTMLElement());\n    this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n  }\n  updateOptions(optionsUpdate = {}) {\n    var _a;\n    this._options = {\n      ...this._options,\n      ...optionsUpdate\n    };\n    for (const renderer of this.renderers) {\n      renderer.updateOptions(optionsUpdate);\n    }\n    this.view.updateOptions(this._options);\n    (_a = this.findController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n    this.updateStickyScroll(optionsUpdate);\n    this._onDidUpdateOptions.fire(this._options);\n    this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n  }\n  get options() {\n    return this._options;\n  }\n  updateStickyScroll(optionsUpdate) {\n    var _a;\n    if (!this.stickyScrollController && this._options.enableStickyScroll) {\n      this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, this._options);\n    } else if (this.stickyScrollController && !this._options.enableStickyScroll) {\n      this.stickyScrollController.dispose();\n      this.stickyScrollController = undefined;\n    }\n    (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n  }\n  // Widget\n  getHTMLElement() {\n    return this.view.getHTMLElement();\n  }\n  get scrollTop() {\n    return this.view.scrollTop;\n  }\n  set scrollTop(scrollTop) {\n    this.view.scrollTop = scrollTop;\n  }\n  get scrollHeight() {\n    return this.view.scrollHeight;\n  }\n  get renderHeight() {\n    return this.view.renderHeight;\n  }\n  domFocus() {\n    this.view.domFocus();\n  }\n  layout(height, width) {\n    var _a;\n    this.view.layout(height, width);\n    if (isNumber(width)) {\n      (_a = this.findController) === null || _a === void 0 ? void 0 : _a.layout(width);\n    }\n  }\n  style(styles) {\n    const suffix = `.${this.view.domId}`;\n    const content = [];\n    if (styles.treeIndentGuidesStroke) {\n      content.push(`.monaco-list${suffix}:hover .monaco-tl-indent > .indent-guide, .monaco-list${suffix}.always .monaco-tl-indent > .indent-guide  { border-color: ${styles.treeInactiveIndentGuidesStroke}; }`);\n      content.push(`.monaco-list${suffix} .monaco-tl-indent > .indent-guide.active { border-color: ${styles.treeIndentGuidesStroke}; }`);\n    }\n    if (styles.listBackground) {\n      content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { background-color: ${styles.listBackground}; }`);\n      content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-row { background-color: ${styles.listBackground}; }`);\n    }\n    this.styleElement.textContent = content.join('\\n');\n    this.view.style(styles);\n  }\n  // Tree navigation\n  getParentElement(location) {\n    const parentRef = this.model.getParentNodeLocation(location);\n    const parentNode = this.model.getNode(parentRef);\n    return parentNode.element;\n  }\n  getFirstElementChild(location) {\n    return this.model.getFirstElementChild(location);\n  }\n  // Tree\n  getNode(location) {\n    return this.model.getNode(location);\n  }\n  getNodeLocation(node) {\n    return this.model.getNodeLocation(node);\n  }\n  collapse(location, recursive = false) {\n    return this.model.setCollapsed(location, true, recursive);\n  }\n  expand(location, recursive = false) {\n    return this.model.setCollapsed(location, false, recursive);\n  }\n  toggleCollapsed(location, recursive = false) {\n    return this.model.setCollapsed(location, undefined, recursive);\n  }\n  isCollapsible(location) {\n    return this.model.isCollapsible(location);\n  }\n  setCollapsible(location, collapsible) {\n    return this.model.setCollapsible(location, collapsible);\n  }\n  isCollapsed(location) {\n    return this.model.isCollapsed(location);\n  }\n  refilter() {\n    this._onWillRefilter.fire(undefined);\n    this.model.refilter();\n  }\n  setSelection(elements, browserEvent) {\n    const nodes = elements.map(e => this.model.getNode(e));\n    this.selection.set(nodes, browserEvent);\n    const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n    this.view.setSelection(indexes, browserEvent, true);\n  }\n  getSelection() {\n    return this.selection.get();\n  }\n  setFocus(elements, browserEvent) {\n    const nodes = elements.map(e => this.model.getNode(e));\n    this.focus.set(nodes, browserEvent);\n    const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n    this.view.setFocus(indexes, browserEvent, true);\n  }\n  getFocus() {\n    return this.focus.get();\n  }\n  reveal(location, relativeTop) {\n    this.model.expandTo(location);\n    const index = this.model.getListIndex(location);\n    if (index === -1) {\n      return;\n    }\n    if (!this.stickyScrollController) {\n      this.view.reveal(index, relativeTop);\n    } else {\n      const paddingTop = this.stickyScrollController.nodePositionTopBelowWidget(this.getNode(location));\n      this.view.reveal(index, relativeTop, paddingTop);\n    }\n  }\n  // List\n  onLeftArrow(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const nodes = this.view.getFocusedElements();\n    if (nodes.length === 0) {\n      return;\n    }\n    const node = nodes[0];\n    const location = this.model.getNodeLocation(node);\n    const didChange = this.model.setCollapsed(location, true);\n    if (!didChange) {\n      const parentLocation = this.model.getParentNodeLocation(location);\n      if (!parentLocation) {\n        return;\n      }\n      const parentListIndex = this.model.getListIndex(parentLocation);\n      this.view.reveal(parentListIndex);\n      this.view.setFocus([parentListIndex]);\n    }\n  }\n  onRightArrow(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const nodes = this.view.getFocusedElements();\n    if (nodes.length === 0) {\n      return;\n    }\n    const node = nodes[0];\n    const location = this.model.getNodeLocation(node);\n    const didChange = this.model.setCollapsed(location, false);\n    if (!didChange) {\n      if (!node.children.some(child => child.visible)) {\n        return;\n      }\n      const [focusedIndex] = this.view.getFocus();\n      const firstChildIndex = focusedIndex + 1;\n      this.view.reveal(firstChildIndex);\n      this.view.setFocus([firstChildIndex]);\n    }\n  }\n  onSpace(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const nodes = this.view.getFocusedElements();\n    if (nodes.length === 0) {\n      return;\n    }\n    const node = nodes[0];\n    const location = this.model.getNodeLocation(node);\n    const recursive = e.browserEvent.altKey;\n    this.model.setCollapsed(location, undefined, recursive);\n  }\n  dispose() {\n    var _a;\n    dispose(this.disposables);\n    (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.dispose();\n    this.view.dispose();\n  }\n}","map":{"version":3,"names":["$","append","clearNode","createStyleSheet","getWindow","h","hasParentWithClass","DomEmitter","StandardKeyboardEvent","ActionBar","FindInput","unthemedInboxStyles","ElementsDragAndDropData","isActionItem","isButton","isInputElement","isMonacoCustomToggle","isMonacoEditor","isStickyScrollElement","List","MouseController","Toggle","unthemedToggleStyles","getVisibleState","isFilterResult","TreeMouseEventTarget","Action","distinct","equals","range","Delayer","disposableTimeout","timeout","Codicon","ThemeIcon","SetMap","Emitter","Event","EventBufferer","Relay","fuzzyScore","FuzzyScore","Disposable","DisposableStore","dispose","toDisposable","clamp","isNumber","localize","TreeElementsDragAndDropData","constructor","data","elements","map","node","element","asTreeDragAndDropData","TreeNodeListDragAndDrop","modelProvider","dnd","autoExpandDisposable","None","disposables","getDragURI","getDragLabel","nodes","originalEvent","undefined","onDragStart","_a","_b","call","onDragOver","targetNode","targetIndex","raw","result","didChangeAutoExpandNode","autoExpandNode","autoExpand","model","ref","getNodeLocation","isCollapsed","setCollapsed","accept","bubble","feedback","effect","parentRef","getParentNodeLocation","parentNode","getNode","parentIndex","getListIndex","start","length","getListRenderCount","drop","onDragEnd","asListOptions","options","identityProvider","getId","el","multipleSelectionController","isSelectionSingleChangeEvent","e","isSelectionRangeChangeEvent","accessibilityProvider","getSetSize","visibleChildrenCount","getPosInSet","visibleChildIndex","isChecked","getRole","getAriaLabel","getWidgetAriaLabel","getWidgetRole","getAriaLevel","depth","getActiveDescendantId","keyboardNavigationLabelProvider","getKeyboardNavigationLabel","ComposedTreeDelegate","delegate","getHeight","getTemplateId","hasDynamicHeight","setDynamicHeight","height","RenderIndentGuides","EventCollection","_elements","onDidChange","forEach","TreeRenderer","renderer","onDidChangeCollapseState","activeNodes","renderedIndentGuides","renderedElements","Map","renderedNodes","indent","DefaultIndent","hideTwistiesOfChildlessElements","shouldRenderIndentGuides","activeIndentNodes","Set","indentGuidesDisposable","templateId","updateOptions","onDidChangeNodeTwistieState","onDidChangeTwistieState","templateData","renderTreeElement","renderIndentGuides","_renderIndentGuides","_onDidChangeActiveNodes","renderTemplate","container","twistie","contents","renderElement","index","set","disposeElement","delete","disposeTemplate","get","style","paddingLeft","width","collapsible","setAttribute","String","collapsed","removeAttribute","classList","remove","asClassNameArray","treeItemExpanded","twistieRendered","renderTwistie","add","toggle","disposableStore","parent","guide","has","childElementCount","appendChild","insertBefore","firstElementChild","children","line","clear","FindFilter","totalCount","_totalCount","matchCount","_matchCount","tree","_filter","_pattern","_lowercasePattern","onWillRefilter","reset","filter","parentVisibility","visibility","Default","label","labels","Array","isArray","l","labelStr","toString","score","findMatchType","TreeFindMatchType","Contiguous","toLowerCase","indexOf","Number","MAX_SAFE_INTEGER","i","push","firstMatchCanBeWeak","boostFullMatch","findMode","TreeFindMode","Filter","defaultFindVisibility","ModeToggle","opts","icon","listFilter","title","inputActiveOptionBorder","inputActiveOptionForeground","inputActiveOptionBackground","FuzzyToggle","searchFuzzy","unthemedFindWidgetStyles","inputBoxStyles","toggleStyles","listFilterWidgetBackground","listFilterWidgetNoMatchesOutline","listFilterWidgetOutline","listFilterWidgetShadow","FindWidget","mode","modeToggle","checked","findInput","inputBox","setPlaceHolder","matchType","matchTypeToggle","Fuzzy","contextViewProvider","tabIndex","right","top","_onDidDisable","root","_register","removeChild","styles","backgroundColor","boxShadow","onDidChangeMode","onChange","Highlight","_store","onDidChangeMatchType","additionalToggles","showCommonFindToggles","history","actionbar","emitter","inputElement","onKeyDown","chain","event","preventDefault","stopPropagation","addToHistory","domFocus","isAtLastInHistory","isNowhereInHistory","showNextValue","showPreviousValue","closeAction","onGrabMouseDown","grab","onWindowMouseMove","onWindowMouseUp","startRight","startX","pageX","startTop","startY","pageY","transition","update","deltaX","deltaY","layout","onGrabKeyDown","keyCode","POSITIVE_INFINITY","setTimeout","onDidChangeValue","Math","max","showMessage","message","clearMessage","fire","FindController","pattern","_mode","widget","refilter","render","_onDidChangeMode","_matchType","_onDidChangeMatchType","view","_onDidChangePattern","_onDidChangeOpenState","onDidChangeOpenState","enabledDisposables","defaultFindMode","defaultFindMatchType","onDidSplice","onDidSpliceModel","optionsUpdate","_c","_d","noMatches","showNotFoundMessage","type","content","shouldAllowFocus","isDefault","filterData","_history","stickyScrollNodeEquals","node1","node2","position","startIndex","endIndex","StickyScrollState","stickyNodes","count","equal","state","addDisposable","disposable","StickyScrollController","firstVisibleNode","firstVisibleIndex","renderers","treeDelegate","maxWidgetViewRatio","stickyScrollOptions","validateStickySettings","stickyScrollMaxItemCount","_widget","StickyScrollWidget","getScrollableElement","onDidScroll","onDidChangeContentHeight","scrollTop","setState","stickyState","findStickyState","maximumStickyWidgetHeight","renderHeight","firstVisibleNodeUnderWidget","stickyNodesHeight","nextStickyNode","getNextStickyNode","getNextVisibleNode","nodeIndex","getNodeIndex","nextNode","previousStickyNode","getAncestorUnderPrevious","nodeIsUncollapsedParent","nodeTopAlignsWithStickyNodesBottom","createStickyScrollNode","elementTop","getElementTop","stickyPosition","currentStickyNodesHeight","getNodeRange","calculateStickyNodePosition","previousAncestor","currentAncestor","parentOfcurrentAncestor","getParentNode","lastDescendantIndex","stickyRowPositionTop","lastChildRelativeTop","getRelativeTop","nodeHeight","nextNodeRelativeTop","lastChildNode","lastChildHeight","topOfLastChild","bottomOfLastChild","nodeLocation","parentLocation","Error","renderCount","nodePositionTopBelowWidget","ancestors","widgetHeight","validatedOptions","treeRenderers","_rootDomNode","document","createElement","wasVisible","_previousState","isVisible","setVisible","stickyIndex","stickyNode","currentWidgetHieght","shadow","lastStickyNode","currentWidgetHeight","stickyElement","lineHeight","getElementID","nodeTemplateId","find","nodeCopy","Proxy","visible","display","asTreeMouseEvent","target","Unknown","browserEvent","Twistie","Element","dfs","fn","child","Trait","nodeSet","_nodeSet","createNodeSet","getFirstViewElementWithTrait","_onDidChange","__forceEvent","_set","silent","that","getNodes","onDidModelSplice","insertedNodes","deletedNodes","visit","values","deletedNodesIdSet","deletedNodesVisitor","insertedNodesMap","insertedNodesVisitor","id","wasDeleted","insertedNode","TreeNodeListMouseController","list","stickyScrollProvider","onViewPointer","isHandledByList","onTwistie","contains","offsetX","isStickyElement","expandOnlyOnTwistieClick","detail","expandOnDoubleClick","handleStickyScrollMouseEvent","location","recursive","altKey","setFocus","toggleCollapsed","stickyScrollController","elementScrollTop","elementTargetViewTop","setSelection","onDoubleClick","TreeNodeList","user","virtualDelegate","focusTrait","selectionTrait","anchorTrait","createMouseController","splice","deleteCount","additionalFocus","additionalSelection","anchor","getFocus","getSelection","setAnchor","indexes","fromAPI","AbstractTree","onDidChangeFocus","eventBufferer","wrapEvent","focus","onDidChangeSelection","selection","onMouseDblClick","onPointer","onDidFocus","onDidChangeModel","signal","findController","findFuzzy","_options","onDidDispose","_user","onDidChangeFindOpenState","_onWillRefilter","_onDidUpdateOptions","onDidChangeCollapseStateRelay","onDidChangeActiveNodes","r","getFocusedElements","getSelectedElements","getAnchorElement","createModel","input","bufferEvents","activeNodesEmitter","activeNodesDebounce","any","trigger","keyboardSupport","onLeftArrow","onRightArrow","onSpace","findWidgetEnabled","findWidgetStyles","focusNavigationFilter","onDidChangeFindMode","onDidChangeFindMatchType","enableStickyScroll","styleElement","getHTMLElement","Always","updateStickyScroll","scrollHeight","suffix","domId","treeIndentGuidesStroke","treeInactiveIndentGuidesStroke","listBackground","textContent","join","getParentElement","getFirstElementChild","collapse","expand","isCollapsible","setCollapsible","reveal","relativeTop","expandTo","paddingTop","didChange","parentListIndex","some","focusedIndex","firstChildIndex"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/abstractTree.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, append, clearNode, createStyleSheet, getWindow, h, hasParentWithClass } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { StandardKeyboardEvent } from '../../keyboardEvent.js';\nimport { ActionBar } from '../actionbar/actionbar.js';\nimport { FindInput } from '../findinput/findInput.js';\nimport { unthemedInboxStyles } from '../inputbox/inputBox.js';\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { isActionItem, isButton, isInputElement, isMonacoCustomToggle, isMonacoEditor, isStickyScrollElement, List, MouseController } from '../list/listWidget.js';\nimport { Toggle, unthemedToggleStyles } from '../toggle/toggle.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { TreeMouseEventTarget } from './tree.js';\nimport { Action } from '../../../common/actions.js';\nimport { distinct, equals, range } from '../../../common/arrays.js';\nimport { Delayer, disposableTimeout, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { SetMap } from '../../../common/map.js';\nimport { Emitter, Event, EventBufferer, Relay } from '../../../common/event.js';\nimport { fuzzyScore, FuzzyScore } from '../../../common/filters.js';\nimport { Disposable, DisposableStore, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { isNumber } from '../../../common/types.js';\nimport './media/tree.css';\nimport { localize } from '../../../../nls.js';\nclass TreeElementsDragAndDropData extends ElementsDragAndDropData {\n    constructor(data) {\n        super(data.elements.map(node => node.element));\n        this.data = data;\n    }\n}\nfunction asTreeDragAndDropData(data) {\n    if (data instanceof ElementsDragAndDropData) {\n        return new TreeElementsDragAndDropData(data);\n    }\n    return data;\n}\nclass TreeNodeListDragAndDrop {\n    constructor(modelProvider, dnd) {\n        this.modelProvider = modelProvider;\n        this.dnd = dnd;\n        this.autoExpandDisposable = Disposable.None;\n        this.disposables = new DisposableStore();\n    }\n    getDragURI(node) {\n        return this.dnd.getDragURI(node.element);\n    }\n    getDragLabel(nodes, originalEvent) {\n        if (this.dnd.getDragLabel) {\n            return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n        }\n        return undefined;\n    }\n    onDragStart(data, originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asTreeDragAndDropData(data), originalEvent);\n    }\n    onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\n        const result = this.dnd.onDragOver(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n        const didChangeAutoExpandNode = this.autoExpandNode !== targetNode;\n        if (didChangeAutoExpandNode) {\n            this.autoExpandDisposable.dispose();\n            this.autoExpandNode = targetNode;\n        }\n        if (typeof targetNode === 'undefined') {\n            return result;\n        }\n        if (didChangeAutoExpandNode && typeof result !== 'boolean' && result.autoExpand) {\n            this.autoExpandDisposable = disposableTimeout(() => {\n                const model = this.modelProvider();\n                const ref = model.getNodeLocation(targetNode);\n                if (model.isCollapsed(ref)) {\n                    model.setCollapsed(ref, false);\n                }\n                this.autoExpandNode = undefined;\n            }, 500, this.disposables);\n        }\n        if (typeof result === 'boolean' || !result.accept || typeof result.bubble === 'undefined' || result.feedback) {\n            if (!raw) {\n                const accept = typeof result === 'boolean' ? result : result.accept;\n                const effect = typeof result === 'boolean' ? undefined : result.effect;\n                return { accept, effect, feedback: [targetIndex] };\n            }\n            return result;\n        }\n        if (result.bubble === 1 /* TreeDragOverBubble.Up */) {\n            const model = this.modelProvider();\n            const ref = model.getNodeLocation(targetNode);\n            const parentRef = model.getParentNodeLocation(ref);\n            const parentNode = model.getNode(parentRef);\n            const parentIndex = parentRef && model.getListIndex(parentRef);\n            return this.onDragOver(data, parentNode, parentIndex, originalEvent, false);\n        }\n        const model = this.modelProvider();\n        const ref = model.getNodeLocation(targetNode);\n        const start = model.getListIndex(ref);\n        const length = model.getListRenderCount(ref);\n        return { ...result, feedback: range(start, start + length) };\n    }\n    drop(data, targetNode, targetIndex, originalEvent) {\n        this.autoExpandDisposable.dispose();\n        this.autoExpandNode = undefined;\n        this.dnd.drop(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    onDragEnd(originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n    }\n    dispose() {\n        this.disposables.dispose();\n        this.dnd.dispose();\n    }\n}\nfunction asListOptions(modelProvider, options) {\n    return options && {\n        ...options,\n        identityProvider: options.identityProvider && {\n            getId(el) {\n                return options.identityProvider.getId(el.element);\n            }\n        },\n        dnd: options.dnd && new TreeNodeListDragAndDrop(modelProvider, options.dnd),\n        multipleSelectionController: options.multipleSelectionController && {\n            isSelectionSingleChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionSingleChangeEvent({ ...e, element: e.element });\n            },\n            isSelectionRangeChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionRangeChangeEvent({ ...e, element: e.element });\n            }\n        },\n        accessibilityProvider: options.accessibilityProvider && {\n            ...options.accessibilityProvider,\n            getSetSize(node) {\n                const model = modelProvider();\n                const ref = model.getNodeLocation(node);\n                const parentRef = model.getParentNodeLocation(ref);\n                const parentNode = model.getNode(parentRef);\n                return parentNode.visibleChildrenCount;\n            },\n            getPosInSet(node) {\n                return node.visibleChildIndex + 1;\n            },\n            isChecked: options.accessibilityProvider && options.accessibilityProvider.isChecked ? (node) => {\n                return options.accessibilityProvider.isChecked(node.element);\n            } : undefined,\n            getRole: options.accessibilityProvider && options.accessibilityProvider.getRole ? (node) => {\n                return options.accessibilityProvider.getRole(node.element);\n            } : () => 'treeitem',\n            getAriaLabel(e) {\n                return options.accessibilityProvider.getAriaLabel(e.element);\n            },\n            getWidgetAriaLabel() {\n                return options.accessibilityProvider.getWidgetAriaLabel();\n            },\n            getWidgetRole: options.accessibilityProvider && options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n            getAriaLevel: options.accessibilityProvider && options.accessibilityProvider.getAriaLevel ? (node) => options.accessibilityProvider.getAriaLevel(node.element) : (node) => {\n                return node.depth;\n            },\n            getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n                return options.accessibilityProvider.getActiveDescendantId(node.element);\n            })\n        },\n        keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n            ...options.keyboardNavigationLabelProvider,\n            getKeyboardNavigationLabel(node) {\n                return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(node.element);\n            }\n        }\n    };\n}\nexport class ComposedTreeDelegate {\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    getHeight(element) {\n        return this.delegate.getHeight(element.element);\n    }\n    getTemplateId(element) {\n        return this.delegate.getTemplateId(element.element);\n    }\n    hasDynamicHeight(element) {\n        return !!this.delegate.hasDynamicHeight && this.delegate.hasDynamicHeight(element.element);\n    }\n    setDynamicHeight(element, height) {\n        var _a, _b;\n        (_b = (_a = this.delegate).setDynamicHeight) === null || _b === void 0 ? void 0 : _b.call(_a, element.element, height);\n    }\n}\nexport var RenderIndentGuides;\n(function (RenderIndentGuides) {\n    RenderIndentGuides[\"None\"] = \"none\";\n    RenderIndentGuides[\"OnHover\"] = \"onHover\";\n    RenderIndentGuides[\"Always\"] = \"always\";\n})(RenderIndentGuides || (RenderIndentGuides = {}));\nclass EventCollection {\n    get elements() {\n        return this._elements;\n    }\n    constructor(onDidChange, _elements = []) {\n        this._elements = _elements;\n        this.disposables = new DisposableStore();\n        this.onDidChange = Event.forEach(onDidChange, elements => this._elements = elements, this.disposables);\n    }\n    dispose() {\n        this.disposables.dispose();\n    }\n}\nexport class TreeRenderer {\n    constructor(renderer, modelProvider, onDidChangeCollapseState, activeNodes, renderedIndentGuides, options = {}) {\n        var _a;\n        this.renderer = renderer;\n        this.modelProvider = modelProvider;\n        this.activeNodes = activeNodes;\n        this.renderedIndentGuides = renderedIndentGuides;\n        this.renderedElements = new Map();\n        this.renderedNodes = new Map();\n        this.indent = TreeRenderer.DefaultIndent;\n        this.hideTwistiesOfChildlessElements = false;\n        this.shouldRenderIndentGuides = false;\n        this.activeIndentNodes = new Set();\n        this.indentGuidesDisposable = Disposable.None;\n        this.disposables = new DisposableStore();\n        this.templateId = renderer.templateId;\n        this.updateOptions(options);\n        Event.map(onDidChangeCollapseState, e => e.node)(this.onDidChangeNodeTwistieState, this, this.disposables);\n        (_a = renderer.onDidChangeTwistieState) === null || _a === void 0 ? void 0 : _a.call(renderer, this.onDidChangeTwistieState, this, this.disposables);\n    }\n    updateOptions(options = {}) {\n        if (typeof options.indent !== 'undefined') {\n            const indent = clamp(options.indent, 0, 40);\n            if (indent !== this.indent) {\n                this.indent = indent;\n                for (const [node, templateData] of this.renderedNodes) {\n                    this.renderTreeElement(node, templateData);\n                }\n            }\n        }\n        if (typeof options.renderIndentGuides !== 'undefined') {\n            const shouldRenderIndentGuides = options.renderIndentGuides !== RenderIndentGuides.None;\n            if (shouldRenderIndentGuides !== this.shouldRenderIndentGuides) {\n                this.shouldRenderIndentGuides = shouldRenderIndentGuides;\n                for (const [node, templateData] of this.renderedNodes) {\n                    this._renderIndentGuides(node, templateData);\n                }\n                this.indentGuidesDisposable.dispose();\n                if (shouldRenderIndentGuides) {\n                    const disposables = new DisposableStore();\n                    this.activeNodes.onDidChange(this._onDidChangeActiveNodes, this, disposables);\n                    this.indentGuidesDisposable = disposables;\n                    this._onDidChangeActiveNodes(this.activeNodes.elements);\n                }\n            }\n        }\n        if (typeof options.hideTwistiesOfChildlessElements !== 'undefined') {\n            this.hideTwistiesOfChildlessElements = options.hideTwistiesOfChildlessElements;\n        }\n    }\n    renderTemplate(container) {\n        const el = append(container, $('.monaco-tl-row'));\n        const indent = append(el, $('.monaco-tl-indent'));\n        const twistie = append(el, $('.monaco-tl-twistie'));\n        const contents = append(el, $('.monaco-tl-contents'));\n        const templateData = this.renderer.renderTemplate(contents);\n        return { container, indent, twistie, indentGuidesDisposable: Disposable.None, templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderedNodes.set(node, templateData);\n        this.renderedElements.set(node.element, node);\n        this.renderTreeElement(node, templateData);\n        this.renderer.renderElement(node, index, templateData.templateData, height);\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        templateData.indentGuidesDisposable.dispose();\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, node, index, templateData.templateData, height);\n        if (typeof height === 'number') {\n            this.renderedNodes.delete(node);\n            this.renderedElements.delete(node.element);\n        }\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    onDidChangeTwistieState(element) {\n        const node = this.renderedElements.get(element);\n        if (!node) {\n            return;\n        }\n        this.onDidChangeNodeTwistieState(node);\n    }\n    onDidChangeNodeTwistieState(node) {\n        const templateData = this.renderedNodes.get(node);\n        if (!templateData) {\n            return;\n        }\n        this._onDidChangeActiveNodes(this.activeNodes.elements);\n        this.renderTreeElement(node, templateData);\n    }\n    renderTreeElement(node, templateData) {\n        const indent = TreeRenderer.DefaultIndent + (node.depth - 1) * this.indent;\n        templateData.twistie.style.paddingLeft = `${indent}px`;\n        templateData.indent.style.width = `${indent + this.indent - 16}px`;\n        if (node.collapsible) {\n            templateData.container.setAttribute('aria-expanded', String(!node.collapsed));\n        }\n        else {\n            templateData.container.removeAttribute('aria-expanded');\n        }\n        templateData.twistie.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n        let twistieRendered = false;\n        if (this.renderer.renderTwistie) {\n            twistieRendered = this.renderer.renderTwistie(node.element, templateData.twistie);\n        }\n        if (node.collapsible && (!this.hideTwistiesOfChildlessElements || node.visibleChildrenCount > 0)) {\n            if (!twistieRendered) {\n                templateData.twistie.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n            }\n            templateData.twistie.classList.add('collapsible');\n            templateData.twistie.classList.toggle('collapsed', node.collapsed);\n        }\n        else {\n            templateData.twistie.classList.remove('collapsible', 'collapsed');\n        }\n        this._renderIndentGuides(node, templateData);\n    }\n    _renderIndentGuides(node, templateData) {\n        clearNode(templateData.indent);\n        templateData.indentGuidesDisposable.dispose();\n        if (!this.shouldRenderIndentGuides) {\n            return;\n        }\n        const disposableStore = new DisposableStore();\n        const model = this.modelProvider();\n        while (true) {\n            const ref = model.getNodeLocation(node);\n            const parentRef = model.getParentNodeLocation(ref);\n            if (!parentRef) {\n                break;\n            }\n            const parent = model.getNode(parentRef);\n            const guide = $('.indent-guide', { style: `width: ${this.indent}px` });\n            if (this.activeIndentNodes.has(parent)) {\n                guide.classList.add('active');\n            }\n            if (templateData.indent.childElementCount === 0) {\n                templateData.indent.appendChild(guide);\n            }\n            else {\n                templateData.indent.insertBefore(guide, templateData.indent.firstElementChild);\n            }\n            this.renderedIndentGuides.add(parent, guide);\n            disposableStore.add(toDisposable(() => this.renderedIndentGuides.delete(parent, guide)));\n            node = parent;\n        }\n        templateData.indentGuidesDisposable = disposableStore;\n    }\n    _onDidChangeActiveNodes(nodes) {\n        if (!this.shouldRenderIndentGuides) {\n            return;\n        }\n        const set = new Set();\n        const model = this.modelProvider();\n        nodes.forEach(node => {\n            const ref = model.getNodeLocation(node);\n            try {\n                const parentRef = model.getParentNodeLocation(ref);\n                if (node.collapsible && node.children.length > 0 && !node.collapsed) {\n                    set.add(node);\n                }\n                else if (parentRef) {\n                    set.add(model.getNode(parentRef));\n                }\n            }\n            catch (_a) {\n                // noop\n            }\n        });\n        this.activeIndentNodes.forEach(node => {\n            if (!set.has(node)) {\n                this.renderedIndentGuides.forEach(node, line => line.classList.remove('active'));\n            }\n        });\n        set.forEach(node => {\n            if (!this.activeIndentNodes.has(node)) {\n                this.renderedIndentGuides.forEach(node, line => line.classList.add('active'));\n            }\n        });\n        this.activeIndentNodes = set;\n    }\n    dispose() {\n        this.renderedNodes.clear();\n        this.renderedElements.clear();\n        this.indentGuidesDisposable.dispose();\n        dispose(this.disposables);\n    }\n}\nTreeRenderer.DefaultIndent = 8;\nclass FindFilter {\n    get totalCount() { return this._totalCount; }\n    get matchCount() { return this._matchCount; }\n    constructor(tree, keyboardNavigationLabelProvider, _filter) {\n        this.tree = tree;\n        this.keyboardNavigationLabelProvider = keyboardNavigationLabelProvider;\n        this._filter = _filter;\n        this._totalCount = 0;\n        this._matchCount = 0;\n        this._pattern = '';\n        this._lowercasePattern = '';\n        this.disposables = new DisposableStore();\n        tree.onWillRefilter(this.reset, this, this.disposables);\n    }\n    filter(element, parentVisibility) {\n        let visibility = 1 /* TreeVisibility.Visible */;\n        if (this._filter) {\n            const result = this._filter.filter(element, parentVisibility);\n            if (typeof result === 'boolean') {\n                visibility = result ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n            }\n            else if (isFilterResult(result)) {\n                visibility = getVisibleState(result.visibility);\n            }\n            else {\n                visibility = result;\n            }\n            if (visibility === 0 /* TreeVisibility.Hidden */) {\n                return false;\n            }\n        }\n        this._totalCount++;\n        if (!this._pattern) {\n            this._matchCount++;\n            return { data: FuzzyScore.Default, visibility };\n        }\n        const label = this.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(element);\n        const labels = Array.isArray(label) ? label : [label];\n        for (const l of labels) {\n            const labelStr = l && l.toString();\n            if (typeof labelStr === 'undefined') {\n                return { data: FuzzyScore.Default, visibility };\n            }\n            let score;\n            if (this.tree.findMatchType === TreeFindMatchType.Contiguous) {\n                const index = labelStr.toLowerCase().indexOf(this._lowercasePattern);\n                if (index > -1) {\n                    score = [Number.MAX_SAFE_INTEGER, 0];\n                    for (let i = this._lowercasePattern.length; i > 0; i--) {\n                        score.push(index + i - 1);\n                    }\n                }\n            }\n            else {\n                score = fuzzyScore(this._pattern, this._lowercasePattern, 0, labelStr, labelStr.toLowerCase(), 0, { firstMatchCanBeWeak: true, boostFullMatch: true });\n            }\n            if (score) {\n                this._matchCount++;\n                return labels.length === 1 ?\n                    { data: score, visibility } :\n                    { data: { label: labelStr, score: score }, visibility };\n            }\n        }\n        if (this.tree.findMode === TreeFindMode.Filter) {\n            if (typeof this.tree.options.defaultFindVisibility === 'number') {\n                return this.tree.options.defaultFindVisibility;\n            }\n            else if (this.tree.options.defaultFindVisibility) {\n                return this.tree.options.defaultFindVisibility(element);\n            }\n            else {\n                return 2 /* TreeVisibility.Recurse */;\n            }\n        }\n        else {\n            return { data: FuzzyScore.Default, visibility };\n        }\n    }\n    reset() {\n        this._totalCount = 0;\n        this._matchCount = 0;\n    }\n    dispose() {\n        dispose(this.disposables);\n    }\n}\nexport class ModeToggle extends Toggle {\n    constructor(opts) {\n        var _a;\n        super({\n            icon: Codicon.listFilter,\n            title: localize('filter', \"Filter\"),\n            isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n            inputActiveOptionBorder: opts.inputActiveOptionBorder,\n            inputActiveOptionForeground: opts.inputActiveOptionForeground,\n            inputActiveOptionBackground: opts.inputActiveOptionBackground\n        });\n    }\n}\nexport class FuzzyToggle extends Toggle {\n    constructor(opts) {\n        var _a;\n        super({\n            icon: Codicon.searchFuzzy,\n            title: localize('fuzzySearch', \"Fuzzy Match\"),\n            isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n            inputActiveOptionBorder: opts.inputActiveOptionBorder,\n            inputActiveOptionForeground: opts.inputActiveOptionForeground,\n            inputActiveOptionBackground: opts.inputActiveOptionBackground\n        });\n    }\n}\nconst unthemedFindWidgetStyles = {\n    inputBoxStyles: unthemedInboxStyles,\n    toggleStyles: unthemedToggleStyles,\n    listFilterWidgetBackground: undefined,\n    listFilterWidgetNoMatchesOutline: undefined,\n    listFilterWidgetOutline: undefined,\n    listFilterWidgetShadow: undefined\n};\nexport var TreeFindMode;\n(function (TreeFindMode) {\n    TreeFindMode[TreeFindMode[\"Highlight\"] = 0] = \"Highlight\";\n    TreeFindMode[TreeFindMode[\"Filter\"] = 1] = \"Filter\";\n})(TreeFindMode || (TreeFindMode = {}));\nexport var TreeFindMatchType;\n(function (TreeFindMatchType) {\n    TreeFindMatchType[TreeFindMatchType[\"Fuzzy\"] = 0] = \"Fuzzy\";\n    TreeFindMatchType[TreeFindMatchType[\"Contiguous\"] = 1] = \"Contiguous\";\n})(TreeFindMatchType || (TreeFindMatchType = {}));\nclass FindWidget extends Disposable {\n    set mode(mode) {\n        this.modeToggle.checked = mode === TreeFindMode.Filter;\n        this.findInput.inputBox.setPlaceHolder(mode === TreeFindMode.Filter ? localize('type to filter', \"Type to filter\") : localize('type to search', \"Type to search\"));\n    }\n    set matchType(matchType) {\n        this.matchTypeToggle.checked = matchType === TreeFindMatchType.Fuzzy;\n    }\n    constructor(container, tree, contextViewProvider, mode, matchType, options) {\n        var _a;\n        super();\n        this.tree = tree;\n        this.elements = h('.monaco-tree-type-filter', [\n            h('.monaco-tree-type-filter-grab.codicon.codicon-debug-gripper@grab', { tabIndex: 0 }),\n            h('.monaco-tree-type-filter-input@findInput'),\n            h('.monaco-tree-type-filter-actionbar@actionbar'),\n        ]);\n        this.width = 0;\n        this.right = 0;\n        this.top = 0;\n        this._onDidDisable = new Emitter();\n        container.appendChild(this.elements.root);\n        this._register(toDisposable(() => container.removeChild(this.elements.root)));\n        const styles = (_a = options === null || options === void 0 ? void 0 : options.styles) !== null && _a !== void 0 ? _a : unthemedFindWidgetStyles;\n        if (styles.listFilterWidgetBackground) {\n            this.elements.root.style.backgroundColor = styles.listFilterWidgetBackground;\n        }\n        if (styles.listFilterWidgetShadow) {\n            this.elements.root.style.boxShadow = `0 0 8px 2px ${styles.listFilterWidgetShadow}`;\n        }\n        this.modeToggle = this._register(new ModeToggle({ ...styles.toggleStyles, isChecked: mode === TreeFindMode.Filter }));\n        this.matchTypeToggle = this._register(new FuzzyToggle({ ...styles.toggleStyles, isChecked: matchType === TreeFindMatchType.Fuzzy }));\n        this.onDidChangeMode = Event.map(this.modeToggle.onChange, () => this.modeToggle.checked ? TreeFindMode.Filter : TreeFindMode.Highlight, this._store);\n        this.onDidChangeMatchType = Event.map(this.matchTypeToggle.onChange, () => this.matchTypeToggle.checked ? TreeFindMatchType.Fuzzy : TreeFindMatchType.Contiguous, this._store);\n        this.findInput = this._register(new FindInput(this.elements.findInput, contextViewProvider, {\n            label: localize('type to search', \"Type to search\"),\n            additionalToggles: [this.modeToggle, this.matchTypeToggle],\n            showCommonFindToggles: false,\n            inputBoxStyles: styles.inputBoxStyles,\n            toggleStyles: styles.toggleStyles,\n            history: options === null || options === void 0 ? void 0 : options.history\n        }));\n        this.actionbar = this._register(new ActionBar(this.elements.actionbar));\n        this.mode = mode;\n        const emitter = this._register(new DomEmitter(this.findInput.inputBox.inputElement, 'keydown'));\n        const onKeyDown = Event.chain(emitter.event, $ => $.map(e => new StandardKeyboardEvent(e)));\n        this._register(onKeyDown((e) => {\n            // Using equals() so we reserve modified keys for future use\n            if (e.equals(3 /* KeyCode.Enter */)) {\n                // This is the only keyboard way to return to the tree from a history item that isn't the last one\n                e.preventDefault();\n                e.stopPropagation();\n                this.findInput.inputBox.addToHistory();\n                this.tree.domFocus();\n                return;\n            }\n            if (e.equals(18 /* KeyCode.DownArrow */)) {\n                e.preventDefault();\n                e.stopPropagation();\n                if (this.findInput.inputBox.isAtLastInHistory() || this.findInput.inputBox.isNowhereInHistory()) {\n                    // Retain original pre-history DownArrow behavior\n                    this.findInput.inputBox.addToHistory();\n                    this.tree.domFocus();\n                }\n                else {\n                    // Downward through history\n                    this.findInput.inputBox.showNextValue();\n                }\n                return;\n            }\n            if (e.equals(16 /* KeyCode.UpArrow */)) {\n                e.preventDefault();\n                e.stopPropagation();\n                // Upward through history\n                this.findInput.inputBox.showPreviousValue();\n                return;\n            }\n        }));\n        const closeAction = this._register(new Action('close', localize('close', \"Close\"), 'codicon codicon-close', true, () => this.dispose()));\n        this.actionbar.push(closeAction, { icon: true, label: false });\n        const onGrabMouseDown = this._register(new DomEmitter(this.elements.grab, 'mousedown'));\n        this._register(onGrabMouseDown.event(e => {\n            const disposables = new DisposableStore();\n            const onWindowMouseMove = disposables.add(new DomEmitter(getWindow(e), 'mousemove'));\n            const onWindowMouseUp = disposables.add(new DomEmitter(getWindow(e), 'mouseup'));\n            const startRight = this.right;\n            const startX = e.pageX;\n            const startTop = this.top;\n            const startY = e.pageY;\n            this.elements.grab.classList.add('grabbing');\n            const transition = this.elements.root.style.transition;\n            this.elements.root.style.transition = 'unset';\n            const update = (e) => {\n                const deltaX = e.pageX - startX;\n                this.right = startRight - deltaX;\n                const deltaY = e.pageY - startY;\n                this.top = startTop + deltaY;\n                this.layout();\n            };\n            disposables.add(onWindowMouseMove.event(update));\n            disposables.add(onWindowMouseUp.event(e => {\n                update(e);\n                this.elements.grab.classList.remove('grabbing');\n                this.elements.root.style.transition = transition;\n                disposables.dispose();\n            }));\n        }));\n        const onGrabKeyDown = Event.chain(this._register(new DomEmitter(this.elements.grab, 'keydown')).event, $ => $.map(e => new StandardKeyboardEvent(e)));\n        this._register(onGrabKeyDown((e) => {\n            let right;\n            let top;\n            if (e.keyCode === 15 /* KeyCode.LeftArrow */) {\n                right = Number.POSITIVE_INFINITY;\n            }\n            else if (e.keyCode === 17 /* KeyCode.RightArrow */) {\n                right = 0;\n            }\n            else if (e.keyCode === 10 /* KeyCode.Space */) {\n                right = this.right === 0 ? Number.POSITIVE_INFINITY : 0;\n            }\n            if (e.keyCode === 16 /* KeyCode.UpArrow */) {\n                top = 0;\n            }\n            else if (e.keyCode === 18 /* KeyCode.DownArrow */) {\n                top = Number.POSITIVE_INFINITY;\n            }\n            if (right !== undefined) {\n                e.preventDefault();\n                e.stopPropagation();\n                this.right = right;\n                this.layout();\n            }\n            if (top !== undefined) {\n                e.preventDefault();\n                e.stopPropagation();\n                this.top = top;\n                const transition = this.elements.root.style.transition;\n                this.elements.root.style.transition = 'unset';\n                this.layout();\n                setTimeout(() => {\n                    this.elements.root.style.transition = transition;\n                }, 0);\n            }\n        }));\n        this.onDidChangeValue = this.findInput.onDidChange;\n    }\n    layout(width = this.width) {\n        this.width = width;\n        this.right = clamp(this.right, 0, Math.max(0, width - 212));\n        this.elements.root.style.right = `${this.right}px`;\n        this.top = clamp(this.top, 0, 24);\n        this.elements.root.style.top = `${this.top}px`;\n    }\n    showMessage(message) {\n        this.findInput.showMessage(message);\n    }\n    clearMessage() {\n        this.findInput.clearMessage();\n    }\n    async dispose() {\n        this._onDidDisable.fire();\n        this.elements.root.classList.add('disabled');\n        await timeout(300);\n        super.dispose();\n    }\n}\nclass FindController {\n    get pattern() { return this._pattern; }\n    get mode() { return this._mode; }\n    set mode(mode) {\n        if (mode === this._mode) {\n            return;\n        }\n        this._mode = mode;\n        if (this.widget) {\n            this.widget.mode = this._mode;\n        }\n        this.tree.refilter();\n        this.render();\n        this._onDidChangeMode.fire(mode);\n    }\n    get matchType() { return this._matchType; }\n    set matchType(matchType) {\n        if (matchType === this._matchType) {\n            return;\n        }\n        this._matchType = matchType;\n        if (this.widget) {\n            this.widget.matchType = this._matchType;\n        }\n        this.tree.refilter();\n        this.render();\n        this._onDidChangeMatchType.fire(matchType);\n    }\n    constructor(tree, model, view, filter, contextViewProvider, options = {}) {\n        var _a, _b;\n        this.tree = tree;\n        this.view = view;\n        this.filter = filter;\n        this.contextViewProvider = contextViewProvider;\n        this.options = options;\n        this._pattern = '';\n        this.width = 0;\n        this._onDidChangeMode = new Emitter();\n        this.onDidChangeMode = this._onDidChangeMode.event;\n        this._onDidChangeMatchType = new Emitter();\n        this.onDidChangeMatchType = this._onDidChangeMatchType.event;\n        this._onDidChangePattern = new Emitter();\n        this._onDidChangeOpenState = new Emitter();\n        this.onDidChangeOpenState = this._onDidChangeOpenState.event;\n        this.enabledDisposables = new DisposableStore();\n        this.disposables = new DisposableStore();\n        this._mode = (_a = tree.options.defaultFindMode) !== null && _a !== void 0 ? _a : TreeFindMode.Highlight;\n        this._matchType = (_b = tree.options.defaultFindMatchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy;\n        model.onDidSplice(this.onDidSpliceModel, this, this.disposables);\n    }\n    updateOptions(optionsUpdate = {}) {\n        if (optionsUpdate.defaultFindMode !== undefined) {\n            this.mode = optionsUpdate.defaultFindMode;\n        }\n        if (optionsUpdate.defaultFindMatchType !== undefined) {\n            this.matchType = optionsUpdate.defaultFindMatchType;\n        }\n    }\n    onDidSpliceModel() {\n        if (!this.widget || this.pattern.length === 0) {\n            return;\n        }\n        this.tree.refilter();\n        this.render();\n    }\n    render() {\n        var _a, _b, _c, _d;\n        const noMatches = this.filter.totalCount > 0 && this.filter.matchCount === 0;\n        if (this.pattern && noMatches) {\n            if ((_a = this.tree.options.showNotFoundMessage) !== null && _a !== void 0 ? _a : true) {\n                (_b = this.widget) === null || _b === void 0 ? void 0 : _b.showMessage({ type: 2 /* MessageType.WARNING */, content: localize('not found', \"No elements found.\") });\n            }\n            else {\n                (_c = this.widget) === null || _c === void 0 ? void 0 : _c.showMessage({ type: 2 /* MessageType.WARNING */ });\n            }\n        }\n        else {\n            (_d = this.widget) === null || _d === void 0 ? void 0 : _d.clearMessage();\n        }\n    }\n    shouldAllowFocus(node) {\n        if (!this.widget || !this.pattern || this._mode === TreeFindMode.Filter) {\n            return true;\n        }\n        if (this.filter.totalCount > 0 && this.filter.matchCount <= 1) {\n            return true;\n        }\n        return !FuzzyScore.isDefault(node.filterData);\n    }\n    layout(width) {\n        var _a;\n        this.width = width;\n        (_a = this.widget) === null || _a === void 0 ? void 0 : _a.layout(width);\n    }\n    dispose() {\n        this._history = undefined;\n        this._onDidChangePattern.dispose();\n        this.enabledDisposables.dispose();\n        this.disposables.dispose();\n    }\n}\nfunction stickyScrollNodeEquals(node1, node2) {\n    return node1.position === node2.position &&\n        node1.node.element === node2.node.element &&\n        node1.startIndex === node2.startIndex &&\n        node1.height === node2.height &&\n        node1.endIndex === node2.endIndex;\n}\nclass StickyScrollState extends Disposable {\n    constructor(stickyNodes = []) {\n        super();\n        this.stickyNodes = stickyNodes;\n    }\n    get count() { return this.stickyNodes.length; }\n    equal(state) {\n        return equals(this.stickyNodes, state.stickyNodes, stickyScrollNodeEquals);\n    }\n    addDisposable(disposable) {\n        this._register(disposable);\n    }\n}\nclass StickyScrollController extends Disposable {\n    get firstVisibleNode() {\n        const index = this.view.firstVisibleIndex;\n        if (index < 0 || index >= this.view.length) {\n            return undefined;\n        }\n        return this.view.element(index);\n    }\n    constructor(tree, model, view, renderers, treeDelegate, options = {}) {\n        super();\n        this.tree = tree;\n        this.model = model;\n        this.view = view;\n        this.treeDelegate = treeDelegate;\n        this.maxWidgetViewRatio = 0.4;\n        const stickyScrollOptions = this.validateStickySettings(options);\n        this.stickyScrollMaxItemCount = stickyScrollOptions.stickyScrollMaxItemCount;\n        this._widget = this._register(new StickyScrollWidget(view.getScrollableElement(), view, model, renderers, treeDelegate));\n        this._register(view.onDidScroll(() => this.update()));\n        this._register(view.onDidChangeContentHeight(() => this.update()));\n        this._register(tree.onDidChangeCollapseState(() => this.update()));\n        this.update();\n    }\n    update() {\n        const firstVisibleNode = this.firstVisibleNode;\n        // Don't render anything if there are no elements\n        if (!firstVisibleNode || this.tree.scrollTop === 0) {\n            this._widget.setState(undefined);\n            return;\n        }\n        const stickyState = this.findStickyState(firstVisibleNode);\n        this._widget.setState(stickyState);\n    }\n    findStickyState(firstVisibleNode) {\n        const stickyNodes = [];\n        const maximumStickyWidgetHeight = this.view.renderHeight * this.maxWidgetViewRatio;\n        let firstVisibleNodeUnderWidget = firstVisibleNode;\n        let stickyNodesHeight = 0;\n        let nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, undefined, stickyNodesHeight);\n        while (nextStickyNode && stickyNodesHeight + nextStickyNode.height < maximumStickyWidgetHeight) {\n            stickyNodes.push(nextStickyNode);\n            stickyNodesHeight += nextStickyNode.height;\n            if (stickyNodes.length >= this.stickyScrollMaxItemCount) {\n                break;\n            }\n            firstVisibleNodeUnderWidget = this.getNextVisibleNode(firstVisibleNodeUnderWidget);\n            if (!firstVisibleNodeUnderWidget) {\n                break;\n            }\n            nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, nextStickyNode.node, stickyNodesHeight);\n        }\n        return stickyNodes.length ? new StickyScrollState(stickyNodes) : undefined;\n    }\n    getNextVisibleNode(node) {\n        const nodeIndex = this.getNodeIndex(node);\n        if (nodeIndex === -1 || nodeIndex === this.view.length - 1) {\n            return undefined;\n        }\n        const nextNode = this.view.element(nodeIndex + 1);\n        return nextNode;\n    }\n    getNextStickyNode(firstVisibleNodeUnderWidget, previousStickyNode, stickyNodesHeight) {\n        const nextStickyNode = this.getAncestorUnderPrevious(firstVisibleNodeUnderWidget, previousStickyNode);\n        if (!nextStickyNode) {\n            return undefined;\n        }\n        if (nextStickyNode === firstVisibleNodeUnderWidget) {\n            if (!this.nodeIsUncollapsedParent(firstVisibleNodeUnderWidget)) {\n                return undefined;\n            }\n            if (this.nodeTopAlignsWithStickyNodesBottom(firstVisibleNodeUnderWidget, stickyNodesHeight)) {\n                return undefined;\n            }\n        }\n        return this.createStickyScrollNode(nextStickyNode, stickyNodesHeight);\n    }\n    nodeTopAlignsWithStickyNodesBottom(node, stickyNodesHeight) {\n        const nodeIndex = this.getNodeIndex(node);\n        const elementTop = this.view.getElementTop(nodeIndex);\n        const stickyPosition = stickyNodesHeight;\n        return this.view.scrollTop === elementTop - stickyPosition;\n    }\n    createStickyScrollNode(node, currentStickyNodesHeight) {\n        const height = this.treeDelegate.getHeight(node);\n        const { startIndex, endIndex } = this.getNodeRange(node);\n        const position = this.calculateStickyNodePosition(endIndex, currentStickyNodesHeight);\n        return { node, position, height, startIndex, endIndex };\n    }\n    getAncestorUnderPrevious(node, previousAncestor = undefined) {\n        let currentAncestor = node;\n        let parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n        while (parentOfcurrentAncestor) {\n            if (parentOfcurrentAncestor === previousAncestor) {\n                return currentAncestor;\n            }\n            currentAncestor = parentOfcurrentAncestor;\n            parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n        }\n        if (previousAncestor === undefined) {\n            return currentAncestor;\n        }\n        return undefined;\n    }\n    calculateStickyNodePosition(lastDescendantIndex, stickyRowPositionTop) {\n        let lastChildRelativeTop = this.view.getRelativeTop(lastDescendantIndex);\n        // If the last descendant is only partially visible at the top of the view, getRelativeTop() returns null\n        // In that case, utilize the next node's relative top to calculate the sticky node's position\n        if (lastChildRelativeTop === null && this.view.firstVisibleIndex === lastDescendantIndex && lastDescendantIndex + 1 < this.view.length) {\n            const nodeHeight = this.treeDelegate.getHeight(this.view.element(lastDescendantIndex));\n            const nextNodeRelativeTop = this.view.getRelativeTop(lastDescendantIndex + 1);\n            lastChildRelativeTop = nextNodeRelativeTop ? nextNodeRelativeTop - nodeHeight / this.view.renderHeight : null;\n        }\n        if (lastChildRelativeTop === null) {\n            return stickyRowPositionTop;\n        }\n        const lastChildNode = this.view.element(lastDescendantIndex);\n        const lastChildHeight = this.treeDelegate.getHeight(lastChildNode);\n        const topOfLastChild = lastChildRelativeTop * this.view.renderHeight;\n        const bottomOfLastChild = topOfLastChild + lastChildHeight;\n        if (stickyRowPositionTop > topOfLastChild && stickyRowPositionTop <= bottomOfLastChild) {\n            return topOfLastChild;\n        }\n        return stickyRowPositionTop;\n    }\n    getParentNode(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        const parentLocation = this.model.getParentNodeLocation(nodeLocation);\n        return parentLocation ? this.model.getNode(parentLocation) : undefined;\n    }\n    nodeIsUncollapsedParent(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        return this.model.getListRenderCount(nodeLocation) > 1;\n    }\n    getNodeIndex(node, nodeLocation) {\n        if (nodeLocation === undefined) {\n            nodeLocation = this.model.getNodeLocation(node);\n        }\n        const nodeIndex = this.model.getListIndex(nodeLocation);\n        return nodeIndex;\n    }\n    getNodeRange(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        const startIndex = this.model.getListIndex(nodeLocation);\n        if (startIndex < 0) {\n            throw new Error('Node not found in tree');\n        }\n        const renderCount = this.model.getListRenderCount(nodeLocation);\n        const endIndex = startIndex + renderCount - 1;\n        return { startIndex, endIndex };\n    }\n    nodePositionTopBelowWidget(node) {\n        const ancestors = [];\n        let currentAncestor = this.getParentNode(node);\n        while (currentAncestor) {\n            ancestors.push(currentAncestor);\n            currentAncestor = this.getParentNode(currentAncestor);\n        }\n        let widgetHeight = 0;\n        for (let i = 0; i < ancestors.length && i < this.stickyScrollMaxItemCount; i++) {\n            widgetHeight += this.treeDelegate.getHeight(ancestors[i]);\n        }\n        return widgetHeight;\n    }\n    updateOptions(optionsUpdate = {}) {\n        const validatedOptions = this.validateStickySettings(optionsUpdate);\n        if (this.stickyScrollMaxItemCount !== validatedOptions.stickyScrollMaxItemCount) {\n            this.stickyScrollMaxItemCount = validatedOptions.stickyScrollMaxItemCount;\n            this.update();\n        }\n    }\n    validateStickySettings(options) {\n        let stickyScrollMaxItemCount = 5;\n        if (typeof options.stickyScrollMaxItemCount === 'number') {\n            stickyScrollMaxItemCount = Math.max(options.stickyScrollMaxItemCount, 1);\n        }\n        return { stickyScrollMaxItemCount };\n    }\n}\nclass StickyScrollWidget {\n    constructor(container, view, model, treeRenderers, treeDelegate) {\n        this.view = view;\n        this.model = model;\n        this.treeRenderers = treeRenderers;\n        this.treeDelegate = treeDelegate;\n        this._rootDomNode = document.createElement('div');\n        this._rootDomNode.classList.add('monaco-tree-sticky-container');\n        container.appendChild(this._rootDomNode);\n    }\n    setState(state) {\n        var _a;\n        const wasVisible = !!this._previousState && this._previousState.count > 0;\n        const isVisible = !!state && state.count > 0;\n        // If state has not changed, do nothing\n        if ((!wasVisible && !isVisible) || (wasVisible && isVisible && this._previousState.equal(state))) {\n            return;\n        }\n        // Update visibility of the widget if changed\n        if (wasVisible !== isVisible) {\n            this.setVisible(isVisible);\n        }\n        // Remove previous state\n        (_a = this._previousState) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._previousState = state;\n        if (!isVisible) {\n            return;\n        }\n        for (let stickyIndex = state.count - 1; stickyIndex >= 0; stickyIndex--) {\n            const stickyNode = state.stickyNodes[stickyIndex];\n            const previousStickyNode = stickyIndex ? state.stickyNodes[stickyIndex - 1] : undefined;\n            const currentWidgetHieght = previousStickyNode ? previousStickyNode.position + previousStickyNode.height : 0;\n            const { element, disposable } = this.createElement(stickyNode, currentWidgetHieght);\n            this._rootDomNode.appendChild(element);\n            state.addDisposable(disposable);\n        }\n        // Add shadow element to the end of the widget\n        const shadow = $('.monaco-tree-sticky-container-shadow');\n        this._rootDomNode.appendChild(shadow);\n        state.addDisposable(toDisposable(() => shadow.remove()));\n        // Set the height of the widget to the bottom of the last sticky node\n        const lastStickyNode = state.stickyNodes[state.count - 1];\n        this._rootDomNode.style.height = `${lastStickyNode.position + lastStickyNode.height}px`;\n    }\n    createElement(stickyNode, currentWidgetHeight) {\n        const nodeLocation = this.model.getNodeLocation(stickyNode.node);\n        const nodeIndex = this.model.getListIndex(nodeLocation);\n        // Sticky element container\n        const stickyElement = document.createElement('div');\n        stickyElement.style.top = `${stickyNode.position}px`;\n        stickyElement.style.height = `${stickyNode.height}px`;\n        stickyElement.style.lineHeight = `${stickyNode.height}px`;\n        stickyElement.classList.add('monaco-tree-sticky-row');\n        stickyElement.classList.add('monaco-list-row');\n        stickyElement.setAttribute('data-index', `${nodeIndex}`);\n        stickyElement.setAttribute('data-parity', nodeIndex % 2 === 0 ? 'even' : 'odd');\n        stickyElement.setAttribute('id', this.view.getElementID(nodeIndex));\n        // Get the renderer for the node\n        const nodeTemplateId = this.treeDelegate.getTemplateId(stickyNode.node);\n        const renderer = this.treeRenderers.find((renderer) => renderer.templateId === nodeTemplateId);\n        if (!renderer) {\n            throw new Error(`No renderer found for template id ${nodeTemplateId}`);\n        }\n        const nodeCopy = new Proxy(stickyNode.node, {});\n        // Render the element\n        const templateData = renderer.renderTemplate(stickyElement);\n        renderer.renderElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n        // Remove the element from the DOM when state is disposed\n        const disposable = toDisposable(() => {\n            renderer.disposeElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n            renderer.disposeTemplate(templateData);\n            stickyElement.remove();\n        });\n        return { element: stickyElement, disposable };\n    }\n    setVisible(visible) {\n        this._rootDomNode.style.display = visible ? 'block' : 'none';\n    }\n    dispose() {\n        var _a;\n        (_a = this._previousState) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._rootDomNode.remove();\n    }\n}\nfunction asTreeMouseEvent(event) {\n    let target = TreeMouseEventTarget.Unknown;\n    if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-twistie', 'monaco-tl-row')) {\n        target = TreeMouseEventTarget.Twistie;\n    }\n    else if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-contents', 'monaco-tl-row')) {\n        target = TreeMouseEventTarget.Element;\n    }\n    else if (hasParentWithClass(event.browserEvent.target, 'monaco-tree-type-filter', 'monaco-list')) {\n        target = TreeMouseEventTarget.Filter;\n    }\n    return {\n        browserEvent: event.browserEvent,\n        element: event.element ? event.element.element : null,\n        target\n    };\n}\nfunction dfs(node, fn) {\n    fn(node);\n    node.children.forEach(child => dfs(child, fn));\n}\n/**\n * The trait concept needs to exist at the tree level, because collapsed\n * tree nodes will not be known by the list.\n */\nclass Trait {\n    get nodeSet() {\n        if (!this._nodeSet) {\n            this._nodeSet = this.createNodeSet();\n        }\n        return this._nodeSet;\n    }\n    constructor(getFirstViewElementWithTrait, identityProvider) {\n        this.getFirstViewElementWithTrait = getFirstViewElementWithTrait;\n        this.identityProvider = identityProvider;\n        this.nodes = [];\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n    }\n    set(nodes, browserEvent) {\n        if (!(browserEvent === null || browserEvent === void 0 ? void 0 : browserEvent.__forceEvent) && equals(this.nodes, nodes)) {\n            return;\n        }\n        this._set(nodes, false, browserEvent);\n    }\n    _set(nodes, silent, browserEvent) {\n        this.nodes = [...nodes];\n        this.elements = undefined;\n        this._nodeSet = undefined;\n        if (!silent) {\n            const that = this;\n            this._onDidChange.fire({ get elements() { return that.get(); }, browserEvent });\n        }\n    }\n    get() {\n        if (!this.elements) {\n            this.elements = this.nodes.map(node => node.element);\n        }\n        return [...this.elements];\n    }\n    getNodes() {\n        return this.nodes;\n    }\n    has(node) {\n        return this.nodeSet.has(node);\n    }\n    onDidModelSplice({ insertedNodes, deletedNodes }) {\n        if (!this.identityProvider) {\n            const set = this.createNodeSet();\n            const visit = (node) => set.delete(node);\n            deletedNodes.forEach(node => dfs(node, visit));\n            this.set([...set.values()]);\n            return;\n        }\n        const deletedNodesIdSet = new Set();\n        const deletedNodesVisitor = (node) => deletedNodesIdSet.add(this.identityProvider.getId(node.element).toString());\n        deletedNodes.forEach(node => dfs(node, deletedNodesVisitor));\n        const insertedNodesMap = new Map();\n        const insertedNodesVisitor = (node) => insertedNodesMap.set(this.identityProvider.getId(node.element).toString(), node);\n        insertedNodes.forEach(node => dfs(node, insertedNodesVisitor));\n        const nodes = [];\n        for (const node of this.nodes) {\n            const id = this.identityProvider.getId(node.element).toString();\n            const wasDeleted = deletedNodesIdSet.has(id);\n            if (!wasDeleted) {\n                nodes.push(node);\n            }\n            else {\n                const insertedNode = insertedNodesMap.get(id);\n                if (insertedNode && insertedNode.visible) {\n                    nodes.push(insertedNode);\n                }\n            }\n        }\n        if (this.nodes.length > 0 && nodes.length === 0) {\n            const node = this.getFirstViewElementWithTrait();\n            if (node) {\n                nodes.push(node);\n            }\n        }\n        this._set(nodes, true);\n    }\n    createNodeSet() {\n        const set = new Set();\n        for (const node of this.nodes) {\n            set.add(node);\n        }\n        return set;\n    }\n}\nclass TreeNodeListMouseController extends MouseController {\n    constructor(list, tree, stickyScrollProvider) {\n        super(list);\n        this.tree = tree;\n        this.stickyScrollProvider = stickyScrollProvider;\n    }\n    onViewPointer(e) {\n        if (isButton(e.browserEvent.target) ||\n            isInputElement(e.browserEvent.target) ||\n            isMonacoEditor(e.browserEvent.target)) {\n            return;\n        }\n        if (e.browserEvent.isHandledByList) {\n            return;\n        }\n        const node = e.element;\n        if (!node) {\n            return super.onViewPointer(e);\n        }\n        if (this.isSelectionRangeChangeEvent(e) || this.isSelectionSingleChangeEvent(e)) {\n            return super.onViewPointer(e);\n        }\n        const target = e.browserEvent.target;\n        const onTwistie = target.classList.contains('monaco-tl-twistie')\n            || (target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && e.browserEvent.offsetX < 16);\n        const isStickyElement = isStickyScrollElement(e.browserEvent.target);\n        let expandOnlyOnTwistieClick = false;\n        if (isStickyElement) {\n            expandOnlyOnTwistieClick = true;\n        }\n        else if (typeof this.tree.expandOnlyOnTwistieClick === 'function') {\n            expandOnlyOnTwistieClick = this.tree.expandOnlyOnTwistieClick(node.element);\n        }\n        else {\n            expandOnlyOnTwistieClick = !!this.tree.expandOnlyOnTwistieClick;\n        }\n        if (!isStickyElement) {\n            if (expandOnlyOnTwistieClick && !onTwistie && e.browserEvent.detail !== 2) {\n                return super.onViewPointer(e);\n            }\n            if (!this.tree.expandOnDoubleClick && e.browserEvent.detail === 2) {\n                return super.onViewPointer(e);\n            }\n        }\n        else {\n            this.handleStickyScrollMouseEvent(e, node);\n        }\n        if (node.collapsible && (!isStickyElement || onTwistie)) {\n            const location = this.tree.getNodeLocation(node);\n            const recursive = e.browserEvent.altKey;\n            this.tree.setFocus([location]);\n            this.tree.toggleCollapsed(location, recursive);\n            if (expandOnlyOnTwistieClick && onTwistie) {\n                // Do not set this before calling a handler on the super class, because it will reject it as handled\n                e.browserEvent.isHandledByList = true;\n                return;\n            }\n        }\n        if (!isStickyElement) {\n            super.onViewPointer(e);\n        }\n    }\n    handleStickyScrollMouseEvent(e, node) {\n        if (isMonacoCustomToggle(e.browserEvent.target) || isActionItem(e.browserEvent.target)) {\n            return;\n        }\n        const stickyScrollController = this.stickyScrollProvider();\n        if (!stickyScrollController) {\n            throw new Error('Sticky scroll controller not found');\n        }\n        const nodeIndex = this.list.indexOf(node);\n        const elementScrollTop = this.list.getElementTop(nodeIndex);\n        const elementTargetViewTop = stickyScrollController.nodePositionTopBelowWidget(node);\n        this.tree.scrollTop = elementScrollTop - elementTargetViewTop;\n        this.list.setFocus([nodeIndex]);\n        this.list.setSelection([nodeIndex]);\n    }\n    onDoubleClick(e) {\n        const onTwistie = e.browserEvent.target.classList.contains('monaco-tl-twistie');\n        if (onTwistie || !this.tree.expandOnDoubleClick) {\n            return;\n        }\n        if (e.browserEvent.isHandledByList) {\n            return;\n        }\n        super.onDoubleClick(e);\n    }\n}\n/**\n * We use this List subclass to restore selection and focus as nodes\n * get rendered in the list, possibly due to a node expand() call.\n */\nclass TreeNodeList extends List {\n    constructor(user, container, virtualDelegate, renderers, focusTrait, selectionTrait, anchorTrait, options) {\n        super(user, container, virtualDelegate, renderers, options);\n        this.focusTrait = focusTrait;\n        this.selectionTrait = selectionTrait;\n        this.anchorTrait = anchorTrait;\n    }\n    createMouseController(options) {\n        return new TreeNodeListMouseController(this, options.tree, options.stickyScrollProvider);\n    }\n    splice(start, deleteCount, elements = []) {\n        super.splice(start, deleteCount, elements);\n        if (elements.length === 0) {\n            return;\n        }\n        const additionalFocus = [];\n        const additionalSelection = [];\n        let anchor;\n        elements.forEach((node, index) => {\n            if (this.focusTrait.has(node)) {\n                additionalFocus.push(start + index);\n            }\n            if (this.selectionTrait.has(node)) {\n                additionalSelection.push(start + index);\n            }\n            if (this.anchorTrait.has(node)) {\n                anchor = start + index;\n            }\n        });\n        if (additionalFocus.length > 0) {\n            super.setFocus(distinct([...super.getFocus(), ...additionalFocus]));\n        }\n        if (additionalSelection.length > 0) {\n            super.setSelection(distinct([...super.getSelection(), ...additionalSelection]));\n        }\n        if (typeof anchor === 'number') {\n            super.setAnchor(anchor);\n        }\n    }\n    setFocus(indexes, browserEvent, fromAPI = false) {\n        super.setFocus(indexes, browserEvent);\n        if (!fromAPI) {\n            this.focusTrait.set(indexes.map(i => this.element(i)), browserEvent);\n        }\n    }\n    setSelection(indexes, browserEvent, fromAPI = false) {\n        super.setSelection(indexes, browserEvent);\n        if (!fromAPI) {\n            this.selectionTrait.set(indexes.map(i => this.element(i)), browserEvent);\n        }\n    }\n    setAnchor(index, fromAPI = false) {\n        super.setAnchor(index);\n        if (!fromAPI) {\n            if (typeof index === 'undefined') {\n                this.anchorTrait.set([]);\n            }\n            else {\n                this.anchorTrait.set([this.element(index)]);\n            }\n        }\n    }\n}\nexport class AbstractTree {\n    get onDidScroll() { return this.view.onDidScroll; }\n    get onDidChangeFocus() { return this.eventBufferer.wrapEvent(this.focus.onDidChange); }\n    get onDidChangeSelection() { return this.eventBufferer.wrapEvent(this.selection.onDidChange); }\n    get onMouseDblClick() { return Event.filter(Event.map(this.view.onMouseDblClick, asTreeMouseEvent), e => e.target !== TreeMouseEventTarget.Filter); }\n    get onPointer() { return Event.map(this.view.onPointer, asTreeMouseEvent); }\n    get onDidFocus() { return this.view.onDidFocus; }\n    get onDidChangeModel() { return Event.signal(this.model.onDidSplice); }\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    get findMode() { var _a, _b; return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : TreeFindMode.Highlight; }\n    set findMode(findMode) { if (this.findController) {\n        this.findController.mode = findMode;\n    } }\n    get findMatchType() { var _a, _b; return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.matchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy; }\n    set findMatchType(findFuzzy) { if (this.findController) {\n        this.findController.matchType = findFuzzy;\n    } }\n    get expandOnDoubleClick() { return typeof this._options.expandOnDoubleClick === 'undefined' ? true : this._options.expandOnDoubleClick; }\n    get expandOnlyOnTwistieClick() { return typeof this._options.expandOnlyOnTwistieClick === 'undefined' ? true : this._options.expandOnlyOnTwistieClick; }\n    get onDidDispose() { return this.view.onDidDispose; }\n    constructor(_user, container, delegate, renderers, _options = {}) {\n        var _a;\n        this._user = _user;\n        this._options = _options;\n        this.eventBufferer = new EventBufferer();\n        this.onDidChangeFindOpenState = Event.None;\n        this.disposables = new DisposableStore();\n        this._onWillRefilter = new Emitter();\n        this.onWillRefilter = this._onWillRefilter.event;\n        this._onDidUpdateOptions = new Emitter();\n        this.treeDelegate = new ComposedTreeDelegate(delegate);\n        const onDidChangeCollapseStateRelay = new Relay();\n        const onDidChangeActiveNodes = new Relay();\n        const activeNodes = this.disposables.add(new EventCollection(onDidChangeActiveNodes.event));\n        const renderedIndentGuides = new SetMap();\n        this.renderers = renderers.map(r => new TreeRenderer(r, () => this.model, onDidChangeCollapseStateRelay.event, activeNodes, renderedIndentGuides, _options));\n        for (const r of this.renderers) {\n            this.disposables.add(r);\n        }\n        let filter;\n        if (_options.keyboardNavigationLabelProvider) {\n            filter = new FindFilter(this, _options.keyboardNavigationLabelProvider, _options.filter);\n            _options = { ..._options, filter: filter }; // TODO need typescript help here\n            this.disposables.add(filter);\n        }\n        this.focus = new Trait(() => this.view.getFocusedElements()[0], _options.identityProvider);\n        this.selection = new Trait(() => this.view.getSelectedElements()[0], _options.identityProvider);\n        this.anchor = new Trait(() => this.view.getAnchorElement(), _options.identityProvider);\n        this.view = new TreeNodeList(_user, container, this.treeDelegate, this.renderers, this.focus, this.selection, this.anchor, { ...asListOptions(() => this.model, _options), tree: this, stickyScrollProvider: () => this.stickyScrollController });\n        this.model = this.createModel(_user, this.view, _options);\n        onDidChangeCollapseStateRelay.input = this.model.onDidChangeCollapseState;\n        const onDidModelSplice = Event.forEach(this.model.onDidSplice, e => {\n            this.eventBufferer.bufferEvents(() => {\n                this.focus.onDidModelSplice(e);\n                this.selection.onDidModelSplice(e);\n            });\n        }, this.disposables);\n        // Make sure the `forEach` always runs\n        onDidModelSplice(() => null, null, this.disposables);\n        // Active nodes can change when the model changes or when focus or selection change.\n        // We debounce it with 0 delay since these events may fire in the same stack and we only\n        // want to run this once. It also doesn't matter if it runs on the next tick since it's only\n        // a nice to have UI feature.\n        const activeNodesEmitter = this.disposables.add(new Emitter());\n        const activeNodesDebounce = this.disposables.add(new Delayer(0));\n        this.disposables.add(Event.any(onDidModelSplice, this.focus.onDidChange, this.selection.onDidChange)(() => {\n            activeNodesDebounce.trigger(() => {\n                const set = new Set();\n                for (const node of this.focus.getNodes()) {\n                    set.add(node);\n                }\n                for (const node of this.selection.getNodes()) {\n                    set.add(node);\n                }\n                activeNodesEmitter.fire([...set.values()]);\n            });\n        }));\n        onDidChangeActiveNodes.input = activeNodesEmitter.event;\n        if (_options.keyboardSupport !== false) {\n            const onKeyDown = Event.chain(this.view.onKeyDown, $ => $.filter(e => !isInputElement(e.target))\n                .map(e => new StandardKeyboardEvent(e)));\n            Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 15 /* KeyCode.LeftArrow */))(this.onLeftArrow, this, this.disposables);\n            Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 17 /* KeyCode.RightArrow */))(this.onRightArrow, this, this.disposables);\n            Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 10 /* KeyCode.Space */))(this.onSpace, this, this.disposables);\n        }\n        if (((_a = _options.findWidgetEnabled) !== null && _a !== void 0 ? _a : true) && _options.keyboardNavigationLabelProvider && _options.contextViewProvider) {\n            const opts = this.options.findWidgetStyles ? { styles: this.options.findWidgetStyles } : undefined;\n            this.findController = new FindController(this, this.model, this.view, filter, _options.contextViewProvider, opts);\n            this.focusNavigationFilter = node => this.findController.shouldAllowFocus(node);\n            this.onDidChangeFindOpenState = this.findController.onDidChangeOpenState;\n            this.disposables.add(this.findController);\n            this.onDidChangeFindMode = this.findController.onDidChangeMode;\n            this.onDidChangeFindMatchType = this.findController.onDidChangeMatchType;\n        }\n        else {\n            this.onDidChangeFindMode = Event.None;\n            this.onDidChangeFindMatchType = Event.None;\n        }\n        if (_options.enableStickyScroll) {\n            this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, _options);\n        }\n        this.styleElement = createStyleSheet(this.view.getHTMLElement());\n        this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n    }\n    updateOptions(optionsUpdate = {}) {\n        var _a;\n        this._options = { ...this._options, ...optionsUpdate };\n        for (const renderer of this.renderers) {\n            renderer.updateOptions(optionsUpdate);\n        }\n        this.view.updateOptions(this._options);\n        (_a = this.findController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n        this.updateStickyScroll(optionsUpdate);\n        this._onDidUpdateOptions.fire(this._options);\n        this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n    }\n    get options() {\n        return this._options;\n    }\n    updateStickyScroll(optionsUpdate) {\n        var _a;\n        if (!this.stickyScrollController && this._options.enableStickyScroll) {\n            this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, this._options);\n        }\n        else if (this.stickyScrollController && !this._options.enableStickyScroll) {\n            this.stickyScrollController.dispose();\n            this.stickyScrollController = undefined;\n        }\n        (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n    }\n    // Widget\n    getHTMLElement() {\n        return this.view.getHTMLElement();\n    }\n    get scrollTop() {\n        return this.view.scrollTop;\n    }\n    set scrollTop(scrollTop) {\n        this.view.scrollTop = scrollTop;\n    }\n    get scrollHeight() {\n        return this.view.scrollHeight;\n    }\n    get renderHeight() {\n        return this.view.renderHeight;\n    }\n    domFocus() {\n        this.view.domFocus();\n    }\n    layout(height, width) {\n        var _a;\n        this.view.layout(height, width);\n        if (isNumber(width)) {\n            (_a = this.findController) === null || _a === void 0 ? void 0 : _a.layout(width);\n        }\n    }\n    style(styles) {\n        const suffix = `.${this.view.domId}`;\n        const content = [];\n        if (styles.treeIndentGuidesStroke) {\n            content.push(`.monaco-list${suffix}:hover .monaco-tl-indent > .indent-guide, .monaco-list${suffix}.always .monaco-tl-indent > .indent-guide  { border-color: ${styles.treeInactiveIndentGuidesStroke}; }`);\n            content.push(`.monaco-list${suffix} .monaco-tl-indent > .indent-guide.active { border-color: ${styles.treeIndentGuidesStroke}; }`);\n        }\n        if (styles.listBackground) {\n            content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { background-color: ${styles.listBackground}; }`);\n            content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-row { background-color: ${styles.listBackground}; }`);\n        }\n        this.styleElement.textContent = content.join('\\n');\n        this.view.style(styles);\n    }\n    // Tree navigation\n    getParentElement(location) {\n        const parentRef = this.model.getParentNodeLocation(location);\n        const parentNode = this.model.getNode(parentRef);\n        return parentNode.element;\n    }\n    getFirstElementChild(location) {\n        return this.model.getFirstElementChild(location);\n    }\n    // Tree\n    getNode(location) {\n        return this.model.getNode(location);\n    }\n    getNodeLocation(node) {\n        return this.model.getNodeLocation(node);\n    }\n    collapse(location, recursive = false) {\n        return this.model.setCollapsed(location, true, recursive);\n    }\n    expand(location, recursive = false) {\n        return this.model.setCollapsed(location, false, recursive);\n    }\n    toggleCollapsed(location, recursive = false) {\n        return this.model.setCollapsed(location, undefined, recursive);\n    }\n    isCollapsible(location) {\n        return this.model.isCollapsible(location);\n    }\n    setCollapsible(location, collapsible) {\n        return this.model.setCollapsible(location, collapsible);\n    }\n    isCollapsed(location) {\n        return this.model.isCollapsed(location);\n    }\n    refilter() {\n        this._onWillRefilter.fire(undefined);\n        this.model.refilter();\n    }\n    setSelection(elements, browserEvent) {\n        const nodes = elements.map(e => this.model.getNode(e));\n        this.selection.set(nodes, browserEvent);\n        const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n        this.view.setSelection(indexes, browserEvent, true);\n    }\n    getSelection() {\n        return this.selection.get();\n    }\n    setFocus(elements, browserEvent) {\n        const nodes = elements.map(e => this.model.getNode(e));\n        this.focus.set(nodes, browserEvent);\n        const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n        this.view.setFocus(indexes, browserEvent, true);\n    }\n    getFocus() {\n        return this.focus.get();\n    }\n    reveal(location, relativeTop) {\n        this.model.expandTo(location);\n        const index = this.model.getListIndex(location);\n        if (index === -1) {\n            return;\n        }\n        if (!this.stickyScrollController) {\n            this.view.reveal(index, relativeTop);\n        }\n        else {\n            const paddingTop = this.stickyScrollController.nodePositionTopBelowWidget(this.getNode(location));\n            this.view.reveal(index, relativeTop, paddingTop);\n        }\n    }\n    // List\n    onLeftArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const didChange = this.model.setCollapsed(location, true);\n        if (!didChange) {\n            const parentLocation = this.model.getParentNodeLocation(location);\n            if (!parentLocation) {\n                return;\n            }\n            const parentListIndex = this.model.getListIndex(parentLocation);\n            this.view.reveal(parentListIndex);\n            this.view.setFocus([parentListIndex]);\n        }\n    }\n    onRightArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const didChange = this.model.setCollapsed(location, false);\n        if (!didChange) {\n            if (!node.children.some(child => child.visible)) {\n                return;\n            }\n            const [focusedIndex] = this.view.getFocus();\n            const firstChildIndex = focusedIndex + 1;\n            this.view.reveal(firstChildIndex);\n            this.view.setFocus([firstChildIndex]);\n        }\n    }\n    onSpace(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const recursive = e.browserEvent.altKey;\n        this.model.setCollapsed(location, undefined, recursive);\n    }\n    dispose() {\n        var _a;\n        dispose(this.disposables);\n        (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.dispose();\n        this.view.dispose();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}