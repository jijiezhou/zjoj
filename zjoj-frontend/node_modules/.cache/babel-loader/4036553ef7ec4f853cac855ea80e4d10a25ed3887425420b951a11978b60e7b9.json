{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from '../../../../base/browser/trustedTypes.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nimport { StringBuilder } from '../../../common/core/stringBuilder.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../../common/viewModel.js';\nconst ttPolicy = createTrustedTypesPolicy('diffEditorWidget', {\n  createHTML: value => value\n});\nexport function renderLines(source, options, decorations, domNode) {\n  applyFontInfo(domNode, options.fontInfo);\n  const hasCharChanges = decorations.length > 0;\n  const sb = new StringBuilder(10000);\n  let maxCharsPerLine = 0;\n  let renderedLineCount = 0;\n  const viewLineCounts = [];\n  for (let lineIndex = 0; lineIndex < source.lineTokens.length; lineIndex++) {\n    const lineNumber = lineIndex + 1;\n    const lineTokens = source.lineTokens[lineIndex];\n    const lineBreakData = source.lineBreakData[lineIndex];\n    const actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, Number.MAX_SAFE_INTEGER);\n    if (lineBreakData) {\n      let lastBreakOffset = 0;\n      for (const breakOffset of lineBreakData.breakOffsets) {\n        const viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n        maxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(renderedLineCount, viewLineTokens, LineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset), hasCharChanges, source.mightContainNonBasicASCII, source.mightContainRTL, options, sb));\n        renderedLineCount++;\n        lastBreakOffset = breakOffset;\n      }\n      viewLineCounts.push(lineBreakData.breakOffsets.length);\n    } else {\n      viewLineCounts.push(1);\n      maxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(renderedLineCount, lineTokens, actualDecorations, hasCharChanges, source.mightContainNonBasicASCII, source.mightContainRTL, options, sb));\n      renderedLineCount++;\n    }\n  }\n  maxCharsPerLine += options.scrollBeyondLastColumn;\n  const html = sb.build();\n  const trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n  domNode.innerHTML = trustedhtml;\n  const minWidthInPx = maxCharsPerLine * options.typicalHalfwidthCharacterWidth;\n  return {\n    heightInLines: renderedLineCount,\n    minWidthInPx,\n    viewLineCounts\n  };\n}\nexport class LineSource {\n  constructor(lineTokens, lineBreakData, mightContainNonBasicASCII, mightContainRTL) {\n    this.lineTokens = lineTokens;\n    this.lineBreakData = lineBreakData;\n    this.mightContainNonBasicASCII = mightContainNonBasicASCII;\n    this.mightContainRTL = mightContainRTL;\n  }\n}\nexport class RenderOptions {\n  static fromEditor(editor) {\n    var _a;\n    const modifiedEditorOptions = editor.getOptions();\n    const fontInfo = modifiedEditorOptions.get(50 /* EditorOption.fontInfo */);\n    const layoutInfo = modifiedEditorOptions.get(143 /* EditorOption.layoutInfo */);\n    return new RenderOptions(((_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.getOptions().tabSize) || 0, fontInfo, modifiedEditorOptions.get(33 /* EditorOption.disableMonospaceOptimizations */), fontInfo.typicalHalfwidthCharacterWidth, modifiedEditorOptions.get(103 /* EditorOption.scrollBeyondLastColumn */), modifiedEditorOptions.get(66 /* EditorOption.lineHeight */), layoutInfo.decorationsWidth, modifiedEditorOptions.get(116 /* EditorOption.stopRenderingLineAfter */), modifiedEditorOptions.get(98 /* EditorOption.renderWhitespace */), modifiedEditorOptions.get(93 /* EditorOption.renderControlCharacters */), modifiedEditorOptions.get(51 /* EditorOption.fontLigatures */));\n  }\n  constructor(tabSize, fontInfo, disableMonospaceOptimizations, typicalHalfwidthCharacterWidth, scrollBeyondLastColumn, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures) {\n    this.tabSize = tabSize;\n    this.fontInfo = fontInfo;\n    this.disableMonospaceOptimizations = disableMonospaceOptimizations;\n    this.typicalHalfwidthCharacterWidth = typicalHalfwidthCharacterWidth;\n    this.scrollBeyondLastColumn = scrollBeyondLastColumn;\n    this.lineHeight = lineHeight;\n    this.lineDecorationsWidth = lineDecorationsWidth;\n    this.stopRenderingLineAfter = stopRenderingLineAfter;\n    this.renderWhitespace = renderWhitespace;\n    this.renderControlCharacters = renderControlCharacters;\n    this.fontLigatures = fontLigatures;\n  }\n}\nfunction renderOriginalLine(viewLineIdx, lineTokens, decorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, options, sb) {\n  sb.appendString('<div class=\"view-line');\n  if (!hasCharChanges) {\n    // No char changes\n    sb.appendString(' char-delete');\n  }\n  sb.appendString('\" style=\"top:');\n  sb.appendString(String(viewLineIdx * options.lineHeight));\n  sb.appendString('px;width:1000000px;\">');\n  const lineContent = lineTokens.getLineContent();\n  const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n  const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n  const output = renderViewLine(new RenderLineInput(options.fontInfo.isMonospace && !options.disableMonospaceOptimizations, options.fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, decorations, options.tabSize, 0, options.fontInfo.spaceWidth, options.fontInfo.middotWidth, options.fontInfo.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, null // Send no selections, original line cannot be selected\n  ), sb);\n  sb.appendString('</div>');\n  return output.characterMapping.getHorizontalOffset(output.characterMapping.length);\n}","map":{"version":3,"names":["createTrustedTypesPolicy","applyFontInfo","EditorFontLigatures","StringBuilder","LineDecoration","RenderLineInput","renderViewLine","ViewLineRenderingData","ttPolicy","createHTML","value","renderLines","source","options","decorations","domNode","fontInfo","hasCharChanges","length","sb","maxCharsPerLine","renderedLineCount","viewLineCounts","lineIndex","lineTokens","lineNumber","lineBreakData","actualDecorations","filter","Number","MAX_SAFE_INTEGER","lastBreakOffset","breakOffset","breakOffsets","viewLineTokens","sliceAndInflate","Math","max","renderOriginalLine","extractWrapped","mightContainNonBasicASCII","mightContainRTL","push","scrollBeyondLastColumn","html","build","trustedhtml","innerHTML","minWidthInPx","typicalHalfwidthCharacterWidth","heightInLines","LineSource","constructor","RenderOptions","fromEditor","editor","_a","modifiedEditorOptions","getOptions","get","layoutInfo","getModel","tabSize","decorationsWidth","disableMonospaceOptimizations","lineHeight","lineDecorationsWidth","stopRenderingLineAfter","renderWhitespace","renderControlCharacters","fontLigatures","viewLineIdx","appendString","String","lineContent","getLineContent","isBasicASCII","containsRTL","output","isMonospace","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","OFF","characterMapping","getHorizontalOffset"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditor/renderLines.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from '../../../../base/browser/trustedTypes.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nimport { StringBuilder } from '../../../common/core/stringBuilder.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../../common/viewModel.js';\nconst ttPolicy = createTrustedTypesPolicy('diffEditorWidget', { createHTML: value => value });\nexport function renderLines(source, options, decorations, domNode) {\n    applyFontInfo(domNode, options.fontInfo);\n    const hasCharChanges = (decorations.length > 0);\n    const sb = new StringBuilder(10000);\n    let maxCharsPerLine = 0;\n    let renderedLineCount = 0;\n    const viewLineCounts = [];\n    for (let lineIndex = 0; lineIndex < source.lineTokens.length; lineIndex++) {\n        const lineNumber = lineIndex + 1;\n        const lineTokens = source.lineTokens[lineIndex];\n        const lineBreakData = source.lineBreakData[lineIndex];\n        const actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, Number.MAX_SAFE_INTEGER);\n        if (lineBreakData) {\n            let lastBreakOffset = 0;\n            for (const breakOffset of lineBreakData.breakOffsets) {\n                const viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n                maxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(renderedLineCount, viewLineTokens, LineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset), hasCharChanges, source.mightContainNonBasicASCII, source.mightContainRTL, options, sb));\n                renderedLineCount++;\n                lastBreakOffset = breakOffset;\n            }\n            viewLineCounts.push(lineBreakData.breakOffsets.length);\n        }\n        else {\n            viewLineCounts.push(1);\n            maxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(renderedLineCount, lineTokens, actualDecorations, hasCharChanges, source.mightContainNonBasicASCII, source.mightContainRTL, options, sb));\n            renderedLineCount++;\n        }\n    }\n    maxCharsPerLine += options.scrollBeyondLastColumn;\n    const html = sb.build();\n    const trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n    domNode.innerHTML = trustedhtml;\n    const minWidthInPx = (maxCharsPerLine * options.typicalHalfwidthCharacterWidth);\n    return {\n        heightInLines: renderedLineCount,\n        minWidthInPx,\n        viewLineCounts,\n    };\n}\nexport class LineSource {\n    constructor(lineTokens, lineBreakData, mightContainNonBasicASCII, mightContainRTL) {\n        this.lineTokens = lineTokens;\n        this.lineBreakData = lineBreakData;\n        this.mightContainNonBasicASCII = mightContainNonBasicASCII;\n        this.mightContainRTL = mightContainRTL;\n    }\n}\nexport class RenderOptions {\n    static fromEditor(editor) {\n        var _a;\n        const modifiedEditorOptions = editor.getOptions();\n        const fontInfo = modifiedEditorOptions.get(50 /* EditorOption.fontInfo */);\n        const layoutInfo = modifiedEditorOptions.get(143 /* EditorOption.layoutInfo */);\n        return new RenderOptions(((_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.getOptions().tabSize) || 0, fontInfo, modifiedEditorOptions.get(33 /* EditorOption.disableMonospaceOptimizations */), fontInfo.typicalHalfwidthCharacterWidth, modifiedEditorOptions.get(103 /* EditorOption.scrollBeyondLastColumn */), modifiedEditorOptions.get(66 /* EditorOption.lineHeight */), layoutInfo.decorationsWidth, modifiedEditorOptions.get(116 /* EditorOption.stopRenderingLineAfter */), modifiedEditorOptions.get(98 /* EditorOption.renderWhitespace */), modifiedEditorOptions.get(93 /* EditorOption.renderControlCharacters */), modifiedEditorOptions.get(51 /* EditorOption.fontLigatures */));\n    }\n    constructor(tabSize, fontInfo, disableMonospaceOptimizations, typicalHalfwidthCharacterWidth, scrollBeyondLastColumn, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures) {\n        this.tabSize = tabSize;\n        this.fontInfo = fontInfo;\n        this.disableMonospaceOptimizations = disableMonospaceOptimizations;\n        this.typicalHalfwidthCharacterWidth = typicalHalfwidthCharacterWidth;\n        this.scrollBeyondLastColumn = scrollBeyondLastColumn;\n        this.lineHeight = lineHeight;\n        this.lineDecorationsWidth = lineDecorationsWidth;\n        this.stopRenderingLineAfter = stopRenderingLineAfter;\n        this.renderWhitespace = renderWhitespace;\n        this.renderControlCharacters = renderControlCharacters;\n        this.fontLigatures = fontLigatures;\n    }\n}\nfunction renderOriginalLine(viewLineIdx, lineTokens, decorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, options, sb) {\n    sb.appendString('<div class=\"view-line');\n    if (!hasCharChanges) {\n        // No char changes\n        sb.appendString(' char-delete');\n    }\n    sb.appendString('\" style=\"top:');\n    sb.appendString(String(viewLineIdx * options.lineHeight));\n    sb.appendString('px;width:1000000px;\">');\n    const lineContent = lineTokens.getLineContent();\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n    const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n    const output = renderViewLine(new RenderLineInput((options.fontInfo.isMonospace && !options.disableMonospaceOptimizations), options.fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, decorations, options.tabSize, 0, options.fontInfo.spaceWidth, options.fontInfo.middotWidth, options.fontInfo.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, null // Send no selections, original line cannot be selected\n    ), sb);\n    sb.appendString('</div>');\n    return output.characterMapping.getHorizontalOffset(output.characterMapping.length);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}