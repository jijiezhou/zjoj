{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { IStandaloneThemeService } from '../../common/standaloneTheme.js';\nimport { ToggleHighContrastNLS } from '../../../common/standaloneStrings.js';\nimport { isDark, isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { HC_BLACK_THEME_NAME, HC_LIGHT_THEME_NAME, VS_DARK_THEME_NAME, VS_LIGHT_THEME_NAME } from '../standaloneThemeService.js';\nclass ToggleHighContrast extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.toggleHighContrast',\n      label: ToggleHighContrastNLS.toggleHighContrast,\n      alias: 'Toggle High Contrast Theme',\n      precondition: undefined\n    });\n    this._originalThemeName = null;\n  }\n  run(accessor, editor) {\n    const standaloneThemeService = accessor.get(IStandaloneThemeService);\n    const currentTheme = standaloneThemeService.getColorTheme();\n    if (isHighContrast(currentTheme.type)) {\n      // We must toggle back to the integrator's theme\n      standaloneThemeService.setTheme(this._originalThemeName || (isDark(currentTheme.type) ? VS_DARK_THEME_NAME : VS_LIGHT_THEME_NAME));\n      this._originalThemeName = null;\n    } else {\n      standaloneThemeService.setTheme(isDark(currentTheme.type) ? HC_BLACK_THEME_NAME : HC_LIGHT_THEME_NAME);\n      this._originalThemeName = currentTheme.themeName;\n    }\n  }\n}\nregisterEditorAction(ToggleHighContrast);","map":{"version":3,"names":["EditorAction","registerEditorAction","IStandaloneThemeService","ToggleHighContrastNLS","isDark","isHighContrast","HC_BLACK_THEME_NAME","HC_LIGHT_THEME_NAME","VS_DARK_THEME_NAME","VS_LIGHT_THEME_NAME","ToggleHighContrast","constructor","id","label","toggleHighContrast","alias","precondition","undefined","_originalThemeName","run","accessor","editor","standaloneThemeService","get","currentTheme","getColorTheme","type","setTheme","themeName"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/standalone/browser/toggleHighContrast/toggleHighContrast.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { IStandaloneThemeService } from '../../common/standaloneTheme.js';\nimport { ToggleHighContrastNLS } from '../../../common/standaloneStrings.js';\nimport { isDark, isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { HC_BLACK_THEME_NAME, HC_LIGHT_THEME_NAME, VS_DARK_THEME_NAME, VS_LIGHT_THEME_NAME } from '../standaloneThemeService.js';\nclass ToggleHighContrast extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.toggleHighContrast',\n            label: ToggleHighContrastNLS.toggleHighContrast,\n            alias: 'Toggle High Contrast Theme',\n            precondition: undefined\n        });\n        this._originalThemeName = null;\n    }\n    run(accessor, editor) {\n        const standaloneThemeService = accessor.get(IStandaloneThemeService);\n        const currentTheme = standaloneThemeService.getColorTheme();\n        if (isHighContrast(currentTheme.type)) {\n            // We must toggle back to the integrator's theme\n            standaloneThemeService.setTheme(this._originalThemeName || (isDark(currentTheme.type) ? VS_DARK_THEME_NAME : VS_LIGHT_THEME_NAME));\n            this._originalThemeName = null;\n        }\n        else {\n            standaloneThemeService.setTheme(isDark(currentTheme.type) ? HC_BLACK_THEME_NAME : HC_LIGHT_THEME_NAME);\n            this._originalThemeName = currentTheme.themeName;\n        }\n    }\n}\nregisterEditorAction(ToggleHighContrast);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,YAAY,EAAEC,oBAAoB,QAAQ,sCAAsC;AACzF,SAASC,uBAAuB,QAAQ,iCAAiC;AACzE,SAASC,qBAAqB,QAAQ,sCAAsC;AAC5E,SAASC,MAAM,EAAEC,cAAc,QAAQ,4CAA4C;AACnF,SAASC,mBAAmB,EAAEC,mBAAmB,EAAEC,kBAAkB,EAAEC,mBAAmB,QAAQ,8BAA8B;AAChI,MAAMC,kBAAkB,SAASV,YAAY,CAAC;EAC1CW,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACFC,EAAE,EAAE,kCAAkC;MACtCC,KAAK,EAAEV,qBAAqB,CAACW,kBAAkB;MAC/CC,KAAK,EAAE,4BAA4B;MACnCC,YAAY,EAAEC;IAClB,CAAC,CAAC;IACF,IAAI,CAACC,kBAAkB,GAAG,IAAI;EAClC;EACAC,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAE;IAClB,MAAMC,sBAAsB,GAAGF,QAAQ,CAACG,GAAG,CAACrB,uBAAuB,CAAC;IACpE,MAAMsB,YAAY,GAAGF,sBAAsB,CAACG,aAAa,CAAC,CAAC;IAC3D,IAAIpB,cAAc,CAACmB,YAAY,CAACE,IAAI,CAAC,EAAE;MACnC;MACAJ,sBAAsB,CAACK,QAAQ,CAAC,IAAI,CAACT,kBAAkB,KAAKd,MAAM,CAACoB,YAAY,CAACE,IAAI,CAAC,GAAGlB,kBAAkB,GAAGC,mBAAmB,CAAC,CAAC;MAClI,IAAI,CAACS,kBAAkB,GAAG,IAAI;IAClC,CAAC,MACI;MACDI,sBAAsB,CAACK,QAAQ,CAACvB,MAAM,CAACoB,YAAY,CAACE,IAAI,CAAC,GAAGpB,mBAAmB,GAAGC,mBAAmB,CAAC;MACtG,IAAI,CAACW,kBAAkB,GAAGM,YAAY,CAACI,SAAS;IACpD;EACJ;AACJ;AACA3B,oBAAoB,CAACS,kBAAkB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}