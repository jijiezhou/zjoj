{"ast":null,"code":"import \"core-js/modules/es.array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport * as dom from '../../../base/browser/dom.js';\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { parse } from '../../../base/common/marshalling.js';\nimport { matchesScheme, matchesSomeScheme, Schemas } from '../../../base/common/network.js';\nimport { normalizePath } from '../../../base/common/resources.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ICodeEditorService } from './codeEditorService.js';\nimport { ICommandService } from '../../../platform/commands/common/commands.js';\nimport { EditorOpenSource } from '../../../platform/editor/common/editor.js';\nimport { extractSelection } from '../../../platform/opener/common/opener.js';\nlet CommandOpener = class CommandOpener {\n  constructor(_commandService) {\n    this._commandService = _commandService;\n  }\n  async open(target, options) {\n    if (!matchesScheme(target, Schemas.command)) {\n      return false;\n    }\n    if (!(options === null || options === void 0 ? void 0 : options.allowCommands)) {\n      // silently ignore commands when command-links are disabled, also\n      // suppress other openers by returning TRUE\n      return true;\n    }\n    if (typeof target === 'string') {\n      target = URI.parse(target);\n    }\n    if (Array.isArray(options.allowCommands)) {\n      // Only allow specific commands\n      if (!options.allowCommands.includes(target.path)) {\n        // Suppress other openers by returning TRUE\n        return true;\n      }\n    }\n    // execute as command\n    let args = [];\n    try {\n      args = parse(decodeURIComponent(target.query));\n    } catch (_a) {\n      // ignore and retry\n      try {\n        args = parse(target.query);\n      } catch (_b) {\n        // ignore error\n      }\n    }\n    if (!Array.isArray(args)) {\n      args = [args];\n    }\n    await this._commandService.executeCommand(target.path, ...args);\n    return true;\n  }\n};\nCommandOpener = __decorate([__param(0, ICommandService)], CommandOpener);\nlet EditorOpener = class EditorOpener {\n  constructor(_editorService) {\n    this._editorService = _editorService;\n  }\n  async open(target, options) {\n    if (typeof target === 'string') {\n      target = URI.parse(target);\n    }\n    const {\n      selection,\n      uri\n    } = extractSelection(target);\n    target = uri;\n    if (target.scheme === Schemas.file) {\n      target = normalizePath(target); // workaround for non-normalized paths (https://github.com/microsoft/vscode/issues/12954)\n    }\n    await this._editorService.openCodeEditor({\n      resource: target,\n      options: {\n        selection,\n        source: (options === null || options === void 0 ? void 0 : options.fromUserGesture) ? EditorOpenSource.USER : EditorOpenSource.API,\n        ...(options === null || options === void 0 ? void 0 : options.editorOptions)\n      }\n    }, this._editorService.getFocusedCodeEditor(), options === null || options === void 0 ? void 0 : options.openToSide);\n    return true;\n  }\n};\nEditorOpener = __decorate([__param(0, ICodeEditorService)], EditorOpener);\nlet OpenerService = class OpenerService {\n  constructor(editorService, commandService) {\n    this._openers = new LinkedList();\n    this._validators = new LinkedList();\n    this._resolvers = new LinkedList();\n    this._resolvedUriTargets = new ResourceMap(uri => uri.with({\n      path: null,\n      fragment: null,\n      query: null\n    }).toString());\n    this._externalOpeners = new LinkedList();\n    // Default external opener is going through window.open()\n    this._defaultExternalOpener = {\n      openExternal: async href => {\n        // ensure to open HTTP/HTTPS links into new windows\n        // to not trigger a navigation. Any other link is\n        // safe to be set as HREF to prevent a blank window\n        // from opening.\n        if (matchesSomeScheme(href, Schemas.http, Schemas.https)) {\n          dom.windowOpenNoOpener(href);\n        } else {\n          mainWindow.location.href = href;\n        }\n        return true;\n      }\n    };\n    // Default opener: any external, maito, http(s), command, and catch-all-editors\n    this._openers.push({\n      open: async (target, options) => {\n        if ((options === null || options === void 0 ? void 0 : options.openExternal) || matchesSomeScheme(target, Schemas.mailto, Schemas.http, Schemas.https, Schemas.vsls)) {\n          // open externally\n          await this._doOpenExternal(target, options);\n          return true;\n        }\n        return false;\n      }\n    });\n    this._openers.push(new CommandOpener(commandService));\n    this._openers.push(new EditorOpener(editorService));\n  }\n  registerOpener(opener) {\n    const remove = this._openers.unshift(opener);\n    return {\n      dispose: remove\n    };\n  }\n  async open(target, options) {\n    var _a;\n    // check with contributed validators\n    const targetURI = typeof target === 'string' ? URI.parse(target) : target;\n    // validate against the original URI that this URI resolves to, if one exists\n    const validationTarget = (_a = this._resolvedUriTargets.get(targetURI)) !== null && _a !== void 0 ? _a : target;\n    for (const validator of this._validators) {\n      if (!(await validator.shouldOpen(validationTarget, options))) {\n        return false;\n      }\n    }\n    // check with contributed openers\n    for (const opener of this._openers) {\n      const handled = await opener.open(target, options);\n      if (handled) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async resolveExternalUri(resource, options) {\n    for (const resolver of this._resolvers) {\n      try {\n        const result = await resolver.resolveExternalUri(resource, options);\n        if (result) {\n          if (!this._resolvedUriTargets.has(result.resolved)) {\n            this._resolvedUriTargets.set(result.resolved, resource);\n          }\n          return result;\n        }\n      } catch (_a) {\n        // noop\n      }\n    }\n    throw new Error('Could not resolve external URI: ' + resource.toString());\n  }\n  async _doOpenExternal(resource, options) {\n    //todo@jrieken IExternalUriResolver should support `uri: URI | string`\n    const uri = typeof resource === 'string' ? URI.parse(resource) : resource;\n    let externalUri;\n    try {\n      externalUri = (await this.resolveExternalUri(uri, options)).resolved;\n    } catch (_a) {\n      externalUri = uri;\n    }\n    let href;\n    if (typeof resource === 'string' && uri.toString() === externalUri.toString()) {\n      // open the url-string AS IS\n      href = resource;\n    } else {\n      // open URI using the toString(noEncode)+encodeURI-trick\n      href = encodeURI(externalUri.toString(true));\n    }\n    if (options === null || options === void 0 ? void 0 : options.allowContributedOpeners) {\n      const preferredOpenerId = typeof (options === null || options === void 0 ? void 0 : options.allowContributedOpeners) === 'string' ? options === null || options === void 0 ? void 0 : options.allowContributedOpeners : undefined;\n      for (const opener of this._externalOpeners) {\n        const didOpen = await opener.openExternal(href, {\n          sourceUri: uri,\n          preferredOpenerId\n        }, CancellationToken.None);\n        if (didOpen) {\n          return true;\n        }\n      }\n    }\n    return this._defaultExternalOpener.openExternal(href, {\n      sourceUri: uri\n    }, CancellationToken.None);\n  }\n  dispose() {\n    this._validators.clear();\n  }\n};\nOpenerService = __decorate([__param(0, ICodeEditorService), __param(1, ICommandService)], OpenerService);\nexport { OpenerService };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","dom","mainWindow","CancellationToken","LinkedList","ResourceMap","parse","matchesScheme","matchesSomeScheme","Schemas","normalizePath","URI","ICodeEditorService","ICommandService","EditorOpenSource","extractSelection","CommandOpener","constructor","_commandService","open","options","command","allowCommands","Array","isArray","includes","path","args","decodeURIComponent","query","_a","_b","executeCommand","EditorOpener","_editorService","selection","uri","scheme","file","openCodeEditor","resource","source","fromUserGesture","USER","API","editorOptions","getFocusedCodeEditor","openToSide","OpenerService","editorService","commandService","_openers","_validators","_resolvers","_resolvedUriTargets","with","fragment","toString","_externalOpeners","_defaultExternalOpener","openExternal","href","http","https","windowOpenNoOpener","location","push","mailto","vsls","_doOpenExternal","registerOpener","opener","remove","unshift","dispose","targetURI","validationTarget","get","validator","shouldOpen","handled","resolveExternalUri","resolver","result","has","resolved","set","Error","externalUri","encodeURI","allowContributedOpeners","preferredOpenerId","undefined","didOpen","sourceUri","None","clear"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/browser/services/openerService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as dom from '../../../base/browser/dom.js';\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { parse } from '../../../base/common/marshalling.js';\nimport { matchesScheme, matchesSomeScheme, Schemas } from '../../../base/common/network.js';\nimport { normalizePath } from '../../../base/common/resources.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ICodeEditorService } from './codeEditorService.js';\nimport { ICommandService } from '../../../platform/commands/common/commands.js';\nimport { EditorOpenSource } from '../../../platform/editor/common/editor.js';\nimport { extractSelection } from '../../../platform/opener/common/opener.js';\nlet CommandOpener = class CommandOpener {\n    constructor(_commandService) {\n        this._commandService = _commandService;\n    }\n    async open(target, options) {\n        if (!matchesScheme(target, Schemas.command)) {\n            return false;\n        }\n        if (!(options === null || options === void 0 ? void 0 : options.allowCommands)) {\n            // silently ignore commands when command-links are disabled, also\n            // suppress other openers by returning TRUE\n            return true;\n        }\n        if (typeof target === 'string') {\n            target = URI.parse(target);\n        }\n        if (Array.isArray(options.allowCommands)) {\n            // Only allow specific commands\n            if (!options.allowCommands.includes(target.path)) {\n                // Suppress other openers by returning TRUE\n                return true;\n            }\n        }\n        // execute as command\n        let args = [];\n        try {\n            args = parse(decodeURIComponent(target.query));\n        }\n        catch (_a) {\n            // ignore and retry\n            try {\n                args = parse(target.query);\n            }\n            catch (_b) {\n                // ignore error\n            }\n        }\n        if (!Array.isArray(args)) {\n            args = [args];\n        }\n        await this._commandService.executeCommand(target.path, ...args);\n        return true;\n    }\n};\nCommandOpener = __decorate([\n    __param(0, ICommandService)\n], CommandOpener);\nlet EditorOpener = class EditorOpener {\n    constructor(_editorService) {\n        this._editorService = _editorService;\n    }\n    async open(target, options) {\n        if (typeof target === 'string') {\n            target = URI.parse(target);\n        }\n        const { selection, uri } = extractSelection(target);\n        target = uri;\n        if (target.scheme === Schemas.file) {\n            target = normalizePath(target); // workaround for non-normalized paths (https://github.com/microsoft/vscode/issues/12954)\n        }\n        await this._editorService.openCodeEditor({\n            resource: target,\n            options: {\n                selection,\n                source: (options === null || options === void 0 ? void 0 : options.fromUserGesture) ? EditorOpenSource.USER : EditorOpenSource.API,\n                ...options === null || options === void 0 ? void 0 : options.editorOptions\n            }\n        }, this._editorService.getFocusedCodeEditor(), options === null || options === void 0 ? void 0 : options.openToSide);\n        return true;\n    }\n};\nEditorOpener = __decorate([\n    __param(0, ICodeEditorService)\n], EditorOpener);\nlet OpenerService = class OpenerService {\n    constructor(editorService, commandService) {\n        this._openers = new LinkedList();\n        this._validators = new LinkedList();\n        this._resolvers = new LinkedList();\n        this._resolvedUriTargets = new ResourceMap(uri => uri.with({ path: null, fragment: null, query: null }).toString());\n        this._externalOpeners = new LinkedList();\n        // Default external opener is going through window.open()\n        this._defaultExternalOpener = {\n            openExternal: async (href) => {\n                // ensure to open HTTP/HTTPS links into new windows\n                // to not trigger a navigation. Any other link is\n                // safe to be set as HREF to prevent a blank window\n                // from opening.\n                if (matchesSomeScheme(href, Schemas.http, Schemas.https)) {\n                    dom.windowOpenNoOpener(href);\n                }\n                else {\n                    mainWindow.location.href = href;\n                }\n                return true;\n            }\n        };\n        // Default opener: any external, maito, http(s), command, and catch-all-editors\n        this._openers.push({\n            open: async (target, options) => {\n                if ((options === null || options === void 0 ? void 0 : options.openExternal) || matchesSomeScheme(target, Schemas.mailto, Schemas.http, Schemas.https, Schemas.vsls)) {\n                    // open externally\n                    await this._doOpenExternal(target, options);\n                    return true;\n                }\n                return false;\n            }\n        });\n        this._openers.push(new CommandOpener(commandService));\n        this._openers.push(new EditorOpener(editorService));\n    }\n    registerOpener(opener) {\n        const remove = this._openers.unshift(opener);\n        return { dispose: remove };\n    }\n    async open(target, options) {\n        var _a;\n        // check with contributed validators\n        const targetURI = typeof target === 'string' ? URI.parse(target) : target;\n        // validate against the original URI that this URI resolves to, if one exists\n        const validationTarget = (_a = this._resolvedUriTargets.get(targetURI)) !== null && _a !== void 0 ? _a : target;\n        for (const validator of this._validators) {\n            if (!(await validator.shouldOpen(validationTarget, options))) {\n                return false;\n            }\n        }\n        // check with contributed openers\n        for (const opener of this._openers) {\n            const handled = await opener.open(target, options);\n            if (handled) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async resolveExternalUri(resource, options) {\n        for (const resolver of this._resolvers) {\n            try {\n                const result = await resolver.resolveExternalUri(resource, options);\n                if (result) {\n                    if (!this._resolvedUriTargets.has(result.resolved)) {\n                        this._resolvedUriTargets.set(result.resolved, resource);\n                    }\n                    return result;\n                }\n            }\n            catch (_a) {\n                // noop\n            }\n        }\n        throw new Error('Could not resolve external URI: ' + resource.toString());\n    }\n    async _doOpenExternal(resource, options) {\n        //todo@jrieken IExternalUriResolver should support `uri: URI | string`\n        const uri = typeof resource === 'string' ? URI.parse(resource) : resource;\n        let externalUri;\n        try {\n            externalUri = (await this.resolveExternalUri(uri, options)).resolved;\n        }\n        catch (_a) {\n            externalUri = uri;\n        }\n        let href;\n        if (typeof resource === 'string' && uri.toString() === externalUri.toString()) {\n            // open the url-string AS IS\n            href = resource;\n        }\n        else {\n            // open URI using the toString(noEncode)+encodeURI-trick\n            href = encodeURI(externalUri.toString(true));\n        }\n        if (options === null || options === void 0 ? void 0 : options.allowContributedOpeners) {\n            const preferredOpenerId = typeof (options === null || options === void 0 ? void 0 : options.allowContributedOpeners) === 'string' ? options === null || options === void 0 ? void 0 : options.allowContributedOpeners : undefined;\n            for (const opener of this._externalOpeners) {\n                const didOpen = await opener.openExternal(href, {\n                    sourceUri: uri,\n                    preferredOpenerId,\n                }, CancellationToken.None);\n                if (didOpen) {\n                    return true;\n                }\n            }\n        }\n        return this._defaultExternalOpener.openExternal(href, { sourceUri: uri }, CancellationToken.None);\n    }\n    dispose() {\n        this._validators.clear();\n    }\n};\nOpenerService = __decorate([\n    __param(0, ICodeEditorService),\n    __param(1, ICommandService)\n], OpenerService);\nexport { OpenerService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}