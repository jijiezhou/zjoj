{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { transformErrorForSerialization } from '../errors.js';\nimport { Emitter } from '../event.js';\nimport { Disposable } from '../lifecycle.js';\nimport { getAllMethodNames } from '../objects.js';\nimport { isWeb } from '../platform.js';\nimport * as strings from '../strings.js';\nconst INITIALIZE = '$initialize';\nlet webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err) {\n  if (!isWeb) {\n    // running tests\n    return;\n  }\n  if (!webWorkerWarningLogged) {\n    webWorkerWarningLogged = true;\n    console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n  }\n  console.warn(err.message);\n}\nclass RequestMessage {\n  constructor(vsWorker, req, method, args) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.method = method;\n    this.args = args;\n    this.type = 0 /* MessageType.Request */;\n  }\n}\nclass ReplyMessage {\n  constructor(vsWorker, seq, res, err) {\n    this.vsWorker = vsWorker;\n    this.seq = seq;\n    this.res = res;\n    this.err = err;\n    this.type = 1 /* MessageType.Reply */;\n  }\n}\nclass SubscribeEventMessage {\n  constructor(vsWorker, req, eventName, arg) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.eventName = eventName;\n    this.arg = arg;\n    this.type = 2 /* MessageType.SubscribeEvent */;\n  }\n}\nclass EventMessage {\n  constructor(vsWorker, req, event) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.event = event;\n    this.type = 3 /* MessageType.Event */;\n  }\n}\nclass UnsubscribeEventMessage {\n  constructor(vsWorker, req) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.type = 4 /* MessageType.UnsubscribeEvent */;\n  }\n}\nclass SimpleWorkerProtocol {\n  constructor(handler) {\n    this._workerId = -1;\n    this._handler = handler;\n    this._lastSentReq = 0;\n    this._pendingReplies = Object.create(null);\n    this._pendingEmitters = new Map();\n    this._pendingEvents = new Map();\n  }\n  setWorkerId(workerId) {\n    this._workerId = workerId;\n  }\n  sendMessage(method, args) {\n    const req = String(++this._lastSentReq);\n    return new Promise((resolve, reject) => {\n      this._pendingReplies[req] = {\n        resolve: resolve,\n        reject: reject\n      };\n      this._send(new RequestMessage(this._workerId, req, method, args));\n    });\n  }\n  listen(eventName, arg) {\n    let req = null;\n    const emitter = new Emitter({\n      onWillAddFirstListener: () => {\n        req = String(++this._lastSentReq);\n        this._pendingEmitters.set(req, emitter);\n        this._send(new SubscribeEventMessage(this._workerId, req, eventName, arg));\n      },\n      onDidRemoveLastListener: () => {\n        this._pendingEmitters.delete(req);\n        this._send(new UnsubscribeEventMessage(this._workerId, req));\n        req = null;\n      }\n    });\n    return emitter.event;\n  }\n  handleMessage(message) {\n    if (!message || !message.vsWorker) {\n      return;\n    }\n    if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n      return;\n    }\n    this._handleMessage(message);\n  }\n  _handleMessage(msg) {\n    switch (msg.type) {\n      case 1 /* MessageType.Reply */:\n        return this._handleReplyMessage(msg);\n      case 0 /* MessageType.Request */:\n        return this._handleRequestMessage(msg);\n      case 2 /* MessageType.SubscribeEvent */:\n        return this._handleSubscribeEventMessage(msg);\n      case 3 /* MessageType.Event */:\n        return this._handleEventMessage(msg);\n      case 4 /* MessageType.UnsubscribeEvent */:\n        return this._handleUnsubscribeEventMessage(msg);\n    }\n  }\n  _handleReplyMessage(replyMessage) {\n    if (!this._pendingReplies[replyMessage.seq]) {\n      console.warn('Got reply to unknown seq');\n      return;\n    }\n    const reply = this._pendingReplies[replyMessage.seq];\n    delete this._pendingReplies[replyMessage.seq];\n    if (replyMessage.err) {\n      let err = replyMessage.err;\n      if (replyMessage.err.$isError) {\n        err = new Error();\n        err.name = replyMessage.err.name;\n        err.message = replyMessage.err.message;\n        err.stack = replyMessage.err.stack;\n      }\n      reply.reject(err);\n      return;\n    }\n    reply.resolve(replyMessage.res);\n  }\n  _handleRequestMessage(requestMessage) {\n    const req = requestMessage.req;\n    const result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n    result.then(r => {\n      this._send(new ReplyMessage(this._workerId, req, r, undefined));\n    }, e => {\n      if (e.detail instanceof Error) {\n        // Loading errors have a detail property that points to the actual error\n        e.detail = transformErrorForSerialization(e.detail);\n      }\n      this._send(new ReplyMessage(this._workerId, req, undefined, transformErrorForSerialization(e)));\n    });\n  }\n  _handleSubscribeEventMessage(msg) {\n    const req = msg.req;\n    const disposable = this._handler.handleEvent(msg.eventName, msg.arg)(event => {\n      this._send(new EventMessage(this._workerId, req, event));\n    });\n    this._pendingEvents.set(req, disposable);\n  }\n  _handleEventMessage(msg) {\n    if (!this._pendingEmitters.has(msg.req)) {\n      console.warn('Got event for unknown req');\n      return;\n    }\n    this._pendingEmitters.get(msg.req).fire(msg.event);\n  }\n  _handleUnsubscribeEventMessage(msg) {\n    if (!this._pendingEvents.has(msg.req)) {\n      console.warn('Got unsubscribe for unknown req');\n      return;\n    }\n    this._pendingEvents.get(msg.req).dispose();\n    this._pendingEvents.delete(msg.req);\n  }\n  _send(msg) {\n    const transfer = [];\n    if (msg.type === 0 /* MessageType.Request */) {\n      for (let i = 0; i < msg.args.length; i++) {\n        if (msg.args[i] instanceof ArrayBuffer) {\n          transfer.push(msg.args[i]);\n        }\n      }\n    } else if (msg.type === 1 /* MessageType.Reply */) {\n      if (msg.res instanceof ArrayBuffer) {\n        transfer.push(msg.res);\n      }\n    }\n    this._handler.sendMessage(msg, transfer);\n  }\n}\n/**\n * Main thread side\n */\nexport class SimpleWorkerClient extends Disposable {\n  constructor(workerFactory, moduleId, host) {\n    super();\n    let lazyProxyReject = null;\n    this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', msg => {\n      this._protocol.handleMessage(msg);\n    }, err => {\n      // in Firefox, web workers fail lazily :(\n      // we will reject the proxy\n      lazyProxyReject === null || lazyProxyReject === void 0 ? void 0 : lazyProxyReject(err);\n    }));\n    this._protocol = new SimpleWorkerProtocol({\n      sendMessage: (msg, transfer) => {\n        this._worker.postMessage(msg, transfer);\n      },\n      handleMessage: (method, args) => {\n        if (typeof host[method] !== 'function') {\n          return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\n        }\n        try {\n          return Promise.resolve(host[method].apply(host, args));\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      },\n      handleEvent: (eventName, arg) => {\n        if (propertyIsDynamicEvent(eventName)) {\n          const event = host[eventName].call(host, arg);\n          if (typeof event !== 'function') {\n            throw new Error(`Missing dynamic event ${eventName} on main thread host.`);\n          }\n          return event;\n        }\n        if (propertyIsEvent(eventName)) {\n          const event = host[eventName];\n          if (typeof event !== 'function') {\n            throw new Error(`Missing event ${eventName} on main thread host.`);\n          }\n          return event;\n        }\n        throw new Error(`Malformed event name ${eventName}`);\n      }\n    });\n    this._protocol.setWorkerId(this._worker.getId());\n    // Gather loader configuration\n    let loaderConfiguration = null;\n    const globalRequire = globalThis.require;\n    if (typeof globalRequire !== 'undefined' && typeof globalRequire.getConfig === 'function') {\n      // Get the configuration from the Monaco AMD Loader\n      loaderConfiguration = globalRequire.getConfig();\n    } else if (typeof globalThis.requirejs !== 'undefined') {\n      // Get the configuration from requirejs\n      loaderConfiguration = globalThis.requirejs.s.contexts._.config;\n    }\n    const hostMethods = getAllMethodNames(host);\n    // Send initialize message\n    this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [this._worker.getId(), JSON.parse(JSON.stringify(loaderConfiguration)), moduleId, hostMethods]);\n    // Create proxy to loaded code\n    const proxyMethodRequest = (method, args) => {\n      return this._request(method, args);\n    };\n    const proxyListen = (eventName, arg) => {\n      return this._protocol.listen(eventName, arg);\n    };\n    this._lazyProxy = new Promise((resolve, reject) => {\n      lazyProxyReject = reject;\n      this._onModuleLoaded.then(availableMethods => {\n        resolve(createProxyObject(availableMethods, proxyMethodRequest, proxyListen));\n      }, e => {\n        reject(e);\n        this._onError('Worker failed to load ' + moduleId, e);\n      });\n    });\n  }\n  getProxyObject() {\n    return this._lazyProxy;\n  }\n  _request(method, args) {\n    return new Promise((resolve, reject) => {\n      this._onModuleLoaded.then(() => {\n        this._protocol.sendMessage(method, args).then(resolve, reject);\n      }, reject);\n    });\n  }\n  _onError(message, error) {\n    console.error(message);\n    console.info(error);\n  }\n}\nfunction propertyIsEvent(name) {\n  // Assume a property is an event if it has a form of \"onSomething\"\n  return name[0] === 'o' && name[1] === 'n' && strings.isUpperAsciiLetter(name.charCodeAt(2));\n}\nfunction propertyIsDynamicEvent(name) {\n  // Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n  return /^onDynamic/.test(name) && strings.isUpperAsciiLetter(name.charCodeAt(9));\n}\nfunction createProxyObject(methodNames, invoke, proxyListen) {\n  const createProxyMethod = method => {\n    return function () {\n      const args = Array.prototype.slice.call(arguments, 0);\n      return invoke(method, args);\n    };\n  };\n  const createProxyDynamicEvent = eventName => {\n    return function (arg) {\n      return proxyListen(eventName, arg);\n    };\n  };\n  const result = {};\n  for (const methodName of methodNames) {\n    if (propertyIsDynamicEvent(methodName)) {\n      result[methodName] = createProxyDynamicEvent(methodName);\n      continue;\n    }\n    if (propertyIsEvent(methodName)) {\n      result[methodName] = proxyListen(methodName, undefined);\n      continue;\n    }\n    result[methodName] = createProxyMethod(methodName);\n  }\n  return result;\n}\n/**\n * Worker side\n */\nexport class SimpleWorkerServer {\n  constructor(postMessage, requestHandlerFactory) {\n    this._requestHandlerFactory = requestHandlerFactory;\n    this._requestHandler = null;\n    this._protocol = new SimpleWorkerProtocol({\n      sendMessage: (msg, transfer) => {\n        postMessage(msg, transfer);\n      },\n      handleMessage: (method, args) => this._handleMessage(method, args),\n      handleEvent: (eventName, arg) => this._handleEvent(eventName, arg)\n    });\n  }\n  onmessage(msg) {\n    this._protocol.handleMessage(msg);\n  }\n  _handleMessage(method, args) {\n    if (method === INITIALIZE) {\n      return this.initialize(args[0], args[1], args[2], args[3]);\n    }\n    if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n      return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n    }\n    try {\n      return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  _handleEvent(eventName, arg) {\n    if (!this._requestHandler) {\n      throw new Error(`Missing requestHandler`);\n    }\n    if (propertyIsDynamicEvent(eventName)) {\n      const event = this._requestHandler[eventName].call(this._requestHandler, arg);\n      if (typeof event !== 'function') {\n        throw new Error(`Missing dynamic event ${eventName} on request handler.`);\n      }\n      return event;\n    }\n    if (propertyIsEvent(eventName)) {\n      const event = this._requestHandler[eventName];\n      if (typeof event !== 'function') {\n        throw new Error(`Missing event ${eventName} on request handler.`);\n      }\n      return event;\n    }\n    throw new Error(`Malformed event name ${eventName}`);\n  }\n  initialize(workerId, loaderConfig, moduleId, hostMethods) {\n    this._protocol.setWorkerId(workerId);\n    const proxyMethodRequest = (method, args) => {\n      return this._protocol.sendMessage(method, args);\n    };\n    const proxyListen = (eventName, arg) => {\n      return this._protocol.listen(eventName, arg);\n    };\n    const hostProxy = createProxyObject(hostMethods, proxyMethodRequest, proxyListen);\n    if (this._requestHandlerFactory) {\n      // static request handler\n      this._requestHandler = this._requestHandlerFactory(hostProxy);\n      return Promise.resolve(getAllMethodNames(this._requestHandler));\n    }\n    if (loaderConfig) {\n      // Remove 'baseUrl', handling it is beyond scope for now\n      if (typeof loaderConfig.baseUrl !== 'undefined') {\n        delete loaderConfig['baseUrl'];\n      }\n      if (typeof loaderConfig.paths !== 'undefined') {\n        if (typeof loaderConfig.paths.vs !== 'undefined') {\n          delete loaderConfig.paths['vs'];\n        }\n      }\n      if (typeof loaderConfig.trustedTypesPolicy !== undefined) {\n        // don't use, it has been destroyed during serialize\n        delete loaderConfig['trustedTypesPolicy'];\n      }\n      // Since this is in a web worker, enable catching errors\n      loaderConfig.catchError = true;\n      globalThis.require.config(loaderConfig);\n    }\n    return new Promise((resolve, reject) => {\n      // Use the global require to be sure to get the global config\n      // ESM-comment-begin\n      // \t\t\tconst req = (globalThis.require || require);\n      // ESM-comment-end\n      // ESM-uncomment-begin\n      const req = globalThis.require;\n      // ESM-uncomment-end\n      req([moduleId], module => {\n        this._requestHandler = module.create(hostProxy);\n        if (!this._requestHandler) {\n          reject(new Error(`No RequestHandler!`));\n          return;\n        }\n        resolve(getAllMethodNames(this._requestHandler));\n      }, reject);\n    });\n  }\n}\n/**\n * Called on the worker side\n * @skipMangle\n */\nexport function create(postMessage) {\n  return new SimpleWorkerServer(postMessage, null);\n}","map":{"version":3,"names":["transformErrorForSerialization","Emitter","Disposable","getAllMethodNames","isWeb","strings","INITIALIZE","webWorkerWarningLogged","logOnceWebWorkerWarning","err","console","warn","message","RequestMessage","constructor","vsWorker","req","method","args","type","ReplyMessage","seq","res","SubscribeEventMessage","eventName","arg","EventMessage","event","UnsubscribeEventMessage","SimpleWorkerProtocol","handler","_workerId","_handler","_lastSentReq","_pendingReplies","Object","create","_pendingEmitters","Map","_pendingEvents","setWorkerId","workerId","sendMessage","String","Promise","resolve","reject","_send","listen","emitter","onWillAddFirstListener","set","onDidRemoveLastListener","delete","handleMessage","_handleMessage","msg","_handleReplyMessage","_handleRequestMessage","_handleSubscribeEventMessage","_handleEventMessage","_handleUnsubscribeEventMessage","replyMessage","reply","$isError","Error","name","stack","requestMessage","result","then","r","undefined","e","detail","disposable","handleEvent","has","get","fire","dispose","transfer","i","length","ArrayBuffer","push","SimpleWorkerClient","workerFactory","moduleId","host","lazyProxyReject","_worker","_register","_protocol","postMessage","apply","propertyIsDynamicEvent","call","propertyIsEvent","getId","loaderConfiguration","globalRequire","globalThis","require","getConfig","requirejs","s","contexts","_","config","hostMethods","_onModuleLoaded","JSON","parse","stringify","proxyMethodRequest","_request","proxyListen","_lazyProxy","availableMethods","createProxyObject","_onError","getProxyObject","error","info","isUpperAsciiLetter","charCodeAt","test","methodNames","invoke","createProxyMethod","Array","prototype","slice","arguments","createProxyDynamicEvent","methodName","SimpleWorkerServer","requestHandlerFactory","_requestHandlerFactory","_requestHandler","_handleEvent","onmessage","initialize","loaderConfig","hostProxy","baseUrl","paths","vs","trustedTypesPolicy","catchError","module"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { transformErrorForSerialization } from '../errors.js';\nimport { Emitter } from '../event.js';\nimport { Disposable } from '../lifecycle.js';\nimport { getAllMethodNames } from '../objects.js';\nimport { isWeb } from '../platform.js';\nimport * as strings from '../strings.js';\nconst INITIALIZE = '$initialize';\nlet webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err) {\n    if (!isWeb) {\n        // running tests\n        return;\n    }\n    if (!webWorkerWarningLogged) {\n        webWorkerWarningLogged = true;\n        console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n    }\n    console.warn(err.message);\n}\nclass RequestMessage {\n    constructor(vsWorker, req, method, args) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.method = method;\n        this.args = args;\n        this.type = 0 /* MessageType.Request */;\n    }\n}\nclass ReplyMessage {\n    constructor(vsWorker, seq, res, err) {\n        this.vsWorker = vsWorker;\n        this.seq = seq;\n        this.res = res;\n        this.err = err;\n        this.type = 1 /* MessageType.Reply */;\n    }\n}\nclass SubscribeEventMessage {\n    constructor(vsWorker, req, eventName, arg) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.eventName = eventName;\n        this.arg = arg;\n        this.type = 2 /* MessageType.SubscribeEvent */;\n    }\n}\nclass EventMessage {\n    constructor(vsWorker, req, event) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.event = event;\n        this.type = 3 /* MessageType.Event */;\n    }\n}\nclass UnsubscribeEventMessage {\n    constructor(vsWorker, req) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.type = 4 /* MessageType.UnsubscribeEvent */;\n    }\n}\nclass SimpleWorkerProtocol {\n    constructor(handler) {\n        this._workerId = -1;\n        this._handler = handler;\n        this._lastSentReq = 0;\n        this._pendingReplies = Object.create(null);\n        this._pendingEmitters = new Map();\n        this._pendingEvents = new Map();\n    }\n    setWorkerId(workerId) {\n        this._workerId = workerId;\n    }\n    sendMessage(method, args) {\n        const req = String(++this._lastSentReq);\n        return new Promise((resolve, reject) => {\n            this._pendingReplies[req] = {\n                resolve: resolve,\n                reject: reject\n            };\n            this._send(new RequestMessage(this._workerId, req, method, args));\n        });\n    }\n    listen(eventName, arg) {\n        let req = null;\n        const emitter = new Emitter({\n            onWillAddFirstListener: () => {\n                req = String(++this._lastSentReq);\n                this._pendingEmitters.set(req, emitter);\n                this._send(new SubscribeEventMessage(this._workerId, req, eventName, arg));\n            },\n            onDidRemoveLastListener: () => {\n                this._pendingEmitters.delete(req);\n                this._send(new UnsubscribeEventMessage(this._workerId, req));\n                req = null;\n            }\n        });\n        return emitter.event;\n    }\n    handleMessage(message) {\n        if (!message || !message.vsWorker) {\n            return;\n        }\n        if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n            return;\n        }\n        this._handleMessage(message);\n    }\n    _handleMessage(msg) {\n        switch (msg.type) {\n            case 1 /* MessageType.Reply */:\n                return this._handleReplyMessage(msg);\n            case 0 /* MessageType.Request */:\n                return this._handleRequestMessage(msg);\n            case 2 /* MessageType.SubscribeEvent */:\n                return this._handleSubscribeEventMessage(msg);\n            case 3 /* MessageType.Event */:\n                return this._handleEventMessage(msg);\n            case 4 /* MessageType.UnsubscribeEvent */:\n                return this._handleUnsubscribeEventMessage(msg);\n        }\n    }\n    _handleReplyMessage(replyMessage) {\n        if (!this._pendingReplies[replyMessage.seq]) {\n            console.warn('Got reply to unknown seq');\n            return;\n        }\n        const reply = this._pendingReplies[replyMessage.seq];\n        delete this._pendingReplies[replyMessage.seq];\n        if (replyMessage.err) {\n            let err = replyMessage.err;\n            if (replyMessage.err.$isError) {\n                err = new Error();\n                err.name = replyMessage.err.name;\n                err.message = replyMessage.err.message;\n                err.stack = replyMessage.err.stack;\n            }\n            reply.reject(err);\n            return;\n        }\n        reply.resolve(replyMessage.res);\n    }\n    _handleRequestMessage(requestMessage) {\n        const req = requestMessage.req;\n        const result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n        result.then((r) => {\n            this._send(new ReplyMessage(this._workerId, req, r, undefined));\n        }, (e) => {\n            if (e.detail instanceof Error) {\n                // Loading errors have a detail property that points to the actual error\n                e.detail = transformErrorForSerialization(e.detail);\n            }\n            this._send(new ReplyMessage(this._workerId, req, undefined, transformErrorForSerialization(e)));\n        });\n    }\n    _handleSubscribeEventMessage(msg) {\n        const req = msg.req;\n        const disposable = this._handler.handleEvent(msg.eventName, msg.arg)((event) => {\n            this._send(new EventMessage(this._workerId, req, event));\n        });\n        this._pendingEvents.set(req, disposable);\n    }\n    _handleEventMessage(msg) {\n        if (!this._pendingEmitters.has(msg.req)) {\n            console.warn('Got event for unknown req');\n            return;\n        }\n        this._pendingEmitters.get(msg.req).fire(msg.event);\n    }\n    _handleUnsubscribeEventMessage(msg) {\n        if (!this._pendingEvents.has(msg.req)) {\n            console.warn('Got unsubscribe for unknown req');\n            return;\n        }\n        this._pendingEvents.get(msg.req).dispose();\n        this._pendingEvents.delete(msg.req);\n    }\n    _send(msg) {\n        const transfer = [];\n        if (msg.type === 0 /* MessageType.Request */) {\n            for (let i = 0; i < msg.args.length; i++) {\n                if (msg.args[i] instanceof ArrayBuffer) {\n                    transfer.push(msg.args[i]);\n                }\n            }\n        }\n        else if (msg.type === 1 /* MessageType.Reply */) {\n            if (msg.res instanceof ArrayBuffer) {\n                transfer.push(msg.res);\n            }\n        }\n        this._handler.sendMessage(msg, transfer);\n    }\n}\n/**\n * Main thread side\n */\nexport class SimpleWorkerClient extends Disposable {\n    constructor(workerFactory, moduleId, host) {\n        super();\n        let lazyProxyReject = null;\n        this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', (msg) => {\n            this._protocol.handleMessage(msg);\n        }, (err) => {\n            // in Firefox, web workers fail lazily :(\n            // we will reject the proxy\n            lazyProxyReject === null || lazyProxyReject === void 0 ? void 0 : lazyProxyReject(err);\n        }));\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                this._worker.postMessage(msg, transfer);\n            },\n            handleMessage: (method, args) => {\n                if (typeof host[method] !== 'function') {\n                    return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\n                }\n                try {\n                    return Promise.resolve(host[method].apply(host, args));\n                }\n                catch (e) {\n                    return Promise.reject(e);\n                }\n            },\n            handleEvent: (eventName, arg) => {\n                if (propertyIsDynamicEvent(eventName)) {\n                    const event = host[eventName].call(host, arg);\n                    if (typeof event !== 'function') {\n                        throw new Error(`Missing dynamic event ${eventName} on main thread host.`);\n                    }\n                    return event;\n                }\n                if (propertyIsEvent(eventName)) {\n                    const event = host[eventName];\n                    if (typeof event !== 'function') {\n                        throw new Error(`Missing event ${eventName} on main thread host.`);\n                    }\n                    return event;\n                }\n                throw new Error(`Malformed event name ${eventName}`);\n            }\n        });\n        this._protocol.setWorkerId(this._worker.getId());\n        // Gather loader configuration\n        let loaderConfiguration = null;\n        const globalRequire = globalThis.require;\n        if (typeof globalRequire !== 'undefined' && typeof globalRequire.getConfig === 'function') {\n            // Get the configuration from the Monaco AMD Loader\n            loaderConfiguration = globalRequire.getConfig();\n        }\n        else if (typeof globalThis.requirejs !== 'undefined') {\n            // Get the configuration from requirejs\n            loaderConfiguration = globalThis.requirejs.s.contexts._.config;\n        }\n        const hostMethods = getAllMethodNames(host);\n        // Send initialize message\n        this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [\n            this._worker.getId(),\n            JSON.parse(JSON.stringify(loaderConfiguration)),\n            moduleId,\n            hostMethods,\n        ]);\n        // Create proxy to loaded code\n        const proxyMethodRequest = (method, args) => {\n            return this._request(method, args);\n        };\n        const proxyListen = (eventName, arg) => {\n            return this._protocol.listen(eventName, arg);\n        };\n        this._lazyProxy = new Promise((resolve, reject) => {\n            lazyProxyReject = reject;\n            this._onModuleLoaded.then((availableMethods) => {\n                resolve(createProxyObject(availableMethods, proxyMethodRequest, proxyListen));\n            }, (e) => {\n                reject(e);\n                this._onError('Worker failed to load ' + moduleId, e);\n            });\n        });\n    }\n    getProxyObject() {\n        return this._lazyProxy;\n    }\n    _request(method, args) {\n        return new Promise((resolve, reject) => {\n            this._onModuleLoaded.then(() => {\n                this._protocol.sendMessage(method, args).then(resolve, reject);\n            }, reject);\n        });\n    }\n    _onError(message, error) {\n        console.error(message);\n        console.info(error);\n    }\n}\nfunction propertyIsEvent(name) {\n    // Assume a property is an event if it has a form of \"onSomething\"\n    return name[0] === 'o' && name[1] === 'n' && strings.isUpperAsciiLetter(name.charCodeAt(2));\n}\nfunction propertyIsDynamicEvent(name) {\n    // Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n    return /^onDynamic/.test(name) && strings.isUpperAsciiLetter(name.charCodeAt(9));\n}\nfunction createProxyObject(methodNames, invoke, proxyListen) {\n    const createProxyMethod = (method) => {\n        return function () {\n            const args = Array.prototype.slice.call(arguments, 0);\n            return invoke(method, args);\n        };\n    };\n    const createProxyDynamicEvent = (eventName) => {\n        return function (arg) {\n            return proxyListen(eventName, arg);\n        };\n    };\n    const result = {};\n    for (const methodName of methodNames) {\n        if (propertyIsDynamicEvent(methodName)) {\n            result[methodName] = createProxyDynamicEvent(methodName);\n            continue;\n        }\n        if (propertyIsEvent(methodName)) {\n            result[methodName] = proxyListen(methodName, undefined);\n            continue;\n        }\n        result[methodName] = createProxyMethod(methodName);\n    }\n    return result;\n}\n/**\n * Worker side\n */\nexport class SimpleWorkerServer {\n    constructor(postMessage, requestHandlerFactory) {\n        this._requestHandlerFactory = requestHandlerFactory;\n        this._requestHandler = null;\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                postMessage(msg, transfer);\n            },\n            handleMessage: (method, args) => this._handleMessage(method, args),\n            handleEvent: (eventName, arg) => this._handleEvent(eventName, arg)\n        });\n    }\n    onmessage(msg) {\n        this._protocol.handleMessage(msg);\n    }\n    _handleMessage(method, args) {\n        if (method === INITIALIZE) {\n            return this.initialize(args[0], args[1], args[2], args[3]);\n        }\n        if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    _handleEvent(eventName, arg) {\n        if (!this._requestHandler) {\n            throw new Error(`Missing requestHandler`);\n        }\n        if (propertyIsDynamicEvent(eventName)) {\n            const event = this._requestHandler[eventName].call(this._requestHandler, arg);\n            if (typeof event !== 'function') {\n                throw new Error(`Missing dynamic event ${eventName} on request handler.`);\n            }\n            return event;\n        }\n        if (propertyIsEvent(eventName)) {\n            const event = this._requestHandler[eventName];\n            if (typeof event !== 'function') {\n                throw new Error(`Missing event ${eventName} on request handler.`);\n            }\n            return event;\n        }\n        throw new Error(`Malformed event name ${eventName}`);\n    }\n    initialize(workerId, loaderConfig, moduleId, hostMethods) {\n        this._protocol.setWorkerId(workerId);\n        const proxyMethodRequest = (method, args) => {\n            return this._protocol.sendMessage(method, args);\n        };\n        const proxyListen = (eventName, arg) => {\n            return this._protocol.listen(eventName, arg);\n        };\n        const hostProxy = createProxyObject(hostMethods, proxyMethodRequest, proxyListen);\n        if (this._requestHandlerFactory) {\n            // static request handler\n            this._requestHandler = this._requestHandlerFactory(hostProxy);\n            return Promise.resolve(getAllMethodNames(this._requestHandler));\n        }\n        if (loaderConfig) {\n            // Remove 'baseUrl', handling it is beyond scope for now\n            if (typeof loaderConfig.baseUrl !== 'undefined') {\n                delete loaderConfig['baseUrl'];\n            }\n            if (typeof loaderConfig.paths !== 'undefined') {\n                if (typeof loaderConfig.paths.vs !== 'undefined') {\n                    delete loaderConfig.paths['vs'];\n                }\n            }\n            if (typeof loaderConfig.trustedTypesPolicy !== undefined) {\n                // don't use, it has been destroyed during serialize\n                delete loaderConfig['trustedTypesPolicy'];\n            }\n            // Since this is in a web worker, enable catching errors\n            loaderConfig.catchError = true;\n            globalThis.require.config(loaderConfig);\n        }\n        return new Promise((resolve, reject) => {\n            // Use the global require to be sure to get the global config\n            // ESM-comment-begin\n            // \t\t\tconst req = (globalThis.require || require);\n            // ESM-comment-end\n            // ESM-uncomment-begin\n            const req = globalThis.require;\n            // ESM-uncomment-end\n            req([moduleId], (module) => {\n                this._requestHandler = module.create(hostProxy);\n                if (!this._requestHandler) {\n                    reject(new Error(`No RequestHandler!`));\n                    return;\n                }\n                resolve(getAllMethodNames(this._requestHandler));\n            }, reject);\n        });\n    }\n}\n/**\n * Called on the worker side\n * @skipMangle\n */\nexport function create(postMessage) {\n    return new SimpleWorkerServer(postMessage, null);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}