{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { GlobalIdleValue } from '../../../base/common/async.js';\nimport { illegalState } from '../../../base/common/errors.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { SyncDescriptor } from './descriptors.js';\nimport { Graph } from './graph.js';\nimport { IInstantiationService, _util } from './instantiation.js';\nimport { ServiceCollection } from './serviceCollection.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\n// TRACING\nconst _enableAllTracing = false;\nclass CyclicDependencyError extends Error {\n  constructor(graph) {\n    var _a;\n    super('cyclic dependency between services');\n    this.message = (_a = graph.findCycleSlow()) !== null && _a !== void 0 ? _a : `UNABLE to detect cycle, dumping graph: \\n${graph.toString()}`;\n  }\n}\nexport class InstantiationService {\n  constructor(_services = new ServiceCollection(), _strict = false, _parent, _enableTracing = _enableAllTracing) {\n    var _a;\n    this._services = _services;\n    this._strict = _strict;\n    this._parent = _parent;\n    this._enableTracing = _enableTracing;\n    this._activeInstantiations = new Set();\n    this._services.set(IInstantiationService, this);\n    this._globalGraph = _enableTracing ? (_a = _parent === null || _parent === void 0 ? void 0 : _parent._globalGraph) !== null && _a !== void 0 ? _a : new Graph(e => e) : undefined;\n  }\n  createChild(services) {\n    return new InstantiationService(services, this._strict, this, this._enableTracing);\n  }\n  invokeFunction(fn, ...args) {\n    const _trace = Trace.traceInvocation(this._enableTracing, fn);\n    let _done = false;\n    try {\n      const accessor = {\n        get: id => {\n          if (_done) {\n            throw illegalState('service accessor is only valid during the invocation of its target method');\n          }\n          const result = this._getOrCreateServiceInstance(id, _trace);\n          if (!result) {\n            throw new Error(`[invokeFunction] unknown service '${id}'`);\n          }\n          return result;\n        }\n      };\n      return fn(accessor, ...args);\n    } finally {\n      _done = true;\n      _trace.stop();\n    }\n  }\n  createInstance(ctorOrDescriptor, ...rest) {\n    let _trace;\n    let result;\n    if (ctorOrDescriptor instanceof SyncDescriptor) {\n      _trace = Trace.traceCreation(this._enableTracing, ctorOrDescriptor.ctor);\n      result = this._createInstance(ctorOrDescriptor.ctor, ctorOrDescriptor.staticArguments.concat(rest), _trace);\n    } else {\n      _trace = Trace.traceCreation(this._enableTracing, ctorOrDescriptor);\n      result = this._createInstance(ctorOrDescriptor, rest, _trace);\n    }\n    _trace.stop();\n    return result;\n  }\n  _createInstance(ctor, args = [], _trace) {\n    // arguments defined by service decorators\n    const serviceDependencies = _util.getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n    const serviceArgs = [];\n    for (const dependency of serviceDependencies) {\n      const service = this._getOrCreateServiceInstance(dependency.id, _trace);\n      if (!service) {\n        this._throwIfStrict(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`, false);\n      }\n      serviceArgs.push(service);\n    }\n    const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n    // check for argument mismatches, adjust static args if needed\n    if (args.length !== firstServiceArgPos) {\n      console.trace(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n      const delta = firstServiceArgPos - args.length;\n      if (delta > 0) {\n        args = args.concat(new Array(delta));\n      } else {\n        args = args.slice(0, firstServiceArgPos);\n      }\n    }\n    // now create the instance\n    return Reflect.construct(ctor, args.concat(serviceArgs));\n  }\n  _setServiceInstance(id, instance) {\n    if (this._services.get(id) instanceof SyncDescriptor) {\n      this._services.set(id, instance);\n    } else if (this._parent) {\n      this._parent._setServiceInstance(id, instance);\n    } else {\n      throw new Error('illegalState - setting UNKNOWN service instance');\n    }\n  }\n  _getServiceInstanceOrDescriptor(id) {\n    const instanceOrDesc = this._services.get(id);\n    if (!instanceOrDesc && this._parent) {\n      return this._parent._getServiceInstanceOrDescriptor(id);\n    } else {\n      return instanceOrDesc;\n    }\n  }\n  _getOrCreateServiceInstance(id, _trace) {\n    if (this._globalGraph && this._globalGraphImplicitDependency) {\n      this._globalGraph.insertEdge(this._globalGraphImplicitDependency, String(id));\n    }\n    const thing = this._getServiceInstanceOrDescriptor(id);\n    if (thing instanceof SyncDescriptor) {\n      return this._safeCreateAndCacheServiceInstance(id, thing, _trace.branch(id, true));\n    } else {\n      _trace.branch(id, false);\n      return thing;\n    }\n  }\n  _safeCreateAndCacheServiceInstance(id, desc, _trace) {\n    if (this._activeInstantiations.has(id)) {\n      throw new Error(`illegal state - RECURSIVELY instantiating service '${id}'`);\n    }\n    this._activeInstantiations.add(id);\n    try {\n      return this._createAndCacheServiceInstance(id, desc, _trace);\n    } finally {\n      this._activeInstantiations.delete(id);\n    }\n  }\n  _createAndCacheServiceInstance(id, desc, _trace) {\n    var _a;\n    const graph = new Graph(data => data.id.toString());\n    let cycleCount = 0;\n    const stack = [{\n      id,\n      desc,\n      _trace\n    }];\n    while (stack.length) {\n      const item = stack.pop();\n      graph.lookupOrInsertNode(item);\n      // a weak but working heuristic for cycle checks\n      if (cycleCount++ > 1000) {\n        throw new CyclicDependencyError(graph);\n      }\n      // check all dependencies for existence and if they need to be created first\n      for (const dependency of _util.getServiceDependencies(item.desc.ctor)) {\n        const instanceOrDesc = this._getServiceInstanceOrDescriptor(dependency.id);\n        if (!instanceOrDesc) {\n          this._throwIfStrict(`[createInstance] ${id} depends on ${dependency.id} which is NOT registered.`, true);\n        }\n        // take note of all service dependencies\n        (_a = this._globalGraph) === null || _a === void 0 ? void 0 : _a.insertEdge(String(item.id), String(dependency.id));\n        if (instanceOrDesc instanceof SyncDescriptor) {\n          const d = {\n            id: dependency.id,\n            desc: instanceOrDesc,\n            _trace: item._trace.branch(dependency.id, true)\n          };\n          graph.insertEdge(item, d);\n          stack.push(d);\n        }\n      }\n    }\n    while (true) {\n      const roots = graph.roots();\n      // if there is no more roots but still\n      // nodes in the graph we have a cycle\n      if (roots.length === 0) {\n        if (!graph.isEmpty()) {\n          throw new CyclicDependencyError(graph);\n        }\n        break;\n      }\n      for (const {\n        data\n      } of roots) {\n        // Repeat the check for this still being a service sync descriptor. That's because\n        // instantiating a dependency might have side-effect and recursively trigger instantiation\n        // so that some dependencies are now fullfilled already.\n        const instanceOrDesc = this._getServiceInstanceOrDescriptor(data.id);\n        if (instanceOrDesc instanceof SyncDescriptor) {\n          // create instance and overwrite the service collections\n          const instance = this._createServiceInstanceWithOwner(data.id, data.desc.ctor, data.desc.staticArguments, data.desc.supportsDelayedInstantiation, data._trace);\n          this._setServiceInstance(data.id, instance);\n        }\n        graph.removeNode(data);\n      }\n    }\n    return this._getServiceInstanceOrDescriptor(id);\n  }\n  _createServiceInstanceWithOwner(id, ctor, args = [], supportsDelayedInstantiation, _trace) {\n    if (this._services.get(id) instanceof SyncDescriptor) {\n      return this._createServiceInstance(id, ctor, args, supportsDelayedInstantiation, _trace);\n    } else if (this._parent) {\n      return this._parent._createServiceInstanceWithOwner(id, ctor, args, supportsDelayedInstantiation, _trace);\n    } else {\n      throw new Error(`illegalState - creating UNKNOWN service instance ${ctor.name}`);\n    }\n  }\n  _createServiceInstance(id, ctor, args = [], supportsDelayedInstantiation, _trace) {\n    if (!supportsDelayedInstantiation) {\n      // eager instantiation\n      return this._createInstance(ctor, args, _trace);\n    } else {\n      const child = new InstantiationService(undefined, this._strict, this, this._enableTracing);\n      child._globalGraphImplicitDependency = String(id);\n      // Return a proxy object that's backed by an idle value. That\n      // strategy is to instantiate services in our idle time or when actually\n      // needed but not when injected into a consumer\n      // return \"empty events\" when the service isn't instantiated yet\n      const earlyListeners = new Map();\n      const idle = new GlobalIdleValue(() => {\n        const result = child._createInstance(ctor, args, _trace);\n        // early listeners that we kept are now being subscribed to\n        // the real service\n        for (const [key, values] of earlyListeners) {\n          const candidate = result[key];\n          if (typeof candidate === 'function') {\n            for (const listener of values) {\n              candidate.apply(result, listener);\n            }\n          }\n        }\n        earlyListeners.clear();\n        return result;\n      });\n      return new Proxy(Object.create(null), {\n        get(target, key) {\n          if (!idle.isInitialized) {\n            // looks like an event\n            if (typeof key === 'string' && (key.startsWith('onDid') || key.startsWith('onWill'))) {\n              let list = earlyListeners.get(key);\n              if (!list) {\n                list = new LinkedList();\n                earlyListeners.set(key, list);\n              }\n              const event = (callback, thisArg, disposables) => {\n                const rm = list.push([callback, thisArg, disposables]);\n                return toDisposable(rm);\n              };\n              return event;\n            }\n          }\n          // value already exists\n          if (key in target) {\n            return target[key];\n          }\n          // create value\n          const obj = idle.value;\n          let prop = obj[key];\n          if (typeof prop !== 'function') {\n            return prop;\n          }\n          prop = prop.bind(obj);\n          target[key] = prop;\n          return prop;\n        },\n        set(_target, p, value) {\n          idle.value[p] = value;\n          return true;\n        },\n        getPrototypeOf(_target) {\n          return ctor.prototype;\n        }\n      });\n    }\n  }\n  _throwIfStrict(msg, printWarning) {\n    if (printWarning) {\n      console.warn(msg);\n    }\n    if (this._strict) {\n      throw new Error(msg);\n    }\n  }\n}\nexport class Trace {\n  static traceInvocation(_enableTracing, ctor) {\n    return !_enableTracing ? Trace._None : new Trace(2 /* TraceType.Invocation */, ctor.name || new Error().stack.split('\\n').slice(3, 4).join('\\n'));\n  }\n  static traceCreation(_enableTracing, ctor) {\n    return !_enableTracing ? Trace._None : new Trace(1 /* TraceType.Creation */, ctor.name);\n  }\n  constructor(type, name) {\n    this.type = type;\n    this.name = name;\n    this._start = Date.now();\n    this._dep = [];\n  }\n  branch(id, first) {\n    const child = new Trace(3 /* TraceType.Branch */, id.toString());\n    this._dep.push([id, first, child]);\n    return child;\n  }\n  stop() {\n    const dur = Date.now() - this._start;\n    Trace._totals += dur;\n    let causedCreation = false;\n    function printChild(n, trace) {\n      const res = [];\n      const prefix = new Array(n + 1).join('\\t');\n      for (const [id, first, child] of trace._dep) {\n        if (first && child) {\n          causedCreation = true;\n          res.push(`${prefix}CREATES -> ${id}`);\n          const nested = printChild(n + 1, child);\n          if (nested) {\n            res.push(nested);\n          }\n        } else {\n          res.push(`${prefix}uses -> ${id}`);\n        }\n      }\n      return res.join('\\n');\n    }\n    const lines = [`${this.type === 1 /* TraceType.Creation */ ? 'CREATE' : 'CALL'} ${this.name}`, `${printChild(1, this)}`, `DONE, took ${dur.toFixed(2)}ms (grand total ${Trace._totals.toFixed(2)}ms)`];\n    if (dur > 2 || causedCreation) {\n      Trace.all.add(lines.join('\\n'));\n    }\n  }\n}\nTrace.all = new Set();\nTrace._None = new class extends Trace {\n  constructor() {\n    super(0 /* TraceType.None */, null);\n  }\n  stop() {}\n  branch() {\n    return this;\n  }\n}();\nTrace._totals = 0;\n//#endregion","map":{"version":3,"names":["GlobalIdleValue","illegalState","toDisposable","SyncDescriptor","Graph","IInstantiationService","_util","ServiceCollection","LinkedList","_enableAllTracing","CyclicDependencyError","Error","constructor","graph","_a","message","findCycleSlow","toString","InstantiationService","_services","_strict","_parent","_enableTracing","_activeInstantiations","Set","set","_globalGraph","e","undefined","createChild","services","invokeFunction","fn","args","_trace","Trace","traceInvocation","_done","accessor","get","id","result","_getOrCreateServiceInstance","stop","createInstance","ctorOrDescriptor","rest","traceCreation","ctor","_createInstance","staticArguments","concat","serviceDependencies","getServiceDependencies","sort","a","b","index","serviceArgs","dependency","service","_throwIfStrict","name","push","firstServiceArgPos","length","console","trace","delta","Array","slice","Reflect","construct","_setServiceInstance","instance","_getServiceInstanceOrDescriptor","instanceOrDesc","_globalGraphImplicitDependency","insertEdge","String","thing","_safeCreateAndCacheServiceInstance","branch","desc","has","add","_createAndCacheServiceInstance","delete","data","cycleCount","stack","item","pop","lookupOrInsertNode","d","roots","isEmpty","_createServiceInstanceWithOwner","supportsDelayedInstantiation","removeNode","_createServiceInstance","child","earlyListeners","Map","idle","key","values","candidate","listener","apply","clear","Proxy","Object","create","target","isInitialized","startsWith","list","event","callback","thisArg","disposables","rm","obj","value","prop","bind","_target","p","getPrototypeOf","prototype","msg","printWarning","warn","_None","split","join","type","_start","Date","now","_dep","first","dur","_totals","causedCreation","printChild","n","res","prefix","nested","lines","toFixed","all"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiationService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { GlobalIdleValue } from '../../../base/common/async.js';\nimport { illegalState } from '../../../base/common/errors.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { SyncDescriptor } from './descriptors.js';\nimport { Graph } from './graph.js';\nimport { IInstantiationService, _util } from './instantiation.js';\nimport { ServiceCollection } from './serviceCollection.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\n// TRACING\nconst _enableAllTracing = false;\nclass CyclicDependencyError extends Error {\n    constructor(graph) {\n        var _a;\n        super('cyclic dependency between services');\n        this.message = (_a = graph.findCycleSlow()) !== null && _a !== void 0 ? _a : `UNABLE to detect cycle, dumping graph: \\n${graph.toString()}`;\n    }\n}\nexport class InstantiationService {\n    constructor(_services = new ServiceCollection(), _strict = false, _parent, _enableTracing = _enableAllTracing) {\n        var _a;\n        this._services = _services;\n        this._strict = _strict;\n        this._parent = _parent;\n        this._enableTracing = _enableTracing;\n        this._activeInstantiations = new Set();\n        this._services.set(IInstantiationService, this);\n        this._globalGraph = _enableTracing ? (_a = _parent === null || _parent === void 0 ? void 0 : _parent._globalGraph) !== null && _a !== void 0 ? _a : new Graph(e => e) : undefined;\n    }\n    createChild(services) {\n        return new InstantiationService(services, this._strict, this, this._enableTracing);\n    }\n    invokeFunction(fn, ...args) {\n        const _trace = Trace.traceInvocation(this._enableTracing, fn);\n        let _done = false;\n        try {\n            const accessor = {\n                get: (id) => {\n                    if (_done) {\n                        throw illegalState('service accessor is only valid during the invocation of its target method');\n                    }\n                    const result = this._getOrCreateServiceInstance(id, _trace);\n                    if (!result) {\n                        throw new Error(`[invokeFunction] unknown service '${id}'`);\n                    }\n                    return result;\n                }\n            };\n            return fn(accessor, ...args);\n        }\n        finally {\n            _done = true;\n            _trace.stop();\n        }\n    }\n    createInstance(ctorOrDescriptor, ...rest) {\n        let _trace;\n        let result;\n        if (ctorOrDescriptor instanceof SyncDescriptor) {\n            _trace = Trace.traceCreation(this._enableTracing, ctorOrDescriptor.ctor);\n            result = this._createInstance(ctorOrDescriptor.ctor, ctorOrDescriptor.staticArguments.concat(rest), _trace);\n        }\n        else {\n            _trace = Trace.traceCreation(this._enableTracing, ctorOrDescriptor);\n            result = this._createInstance(ctorOrDescriptor, rest, _trace);\n        }\n        _trace.stop();\n        return result;\n    }\n    _createInstance(ctor, args = [], _trace) {\n        // arguments defined by service decorators\n        const serviceDependencies = _util.getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n        const serviceArgs = [];\n        for (const dependency of serviceDependencies) {\n            const service = this._getOrCreateServiceInstance(dependency.id, _trace);\n            if (!service) {\n                this._throwIfStrict(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`, false);\n            }\n            serviceArgs.push(service);\n        }\n        const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n        // check for argument mismatches, adjust static args if needed\n        if (args.length !== firstServiceArgPos) {\n            console.trace(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n            const delta = firstServiceArgPos - args.length;\n            if (delta > 0) {\n                args = args.concat(new Array(delta));\n            }\n            else {\n                args = args.slice(0, firstServiceArgPos);\n            }\n        }\n        // now create the instance\n        return Reflect.construct(ctor, args.concat(serviceArgs));\n    }\n    _setServiceInstance(id, instance) {\n        if (this._services.get(id) instanceof SyncDescriptor) {\n            this._services.set(id, instance);\n        }\n        else if (this._parent) {\n            this._parent._setServiceInstance(id, instance);\n        }\n        else {\n            throw new Error('illegalState - setting UNKNOWN service instance');\n        }\n    }\n    _getServiceInstanceOrDescriptor(id) {\n        const instanceOrDesc = this._services.get(id);\n        if (!instanceOrDesc && this._parent) {\n            return this._parent._getServiceInstanceOrDescriptor(id);\n        }\n        else {\n            return instanceOrDesc;\n        }\n    }\n    _getOrCreateServiceInstance(id, _trace) {\n        if (this._globalGraph && this._globalGraphImplicitDependency) {\n            this._globalGraph.insertEdge(this._globalGraphImplicitDependency, String(id));\n        }\n        const thing = this._getServiceInstanceOrDescriptor(id);\n        if (thing instanceof SyncDescriptor) {\n            return this._safeCreateAndCacheServiceInstance(id, thing, _trace.branch(id, true));\n        }\n        else {\n            _trace.branch(id, false);\n            return thing;\n        }\n    }\n    _safeCreateAndCacheServiceInstance(id, desc, _trace) {\n        if (this._activeInstantiations.has(id)) {\n            throw new Error(`illegal state - RECURSIVELY instantiating service '${id}'`);\n        }\n        this._activeInstantiations.add(id);\n        try {\n            return this._createAndCacheServiceInstance(id, desc, _trace);\n        }\n        finally {\n            this._activeInstantiations.delete(id);\n        }\n    }\n    _createAndCacheServiceInstance(id, desc, _trace) {\n        var _a;\n        const graph = new Graph(data => data.id.toString());\n        let cycleCount = 0;\n        const stack = [{ id, desc, _trace }];\n        while (stack.length) {\n            const item = stack.pop();\n            graph.lookupOrInsertNode(item);\n            // a weak but working heuristic for cycle checks\n            if (cycleCount++ > 1000) {\n                throw new CyclicDependencyError(graph);\n            }\n            // check all dependencies for existence and if they need to be created first\n            for (const dependency of _util.getServiceDependencies(item.desc.ctor)) {\n                const instanceOrDesc = this._getServiceInstanceOrDescriptor(dependency.id);\n                if (!instanceOrDesc) {\n                    this._throwIfStrict(`[createInstance] ${id} depends on ${dependency.id} which is NOT registered.`, true);\n                }\n                // take note of all service dependencies\n                (_a = this._globalGraph) === null || _a === void 0 ? void 0 : _a.insertEdge(String(item.id), String(dependency.id));\n                if (instanceOrDesc instanceof SyncDescriptor) {\n                    const d = { id: dependency.id, desc: instanceOrDesc, _trace: item._trace.branch(dependency.id, true) };\n                    graph.insertEdge(item, d);\n                    stack.push(d);\n                }\n            }\n        }\n        while (true) {\n            const roots = graph.roots();\n            // if there is no more roots but still\n            // nodes in the graph we have a cycle\n            if (roots.length === 0) {\n                if (!graph.isEmpty()) {\n                    throw new CyclicDependencyError(graph);\n                }\n                break;\n            }\n            for (const { data } of roots) {\n                // Repeat the check for this still being a service sync descriptor. That's because\n                // instantiating a dependency might have side-effect and recursively trigger instantiation\n                // so that some dependencies are now fullfilled already.\n                const instanceOrDesc = this._getServiceInstanceOrDescriptor(data.id);\n                if (instanceOrDesc instanceof SyncDescriptor) {\n                    // create instance and overwrite the service collections\n                    const instance = this._createServiceInstanceWithOwner(data.id, data.desc.ctor, data.desc.staticArguments, data.desc.supportsDelayedInstantiation, data._trace);\n                    this._setServiceInstance(data.id, instance);\n                }\n                graph.removeNode(data);\n            }\n        }\n        return this._getServiceInstanceOrDescriptor(id);\n    }\n    _createServiceInstanceWithOwner(id, ctor, args = [], supportsDelayedInstantiation, _trace) {\n        if (this._services.get(id) instanceof SyncDescriptor) {\n            return this._createServiceInstance(id, ctor, args, supportsDelayedInstantiation, _trace);\n        }\n        else if (this._parent) {\n            return this._parent._createServiceInstanceWithOwner(id, ctor, args, supportsDelayedInstantiation, _trace);\n        }\n        else {\n            throw new Error(`illegalState - creating UNKNOWN service instance ${ctor.name}`);\n        }\n    }\n    _createServiceInstance(id, ctor, args = [], supportsDelayedInstantiation, _trace) {\n        if (!supportsDelayedInstantiation) {\n            // eager instantiation\n            return this._createInstance(ctor, args, _trace);\n        }\n        else {\n            const child = new InstantiationService(undefined, this._strict, this, this._enableTracing);\n            child._globalGraphImplicitDependency = String(id);\n            // Return a proxy object that's backed by an idle value. That\n            // strategy is to instantiate services in our idle time or when actually\n            // needed but not when injected into a consumer\n            // return \"empty events\" when the service isn't instantiated yet\n            const earlyListeners = new Map();\n            const idle = new GlobalIdleValue(() => {\n                const result = child._createInstance(ctor, args, _trace);\n                // early listeners that we kept are now being subscribed to\n                // the real service\n                for (const [key, values] of earlyListeners) {\n                    const candidate = result[key];\n                    if (typeof candidate === 'function') {\n                        for (const listener of values) {\n                            candidate.apply(result, listener);\n                        }\n                    }\n                }\n                earlyListeners.clear();\n                return result;\n            });\n            return new Proxy(Object.create(null), {\n                get(target, key) {\n                    if (!idle.isInitialized) {\n                        // looks like an event\n                        if (typeof key === 'string' && (key.startsWith('onDid') || key.startsWith('onWill'))) {\n                            let list = earlyListeners.get(key);\n                            if (!list) {\n                                list = new LinkedList();\n                                earlyListeners.set(key, list);\n                            }\n                            const event = (callback, thisArg, disposables) => {\n                                const rm = list.push([callback, thisArg, disposables]);\n                                return toDisposable(rm);\n                            };\n                            return event;\n                        }\n                    }\n                    // value already exists\n                    if (key in target) {\n                        return target[key];\n                    }\n                    // create value\n                    const obj = idle.value;\n                    let prop = obj[key];\n                    if (typeof prop !== 'function') {\n                        return prop;\n                    }\n                    prop = prop.bind(obj);\n                    target[key] = prop;\n                    return prop;\n                },\n                set(_target, p, value) {\n                    idle.value[p] = value;\n                    return true;\n                },\n                getPrototypeOf(_target) {\n                    return ctor.prototype;\n                }\n            });\n        }\n    }\n    _throwIfStrict(msg, printWarning) {\n        if (printWarning) {\n            console.warn(msg);\n        }\n        if (this._strict) {\n            throw new Error(msg);\n        }\n    }\n}\nexport class Trace {\n    static traceInvocation(_enableTracing, ctor) {\n        return !_enableTracing ? Trace._None : new Trace(2 /* TraceType.Invocation */, ctor.name || new Error().stack.split('\\n').slice(3, 4).join('\\n'));\n    }\n    static traceCreation(_enableTracing, ctor) {\n        return !_enableTracing ? Trace._None : new Trace(1 /* TraceType.Creation */, ctor.name);\n    }\n    constructor(type, name) {\n        this.type = type;\n        this.name = name;\n        this._start = Date.now();\n        this._dep = [];\n    }\n    branch(id, first) {\n        const child = new Trace(3 /* TraceType.Branch */, id.toString());\n        this._dep.push([id, first, child]);\n        return child;\n    }\n    stop() {\n        const dur = Date.now() - this._start;\n        Trace._totals += dur;\n        let causedCreation = false;\n        function printChild(n, trace) {\n            const res = [];\n            const prefix = new Array(n + 1).join('\\t');\n            for (const [id, first, child] of trace._dep) {\n                if (first && child) {\n                    causedCreation = true;\n                    res.push(`${prefix}CREATES -> ${id}`);\n                    const nested = printChild(n + 1, child);\n                    if (nested) {\n                        res.push(nested);\n                    }\n                }\n                else {\n                    res.push(`${prefix}uses -> ${id}`);\n                }\n            }\n            return res.join('\\n');\n        }\n        const lines = [\n            `${this.type === 1 /* TraceType.Creation */ ? 'CREATE' : 'CALL'} ${this.name}`,\n            `${printChild(1, this)}`,\n            `DONE, took ${dur.toFixed(2)}ms (grand total ${Trace._totals.toFixed(2)}ms)`\n        ];\n        if (dur > 2 || causedCreation) {\n            Trace.all.add(lines.join('\\n'));\n        }\n    }\n}\nTrace.all = new Set();\nTrace._None = new class extends Trace {\n    constructor() { super(0 /* TraceType.None */, null); }\n    stop() { }\n    branch() { return this; }\n};\nTrace._totals = 0;\n//#endregion\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}