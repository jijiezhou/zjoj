{"ast":null,"code":"var defaultTypeTemplate = '#{field} is not a #{type} type';\nvar defaultValidateLocale = {\n  required: '#{field} is required',\n  type: {\n    ip: defaultTypeTemplate,\n    email: defaultTypeTemplate,\n    url: defaultTypeTemplate,\n    string: defaultTypeTemplate,\n    number: defaultTypeTemplate,\n    array: defaultTypeTemplate,\n    object: defaultTypeTemplate,\n    boolean: defaultTypeTemplate\n  },\n  number: {\n    min: '`#{value}` is not greater than `#{min}`',\n    max: '`#{value}` is not less than `#{max}`',\n    equal: '`#{value}` is not equal to `#{equal}`',\n    range: '`#{value}` is not in range `#{min} ~ #{max}`',\n    positive: '`#{value}` is not a positive number',\n    negative: '`#{value}` is not a negative number'\n  },\n  string: {\n    maxLength: '#{field} cannot be longer than #{maxLength} characters',\n    minLength: '#{field} must be at least #{minLength} characters',\n    length: '#{field} must be exactly #{length} characters',\n    match: '`#{value}` does not match pattern #{pattern}',\n    uppercase: '`#{value}` must be all uppercase',\n    lowercase: '`#{value}` must be all lowercased'\n  },\n  array: {\n    length: '#{field} must be exactly #{length} in length',\n    minLength: '#{field} cannot be less than #{minLength} in length',\n    maxLength: '#{field} cannot be greater than #{maxLength} in length',\n    includes: '#{field} is not includes #{includes}',\n    deepEqual: '#{field} is not deep equal with #{deepEqual}',\n    empty: '#{field} is not an empty array'\n  },\n  object: {\n    deepEqual: '#{field} is not deep equal to expected value',\n    hasKeys: '#{field} does not contain required fields',\n    empty: '#{field} is not an empty object'\n  },\n  boolean: {\n    true: 'Expect true but got `#{value}`',\n    false: 'Expect false but got `#{value}`'\n  }\n};\nexport { defaultValidateLocale as default };","map":{"version":3,"names":["defaultTypeTemplate","defaultValidateLocale","required","type","ip","email","url","string","number","array","object","boolean","min","max","equal","range","positive","negative","maxLength","minLength","length","match","uppercase","lowercase","includes","deepEqual","empty","hasKeys","true","false","default"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/b-validate/es/locale/en-US.js"],"sourcesContent":["var defaultTypeTemplate = '#{field} is not a #{type} type';\nvar defaultValidateLocale = {\n    required: '#{field} is required',\n    type: {\n        ip: defaultTypeTemplate,\n        email: defaultTypeTemplate,\n        url: defaultTypeTemplate,\n        string: defaultTypeTemplate,\n        number: defaultTypeTemplate,\n        array: defaultTypeTemplate,\n        object: defaultTypeTemplate,\n        boolean: defaultTypeTemplate,\n    },\n    number: {\n        min: '`#{value}` is not greater than `#{min}`',\n        max: '`#{value}` is not less than `#{max}`',\n        equal: '`#{value}` is not equal to `#{equal}`',\n        range: '`#{value}` is not in range `#{min} ~ #{max}`',\n        positive: '`#{value}` is not a positive number',\n        negative: '`#{value}` is not a negative number',\n    },\n    string: {\n        maxLength: '#{field} cannot be longer than #{maxLength} characters',\n        minLength: '#{field} must be at least #{minLength} characters',\n        length: '#{field} must be exactly #{length} characters',\n        match: '`#{value}` does not match pattern #{pattern}',\n        uppercase: '`#{value}` must be all uppercase',\n        lowercase: '`#{value}` must be all lowercased',\n    },\n    array: {\n        length: '#{field} must be exactly #{length} in length',\n        minLength: '#{field} cannot be less than #{minLength} in length',\n        maxLength: '#{field} cannot be greater than #{maxLength} in length',\n        includes: '#{field} is not includes #{includes}',\n        deepEqual: '#{field} is not deep equal with #{deepEqual}',\n        empty: '#{field} is not an empty array',\n    },\n    object: {\n        deepEqual: '#{field} is not deep equal to expected value',\n        hasKeys: '#{field} does not contain required fields',\n        empty: '#{field} is not an empty object',\n    },\n    boolean: {\n        true: 'Expect true but got `#{value}`',\n        false: 'Expect false but got `#{value}`',\n    },\n};\n\nexport { defaultValidateLocale as default };\n"],"mappings":"AAAA,IAAIA,mBAAmB,GAAG,gCAAgC;AAC1D,IAAIC,qBAAqB,GAAG;EACxBC,QAAQ,EAAE,sBAAsB;EAChCC,IAAI,EAAE;IACFC,EAAE,EAAEJ,mBAAmB;IACvBK,KAAK,EAAEL,mBAAmB;IAC1BM,GAAG,EAAEN,mBAAmB;IACxBO,MAAM,EAAEP,mBAAmB;IAC3BQ,MAAM,EAAER,mBAAmB;IAC3BS,KAAK,EAAET,mBAAmB;IAC1BU,MAAM,EAAEV,mBAAmB;IAC3BW,OAAO,EAAEX;EACb,CAAC;EACDQ,MAAM,EAAE;IACJI,GAAG,EAAE,yCAAyC;IAC9CC,GAAG,EAAE,sCAAsC;IAC3CC,KAAK,EAAE,uCAAuC;IAC9CC,KAAK,EAAE,8CAA8C;IACrDC,QAAQ,EAAE,qCAAqC;IAC/CC,QAAQ,EAAE;EACd,CAAC;EACDV,MAAM,EAAE;IACJW,SAAS,EAAE,wDAAwD;IACnEC,SAAS,EAAE,mDAAmD;IAC9DC,MAAM,EAAE,+CAA+C;IACvDC,KAAK,EAAE,8CAA8C;IACrDC,SAAS,EAAE,kCAAkC;IAC7CC,SAAS,EAAE;EACf,CAAC;EACDd,KAAK,EAAE;IACHW,MAAM,EAAE,8CAA8C;IACtDD,SAAS,EAAE,qDAAqD;IAChED,SAAS,EAAE,wDAAwD;IACnEM,QAAQ,EAAE,sCAAsC;IAChDC,SAAS,EAAE,8CAA8C;IACzDC,KAAK,EAAE;EACX,CAAC;EACDhB,MAAM,EAAE;IACJe,SAAS,EAAE,8CAA8C;IACzDE,OAAO,EAAE,2CAA2C;IACpDD,KAAK,EAAE;EACX,CAAC;EACDf,OAAO,EAAE;IACLiB,IAAI,EAAE,gCAAgC;IACtCC,KAAK,EAAE;EACX;AACJ,CAAC;AAED,SAAS5B,qBAAqB,IAAI6B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}