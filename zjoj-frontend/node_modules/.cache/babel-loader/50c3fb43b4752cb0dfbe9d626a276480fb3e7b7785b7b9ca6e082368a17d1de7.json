{"ast":null,"code":"import { applyEdits } from './utils.js';\nexport class GhostText {\n  constructor(lineNumber, parts) {\n    this.lineNumber = lineNumber;\n    this.parts = parts;\n  }\n  equals(other) {\n    return this.lineNumber === other.lineNumber && this.parts.length === other.parts.length && this.parts.every((part, index) => part.equals(other.parts[index]));\n  }\n  renderForScreenReader(lineText) {\n    if (this.parts.length === 0) {\n      return '';\n    }\n    const lastPart = this.parts[this.parts.length - 1];\n    const cappedLineText = lineText.substr(0, lastPart.column - 1);\n    const text = applyEdits(cappedLineText, this.parts.map(p => ({\n      range: {\n        startLineNumber: 1,\n        endLineNumber: 1,\n        startColumn: p.column,\n        endColumn: p.column\n      },\n      text: p.lines.join('\\n')\n    })));\n    return text.substring(this.parts[0].column - 1);\n  }\n  isEmpty() {\n    return this.parts.every(p => p.lines.length === 0);\n  }\n  get lineCount() {\n    return 1 + this.parts.reduce((r, p) => r + p.lines.length - 1, 0);\n  }\n}\nexport class GhostTextPart {\n  constructor(column, lines,\n  /**\n   * Indicates if this part is a preview of an inline suggestion when a suggestion is previewed.\n  */\n  preview) {\n    this.column = column;\n    this.lines = lines;\n    this.preview = preview;\n  }\n  equals(other) {\n    return this.column === other.column && this.lines.length === other.lines.length && this.lines.every((line, index) => line === other.lines[index]);\n  }\n}\nexport class GhostTextReplacement {\n  constructor(lineNumber, columnRange, newLines, additionalReservedLineCount = 0) {\n    this.lineNumber = lineNumber;\n    this.columnRange = columnRange;\n    this.newLines = newLines;\n    this.additionalReservedLineCount = additionalReservedLineCount;\n    this.parts = [new GhostTextPart(this.columnRange.endColumnExclusive, this.newLines, false)];\n  }\n  renderForScreenReader(_lineText) {\n    return this.newLines.join('\\n');\n  }\n  get lineCount() {\n    return this.newLines.length;\n  }\n  isEmpty() {\n    return this.parts.every(p => p.lines.length === 0);\n  }\n  equals(other) {\n    return this.lineNumber === other.lineNumber && this.columnRange.equals(other.columnRange) && this.newLines.length === other.newLines.length && this.newLines.every((line, index) => line === other.newLines[index]) && this.additionalReservedLineCount === other.additionalReservedLineCount;\n  }\n}\nexport function ghostTextOrReplacementEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  if (a instanceof GhostText && b instanceof GhostText) {\n    return a.equals(b);\n  }\n  if (a instanceof GhostTextReplacement && b instanceof GhostTextReplacement) {\n    return a.equals(b);\n  }\n  return false;\n}","map":{"version":3,"names":["applyEdits","GhostText","constructor","lineNumber","parts","equals","other","length","every","part","index","renderForScreenReader","lineText","lastPart","cappedLineText","substr","column","text","map","p","range","startLineNumber","endLineNumber","startColumn","endColumn","lines","join","substring","isEmpty","lineCount","reduce","r","GhostTextPart","preview","line","GhostTextReplacement","columnRange","newLines","additionalReservedLineCount","endColumnExclusive","_lineText","ghostTextOrReplacementEquals","a","b"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/ghostText.js"],"sourcesContent":["import { applyEdits } from './utils.js';\nexport class GhostText {\n    constructor(lineNumber, parts) {\n        this.lineNumber = lineNumber;\n        this.parts = parts;\n    }\n    equals(other) {\n        return this.lineNumber === other.lineNumber &&\n            this.parts.length === other.parts.length &&\n            this.parts.every((part, index) => part.equals(other.parts[index]));\n    }\n    renderForScreenReader(lineText) {\n        if (this.parts.length === 0) {\n            return '';\n        }\n        const lastPart = this.parts[this.parts.length - 1];\n        const cappedLineText = lineText.substr(0, lastPart.column - 1);\n        const text = applyEdits(cappedLineText, this.parts.map(p => ({\n            range: { startLineNumber: 1, endLineNumber: 1, startColumn: p.column, endColumn: p.column },\n            text: p.lines.join('\\n')\n        })));\n        return text.substring(this.parts[0].column - 1);\n    }\n    isEmpty() {\n        return this.parts.every(p => p.lines.length === 0);\n    }\n    get lineCount() {\n        return 1 + this.parts.reduce((r, p) => r + p.lines.length - 1, 0);\n    }\n}\nexport class GhostTextPart {\n    constructor(column, lines, \n    /**\n     * Indicates if this part is a preview of an inline suggestion when a suggestion is previewed.\n    */\n    preview) {\n        this.column = column;\n        this.lines = lines;\n        this.preview = preview;\n    }\n    equals(other) {\n        return this.column === other.column &&\n            this.lines.length === other.lines.length &&\n            this.lines.every((line, index) => line === other.lines[index]);\n    }\n}\nexport class GhostTextReplacement {\n    constructor(lineNumber, columnRange, newLines, additionalReservedLineCount = 0) {\n        this.lineNumber = lineNumber;\n        this.columnRange = columnRange;\n        this.newLines = newLines;\n        this.additionalReservedLineCount = additionalReservedLineCount;\n        this.parts = [\n            new GhostTextPart(this.columnRange.endColumnExclusive, this.newLines, false),\n        ];\n    }\n    renderForScreenReader(_lineText) {\n        return this.newLines.join('\\n');\n    }\n    get lineCount() {\n        return this.newLines.length;\n    }\n    isEmpty() {\n        return this.parts.every(p => p.lines.length === 0);\n    }\n    equals(other) {\n        return this.lineNumber === other.lineNumber &&\n            this.columnRange.equals(other.columnRange) &&\n            this.newLines.length === other.newLines.length &&\n            this.newLines.every((line, index) => line === other.newLines[index]) &&\n            this.additionalReservedLineCount === other.additionalReservedLineCount;\n    }\n}\nexport function ghostTextOrReplacementEquals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!a || !b) {\n        return false;\n    }\n    if (a instanceof GhostText && b instanceof GhostText) {\n        return a.equals(b);\n    }\n    if (a instanceof GhostTextReplacement && b instanceof GhostTextReplacement) {\n        return a.equals(b);\n    }\n    return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}