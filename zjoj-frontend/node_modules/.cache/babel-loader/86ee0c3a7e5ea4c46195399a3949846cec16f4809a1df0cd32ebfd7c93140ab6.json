{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { toUint8 } from '../../../base/common/uint.js';\n/**\n * A fast character classifier that uses a compact array for ASCII values.\n */\nexport class CharacterClassifier {\n  constructor(_defaultValue) {\n    const defaultValue = toUint8(_defaultValue);\n    this._defaultValue = defaultValue;\n    this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n    this._map = new Map();\n  }\n  static _createAsciiMap(defaultValue) {\n    const asciiMap = new Uint8Array(256);\n    asciiMap.fill(defaultValue);\n    return asciiMap;\n  }\n  set(charCode, _value) {\n    const value = toUint8(_value);\n    if (charCode >= 0 && charCode < 256) {\n      this._asciiMap[charCode] = value;\n    } else {\n      this._map.set(charCode, value);\n    }\n  }\n  get(charCode) {\n    if (charCode >= 0 && charCode < 256) {\n      return this._asciiMap[charCode];\n    } else {\n      return this._map.get(charCode) || this._defaultValue;\n    }\n  }\n  clear() {\n    this._asciiMap.fill(this._defaultValue);\n    this._map.clear();\n  }\n}\nexport class CharacterSet {\n  constructor() {\n    this._actual = new CharacterClassifier(0 /* Boolean.False */);\n  }\n  add(charCode) {\n    this._actual.set(charCode, 1 /* Boolean.True */);\n  }\n  has(charCode) {\n    return this._actual.get(charCode) === 1 /* Boolean.True */;\n  }\n  clear() {\n    return this._actual.clear();\n  }\n}","map":{"version":3,"names":["toUint8","CharacterClassifier","constructor","_defaultValue","defaultValue","_asciiMap","_createAsciiMap","_map","Map","asciiMap","Uint8Array","fill","set","charCode","_value","value","get","clear","CharacterSet","_actual","add","has"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { toUint8 } from '../../../base/common/uint.js';\n/**\n * A fast character classifier that uses a compact array for ASCII values.\n */\nexport class CharacterClassifier {\n    constructor(_defaultValue) {\n        const defaultValue = toUint8(_defaultValue);\n        this._defaultValue = defaultValue;\n        this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n        this._map = new Map();\n    }\n    static _createAsciiMap(defaultValue) {\n        const asciiMap = new Uint8Array(256);\n        asciiMap.fill(defaultValue);\n        return asciiMap;\n    }\n    set(charCode, _value) {\n        const value = toUint8(_value);\n        if (charCode >= 0 && charCode < 256) {\n            this._asciiMap[charCode] = value;\n        }\n        else {\n            this._map.set(charCode, value);\n        }\n    }\n    get(charCode) {\n        if (charCode >= 0 && charCode < 256) {\n            return this._asciiMap[charCode];\n        }\n        else {\n            return (this._map.get(charCode) || this._defaultValue);\n        }\n    }\n    clear() {\n        this._asciiMap.fill(this._defaultValue);\n        this._map.clear();\n    }\n}\nexport class CharacterSet {\n    constructor() {\n        this._actual = new CharacterClassifier(0 /* Boolean.False */);\n    }\n    add(charCode) {\n        this._actual.set(charCode, 1 /* Boolean.True */);\n    }\n    has(charCode) {\n        return (this._actual.get(charCode) === 1 /* Boolean.True */);\n    }\n    clear() {\n        return this._actual.clear();\n    }\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,8BAA8B;AACtD;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,CAAC;EAC7BC,WAAWA,CAACC,aAAa,EAAE;IACvB,MAAMC,YAAY,GAAGJ,OAAO,CAACG,aAAa,CAAC;IAC3C,IAAI,CAACA,aAAa,GAAGC,YAAY;IACjC,IAAI,CAACC,SAAS,GAAGJ,mBAAmB,CAACK,eAAe,CAACF,YAAY,CAAC;IAClE,IAAI,CAACG,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB;EACA,OAAOF,eAAeA,CAACF,YAAY,EAAE;IACjC,MAAMK,QAAQ,GAAG,IAAIC,UAAU,CAAC,GAAG,CAAC;IACpCD,QAAQ,CAACE,IAAI,CAACP,YAAY,CAAC;IAC3B,OAAOK,QAAQ;EACnB;EACAG,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAE;IAClB,MAAMC,KAAK,GAAGf,OAAO,CAACc,MAAM,CAAC;IAC7B,IAAID,QAAQ,IAAI,CAAC,IAAIA,QAAQ,GAAG,GAAG,EAAE;MACjC,IAAI,CAACR,SAAS,CAACQ,QAAQ,CAAC,GAAGE,KAAK;IACpC,CAAC,MACI;MACD,IAAI,CAACR,IAAI,CAACK,GAAG,CAACC,QAAQ,EAAEE,KAAK,CAAC;IAClC;EACJ;EACAC,GAAGA,CAACH,QAAQ,EAAE;IACV,IAAIA,QAAQ,IAAI,CAAC,IAAIA,QAAQ,GAAG,GAAG,EAAE;MACjC,OAAO,IAAI,CAACR,SAAS,CAACQ,QAAQ,CAAC;IACnC,CAAC,MACI;MACD,OAAQ,IAAI,CAACN,IAAI,CAACS,GAAG,CAACH,QAAQ,CAAC,IAAI,IAAI,CAACV,aAAa;IACzD;EACJ;EACAc,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACZ,SAAS,CAACM,IAAI,CAAC,IAAI,CAACR,aAAa,CAAC;IACvC,IAAI,CAACI,IAAI,CAACU,KAAK,CAAC,CAAC;EACrB;AACJ;AACA,OAAO,MAAMC,YAAY,CAAC;EACtBhB,WAAWA,CAAA,EAAG;IACV,IAAI,CAACiB,OAAO,GAAG,IAAIlB,mBAAmB,CAAC,CAAC,CAAC,mBAAmB,CAAC;EACjE;EACAmB,GAAGA,CAACP,QAAQ,EAAE;IACV,IAAI,CAACM,OAAO,CAACP,GAAG,CAACC,QAAQ,EAAE,CAAC,CAAC,kBAAkB,CAAC;EACpD;EACAQ,GAAGA,CAACR,QAAQ,EAAE;IACV,OAAQ,IAAI,CAACM,OAAO,CAACH,GAAG,CAACH,QAAQ,CAAC,KAAK,CAAC,CAAC;EAC7C;EACAI,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAI,CAACE,OAAO,CAACF,KAAK,CAAC,CAAC;EAC/B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}