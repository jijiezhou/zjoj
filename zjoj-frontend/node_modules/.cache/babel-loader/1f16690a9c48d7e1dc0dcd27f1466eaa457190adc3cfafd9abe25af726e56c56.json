{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.45.0(5e5af013f8d295555a7210df0d5f2cea0bf5dd56)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/postiats/postiats.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"], [\"<\", \">\"]],\n  autoClosingPairs: [{\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"{\",\n    close: \"}\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"[\",\n    close: \"]\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"(\",\n    close: \")\",\n    notIn: [\"string\", \"comment\"]\n  }]\n};\nvar language = {\n  tokenPostfix: \".pats\",\n  defaultToken: \"invalid\",\n  keywords: [\"abstype\", \"abst0ype\", \"absprop\", \"absview\", \"absvtype\", \"absviewtype\", \"absvt0ype\", \"absviewt0ype\", \"as\", \"and\", \"assume\", \"begin\", \"classdec\", \"datasort\", \"datatype\", \"dataprop\", \"dataview\", \"datavtype\", \"dataviewtype\", \"do\", \"end\", \"extern\", \"extype\", \"extvar\", \"exception\", \"fn\", \"fnx\", \"fun\", \"prfn\", \"prfun\", \"praxi\", \"castfn\", \"if\", \"then\", \"else\", \"ifcase\", \"in\", \"infix\", \"infixl\", \"infixr\", \"prefix\", \"postfix\", \"implmnt\", \"implement\", \"primplmnt\", \"primplement\", \"import\", \"let\", \"local\", \"macdef\", \"macrodef\", \"nonfix\", \"symelim\", \"symintr\", \"overload\", \"of\", \"op\", \"rec\", \"sif\", \"scase\", \"sortdef\", \"sta\", \"stacst\", \"stadef\", \"static\", \"staload\", \"dynload\", \"try\", \"tkindef\", \"typedef\", \"propdef\", \"viewdef\", \"vtypedef\", \"viewtypedef\", \"prval\", \"var\", \"prvar\", \"when\", \"where\", \"with\", \"withtype\", \"withprop\", \"withview\", \"withvtype\", \"withviewtype\"],\n  keywords_dlr: [\"$delay\", \"$ldelay\", \"$arrpsz\", \"$arrptrsize\", \"$d2ctype\", \"$effmask\", \"$effmask_ntm\", \"$effmask_exn\", \"$effmask_ref\", \"$effmask_wrt\", \"$effmask_all\", \"$extern\", \"$extkind\", \"$extype\", \"$extype_struct\", \"$extval\", \"$extfcall\", \"$extmcall\", \"$literal\", \"$myfilename\", \"$mylocation\", \"$myfunction\", \"$lst\", \"$lst_t\", \"$lst_vt\", \"$list\", \"$list_t\", \"$list_vt\", \"$rec\", \"$rec_t\", \"$rec_vt\", \"$record\", \"$record_t\", \"$record_vt\", \"$tup\", \"$tup_t\", \"$tup_vt\", \"$tuple\", \"$tuple_t\", \"$tuple_vt\", \"$break\", \"$continue\", \"$raise\", \"$showtype\", \"$vcopyenv_v\", \"$vcopyenv_vt\", \"$tempenver\", \"$solver_assert\", \"$solver_verify\"],\n  keywords_srp: [\"#if\", \"#ifdef\", \"#ifndef\", \"#then\", \"#elif\", \"#elifdef\", \"#elifndef\", \"#else\", \"#endif\", \"#error\", \"#prerr\", \"#print\", \"#assert\", \"#undef\", \"#define\", \"#include\", \"#require\", \"#pragma\", \"#codegen2\", \"#codegen3\"],\n  irregular_keyword_list: [\"val+\", \"val-\", \"val\", \"case+\", \"case-\", \"case\", \"addr@\", \"addr\", \"fold@\", \"free@\", \"fix@\", \"fix\", \"lam@\", \"lam\", \"llam@\", \"llam\", \"viewt@ype+\", \"viewt@ype-\", \"viewt@ype\", \"viewtype+\", \"viewtype-\", \"viewtype\", \"view+\", \"view-\", \"view@\", \"view\", \"type+\", \"type-\", \"type\", \"vtype+\", \"vtype-\", \"vtype\", \"vt@ype+\", \"vt@ype-\", \"vt@ype\", \"viewt@ype+\", \"viewt@ype-\", \"viewt@ype\", \"viewtype+\", \"viewtype-\", \"viewtype\", \"prop+\", \"prop-\", \"prop\", \"type+\", \"type-\", \"type\", \"t@ype\", \"t@ype+\", \"t@ype-\", \"abst@ype\", \"abstype\", \"absviewt@ype\", \"absvt@ype\", \"for*\", \"for\", \"while*\", \"while\"],\n  keywords_types: [\"bool\", \"double\", \"byte\", \"int\", \"short\", \"char\", \"void\", \"unit\", \"long\", \"float\", \"string\", \"strptr\"],\n  keywords_effects: [\"0\", \"fun\", \"clo\", \"prf\", \"funclo\", \"cloptr\", \"cloref\", \"ref\", \"ntm\", \"1\"],\n  operators: [\"@\", \"!\", \"|\", \"`\", \":\", \"$\", \".\", \"=\", \"#\", \"~\", \"..\", \"...\", \"=>\", \"=<>\", \"=/=>\", \"=>>\", \"=/=>>\", \"<\", \">\", \"><\", \".<\", \">.\", \".<>.\", \"->\", \"-<>\"],\n  brackets: [{\n    open: \",(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"`(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"%(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"'(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"'{\",\n    close: \"}\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"@(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"@{\",\n    close: \"}\",\n    token: \"delimiter.brace\"\n  }, {\n    open: \"@[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"#[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  IDENTFST: /[a-zA-Z_]/,\n  IDENTRST: /[a-zA-Z0-9_'$]/,\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n  digit: /[0-9]/,\n  digitseq0: /@digit*/,\n  xdigit: /[0-9A-Za-z]/,\n  xdigitseq0: /@xdigit*/,\n  INTSP: /[lLuU]/,\n  FLOATSP: /[fFlL]/,\n  fexponent: /[eE][+-]?[0-9]+/,\n  fexponent_bin: /[pP][+-]?[0-9]+/,\n  deciexp: /\\.[0-9]*@fexponent?/,\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n  start: \"root\",\n  tokenizer: {\n    root: [{\n      regex: /[ \\t\\r\\n]+/,\n      action: {\n        token: \"\"\n      }\n    }, {\n      regex: /\\(\\*\\)/,\n      action: {\n        token: \"invalid\"\n      }\n    }, {\n      regex: /\\(\\*/,\n      action: {\n        token: \"comment\",\n        next: \"lexing_COMMENT_block_ml\"\n      }\n    }, {\n      regex: /\\(/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\)/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\[/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\]/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\{/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\}/,\n      action: \"@brackets\"\n    }, {\n      regex: /,\\(/,\n      action: \"@brackets\"\n    }, {\n      regex: /,/,\n      action: {\n        token: \"delimiter.comma\"\n      }\n    }, {\n      regex: /;/,\n      action: {\n        token: \"delimiter.semicolon\"\n      }\n    }, {\n      regex: /@\\(/,\n      action: \"@brackets\"\n    }, {\n      regex: /@\\[/,\n      action: \"@brackets\"\n    }, {\n      regex: /@\\{/,\n      action: \"@brackets\"\n    }, {\n      regex: /:</,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EFFECT_commaseq0\"\n      }\n    }, {\n      regex: /\\.@symbolic+/,\n      action: {\n        token: \"identifier.sym\"\n      }\n    }, {\n      regex: /\\.@digit*@fexponent@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /\\.@digit+/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /\\$@IDENTFST@IDENTRST*/,\n      action: {\n        cases: {\n          \"@keywords_dlr\": {\n            token: \"keyword.dlr\"\n          },\n          \"@default\": {\n            token: \"namespace\"\n          }\n        }\n      }\n    }, {\n      regex: /\\#@IDENTFST@IDENTRST*/,\n      action: {\n        cases: {\n          \"@keywords_srp\": {\n            token: \"keyword.srp\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: /%\\(/,\n      action: {\n        token: \"delimiter.parenthesis\"\n      }\n    }, {\n      regex: /^%{(#|\\^|\\$)?/,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EXTCODE\",\n        nextEmbedded: \"text/javascript\"\n      }\n    }, {\n      regex: /^%}/,\n      action: {\n        token: \"keyword\"\n      }\n    }, {\n      regex: /'\\(/,\n      action: {\n        token: \"delimiter.parenthesis\"\n      }\n    }, {\n      regex: /'\\[/,\n      action: {\n        token: \"delimiter.bracket\"\n      }\n    }, {\n      regex: /'\\{/,\n      action: {\n        token: \"delimiter.brace\"\n      }\n    }, [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]], [/'[^\\\\']'/, \"string\"], [/\"/, \"string.quote\", \"@lexing_DQUOTE\"], {\n      regex: /`\\(/,\n      action: \"@brackets\"\n    }, {\n      regex: /\\\\/,\n      action: {\n        token: \"punctuation\"\n      }\n    }, {\n      regex: /@irregular_keywords(?!@IDENTRST)/,\n      action: {\n        token: \"keyword\"\n      }\n    }, {\n      regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n      action: {\n        cases: {\n          \"@keywords\": {\n            token: \"keyword\"\n          },\n          \"@keywords_types\": {\n            token: \"type\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: /\\/\\/\\/\\//,\n      action: {\n        token: \"comment\",\n        next: \"@lexing_COMMENT_rest\"\n      }\n    }, {\n      regex: /\\/\\/.*$/,\n      action: {\n        token: \"comment\"\n      }\n    }, {\n      regex: /\\/\\*/,\n      action: {\n        token: \"comment\",\n        next: \"@lexing_COMMENT_block_c\"\n      }\n    }, {\n      regex: /-<|=</,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EFFECT_commaseq0\"\n      }\n    }, {\n      regex: /@symbolic+/,\n      action: {\n        cases: {\n          \"@operators\": \"keyword\",\n          \"@default\": \"operator\"\n        }\n      }\n    }, {\n      regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /0[xX]@xdigit+@INTSP*/,\n      action: {\n        token: \"number.hex\"\n      }\n    }, {\n      regex: /0[0-7]+(?![0-9])@INTSP*/,\n      action: {\n        token: \"number.octal\"\n      }\n    }, {\n      regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /@digit@digitseq0@INTSP*/,\n      action: {\n        token: \"number.decimal\"\n      }\n    }, {\n      regex: /@digit+@INTSP*/,\n      action: {\n        token: \"number\"\n      }\n    }],\n    lexing_COMMENT_block_ml: [[/[^\\(\\*]+/, \"comment\"], [/\\(\\*/, \"comment\", \"@push\"], [/\\(\\*/, \"comment.invalid\"], [/\\*\\)/, \"comment\", \"@pop\"], [/\\*/, \"comment\"]],\n    lexing_COMMENT_block_c: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    lexing_COMMENT_rest: [[/$/, \"comment\", \"@pop\"], [/.*/, \"comment\"]],\n    lexing_EFFECT_commaseq0: [{\n      regex: /@IDENTFST@IDENTRST+|@digit+/,\n      action: {\n        cases: {\n          \"@keywords_effects\": {\n            token: \"type.effect\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: /,/,\n      action: {\n        token: \"punctuation\"\n      }\n    }, {\n      regex: />/,\n      action: {\n        token: \"@rematch\",\n        next: \"@pop\"\n      }\n    }],\n    lexing_EXTCODE: [{\n      regex: /^%}/,\n      action: {\n        token: \"@rematch\",\n        next: \"@pop\",\n        nextEmbedded: \"@pop\"\n      }\n    }, {\n      regex: /[^%]+/,\n      action: \"\"\n    }],\n    lexing_DQUOTE: [{\n      regex: /\"/,\n      action: {\n        token: \"string.quote\",\n        next: \"@pop\"\n      }\n    }, {\n      regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\n      action: [{\n        token: \"string.escape\"\n      }, {\n        token: \"identifier\"\n      }, {\n        token: \"string.escape\"\n      }]\n    }, {\n      regex: /\\\\$/,\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: /[^\\\\\"]+/,\n      action: {\n        token: \"string\"\n      }\n    }]\n  }\n};\nexport { conf, language };","map":{"version":3,"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","language","tokenPostfix","defaultToken","keywords","keywords_dlr","keywords_srp","irregular_keyword_list","keywords_types","keywords_effects","operators","token","symbols","IDENTFST","IDENTRST","symbolic","digit","digitseq0","xdigit","xdigitseq0","INTSP","FLOATSP","fexponent","fexponent_bin","deciexp","hexiexp","irregular_keywords","ESCHAR","start","tokenizer","root","regex","action","next","cases","nextEmbedded","lexing_COMMENT_block_ml","lexing_COMMENT_block_c","lexing_COMMENT_rest","lexing_EFFECT_commaseq0","lexing_EXTCODE","lexing_DQUOTE"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.45.0(5e5af013f8d295555a7210df0d5f2cea0bf5dd56)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/postiats/postiats.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"<\", \">\"]\n  ],\n  autoClosingPairs: [\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n    { open: \"{\", close: \"}\", notIn: [\"string\", \"comment\"] },\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] }\n  ]\n};\nvar language = {\n  tokenPostfix: \".pats\",\n  defaultToken: \"invalid\",\n  keywords: [\n    \"abstype\",\n    \"abst0ype\",\n    \"absprop\",\n    \"absview\",\n    \"absvtype\",\n    \"absviewtype\",\n    \"absvt0ype\",\n    \"absviewt0ype\",\n    \"as\",\n    \"and\",\n    \"assume\",\n    \"begin\",\n    \"classdec\",\n    \"datasort\",\n    \"datatype\",\n    \"dataprop\",\n    \"dataview\",\n    \"datavtype\",\n    \"dataviewtype\",\n    \"do\",\n    \"end\",\n    \"extern\",\n    \"extype\",\n    \"extvar\",\n    \"exception\",\n    \"fn\",\n    \"fnx\",\n    \"fun\",\n    \"prfn\",\n    \"prfun\",\n    \"praxi\",\n    \"castfn\",\n    \"if\",\n    \"then\",\n    \"else\",\n    \"ifcase\",\n    \"in\",\n    \"infix\",\n    \"infixl\",\n    \"infixr\",\n    \"prefix\",\n    \"postfix\",\n    \"implmnt\",\n    \"implement\",\n    \"primplmnt\",\n    \"primplement\",\n    \"import\",\n    \"let\",\n    \"local\",\n    \"macdef\",\n    \"macrodef\",\n    \"nonfix\",\n    \"symelim\",\n    \"symintr\",\n    \"overload\",\n    \"of\",\n    \"op\",\n    \"rec\",\n    \"sif\",\n    \"scase\",\n    \"sortdef\",\n    \"sta\",\n    \"stacst\",\n    \"stadef\",\n    \"static\",\n    \"staload\",\n    \"dynload\",\n    \"try\",\n    \"tkindef\",\n    \"typedef\",\n    \"propdef\",\n    \"viewdef\",\n    \"vtypedef\",\n    \"viewtypedef\",\n    \"prval\",\n    \"var\",\n    \"prvar\",\n    \"when\",\n    \"where\",\n    \"with\",\n    \"withtype\",\n    \"withprop\",\n    \"withview\",\n    \"withvtype\",\n    \"withviewtype\"\n  ],\n  keywords_dlr: [\n    \"$delay\",\n    \"$ldelay\",\n    \"$arrpsz\",\n    \"$arrptrsize\",\n    \"$d2ctype\",\n    \"$effmask\",\n    \"$effmask_ntm\",\n    \"$effmask_exn\",\n    \"$effmask_ref\",\n    \"$effmask_wrt\",\n    \"$effmask_all\",\n    \"$extern\",\n    \"$extkind\",\n    \"$extype\",\n    \"$extype_struct\",\n    \"$extval\",\n    \"$extfcall\",\n    \"$extmcall\",\n    \"$literal\",\n    \"$myfilename\",\n    \"$mylocation\",\n    \"$myfunction\",\n    \"$lst\",\n    \"$lst_t\",\n    \"$lst_vt\",\n    \"$list\",\n    \"$list_t\",\n    \"$list_vt\",\n    \"$rec\",\n    \"$rec_t\",\n    \"$rec_vt\",\n    \"$record\",\n    \"$record_t\",\n    \"$record_vt\",\n    \"$tup\",\n    \"$tup_t\",\n    \"$tup_vt\",\n    \"$tuple\",\n    \"$tuple_t\",\n    \"$tuple_vt\",\n    \"$break\",\n    \"$continue\",\n    \"$raise\",\n    \"$showtype\",\n    \"$vcopyenv_v\",\n    \"$vcopyenv_vt\",\n    \"$tempenver\",\n    \"$solver_assert\",\n    \"$solver_verify\"\n  ],\n  keywords_srp: [\n    \"#if\",\n    \"#ifdef\",\n    \"#ifndef\",\n    \"#then\",\n    \"#elif\",\n    \"#elifdef\",\n    \"#elifndef\",\n    \"#else\",\n    \"#endif\",\n    \"#error\",\n    \"#prerr\",\n    \"#print\",\n    \"#assert\",\n    \"#undef\",\n    \"#define\",\n    \"#include\",\n    \"#require\",\n    \"#pragma\",\n    \"#codegen2\",\n    \"#codegen3\"\n  ],\n  irregular_keyword_list: [\n    \"val+\",\n    \"val-\",\n    \"val\",\n    \"case+\",\n    \"case-\",\n    \"case\",\n    \"addr@\",\n    \"addr\",\n    \"fold@\",\n    \"free@\",\n    \"fix@\",\n    \"fix\",\n    \"lam@\",\n    \"lam\",\n    \"llam@\",\n    \"llam\",\n    \"viewt@ype+\",\n    \"viewt@ype-\",\n    \"viewt@ype\",\n    \"viewtype+\",\n    \"viewtype-\",\n    \"viewtype\",\n    \"view+\",\n    \"view-\",\n    \"view@\",\n    \"view\",\n    \"type+\",\n    \"type-\",\n    \"type\",\n    \"vtype+\",\n    \"vtype-\",\n    \"vtype\",\n    \"vt@ype+\",\n    \"vt@ype-\",\n    \"vt@ype\",\n    \"viewt@ype+\",\n    \"viewt@ype-\",\n    \"viewt@ype\",\n    \"viewtype+\",\n    \"viewtype-\",\n    \"viewtype\",\n    \"prop+\",\n    \"prop-\",\n    \"prop\",\n    \"type+\",\n    \"type-\",\n    \"type\",\n    \"t@ype\",\n    \"t@ype+\",\n    \"t@ype-\",\n    \"abst@ype\",\n    \"abstype\",\n    \"absviewt@ype\",\n    \"absvt@ype\",\n    \"for*\",\n    \"for\",\n    \"while*\",\n    \"while\"\n  ],\n  keywords_types: [\n    \"bool\",\n    \"double\",\n    \"byte\",\n    \"int\",\n    \"short\",\n    \"char\",\n    \"void\",\n    \"unit\",\n    \"long\",\n    \"float\",\n    \"string\",\n    \"strptr\"\n  ],\n  keywords_effects: [\n    \"0\",\n    \"fun\",\n    \"clo\",\n    \"prf\",\n    \"funclo\",\n    \"cloptr\",\n    \"cloref\",\n    \"ref\",\n    \"ntm\",\n    \"1\"\n  ],\n  operators: [\n    \"@\",\n    \"!\",\n    \"|\",\n    \"`\",\n    \":\",\n    \"$\",\n    \".\",\n    \"=\",\n    \"#\",\n    \"~\",\n    \"..\",\n    \"...\",\n    \"=>\",\n    \"=<>\",\n    \"=/=>\",\n    \"=>>\",\n    \"=/=>>\",\n    \"<\",\n    \">\",\n    \"><\",\n    \".<\",\n    \">.\",\n    \".<>.\",\n    \"->\",\n    \"-<>\"\n  ],\n  brackets: [\n    { open: \",(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"`(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"%(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"'(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"'{\", close: \"}\", token: \"delimiter.parenthesis\" },\n    { open: \"@(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"@{\", close: \"}\", token: \"delimiter.brace\" },\n    { open: \"@[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"#[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  IDENTFST: /[a-zA-Z_]/,\n  IDENTRST: /[a-zA-Z0-9_'$]/,\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n  digit: /[0-9]/,\n  digitseq0: /@digit*/,\n  xdigit: /[0-9A-Za-z]/,\n  xdigitseq0: /@xdigit*/,\n  INTSP: /[lLuU]/,\n  FLOATSP: /[fFlL]/,\n  fexponent: /[eE][+-]?[0-9]+/,\n  fexponent_bin: /[pP][+-]?[0-9]+/,\n  deciexp: /\\.[0-9]*@fexponent?/,\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n  start: \"root\",\n  tokenizer: {\n    root: [\n      { regex: /[ \\t\\r\\n]+/, action: { token: \"\" } },\n      { regex: /\\(\\*\\)/, action: { token: \"invalid\" } },\n      {\n        regex: /\\(\\*/,\n        action: { token: \"comment\", next: \"lexing_COMMENT_block_ml\" }\n      },\n      {\n        regex: /\\(/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\)/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\[/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\]/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\{/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\}/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /,\\(/,\n        action: \"@brackets\"\n      },\n      { regex: /,/, action: { token: \"delimiter.comma\" } },\n      { regex: /;/, action: { token: \"delimiter.semicolon\" } },\n      {\n        regex: /@\\(/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /@\\[/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /@\\{/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /:</,\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\n      },\n      { regex: /\\.@symbolic+/, action: { token: \"identifier.sym\" } },\n      {\n        regex: /\\.@digit*@fexponent@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      { regex: /\\.@digit+/, action: { token: \"number.float\" } },\n      {\n        regex: /\\$@IDENTFST@IDENTRST*/,\n        action: {\n          cases: {\n            \"@keywords_dlr\": { token: \"keyword.dlr\" },\n            \"@default\": { token: \"namespace\" }\n          }\n        }\n      },\n      {\n        regex: /\\#@IDENTFST@IDENTRST*/,\n        action: {\n          cases: {\n            \"@keywords_srp\": { token: \"keyword.srp\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: /%\\(/, action: { token: \"delimiter.parenthesis\" } },\n      {\n        regex: /^%{(#|\\^|\\$)?/,\n        action: {\n          token: \"keyword\",\n          next: \"@lexing_EXTCODE\",\n          nextEmbedded: \"text/javascript\"\n        }\n      },\n      { regex: /^%}/, action: { token: \"keyword\" } },\n      { regex: /'\\(/, action: { token: \"delimiter.parenthesis\" } },\n      { regex: /'\\[/, action: { token: \"delimiter.bracket\" } },\n      { regex: /'\\{/, action: { token: \"delimiter.brace\" } },\n      [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'[^\\\\']'/, \"string\"],\n      [/\"/, \"string.quote\", \"@lexing_DQUOTE\"],\n      {\n        regex: /`\\(/,\n        action: \"@brackets\"\n      },\n      { regex: /\\\\/, action: { token: \"punctuation\" } },\n      {\n        regex: /@irregular_keywords(?!@IDENTRST)/,\n        action: { token: \"keyword\" }\n      },\n      {\n        regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@keywords_types\": { token: \"type\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      {\n        regex: /\\/\\/\\/\\//,\n        action: { token: \"comment\", next: \"@lexing_COMMENT_rest\" }\n      },\n      { regex: /\\/\\/.*$/, action: { token: \"comment\" } },\n      {\n        regex: /\\/\\*/,\n        action: { token: \"comment\", next: \"@lexing_COMMENT_block_c\" }\n      },\n      {\n        regex: /-<|=</,\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\n      },\n      {\n        regex: /@symbolic+/,\n        action: {\n          cases: {\n            \"@operators\": \"keyword\",\n            \"@default\": \"operator\"\n          }\n        }\n      },\n      {\n        regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      { regex: /0[xX]@xdigit+@INTSP*/, action: { token: \"number.hex\" } },\n      {\n        regex: /0[0-7]+(?![0-9])@INTSP*/,\n        action: { token: \"number.octal\" }\n      },\n      {\n        regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      {\n        regex: /@digit@digitseq0@INTSP*/,\n        action: { token: \"number.decimal\" }\n      },\n      { regex: /@digit+@INTSP*/, action: { token: \"number\" } }\n    ],\n    lexing_COMMENT_block_ml: [\n      [/[^\\(\\*]+/, \"comment\"],\n      [/\\(\\*/, \"comment\", \"@push\"],\n      [/\\(\\*/, \"comment.invalid\"],\n      [/\\*\\)/, \"comment\", \"@pop\"],\n      [/\\*/, \"comment\"]\n    ],\n    lexing_COMMENT_block_c: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    lexing_COMMENT_rest: [\n      [/$/, \"comment\", \"@pop\"],\n      [/.*/, \"comment\"]\n    ],\n    lexing_EFFECT_commaseq0: [\n      {\n        regex: /@IDENTFST@IDENTRST+|@digit+/,\n        action: {\n          cases: {\n            \"@keywords_effects\": { token: \"type.effect\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: /,/, action: { token: \"punctuation\" } },\n      { regex: />/, action: { token: \"@rematch\", next: \"@pop\" } }\n    ],\n    lexing_EXTCODE: [\n      {\n        regex: /^%}/,\n        action: {\n          token: \"@rematch\",\n          next: \"@pop\",\n          nextEmbedded: \"@pop\"\n        }\n      },\n      { regex: /[^%]+/, action: \"\" }\n    ],\n    lexing_DQUOTE: [\n      { regex: /\"/, action: { token: \"string.quote\", next: \"@pop\" } },\n      {\n        regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\n        action: [{ token: \"string.escape\" }, { token: \"identifier\" }, { token: \"string.escape\" }]\n      },\n      { regex: /\\\\$/, action: { token: \"string.escape\" } },\n      {\n        regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\n        action: { token: \"string.escape\" }\n      },\n      { regex: /[^\\\\\"]+/, action: { token: \"string\" } }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}