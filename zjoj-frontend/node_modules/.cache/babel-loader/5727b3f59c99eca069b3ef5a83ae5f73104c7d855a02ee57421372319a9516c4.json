{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { splitLines } from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport './standalone-tokens.css';\nimport { FontMeasurements } from '../../browser/config/fontMeasurements.js';\nimport { EditorCommand } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { createWebWorker as actualCreateWebWorker } from '../../browser/services/webWorker.js';\nimport { ApplyUpdateResult, ConfigurationChangedEvent, EditorOptions } from '../../common/config/editorOptions.js';\nimport { EditorZoom } from '../../common/config/editorZoom.js';\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\nimport { EditorType } from '../../common/editorCommon.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../common/languages/modesRegistry.js';\nimport { NullState, nullTokenize } from '../../common/languages/nullTokenize.js';\nimport { FindMatch, TextModelResolvedOptions } from '../../common/model.js';\nimport { IModelService } from '../../common/services/model.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { Colorizer } from './colorizer.js';\nimport { StandaloneDiffEditor2, StandaloneEditor, createTextModel } from './standaloneCodeEditor.js';\nimport { StandaloneKeybindingService, StandaloneServices } from './standaloneServices.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { MenuId, MenuRegistry } from '../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { IMarkerService } from '../../../platform/markers/common/markers.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { MultiDiffEditorWidget } from '../../browser/widget/multiDiffEditorWidget/multiDiffEditorWidget.js';\n/**\n * Create a new editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\nexport function create(domElement, options, override) {\n  const instantiationService = StandaloneServices.initialize(override || {});\n  return instantiationService.createInstance(StandaloneEditor, domElement, options);\n}\n/**\n * Emitted when an editor is created.\n * Creating a diff editor might cause this listener to be invoked with the two editors.\n * @event\n */\nexport function onDidCreateEditor(listener) {\n  const codeEditorService = StandaloneServices.get(ICodeEditorService);\n  return codeEditorService.onCodeEditorAdd(editor => {\n    listener(editor);\n  });\n}\n/**\n * Emitted when an diff editor is created.\n * @event\n */\nexport function onDidCreateDiffEditor(listener) {\n  const codeEditorService = StandaloneServices.get(ICodeEditorService);\n  return codeEditorService.onDiffEditorAdd(editor => {\n    listener(editor);\n  });\n}\n/**\n * Get all the created editors.\n */\nexport function getEditors() {\n  const codeEditorService = StandaloneServices.get(ICodeEditorService);\n  return codeEditorService.listCodeEditors();\n}\n/**\n * Get all the created diff editors.\n */\nexport function getDiffEditors() {\n  const codeEditorService = StandaloneServices.get(ICodeEditorService);\n  return codeEditorService.listDiffEditors();\n}\n/**\n * Create a new diff editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\nexport function createDiffEditor(domElement, options, override) {\n  const instantiationService = StandaloneServices.initialize(override || {});\n  return instantiationService.createInstance(StandaloneDiffEditor2, domElement, options);\n}\nexport function createMultiFileDiffEditor(domElement, override) {\n  const instantiationService = StandaloneServices.initialize(override || {});\n  return new MultiDiffEditorWidget(domElement, {}, instantiationService);\n}\n/**\n * Add a command.\n */\nexport function addCommand(descriptor) {\n  if (typeof descriptor.id !== 'string' || typeof descriptor.run !== 'function') {\n    throw new Error('Invalid command descriptor, `id` and `run` are required properties!');\n  }\n  return CommandsRegistry.registerCommand(descriptor.id, descriptor.run);\n}\n/**\n * Add an action to all editors.\n */\nexport function addEditorAction(descriptor) {\n  if (typeof descriptor.id !== 'string' || typeof descriptor.label !== 'string' || typeof descriptor.run !== 'function') {\n    throw new Error('Invalid action descriptor, `id`, `label` and `run` are required properties!');\n  }\n  const precondition = ContextKeyExpr.deserialize(descriptor.precondition);\n  const run = (accessor, ...args) => {\n    return EditorCommand.runEditorCommand(accessor, args, precondition, (accessor, editor, args) => Promise.resolve(descriptor.run(editor, ...args)));\n  };\n  const toDispose = new DisposableStore();\n  // Register the command\n  toDispose.add(CommandsRegistry.registerCommand(descriptor.id, run));\n  // Register the context menu item\n  if (descriptor.contextMenuGroupId) {\n    const menuItem = {\n      command: {\n        id: descriptor.id,\n        title: descriptor.label\n      },\n      when: precondition,\n      group: descriptor.contextMenuGroupId,\n      order: descriptor.contextMenuOrder || 0\n    };\n    toDispose.add(MenuRegistry.appendMenuItem(MenuId.EditorContext, menuItem));\n  }\n  // Register the keybindings\n  if (Array.isArray(descriptor.keybindings)) {\n    const keybindingService = StandaloneServices.get(IKeybindingService);\n    if (!(keybindingService instanceof StandaloneKeybindingService)) {\n      console.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');\n    } else {\n      const keybindingsWhen = ContextKeyExpr.and(precondition, ContextKeyExpr.deserialize(descriptor.keybindingContext));\n      toDispose.add(keybindingService.addDynamicKeybindings(descriptor.keybindings.map(keybinding => {\n        return {\n          keybinding,\n          command: descriptor.id,\n          when: keybindingsWhen\n        };\n      })));\n    }\n  }\n  return toDispose;\n}\n/**\n * Add a keybinding rule.\n */\nexport function addKeybindingRule(rule) {\n  return addKeybindingRules([rule]);\n}\n/**\n * Add keybinding rules.\n */\nexport function addKeybindingRules(rules) {\n  const keybindingService = StandaloneServices.get(IKeybindingService);\n  if (!(keybindingService instanceof StandaloneKeybindingService)) {\n    console.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');\n    return Disposable.None;\n  }\n  return keybindingService.addDynamicKeybindings(rules.map(rule => {\n    return {\n      keybinding: rule.keybinding,\n      command: rule.command,\n      commandArgs: rule.commandArgs,\n      when: ContextKeyExpr.deserialize(rule.when)\n    };\n  }));\n}\n/**\n * Create a new editor model.\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\n */\nexport function createModel(value, language, uri) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  const languageId = languageService.getLanguageIdByMimeType(language) || language;\n  return createTextModel(StandaloneServices.get(IModelService), languageService, value, languageId, uri);\n}\n/**\n * Change the language for a model.\n */\nexport function setModelLanguage(model, mimeTypeOrLanguageId) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  const languageId = languageService.getLanguageIdByMimeType(mimeTypeOrLanguageId) || mimeTypeOrLanguageId || PLAINTEXT_LANGUAGE_ID;\n  model.setLanguage(languageService.createById(languageId));\n}\n/**\n * Set the markers for a model.\n */\nexport function setModelMarkers(model, owner, markers) {\n  if (model) {\n    const markerService = StandaloneServices.get(IMarkerService);\n    markerService.changeOne(owner, model.uri, markers);\n  }\n}\n/**\n * Remove all markers of an owner.\n */\nexport function removeAllMarkers(owner) {\n  const markerService = StandaloneServices.get(IMarkerService);\n  markerService.changeAll(owner, []);\n}\n/**\n * Get markers for owner and/or resource\n *\n * @returns list of markers\n */\nexport function getModelMarkers(filter) {\n  const markerService = StandaloneServices.get(IMarkerService);\n  return markerService.read(filter);\n}\n/**\n * Emitted when markers change for a model.\n * @event\n */\nexport function onDidChangeMarkers(listener) {\n  const markerService = StandaloneServices.get(IMarkerService);\n  return markerService.onMarkerChanged(listener);\n}\n/**\n * Get the model that has `uri` if it exists.\n */\nexport function getModel(uri) {\n  const modelService = StandaloneServices.get(IModelService);\n  return modelService.getModel(uri);\n}\n/**\n * Get all the created models.\n */\nexport function getModels() {\n  const modelService = StandaloneServices.get(IModelService);\n  return modelService.getModels();\n}\n/**\n * Emitted when a model is created.\n * @event\n */\nexport function onDidCreateModel(listener) {\n  const modelService = StandaloneServices.get(IModelService);\n  return modelService.onModelAdded(listener);\n}\n/**\n * Emitted right before a model is disposed.\n * @event\n */\nexport function onWillDisposeModel(listener) {\n  const modelService = StandaloneServices.get(IModelService);\n  return modelService.onModelRemoved(listener);\n}\n/**\n * Emitted when a different language is set to a model.\n * @event\n */\nexport function onDidChangeModelLanguage(listener) {\n  const modelService = StandaloneServices.get(IModelService);\n  return modelService.onModelLanguageChanged(e => {\n    listener({\n      model: e.model,\n      oldLanguage: e.oldLanguageId\n    });\n  });\n}\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\nexport function createWebWorker(opts) {\n  return actualCreateWebWorker(StandaloneServices.get(IModelService), StandaloneServices.get(ILanguageConfigurationService), opts);\n}\n/**\n * Colorize the contents of `domNode` using attribute `data-lang`.\n */\nexport function colorizeElement(domNode, options) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  const themeService = StandaloneServices.get(IStandaloneThemeService);\n  return Colorizer.colorizeElement(themeService, languageService, domNode, options).then(() => {\n    themeService.registerEditorContainer(domNode);\n  });\n}\n/**\n * Colorize `text` using language `languageId`.\n */\nexport function colorize(text, languageId, options) {\n  const languageService = StandaloneServices.get(ILanguageService);\n  const themeService = StandaloneServices.get(IStandaloneThemeService);\n  themeService.registerEditorContainer(mainWindow.document.body);\n  return Colorizer.colorize(languageService, text, languageId, options);\n}\n/**\n * Colorize a line in a model.\n */\nexport function colorizeModelLine(model, lineNumber, tabSize = 4) {\n  const themeService = StandaloneServices.get(IStandaloneThemeService);\n  themeService.registerEditorContainer(mainWindow.document.body);\n  return Colorizer.colorizeModelLine(model, lineNumber, tabSize);\n}\n/**\n * @internal\n */\nfunction getSafeTokenizationSupport(language) {\n  const tokenizationSupport = languages.TokenizationRegistry.get(language);\n  if (tokenizationSupport) {\n    return tokenizationSupport;\n  }\n  return {\n    getInitialState: () => NullState,\n    tokenize: (line, hasEOL, state) => nullTokenize(language, state)\n  };\n}\n/**\n * Tokenize `text` using language `languageId`\n */\nexport function tokenize(text, languageId) {\n  // Needed in order to get the mode registered for subsequent look-ups\n  languages.TokenizationRegistry.getOrCreate(languageId);\n  const tokenizationSupport = getSafeTokenizationSupport(languageId);\n  const lines = splitLines(text);\n  const result = [];\n  let state = tokenizationSupport.getInitialState();\n  for (let i = 0, len = lines.length; i < len; i++) {\n    const line = lines[i];\n    const tokenizationResult = tokenizationSupport.tokenize(line, true, state);\n    result[i] = tokenizationResult.tokens;\n    state = tokenizationResult.endState;\n  }\n  return result;\n}\n/**\n * Define a new theme or update an existing theme.\n */\nexport function defineTheme(themeName, themeData) {\n  const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n  standaloneThemeService.defineTheme(themeName, themeData);\n}\n/**\n * Switches to a theme.\n */\nexport function setTheme(themeName) {\n  const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n  standaloneThemeService.setTheme(themeName);\n}\n/**\n * Clears all cached font measurements and triggers re-measurement.\n */\nexport function remeasureFonts() {\n  FontMeasurements.clearAllFontInfos();\n}\n/**\n * Register a command.\n */\nexport function registerCommand(id, handler) {\n  return CommandsRegistry.registerCommand({\n    id,\n    handler\n  });\n}\n/**\n * Registers a handler that is called when a link is opened in any editor. The handler callback should return `true` if the link was handled and `false` otherwise.\n * The handler that was registered last will be called first when a link is opened.\n *\n * Returns a disposable that can unregister the opener again.\n */\nexport function registerLinkOpener(opener) {\n  const openerService = StandaloneServices.get(IOpenerService);\n  return openerService.registerOpener({\n    async open(resource) {\n      if (typeof resource === 'string') {\n        resource = URI.parse(resource);\n      }\n      return opener.open(resource);\n    }\n  });\n}\n/**\n * Registers a handler that is called when a resource other than the current model should be opened in the editor (e.g. \"go to definition\").\n * The handler callback should return `true` if the request was handled and `false` otherwise.\n *\n * Returns a disposable that can unregister the opener again.\n *\n * If no handler is registered the default behavior is to do nothing for models other than the currently attached one.\n */\nexport function registerEditorOpener(opener) {\n  const codeEditorService = StandaloneServices.get(ICodeEditorService);\n  return codeEditorService.registerCodeEditorOpenHandler(async (input, source, sideBySide) => {\n    var _a;\n    if (!source) {\n      return null;\n    }\n    const selection = (_a = input.options) === null || _a === void 0 ? void 0 : _a.selection;\n    let selectionOrPosition;\n    if (selection && typeof selection.endLineNumber === 'number' && typeof selection.endColumn === 'number') {\n      selectionOrPosition = selection;\n    } else if (selection) {\n      selectionOrPosition = {\n        lineNumber: selection.startLineNumber,\n        column: selection.startColumn\n      };\n    }\n    if (await opener.openCodeEditor(source, input.resource, selectionOrPosition)) {\n      return source; // return source editor to indicate that this handler has successfully handled the opening\n    }\n    return null; // fallback to other registered handlers\n  });\n}\n/**\n * @internal\n */\nexport function createMonacoEditorAPI() {\n  return {\n    // methods\n    create: create,\n    getEditors: getEditors,\n    getDiffEditors: getDiffEditors,\n    onDidCreateEditor: onDidCreateEditor,\n    onDidCreateDiffEditor: onDidCreateDiffEditor,\n    createDiffEditor: createDiffEditor,\n    addCommand: addCommand,\n    addEditorAction: addEditorAction,\n    addKeybindingRule: addKeybindingRule,\n    addKeybindingRules: addKeybindingRules,\n    createModel: createModel,\n    setModelLanguage: setModelLanguage,\n    setModelMarkers: setModelMarkers,\n    getModelMarkers: getModelMarkers,\n    removeAllMarkers: removeAllMarkers,\n    onDidChangeMarkers: onDidChangeMarkers,\n    getModels: getModels,\n    getModel: getModel,\n    onDidCreateModel: onDidCreateModel,\n    onWillDisposeModel: onWillDisposeModel,\n    onDidChangeModelLanguage: onDidChangeModelLanguage,\n    createWebWorker: createWebWorker,\n    colorizeElement: colorizeElement,\n    colorize: colorize,\n    colorizeModelLine: colorizeModelLine,\n    tokenize: tokenize,\n    defineTheme: defineTheme,\n    setTheme: setTheme,\n    remeasureFonts: remeasureFonts,\n    registerCommand: registerCommand,\n    registerLinkOpener: registerLinkOpener,\n    registerEditorOpener: registerEditorOpener,\n    // enums\n    AccessibilitySupport: standaloneEnums.AccessibilitySupport,\n    ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\n    CursorChangeReason: standaloneEnums.CursorChangeReason,\n    DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\n    EditorAutoIndentStrategy: standaloneEnums.EditorAutoIndentStrategy,\n    EditorOption: standaloneEnums.EditorOption,\n    EndOfLinePreference: standaloneEnums.EndOfLinePreference,\n    EndOfLineSequence: standaloneEnums.EndOfLineSequence,\n    MinimapPosition: standaloneEnums.MinimapPosition,\n    MouseTargetType: standaloneEnums.MouseTargetType,\n    OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\n    OverviewRulerLane: standaloneEnums.OverviewRulerLane,\n    GlyphMarginLane: standaloneEnums.GlyphMarginLane,\n    RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\n    RenderMinimap: standaloneEnums.RenderMinimap,\n    ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\n    ScrollType: standaloneEnums.ScrollType,\n    TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\n    TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\n    TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\n    WrappingIndent: standaloneEnums.WrappingIndent,\n    InjectedTextCursorStops: standaloneEnums.InjectedTextCursorStops,\n    PositionAffinity: standaloneEnums.PositionAffinity,\n    ShowAiIconMode: standaloneEnums.ShowAiIconMode,\n    // classes\n    ConfigurationChangedEvent: ConfigurationChangedEvent,\n    BareFontInfo: BareFontInfo,\n    FontInfo: FontInfo,\n    TextModelResolvedOptions: TextModelResolvedOptions,\n    FindMatch: FindMatch,\n    ApplyUpdateResult: ApplyUpdateResult,\n    EditorZoom: EditorZoom,\n    createMultiFileDiffEditor: createMultiFileDiffEditor,\n    // vars\n    EditorType: EditorType,\n    EditorOptions: EditorOptions\n  };\n}","map":{"version":3,"names":["mainWindow","Disposable","DisposableStore","splitLines","URI","FontMeasurements","EditorCommand","ICodeEditorService","createWebWorker","actualCreateWebWorker","ApplyUpdateResult","ConfigurationChangedEvent","EditorOptions","EditorZoom","BareFontInfo","FontInfo","EditorType","languages","ILanguageService","ILanguageConfigurationService","PLAINTEXT_LANGUAGE_ID","NullState","nullTokenize","FindMatch","TextModelResolvedOptions","IModelService","standaloneEnums","Colorizer","StandaloneDiffEditor2","StandaloneEditor","createTextModel","StandaloneKeybindingService","StandaloneServices","IStandaloneThemeService","MenuId","MenuRegistry","CommandsRegistry","ContextKeyExpr","IKeybindingService","IMarkerService","IOpenerService","MultiDiffEditorWidget","create","domElement","options","override","instantiationService","initialize","createInstance","onDidCreateEditor","listener","codeEditorService","get","onCodeEditorAdd","editor","onDidCreateDiffEditor","onDiffEditorAdd","getEditors","listCodeEditors","getDiffEditors","listDiffEditors","createDiffEditor","createMultiFileDiffEditor","addCommand","descriptor","id","run","Error","registerCommand","addEditorAction","label","precondition","deserialize","accessor","args","runEditorCommand","Promise","resolve","toDispose","add","contextMenuGroupId","menuItem","command","title","when","group","order","contextMenuOrder","appendMenuItem","EditorContext","Array","isArray","keybindings","keybindingService","console","warn","keybindingsWhen","and","keybindingContext","addDynamicKeybindings","map","keybinding","addKeybindingRule","rule","addKeybindingRules","rules","None","commandArgs","createModel","value","language","uri","languageService","languageId","getLanguageIdByMimeType","setModelLanguage","model","mimeTypeOrLanguageId","setLanguage","createById","setModelMarkers","owner","markers","markerService","changeOne","removeAllMarkers","changeAll","getModelMarkers","filter","read","onDidChangeMarkers","onMarkerChanged","getModel","modelService","getModels","onDidCreateModel","onModelAdded","onWillDisposeModel","onModelRemoved","onDidChangeModelLanguage","onModelLanguageChanged","e","oldLanguage","oldLanguageId","opts","colorizeElement","domNode","themeService","then","registerEditorContainer","colorize","text","document","body","colorizeModelLine","lineNumber","tabSize","getSafeTokenizationSupport","tokenizationSupport","TokenizationRegistry","getInitialState","tokenize","line","hasEOL","state","getOrCreate","lines","result","i","len","length","tokenizationResult","tokens","endState","defineTheme","themeName","themeData","standaloneThemeService","setTheme","remeasureFonts","clearAllFontInfos","handler","registerLinkOpener","opener","openerService","registerOpener","open","resource","parse","registerEditorOpener","registerCodeEditorOpenHandler","input","source","sideBySide","_a","selection","selectionOrPosition","endLineNumber","endColumn","startLineNumber","column","startColumn","openCodeEditor","createMonacoEditorAPI","AccessibilitySupport","ContentWidgetPositionPreference","CursorChangeReason","DefaultEndOfLine","EditorAutoIndentStrategy","EditorOption","EndOfLinePreference","EndOfLineSequence","MinimapPosition","MouseTargetType","OverlayWidgetPositionPreference","OverviewRulerLane","GlyphMarginLane","RenderLineNumbersType","RenderMinimap","ScrollbarVisibility","ScrollType","TextEditorCursorBlinkingStyle","TextEditorCursorStyle","TrackedRangeStickiness","WrappingIndent","InjectedTextCursorStops","PositionAffinity","ShowAiIconMode"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneEditor.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { splitLines } from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport './standalone-tokens.css';\nimport { FontMeasurements } from '../../browser/config/fontMeasurements.js';\nimport { EditorCommand } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { createWebWorker as actualCreateWebWorker } from '../../browser/services/webWorker.js';\nimport { ApplyUpdateResult, ConfigurationChangedEvent, EditorOptions } from '../../common/config/editorOptions.js';\nimport { EditorZoom } from '../../common/config/editorZoom.js';\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\nimport { EditorType } from '../../common/editorCommon.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../common/languages/modesRegistry.js';\nimport { NullState, nullTokenize } from '../../common/languages/nullTokenize.js';\nimport { FindMatch, TextModelResolvedOptions } from '../../common/model.js';\nimport { IModelService } from '../../common/services/model.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { Colorizer } from './colorizer.js';\nimport { StandaloneDiffEditor2, StandaloneEditor, createTextModel } from './standaloneCodeEditor.js';\nimport { StandaloneKeybindingService, StandaloneServices } from './standaloneServices.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { MenuId, MenuRegistry } from '../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { IMarkerService } from '../../../platform/markers/common/markers.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { MultiDiffEditorWidget } from '../../browser/widget/multiDiffEditorWidget/multiDiffEditorWidget.js';\n/**\n * Create a new editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\nexport function create(domElement, options, override) {\n    const instantiationService = StandaloneServices.initialize(override || {});\n    return instantiationService.createInstance(StandaloneEditor, domElement, options);\n}\n/**\n * Emitted when an editor is created.\n * Creating a diff editor might cause this listener to be invoked with the two editors.\n * @event\n */\nexport function onDidCreateEditor(listener) {\n    const codeEditorService = StandaloneServices.get(ICodeEditorService);\n    return codeEditorService.onCodeEditorAdd((editor) => {\n        listener(editor);\n    });\n}\n/**\n * Emitted when an diff editor is created.\n * @event\n */\nexport function onDidCreateDiffEditor(listener) {\n    const codeEditorService = StandaloneServices.get(ICodeEditorService);\n    return codeEditorService.onDiffEditorAdd((editor) => {\n        listener(editor);\n    });\n}\n/**\n * Get all the created editors.\n */\nexport function getEditors() {\n    const codeEditorService = StandaloneServices.get(ICodeEditorService);\n    return codeEditorService.listCodeEditors();\n}\n/**\n * Get all the created diff editors.\n */\nexport function getDiffEditors() {\n    const codeEditorService = StandaloneServices.get(ICodeEditorService);\n    return codeEditorService.listDiffEditors();\n}\n/**\n * Create a new diff editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\nexport function createDiffEditor(domElement, options, override) {\n    const instantiationService = StandaloneServices.initialize(override || {});\n    return instantiationService.createInstance(StandaloneDiffEditor2, domElement, options);\n}\nexport function createMultiFileDiffEditor(domElement, override) {\n    const instantiationService = StandaloneServices.initialize(override || {});\n    return new MultiDiffEditorWidget(domElement, {}, instantiationService);\n}\n/**\n * Add a command.\n */\nexport function addCommand(descriptor) {\n    if ((typeof descriptor.id !== 'string') || (typeof descriptor.run !== 'function')) {\n        throw new Error('Invalid command descriptor, `id` and `run` are required properties!');\n    }\n    return CommandsRegistry.registerCommand(descriptor.id, descriptor.run);\n}\n/**\n * Add an action to all editors.\n */\nexport function addEditorAction(descriptor) {\n    if ((typeof descriptor.id !== 'string') || (typeof descriptor.label !== 'string') || (typeof descriptor.run !== 'function')) {\n        throw new Error('Invalid action descriptor, `id`, `label` and `run` are required properties!');\n    }\n    const precondition = ContextKeyExpr.deserialize(descriptor.precondition);\n    const run = (accessor, ...args) => {\n        return EditorCommand.runEditorCommand(accessor, args, precondition, (accessor, editor, args) => Promise.resolve(descriptor.run(editor, ...args)));\n    };\n    const toDispose = new DisposableStore();\n    // Register the command\n    toDispose.add(CommandsRegistry.registerCommand(descriptor.id, run));\n    // Register the context menu item\n    if (descriptor.contextMenuGroupId) {\n        const menuItem = {\n            command: {\n                id: descriptor.id,\n                title: descriptor.label\n            },\n            when: precondition,\n            group: descriptor.contextMenuGroupId,\n            order: descriptor.contextMenuOrder || 0\n        };\n        toDispose.add(MenuRegistry.appendMenuItem(MenuId.EditorContext, menuItem));\n    }\n    // Register the keybindings\n    if (Array.isArray(descriptor.keybindings)) {\n        const keybindingService = StandaloneServices.get(IKeybindingService);\n        if (!(keybindingService instanceof StandaloneKeybindingService)) {\n            console.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');\n        }\n        else {\n            const keybindingsWhen = ContextKeyExpr.and(precondition, ContextKeyExpr.deserialize(descriptor.keybindingContext));\n            toDispose.add(keybindingService.addDynamicKeybindings(descriptor.keybindings.map((keybinding) => {\n                return {\n                    keybinding,\n                    command: descriptor.id,\n                    when: keybindingsWhen\n                };\n            })));\n        }\n    }\n    return toDispose;\n}\n/**\n * Add a keybinding rule.\n */\nexport function addKeybindingRule(rule) {\n    return addKeybindingRules([rule]);\n}\n/**\n * Add keybinding rules.\n */\nexport function addKeybindingRules(rules) {\n    const keybindingService = StandaloneServices.get(IKeybindingService);\n    if (!(keybindingService instanceof StandaloneKeybindingService)) {\n        console.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');\n        return Disposable.None;\n    }\n    return keybindingService.addDynamicKeybindings(rules.map((rule) => {\n        return {\n            keybinding: rule.keybinding,\n            command: rule.command,\n            commandArgs: rule.commandArgs,\n            when: ContextKeyExpr.deserialize(rule.when),\n        };\n    }));\n}\n/**\n * Create a new editor model.\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\n */\nexport function createModel(value, language, uri) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const languageId = languageService.getLanguageIdByMimeType(language) || language;\n    return createTextModel(StandaloneServices.get(IModelService), languageService, value, languageId, uri);\n}\n/**\n * Change the language for a model.\n */\nexport function setModelLanguage(model, mimeTypeOrLanguageId) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const languageId = languageService.getLanguageIdByMimeType(mimeTypeOrLanguageId) || mimeTypeOrLanguageId || PLAINTEXT_LANGUAGE_ID;\n    model.setLanguage(languageService.createById(languageId));\n}\n/**\n * Set the markers for a model.\n */\nexport function setModelMarkers(model, owner, markers) {\n    if (model) {\n        const markerService = StandaloneServices.get(IMarkerService);\n        markerService.changeOne(owner, model.uri, markers);\n    }\n}\n/**\n * Remove all markers of an owner.\n */\nexport function removeAllMarkers(owner) {\n    const markerService = StandaloneServices.get(IMarkerService);\n    markerService.changeAll(owner, []);\n}\n/**\n * Get markers for owner and/or resource\n *\n * @returns list of markers\n */\nexport function getModelMarkers(filter) {\n    const markerService = StandaloneServices.get(IMarkerService);\n    return markerService.read(filter);\n}\n/**\n * Emitted when markers change for a model.\n * @event\n */\nexport function onDidChangeMarkers(listener) {\n    const markerService = StandaloneServices.get(IMarkerService);\n    return markerService.onMarkerChanged(listener);\n}\n/**\n * Get the model that has `uri` if it exists.\n */\nexport function getModel(uri) {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.getModel(uri);\n}\n/**\n * Get all the created models.\n */\nexport function getModels() {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.getModels();\n}\n/**\n * Emitted when a model is created.\n * @event\n */\nexport function onDidCreateModel(listener) {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.onModelAdded(listener);\n}\n/**\n * Emitted right before a model is disposed.\n * @event\n */\nexport function onWillDisposeModel(listener) {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.onModelRemoved(listener);\n}\n/**\n * Emitted when a different language is set to a model.\n * @event\n */\nexport function onDidChangeModelLanguage(listener) {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.onModelLanguageChanged((e) => {\n        listener({\n            model: e.model,\n            oldLanguage: e.oldLanguageId\n        });\n    });\n}\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\nexport function createWebWorker(opts) {\n    return actualCreateWebWorker(StandaloneServices.get(IModelService), StandaloneServices.get(ILanguageConfigurationService), opts);\n}\n/**\n * Colorize the contents of `domNode` using attribute `data-lang`.\n */\nexport function colorizeElement(domNode, options) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const themeService = StandaloneServices.get(IStandaloneThemeService);\n    return Colorizer.colorizeElement(themeService, languageService, domNode, options).then(() => {\n        themeService.registerEditorContainer(domNode);\n    });\n}\n/**\n * Colorize `text` using language `languageId`.\n */\nexport function colorize(text, languageId, options) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const themeService = StandaloneServices.get(IStandaloneThemeService);\n    themeService.registerEditorContainer(mainWindow.document.body);\n    return Colorizer.colorize(languageService, text, languageId, options);\n}\n/**\n * Colorize a line in a model.\n */\nexport function colorizeModelLine(model, lineNumber, tabSize = 4) {\n    const themeService = StandaloneServices.get(IStandaloneThemeService);\n    themeService.registerEditorContainer(mainWindow.document.body);\n    return Colorizer.colorizeModelLine(model, lineNumber, tabSize);\n}\n/**\n * @internal\n */\nfunction getSafeTokenizationSupport(language) {\n    const tokenizationSupport = languages.TokenizationRegistry.get(language);\n    if (tokenizationSupport) {\n        return tokenizationSupport;\n    }\n    return {\n        getInitialState: () => NullState,\n        tokenize: (line, hasEOL, state) => nullTokenize(language, state)\n    };\n}\n/**\n * Tokenize `text` using language `languageId`\n */\nexport function tokenize(text, languageId) {\n    // Needed in order to get the mode registered for subsequent look-ups\n    languages.TokenizationRegistry.getOrCreate(languageId);\n    const tokenizationSupport = getSafeTokenizationSupport(languageId);\n    const lines = splitLines(text);\n    const result = [];\n    let state = tokenizationSupport.getInitialState();\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const line = lines[i];\n        const tokenizationResult = tokenizationSupport.tokenize(line, true, state);\n        result[i] = tokenizationResult.tokens;\n        state = tokenizationResult.endState;\n    }\n    return result;\n}\n/**\n * Define a new theme or update an existing theme.\n */\nexport function defineTheme(themeName, themeData) {\n    const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n    standaloneThemeService.defineTheme(themeName, themeData);\n}\n/**\n * Switches to a theme.\n */\nexport function setTheme(themeName) {\n    const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n    standaloneThemeService.setTheme(themeName);\n}\n/**\n * Clears all cached font measurements and triggers re-measurement.\n */\nexport function remeasureFonts() {\n    FontMeasurements.clearAllFontInfos();\n}\n/**\n * Register a command.\n */\nexport function registerCommand(id, handler) {\n    return CommandsRegistry.registerCommand({ id, handler });\n}\n/**\n * Registers a handler that is called when a link is opened in any editor. The handler callback should return `true` if the link was handled and `false` otherwise.\n * The handler that was registered last will be called first when a link is opened.\n *\n * Returns a disposable that can unregister the opener again.\n */\nexport function registerLinkOpener(opener) {\n    const openerService = StandaloneServices.get(IOpenerService);\n    return openerService.registerOpener({\n        async open(resource) {\n            if (typeof resource === 'string') {\n                resource = URI.parse(resource);\n            }\n            return opener.open(resource);\n        }\n    });\n}\n/**\n * Registers a handler that is called when a resource other than the current model should be opened in the editor (e.g. \"go to definition\").\n * The handler callback should return `true` if the request was handled and `false` otherwise.\n *\n * Returns a disposable that can unregister the opener again.\n *\n * If no handler is registered the default behavior is to do nothing for models other than the currently attached one.\n */\nexport function registerEditorOpener(opener) {\n    const codeEditorService = StandaloneServices.get(ICodeEditorService);\n    return codeEditorService.registerCodeEditorOpenHandler(async (input, source, sideBySide) => {\n        var _a;\n        if (!source) {\n            return null;\n        }\n        const selection = (_a = input.options) === null || _a === void 0 ? void 0 : _a.selection;\n        let selectionOrPosition;\n        if (selection && typeof selection.endLineNumber === 'number' && typeof selection.endColumn === 'number') {\n            selectionOrPosition = selection;\n        }\n        else if (selection) {\n            selectionOrPosition = { lineNumber: selection.startLineNumber, column: selection.startColumn };\n        }\n        if (await opener.openCodeEditor(source, input.resource, selectionOrPosition)) {\n            return source; // return source editor to indicate that this handler has successfully handled the opening\n        }\n        return null; // fallback to other registered handlers\n    });\n}\n/**\n * @internal\n */\nexport function createMonacoEditorAPI() {\n    return {\n        // methods\n        create: create,\n        getEditors: getEditors,\n        getDiffEditors: getDiffEditors,\n        onDidCreateEditor: onDidCreateEditor,\n        onDidCreateDiffEditor: onDidCreateDiffEditor,\n        createDiffEditor: createDiffEditor,\n        addCommand: addCommand,\n        addEditorAction: addEditorAction,\n        addKeybindingRule: addKeybindingRule,\n        addKeybindingRules: addKeybindingRules,\n        createModel: createModel,\n        setModelLanguage: setModelLanguage,\n        setModelMarkers: setModelMarkers,\n        getModelMarkers: getModelMarkers,\n        removeAllMarkers: removeAllMarkers,\n        onDidChangeMarkers: onDidChangeMarkers,\n        getModels: getModels,\n        getModel: getModel,\n        onDidCreateModel: onDidCreateModel,\n        onWillDisposeModel: onWillDisposeModel,\n        onDidChangeModelLanguage: onDidChangeModelLanguage,\n        createWebWorker: createWebWorker,\n        colorizeElement: colorizeElement,\n        colorize: colorize,\n        colorizeModelLine: colorizeModelLine,\n        tokenize: tokenize,\n        defineTheme: defineTheme,\n        setTheme: setTheme,\n        remeasureFonts: remeasureFonts,\n        registerCommand: registerCommand,\n        registerLinkOpener: registerLinkOpener,\n        registerEditorOpener: registerEditorOpener,\n        // enums\n        AccessibilitySupport: standaloneEnums.AccessibilitySupport,\n        ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\n        CursorChangeReason: standaloneEnums.CursorChangeReason,\n        DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\n        EditorAutoIndentStrategy: standaloneEnums.EditorAutoIndentStrategy,\n        EditorOption: standaloneEnums.EditorOption,\n        EndOfLinePreference: standaloneEnums.EndOfLinePreference,\n        EndOfLineSequence: standaloneEnums.EndOfLineSequence,\n        MinimapPosition: standaloneEnums.MinimapPosition,\n        MouseTargetType: standaloneEnums.MouseTargetType,\n        OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\n        OverviewRulerLane: standaloneEnums.OverviewRulerLane,\n        GlyphMarginLane: standaloneEnums.GlyphMarginLane,\n        RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\n        RenderMinimap: standaloneEnums.RenderMinimap,\n        ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\n        ScrollType: standaloneEnums.ScrollType,\n        TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\n        TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\n        TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\n        WrappingIndent: standaloneEnums.WrappingIndent,\n        InjectedTextCursorStops: standaloneEnums.InjectedTextCursorStops,\n        PositionAffinity: standaloneEnums.PositionAffinity,\n        ShowAiIconMode: standaloneEnums.ShowAiIconMode,\n        // classes\n        ConfigurationChangedEvent: ConfigurationChangedEvent,\n        BareFontInfo: BareFontInfo,\n        FontInfo: FontInfo,\n        TextModelResolvedOptions: TextModelResolvedOptions,\n        FindMatch: FindMatch,\n        ApplyUpdateResult: ApplyUpdateResult,\n        EditorZoom: EditorZoom,\n        createMultiFileDiffEditor: createMultiFileDiffEditor,\n        // vars\n        EditorType: EditorType,\n        EditorOptions: EditorOptions\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}