{"ast":null,"code":"import \"core-js/modules/es.array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar InlayHintsController_1;\nimport { ModifierKeyEmitter } from '../../../../base/browser/dom.js';\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { DynamicCssRules } from '../../../browser/editorDom.js';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../../common/config/editorOptions.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport * as languages from '../../../common/languages.js';\nimport { InjectedTextCursorStops } from '../../../common/model.js';\nimport { ModelDecorationInjectedTextOptions } from '../../../common/model/textModel.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { ClickLinkGesture } from '../../gotoSymbol/browser/link/clickLinkGesture.js';\nimport { InlayHintAnchor, InlayHintsFragments } from './inlayHints.js';\nimport { goToDefinitionWithLocation, showGoToContextMenu } from './inlayHintsLocations.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport * as colors from '../../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\n// --- hint caching service (per session)\nclass InlayHintsCache {\n  constructor() {\n    this._entries = new LRUCache(50);\n  }\n  get(model) {\n    const key = InlayHintsCache._key(model);\n    return this._entries.get(key);\n  }\n  set(model, value) {\n    const key = InlayHintsCache._key(model);\n    this._entries.set(key, value);\n  }\n  static _key(model) {\n    return `${model.uri.toString()}/${model.getVersionId()}`;\n  }\n}\nconst IInlayHintsCache = createDecorator('IInlayHintsCache');\nregisterSingleton(IInlayHintsCache, InlayHintsCache, 1 /* InstantiationType.Delayed */);\n// --- rendered label\nexport class RenderedInlayHintLabelPart {\n  constructor(item, index) {\n    this.item = item;\n    this.index = index;\n  }\n  get part() {\n    const label = this.item.hint.label;\n    if (typeof label === 'string') {\n      return {\n        label\n      };\n    } else {\n      return label[this.index];\n    }\n  }\n}\nclass ActiveInlayHintInfo {\n  constructor(part, hasTriggerModifier) {\n    this.part = part;\n    this.hasTriggerModifier = hasTriggerModifier;\n  }\n}\n// --- controller\nlet InlayHintsController = InlayHintsController_1 = class InlayHintsController {\n  static get(editor) {\n    var _a;\n    return (_a = editor.getContribution(InlayHintsController_1.ID)) !== null && _a !== void 0 ? _a : undefined;\n  }\n  constructor(_editor, _languageFeaturesService, _featureDebounce, _inlayHintsCache, _commandService, _notificationService, _instaService) {\n    this._editor = _editor;\n    this._languageFeaturesService = _languageFeaturesService;\n    this._inlayHintsCache = _inlayHintsCache;\n    this._commandService = _commandService;\n    this._notificationService = _notificationService;\n    this._instaService = _instaService;\n    this._disposables = new DisposableStore();\n    this._sessionDisposables = new DisposableStore();\n    this._decorationsMetadata = new Map();\n    this._ruleFactory = new DynamicCssRules(this._editor);\n    this._activeRenderMode = 0 /* RenderMode.Normal */;\n    this._debounceInfo = _featureDebounce.for(_languageFeaturesService.inlayHintsProvider, 'InlayHint', {\n      min: 25\n    });\n    this._disposables.add(_languageFeaturesService.inlayHintsProvider.onDidChange(() => this._update()));\n    this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n    this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n    this._disposables.add(_editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(139 /* EditorOption.inlayHints */)) {\n        this._update();\n      }\n    }));\n    this._update();\n  }\n  dispose() {\n    this._sessionDisposables.dispose();\n    this._removeAllDecorations();\n    this._disposables.dispose();\n  }\n  _update() {\n    this._sessionDisposables.clear();\n    this._removeAllDecorations();\n    const options = this._editor.getOption(139 /* EditorOption.inlayHints */);\n    if (options.enabled === 'off') {\n      return;\n    }\n    const model = this._editor.getModel();\n    if (!model || !this._languageFeaturesService.inlayHintsProvider.has(model)) {\n      return;\n    }\n    // iff possible, quickly update from cache\n    const cached = this._inlayHintsCache.get(model);\n    if (cached) {\n      this._updateHintsDecorators([model.getFullModelRange()], cached);\n    }\n    this._sessionDisposables.add(toDisposable(() => {\n      // cache items when switching files etc\n      if (!model.isDisposed()) {\n        this._cacheHintsForFastRestore(model);\n      }\n    }));\n    let cts;\n    const watchedProviders = new Set();\n    const scheduler = new RunOnceScheduler(async () => {\n      const t1 = Date.now();\n      cts === null || cts === void 0 ? void 0 : cts.dispose(true);\n      cts = new CancellationTokenSource();\n      const listener = model.onWillDispose(() => cts === null || cts === void 0 ? void 0 : cts.cancel());\n      try {\n        const myToken = cts.token;\n        const inlayHints = await InlayHintsFragments.create(this._languageFeaturesService.inlayHintsProvider, model, this._getHintsRanges(), myToken);\n        scheduler.delay = this._debounceInfo.update(model, Date.now() - t1);\n        if (myToken.isCancellationRequested) {\n          inlayHints.dispose();\n          return;\n        }\n        // listen to provider changes\n        for (const provider of inlayHints.provider) {\n          if (typeof provider.onDidChangeInlayHints === 'function' && !watchedProviders.has(provider)) {\n            watchedProviders.add(provider);\n            this._sessionDisposables.add(provider.onDidChangeInlayHints(() => {\n              if (!scheduler.isScheduled()) {\n                // ignore event when request is already scheduled\n                scheduler.schedule();\n              }\n            }));\n          }\n        }\n        this._sessionDisposables.add(inlayHints);\n        this._updateHintsDecorators(inlayHints.ranges, inlayHints.items);\n        this._cacheHintsForFastRestore(model);\n      } catch (err) {\n        onUnexpectedError(err);\n      } finally {\n        cts.dispose();\n        listener.dispose();\n      }\n    }, this._debounceInfo.get(model));\n    this._sessionDisposables.add(scheduler);\n    this._sessionDisposables.add(toDisposable(() => cts === null || cts === void 0 ? void 0 : cts.dispose(true)));\n    scheduler.schedule(0);\n    this._sessionDisposables.add(this._editor.onDidScrollChange(e => {\n      // update when scroll position changes\n      // uses scrollTopChanged has weak heuristic to differenatiate between scrolling due to\n      // typing or due to \"actual\" scrolling\n      if (e.scrollTopChanged || !scheduler.isScheduled()) {\n        scheduler.schedule();\n      }\n    }));\n    this._sessionDisposables.add(this._editor.onDidChangeModelContent(e => {\n      // update less aggressive when typing\n      const delay = Math.max(scheduler.delay, 1250);\n      scheduler.schedule(delay);\n    }));\n    if (options.enabled === 'on') {\n      // different \"on\" modes: always\n      this._activeRenderMode = 0 /* RenderMode.Normal */;\n    } else {\n      // different \"on\" modes: offUnlessPressed, or onUnlessPressed\n      let defaultMode;\n      let altMode;\n      if (options.enabled === 'onUnlessPressed') {\n        defaultMode = 0 /* RenderMode.Normal */;\n        altMode = 1 /* RenderMode.Invisible */;\n      } else {\n        defaultMode = 1 /* RenderMode.Invisible */;\n        altMode = 0 /* RenderMode.Normal */;\n      }\n      this._activeRenderMode = defaultMode;\n      this._sessionDisposables.add(ModifierKeyEmitter.getInstance().event(e => {\n        if (!this._editor.hasModel()) {\n          return;\n        }\n        const newRenderMode = e.altKey && e.ctrlKey && !(e.shiftKey || e.metaKey) ? altMode : defaultMode;\n        if (newRenderMode !== this._activeRenderMode) {\n          this._activeRenderMode = newRenderMode;\n          const model = this._editor.getModel();\n          const copies = this._copyInlayHintsWithCurrentAnchor(model);\n          this._updateHintsDecorators([model.getFullModelRange()], copies);\n          scheduler.schedule(0);\n        }\n      }));\n    }\n    // mouse gestures\n    this._sessionDisposables.add(this._installDblClickGesture(() => scheduler.schedule(0)));\n    this._sessionDisposables.add(this._installLinkGesture());\n    this._sessionDisposables.add(this._installContextMenu());\n  }\n  _installLinkGesture() {\n    const store = new DisposableStore();\n    const gesture = store.add(new ClickLinkGesture(this._editor));\n    // let removeHighlight = () => { };\n    const sessionStore = new DisposableStore();\n    store.add(sessionStore);\n    store.add(gesture.onMouseMoveOrRelevantKeyDown(e => {\n      const [mouseEvent] = e;\n      const labelPart = this._getInlayHintLabelPart(mouseEvent);\n      const model = this._editor.getModel();\n      if (!labelPart || !model) {\n        sessionStore.clear();\n        return;\n      }\n      // resolve the item\n      const cts = new CancellationTokenSource();\n      sessionStore.add(toDisposable(() => cts.dispose(true)));\n      labelPart.item.resolve(cts.token);\n      // render link => when the modifier is pressed and when there is a command or location\n      this._activeInlayHintPart = labelPart.part.command || labelPart.part.location ? new ActiveInlayHintInfo(labelPart, mouseEvent.hasTriggerModifier) : undefined;\n      const lineNumber = model.validatePosition(labelPart.item.hint.position).lineNumber;\n      const range = new Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber));\n      const lineHints = this._getInlineHintsForRange(range);\n      this._updateHintsDecorators([range], lineHints);\n      sessionStore.add(toDisposable(() => {\n        this._activeInlayHintPart = undefined;\n        this._updateHintsDecorators([range], lineHints);\n      }));\n    }));\n    store.add(gesture.onCancel(() => sessionStore.clear()));\n    store.add(gesture.onExecute(async e => {\n      const label = this._getInlayHintLabelPart(e);\n      if (label) {\n        const part = label.part;\n        if (part.location) {\n          // location -> execute go to def\n          this._instaService.invokeFunction(goToDefinitionWithLocation, e, this._editor, part.location);\n        } else if (languages.Command.is(part.command)) {\n          // command -> execute it\n          await this._invokeCommand(part.command, label.item);\n        }\n      }\n    }));\n    return store;\n  }\n  _getInlineHintsForRange(range) {\n    const lineHints = new Set();\n    for (const data of this._decorationsMetadata.values()) {\n      if (range.containsRange(data.item.anchor.range)) {\n        lineHints.add(data.item);\n      }\n    }\n    return Array.from(lineHints);\n  }\n  _installDblClickGesture(updateInlayHints) {\n    return this._editor.onMouseUp(async e => {\n      if (e.event.detail !== 2) {\n        return;\n      }\n      const part = this._getInlayHintLabelPart(e);\n      if (!part) {\n        return;\n      }\n      e.event.preventDefault();\n      await part.item.resolve(CancellationToken.None);\n      if (isNonEmptyArray(part.item.hint.textEdits)) {\n        const edits = part.item.hint.textEdits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text));\n        this._editor.executeEdits('inlayHint.default', edits);\n        updateInlayHints();\n      }\n    });\n  }\n  _installContextMenu() {\n    return this._editor.onContextMenu(async e => {\n      if (!(e.event.target instanceof HTMLElement)) {\n        return;\n      }\n      const part = this._getInlayHintLabelPart(e);\n      if (part) {\n        await this._instaService.invokeFunction(showGoToContextMenu, this._editor, e.event.target, part);\n      }\n    });\n  }\n  _getInlayHintLabelPart(e) {\n    var _a;\n    if (e.target.type !== 6 /* MouseTargetType.CONTENT_TEXT */) {\n      return undefined;\n    }\n    const options = (_a = e.target.detail.injectedText) === null || _a === void 0 ? void 0 : _a.options;\n    if (options instanceof ModelDecorationInjectedTextOptions && (options === null || options === void 0 ? void 0 : options.attachedData) instanceof RenderedInlayHintLabelPart) {\n      return options.attachedData;\n    }\n    return undefined;\n  }\n  async _invokeCommand(command, item) {\n    var _a;\n    try {\n      await this._commandService.executeCommand(command.id, ...((_a = command.arguments) !== null && _a !== void 0 ? _a : []));\n    } catch (err) {\n      this._notificationService.notify({\n        severity: Severity.Error,\n        source: item.provider.displayName,\n        message: err\n      });\n    }\n  }\n  _cacheHintsForFastRestore(model) {\n    const hints = this._copyInlayHintsWithCurrentAnchor(model);\n    this._inlayHintsCache.set(model, hints);\n  }\n  // return inlay hints but with an anchor that reflects \"updates\"\n  // that happened after receiving them, e.g adding new lines before a hint\n  _copyInlayHintsWithCurrentAnchor(model) {\n    const items = new Map();\n    for (const [id, obj] of this._decorationsMetadata) {\n      if (items.has(obj.item)) {\n        // an inlay item can be rendered as multiple decorations\n        // but they will all uses the same range\n        continue;\n      }\n      const range = model.getDecorationRange(id);\n      if (range) {\n        // update range with whatever the editor has tweaked it to\n        const anchor = new InlayHintAnchor(range, obj.item.anchor.direction);\n        const copy = obj.item.with({\n          anchor\n        });\n        items.set(obj.item, copy);\n      }\n    }\n    return Array.from(items.values());\n  }\n  _getHintsRanges() {\n    const extra = 30;\n    const model = this._editor.getModel();\n    const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();\n    const result = [];\n    for (const range of visibleRanges.sort(Range.compareRangesUsingStarts)) {\n      const extendedRange = model.validateRange(new Range(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));\n      if (result.length === 0 || !Range.areIntersectingOrTouching(result[result.length - 1], extendedRange)) {\n        result.push(extendedRange);\n      } else {\n        result[result.length - 1] = Range.plusRange(result[result.length - 1], extendedRange);\n      }\n    }\n    return result;\n  }\n  _updateHintsDecorators(ranges, items) {\n    var _a, _b;\n    // utils to collect/create injected text decorations\n    const newDecorationsData = [];\n    const addInjectedText = (item, ref, content, cursorStops, attachedData) => {\n      const opts = {\n        content,\n        inlineClassNameAffectsLetterSpacing: true,\n        inlineClassName: ref.className,\n        cursorStops,\n        attachedData\n      };\n      newDecorationsData.push({\n        item,\n        classNameRef: ref,\n        decoration: {\n          range: item.anchor.range,\n          options: {\n            // className: \"rangeHighlight\", // DEBUG highlight to see to what range a hint is attached\n            description: 'InlayHint',\n            showIfCollapsed: item.anchor.range.isEmpty(),\n            // \"original\" range is empty\n            collapseOnReplaceEdit: !item.anchor.range.isEmpty(),\n            stickiness: 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */,\n            [item.anchor.direction]: this._activeRenderMode === 0 /* RenderMode.Normal */ ? opts : undefined\n          }\n        }\n      });\n    };\n    const addInjectedWhitespace = (item, isLast) => {\n      const marginRule = this._ruleFactory.createClassNameRef({\n        width: `${fontSize / 3 | 0}px`,\n        display: 'inline-block'\n      });\n      addInjectedText(item, marginRule, '\\u200a', isLast ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None);\n    };\n    //\n    const {\n      fontSize,\n      fontFamily,\n      padding,\n      isUniform\n    } = this._getLayoutInfo();\n    const fontFamilyVar = '--code-editorInlayHintsFontFamily';\n    this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);\n    for (const item of items) {\n      // whitespace leading the actual label\n      if (item.hint.paddingLeft) {\n        addInjectedWhitespace(item, false);\n      }\n      // the label with its parts\n      const parts = typeof item.hint.label === 'string' ? [{\n        label: item.hint.label\n      }] : item.hint.label;\n      for (let i = 0; i < parts.length; i++) {\n        const part = parts[i];\n        const isFirst = i === 0;\n        const isLast = i === parts.length - 1;\n        const cssProperties = {\n          fontSize: `${fontSize}px`,\n          fontFamily: `var(${fontFamilyVar}), ${EDITOR_FONT_DEFAULTS.fontFamily}`,\n          verticalAlign: isUniform ? 'baseline' : 'middle',\n          unicodeBidi: 'isolate'\n        };\n        if (isNonEmptyArray(item.hint.textEdits)) {\n          cssProperties.cursor = 'default';\n        }\n        this._fillInColors(cssProperties, item.hint);\n        if ((part.command || part.location) && ((_a = this._activeInlayHintPart) === null || _a === void 0 ? void 0 : _a.part.item) === item && this._activeInlayHintPart.part.index === i) {\n          // active link!\n          cssProperties.textDecoration = 'underline';\n          if (this._activeInlayHintPart.hasTriggerModifier) {\n            cssProperties.color = themeColorFromId(colors.editorActiveLinkForeground);\n            cssProperties.cursor = 'pointer';\n          }\n        }\n        if (padding) {\n          if (isFirst && isLast) {\n            // only element\n            cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px`;\n            cssProperties.borderRadius = `${fontSize / 4 | 0}px`;\n          } else if (isFirst) {\n            // first element\n            cssProperties.padding = `1px 0 1px ${Math.max(1, fontSize / 4) | 0}px`;\n            cssProperties.borderRadius = `${fontSize / 4 | 0}px 0 0 ${fontSize / 4 | 0}px`;\n          } else if (isLast) {\n            // last element\n            cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px 1px 0`;\n            cssProperties.borderRadius = `0 ${fontSize / 4 | 0}px ${fontSize / 4 | 0}px 0`;\n          } else {\n            cssProperties.padding = `1px 0 1px 0`;\n          }\n        }\n        addInjectedText(item, this._ruleFactory.createClassNameRef(cssProperties), fixSpace(part.label), isLast && !item.hint.paddingRight ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None, new RenderedInlayHintLabelPart(item, i));\n      }\n      // whitespace trailing the actual label\n      if (item.hint.paddingRight) {\n        addInjectedWhitespace(item, true);\n      }\n      if (newDecorationsData.length > InlayHintsController_1._MAX_DECORATORS) {\n        break;\n      }\n    }\n    // collect all decoration ids that are affected by the ranges\n    // and only update those decorations\n    const decorationIdsToReplace = [];\n    for (const range of ranges) {\n      for (const {\n        id\n      } of (_b = this._editor.getDecorationsInRange(range)) !== null && _b !== void 0 ? _b : []) {\n        const metadata = this._decorationsMetadata.get(id);\n        if (metadata) {\n          decorationIdsToReplace.push(id);\n          metadata.classNameRef.dispose();\n          this._decorationsMetadata.delete(id);\n        }\n      }\n    }\n    const scrollState = StableEditorScrollState.capture(this._editor);\n    this._editor.changeDecorations(accessor => {\n      const newDecorationIds = accessor.deltaDecorations(decorationIdsToReplace, newDecorationsData.map(d => d.decoration));\n      for (let i = 0; i < newDecorationIds.length; i++) {\n        const data = newDecorationsData[i];\n        this._decorationsMetadata.set(newDecorationIds[i], data);\n      }\n    });\n    scrollState.restore(this._editor);\n  }\n  _fillInColors(props, hint) {\n    if (hint.kind === languages.InlayHintKind.Parameter) {\n      props.backgroundColor = themeColorFromId(colors.editorInlayHintParameterBackground);\n      props.color = themeColorFromId(colors.editorInlayHintParameterForeground);\n    } else if (hint.kind === languages.InlayHintKind.Type) {\n      props.backgroundColor = themeColorFromId(colors.editorInlayHintTypeBackground);\n      props.color = themeColorFromId(colors.editorInlayHintTypeForeground);\n    } else {\n      props.backgroundColor = themeColorFromId(colors.editorInlayHintBackground);\n      props.color = themeColorFromId(colors.editorInlayHintForeground);\n    }\n  }\n  _getLayoutInfo() {\n    const options = this._editor.getOption(139 /* EditorOption.inlayHints */);\n    const padding = options.padding;\n    const editorFontSize = this._editor.getOption(52 /* EditorOption.fontSize */);\n    const editorFontFamily = this._editor.getOption(49 /* EditorOption.fontFamily */);\n    let fontSize = options.fontSize;\n    if (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n      fontSize = editorFontSize;\n    }\n    const fontFamily = options.fontFamily || editorFontFamily;\n    const isUniform = !padding && fontFamily === editorFontFamily && fontSize === editorFontSize;\n    return {\n      fontSize,\n      fontFamily,\n      padding,\n      isUniform\n    };\n  }\n  _removeAllDecorations() {\n    this._editor.removeDecorations(Array.from(this._decorationsMetadata.keys()));\n    for (const obj of this._decorationsMetadata.values()) {\n      obj.classNameRef.dispose();\n    }\n    this._decorationsMetadata.clear();\n  }\n};\nInlayHintsController.ID = 'editor.contrib.InlayHints';\nInlayHintsController._MAX_DECORATORS = 1500;\nInlayHintsController = InlayHintsController_1 = __decorate([__param(1, ILanguageFeaturesService), __param(2, ILanguageFeatureDebounceService), __param(3, IInlayHintsCache), __param(4, ICommandService), __param(5, INotificationService), __param(6, IInstantiationService)], InlayHintsController);\nexport { InlayHintsController };\n// Prevents the view from potentially visible whitespace\nfunction fixSpace(str) {\n  const noBreakWhitespace = '\\xa0';\n  return str.replace(/[ \\t]/g, noBreakWhitespace);\n}\nCommandsRegistry.registerCommand('_executeInlayHintProvider', async (accessor, ...args) => {\n  const [uri, range] = args;\n  assertType(URI.isUri(uri));\n  assertType(Range.isIRange(range));\n  const {\n    inlayHintsProvider\n  } = accessor.get(ILanguageFeaturesService);\n  const ref = await accessor.get(ITextModelService).createModelReference(uri);\n  try {\n    const model = await InlayHintsFragments.create(inlayHintsProvider, ref.object.textEditorModel, [Range.lift(range)], CancellationToken.None);\n    const result = model.items.map(i => i.hint);\n    setTimeout(() => model.dispose(), 0); // dispose after sending to ext host\n    return result;\n  } finally {\n    ref.dispose();\n  }\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","InlayHintsController_1","ModifierKeyEmitter","isNonEmptyArray","RunOnceScheduler","CancellationToken","CancellationTokenSource","onUnexpectedError","DisposableStore","toDisposable","LRUCache","assertType","URI","DynamicCssRules","StableEditorScrollState","EDITOR_FONT_DEFAULTS","EditOperation","Range","languages","InjectedTextCursorStops","ModelDecorationInjectedTextOptions","ILanguageFeatureDebounceService","ILanguageFeaturesService","ITextModelService","ClickLinkGesture","InlayHintAnchor","InlayHintsFragments","goToDefinitionWithLocation","showGoToContextMenu","CommandsRegistry","ICommandService","registerSingleton","createDecorator","IInstantiationService","INotificationService","Severity","colors","themeColorFromId","InlayHintsCache","constructor","_entries","get","model","_key","set","value","uri","toString","getVersionId","IInlayHintsCache","RenderedInlayHintLabelPart","item","index","part","label","hint","ActiveInlayHintInfo","hasTriggerModifier","InlayHintsController","editor","_a","getContribution","ID","undefined","_editor","_languageFeaturesService","_featureDebounce","_inlayHintsCache","_commandService","_notificationService","_instaService","_disposables","_sessionDisposables","_decorationsMetadata","Map","_ruleFactory","_activeRenderMode","_debounceInfo","for","inlayHintsProvider","min","add","onDidChange","_update","onDidChangeModel","onDidChangeModelLanguage","onDidChangeConfiguration","e","hasChanged","dispose","_removeAllDecorations","clear","options","getOption","enabled","getModel","has","cached","_updateHintsDecorators","getFullModelRange","isDisposed","_cacheHintsForFastRestore","cts","watchedProviders","Set","scheduler","t1","Date","now","listener","onWillDispose","cancel","myToken","token","inlayHints","create","_getHintsRanges","delay","update","isCancellationRequested","provider","onDidChangeInlayHints","isScheduled","schedule","ranges","items","err","onDidScrollChange","scrollTopChanged","onDidChangeModelContent","Math","max","defaultMode","altMode","getInstance","event","hasModel","newRenderMode","altKey","ctrlKey","shiftKey","metaKey","copies","_copyInlayHintsWithCurrentAnchor","_installDblClickGesture","_installLinkGesture","_installContextMenu","store","gesture","sessionStore","onMouseMoveOrRelevantKeyDown","mouseEvent","labelPart","_getInlayHintLabelPart","resolve","_activeInlayHintPart","command","location","lineNumber","validatePosition","position","range","getLineMaxColumn","lineHints","_getInlineHintsForRange","onCancel","onExecute","invokeFunction","Command","is","_invokeCommand","data","values","containsRange","anchor","Array","from","updateInlayHints","onMouseUp","detail","preventDefault","None","textEdits","edits","map","edit","replace","lift","text","executeEdits","onContextMenu","HTMLElement","type","injectedText","attachedData","executeCommand","id","notify","severity","Error","source","displayName","message","hints","obj","getDecorationRange","direction","copy","with","extra","visibleRanges","getVisibleRangesPlusViewportAboveBelow","result","sort","compareRangesUsingStarts","extendedRange","validateRange","startLineNumber","startColumn","endLineNumber","endColumn","areIntersectingOrTouching","push","plusRange","_b","newDecorationsData","addInjectedText","ref","content","cursorStops","opts","inlineClassNameAffectsLetterSpacing","inlineClassName","className","classNameRef","decoration","description","showIfCollapsed","isEmpty","collapseOnReplaceEdit","stickiness","addInjectedWhitespace","isLast","marginRule","createClassNameRef","width","fontSize","display","Right","fontFamily","padding","isUniform","_getLayoutInfo","fontFamilyVar","getContainerDomNode","style","setProperty","paddingLeft","parts","isFirst","cssProperties","verticalAlign","unicodeBidi","cursor","_fillInColors","textDecoration","color","editorActiveLinkForeground","borderRadius","fixSpace","paddingRight","_MAX_DECORATORS","decorationIdsToReplace","getDecorationsInRange","metadata","delete","scrollState","capture","changeDecorations","accessor","newDecorationIds","deltaDecorations","restore","props","kind","InlayHintKind","Parameter","backgroundColor","editorInlayHintParameterBackground","editorInlayHintParameterForeground","Type","editorInlayHintTypeBackground","editorInlayHintTypeForeground","editorInlayHintBackground","editorInlayHintForeground","editorFontSize","editorFontFamily","removeDecorations","keys","str","noBreakWhitespace","registerCommand","args","isUri","isIRange","createModelReference","object","textEditorModel","setTimeout"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/inlayHints/browser/inlayHintsController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar InlayHintsController_1;\nimport { ModifierKeyEmitter } from '../../../../base/browser/dom.js';\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { DynamicCssRules } from '../../../browser/editorDom.js';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../../common/config/editorOptions.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport * as languages from '../../../common/languages.js';\nimport { InjectedTextCursorStops } from '../../../common/model.js';\nimport { ModelDecorationInjectedTextOptions } from '../../../common/model/textModel.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { ClickLinkGesture } from '../../gotoSymbol/browser/link/clickLinkGesture.js';\nimport { InlayHintAnchor, InlayHintsFragments } from './inlayHints.js';\nimport { goToDefinitionWithLocation, showGoToContextMenu } from './inlayHintsLocations.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport * as colors from '../../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\n// --- hint caching service (per session)\nclass InlayHintsCache {\n    constructor() {\n        this._entries = new LRUCache(50);\n    }\n    get(model) {\n        const key = InlayHintsCache._key(model);\n        return this._entries.get(key);\n    }\n    set(model, value) {\n        const key = InlayHintsCache._key(model);\n        this._entries.set(key, value);\n    }\n    static _key(model) {\n        return `${model.uri.toString()}/${model.getVersionId()}`;\n    }\n}\nconst IInlayHintsCache = createDecorator('IInlayHintsCache');\nregisterSingleton(IInlayHintsCache, InlayHintsCache, 1 /* InstantiationType.Delayed */);\n// --- rendered label\nexport class RenderedInlayHintLabelPart {\n    constructor(item, index) {\n        this.item = item;\n        this.index = index;\n    }\n    get part() {\n        const label = this.item.hint.label;\n        if (typeof label === 'string') {\n            return { label };\n        }\n        else {\n            return label[this.index];\n        }\n    }\n}\nclass ActiveInlayHintInfo {\n    constructor(part, hasTriggerModifier) {\n        this.part = part;\n        this.hasTriggerModifier = hasTriggerModifier;\n    }\n}\n// --- controller\nlet InlayHintsController = InlayHintsController_1 = class InlayHintsController {\n    static get(editor) {\n        var _a;\n        return (_a = editor.getContribution(InlayHintsController_1.ID)) !== null && _a !== void 0 ? _a : undefined;\n    }\n    constructor(_editor, _languageFeaturesService, _featureDebounce, _inlayHintsCache, _commandService, _notificationService, _instaService) {\n        this._editor = _editor;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._inlayHintsCache = _inlayHintsCache;\n        this._commandService = _commandService;\n        this._notificationService = _notificationService;\n        this._instaService = _instaService;\n        this._disposables = new DisposableStore();\n        this._sessionDisposables = new DisposableStore();\n        this._decorationsMetadata = new Map();\n        this._ruleFactory = new DynamicCssRules(this._editor);\n        this._activeRenderMode = 0 /* RenderMode.Normal */;\n        this._debounceInfo = _featureDebounce.for(_languageFeaturesService.inlayHintsProvider, 'InlayHint', { min: 25 });\n        this._disposables.add(_languageFeaturesService.inlayHintsProvider.onDidChange(() => this._update()));\n        this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n        this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n        this._disposables.add(_editor.onDidChangeConfiguration(e => {\n            if (e.hasChanged(139 /* EditorOption.inlayHints */)) {\n                this._update();\n            }\n        }));\n        this._update();\n    }\n    dispose() {\n        this._sessionDisposables.dispose();\n        this._removeAllDecorations();\n        this._disposables.dispose();\n    }\n    _update() {\n        this._sessionDisposables.clear();\n        this._removeAllDecorations();\n        const options = this._editor.getOption(139 /* EditorOption.inlayHints */);\n        if (options.enabled === 'off') {\n            return;\n        }\n        const model = this._editor.getModel();\n        if (!model || !this._languageFeaturesService.inlayHintsProvider.has(model)) {\n            return;\n        }\n        // iff possible, quickly update from cache\n        const cached = this._inlayHintsCache.get(model);\n        if (cached) {\n            this._updateHintsDecorators([model.getFullModelRange()], cached);\n        }\n        this._sessionDisposables.add(toDisposable(() => {\n            // cache items when switching files etc\n            if (!model.isDisposed()) {\n                this._cacheHintsForFastRestore(model);\n            }\n        }));\n        let cts;\n        const watchedProviders = new Set();\n        const scheduler = new RunOnceScheduler(async () => {\n            const t1 = Date.now();\n            cts === null || cts === void 0 ? void 0 : cts.dispose(true);\n            cts = new CancellationTokenSource();\n            const listener = model.onWillDispose(() => cts === null || cts === void 0 ? void 0 : cts.cancel());\n            try {\n                const myToken = cts.token;\n                const inlayHints = await InlayHintsFragments.create(this._languageFeaturesService.inlayHintsProvider, model, this._getHintsRanges(), myToken);\n                scheduler.delay = this._debounceInfo.update(model, Date.now() - t1);\n                if (myToken.isCancellationRequested) {\n                    inlayHints.dispose();\n                    return;\n                }\n                // listen to provider changes\n                for (const provider of inlayHints.provider) {\n                    if (typeof provider.onDidChangeInlayHints === 'function' && !watchedProviders.has(provider)) {\n                        watchedProviders.add(provider);\n                        this._sessionDisposables.add(provider.onDidChangeInlayHints(() => {\n                            if (!scheduler.isScheduled()) { // ignore event when request is already scheduled\n                                scheduler.schedule();\n                            }\n                        }));\n                    }\n                }\n                this._sessionDisposables.add(inlayHints);\n                this._updateHintsDecorators(inlayHints.ranges, inlayHints.items);\n                this._cacheHintsForFastRestore(model);\n            }\n            catch (err) {\n                onUnexpectedError(err);\n            }\n            finally {\n                cts.dispose();\n                listener.dispose();\n            }\n        }, this._debounceInfo.get(model));\n        this._sessionDisposables.add(scheduler);\n        this._sessionDisposables.add(toDisposable(() => cts === null || cts === void 0 ? void 0 : cts.dispose(true)));\n        scheduler.schedule(0);\n        this._sessionDisposables.add(this._editor.onDidScrollChange((e) => {\n            // update when scroll position changes\n            // uses scrollTopChanged has weak heuristic to differenatiate between scrolling due to\n            // typing or due to \"actual\" scrolling\n            if (e.scrollTopChanged || !scheduler.isScheduled()) {\n                scheduler.schedule();\n            }\n        }));\n        this._sessionDisposables.add(this._editor.onDidChangeModelContent((e) => {\n            // update less aggressive when typing\n            const delay = Math.max(scheduler.delay, 1250);\n            scheduler.schedule(delay);\n        }));\n        if (options.enabled === 'on') {\n            // different \"on\" modes: always\n            this._activeRenderMode = 0 /* RenderMode.Normal */;\n        }\n        else {\n            // different \"on\" modes: offUnlessPressed, or onUnlessPressed\n            let defaultMode;\n            let altMode;\n            if (options.enabled === 'onUnlessPressed') {\n                defaultMode = 0 /* RenderMode.Normal */;\n                altMode = 1 /* RenderMode.Invisible */;\n            }\n            else {\n                defaultMode = 1 /* RenderMode.Invisible */;\n                altMode = 0 /* RenderMode.Normal */;\n            }\n            this._activeRenderMode = defaultMode;\n            this._sessionDisposables.add(ModifierKeyEmitter.getInstance().event(e => {\n                if (!this._editor.hasModel()) {\n                    return;\n                }\n                const newRenderMode = e.altKey && e.ctrlKey && !(e.shiftKey || e.metaKey) ? altMode : defaultMode;\n                if (newRenderMode !== this._activeRenderMode) {\n                    this._activeRenderMode = newRenderMode;\n                    const model = this._editor.getModel();\n                    const copies = this._copyInlayHintsWithCurrentAnchor(model);\n                    this._updateHintsDecorators([model.getFullModelRange()], copies);\n                    scheduler.schedule(0);\n                }\n            }));\n        }\n        // mouse gestures\n        this._sessionDisposables.add(this._installDblClickGesture(() => scheduler.schedule(0)));\n        this._sessionDisposables.add(this._installLinkGesture());\n        this._sessionDisposables.add(this._installContextMenu());\n    }\n    _installLinkGesture() {\n        const store = new DisposableStore();\n        const gesture = store.add(new ClickLinkGesture(this._editor));\n        // let removeHighlight = () => { };\n        const sessionStore = new DisposableStore();\n        store.add(sessionStore);\n        store.add(gesture.onMouseMoveOrRelevantKeyDown(e => {\n            const [mouseEvent] = e;\n            const labelPart = this._getInlayHintLabelPart(mouseEvent);\n            const model = this._editor.getModel();\n            if (!labelPart || !model) {\n                sessionStore.clear();\n                return;\n            }\n            // resolve the item\n            const cts = new CancellationTokenSource();\n            sessionStore.add(toDisposable(() => cts.dispose(true)));\n            labelPart.item.resolve(cts.token);\n            // render link => when the modifier is pressed and when there is a command or location\n            this._activeInlayHintPart = labelPart.part.command || labelPart.part.location\n                ? new ActiveInlayHintInfo(labelPart, mouseEvent.hasTriggerModifier)\n                : undefined;\n            const lineNumber = model.validatePosition(labelPart.item.hint.position).lineNumber;\n            const range = new Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber));\n            const lineHints = this._getInlineHintsForRange(range);\n            this._updateHintsDecorators([range], lineHints);\n            sessionStore.add(toDisposable(() => {\n                this._activeInlayHintPart = undefined;\n                this._updateHintsDecorators([range], lineHints);\n            }));\n        }));\n        store.add(gesture.onCancel(() => sessionStore.clear()));\n        store.add(gesture.onExecute(async (e) => {\n            const label = this._getInlayHintLabelPart(e);\n            if (label) {\n                const part = label.part;\n                if (part.location) {\n                    // location -> execute go to def\n                    this._instaService.invokeFunction(goToDefinitionWithLocation, e, this._editor, part.location);\n                }\n                else if (languages.Command.is(part.command)) {\n                    // command -> execute it\n                    await this._invokeCommand(part.command, label.item);\n                }\n            }\n        }));\n        return store;\n    }\n    _getInlineHintsForRange(range) {\n        const lineHints = new Set();\n        for (const data of this._decorationsMetadata.values()) {\n            if (range.containsRange(data.item.anchor.range)) {\n                lineHints.add(data.item);\n            }\n        }\n        return Array.from(lineHints);\n    }\n    _installDblClickGesture(updateInlayHints) {\n        return this._editor.onMouseUp(async (e) => {\n            if (e.event.detail !== 2) {\n                return;\n            }\n            const part = this._getInlayHintLabelPart(e);\n            if (!part) {\n                return;\n            }\n            e.event.preventDefault();\n            await part.item.resolve(CancellationToken.None);\n            if (isNonEmptyArray(part.item.hint.textEdits)) {\n                const edits = part.item.hint.textEdits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text));\n                this._editor.executeEdits('inlayHint.default', edits);\n                updateInlayHints();\n            }\n        });\n    }\n    _installContextMenu() {\n        return this._editor.onContextMenu(async (e) => {\n            if (!(e.event.target instanceof HTMLElement)) {\n                return;\n            }\n            const part = this._getInlayHintLabelPart(e);\n            if (part) {\n                await this._instaService.invokeFunction(showGoToContextMenu, this._editor, e.event.target, part);\n            }\n        });\n    }\n    _getInlayHintLabelPart(e) {\n        var _a;\n        if (e.target.type !== 6 /* MouseTargetType.CONTENT_TEXT */) {\n            return undefined;\n        }\n        const options = (_a = e.target.detail.injectedText) === null || _a === void 0 ? void 0 : _a.options;\n        if (options instanceof ModelDecorationInjectedTextOptions && (options === null || options === void 0 ? void 0 : options.attachedData) instanceof RenderedInlayHintLabelPart) {\n            return options.attachedData;\n        }\n        return undefined;\n    }\n    async _invokeCommand(command, item) {\n        var _a;\n        try {\n            await this._commandService.executeCommand(command.id, ...((_a = command.arguments) !== null && _a !== void 0 ? _a : []));\n        }\n        catch (err) {\n            this._notificationService.notify({\n                severity: Severity.Error,\n                source: item.provider.displayName,\n                message: err\n            });\n        }\n    }\n    _cacheHintsForFastRestore(model) {\n        const hints = this._copyInlayHintsWithCurrentAnchor(model);\n        this._inlayHintsCache.set(model, hints);\n    }\n    // return inlay hints but with an anchor that reflects \"updates\"\n    // that happened after receiving them, e.g adding new lines before a hint\n    _copyInlayHintsWithCurrentAnchor(model) {\n        const items = new Map();\n        for (const [id, obj] of this._decorationsMetadata) {\n            if (items.has(obj.item)) {\n                // an inlay item can be rendered as multiple decorations\n                // but they will all uses the same range\n                continue;\n            }\n            const range = model.getDecorationRange(id);\n            if (range) {\n                // update range with whatever the editor has tweaked it to\n                const anchor = new InlayHintAnchor(range, obj.item.anchor.direction);\n                const copy = obj.item.with({ anchor });\n                items.set(obj.item, copy);\n            }\n        }\n        return Array.from(items.values());\n    }\n    _getHintsRanges() {\n        const extra = 30;\n        const model = this._editor.getModel();\n        const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();\n        const result = [];\n        for (const range of visibleRanges.sort(Range.compareRangesUsingStarts)) {\n            const extendedRange = model.validateRange(new Range(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));\n            if (result.length === 0 || !Range.areIntersectingOrTouching(result[result.length - 1], extendedRange)) {\n                result.push(extendedRange);\n            }\n            else {\n                result[result.length - 1] = Range.plusRange(result[result.length - 1], extendedRange);\n            }\n        }\n        return result;\n    }\n    _updateHintsDecorators(ranges, items) {\n        var _a, _b;\n        // utils to collect/create injected text decorations\n        const newDecorationsData = [];\n        const addInjectedText = (item, ref, content, cursorStops, attachedData) => {\n            const opts = {\n                content,\n                inlineClassNameAffectsLetterSpacing: true,\n                inlineClassName: ref.className,\n                cursorStops,\n                attachedData\n            };\n            newDecorationsData.push({\n                item,\n                classNameRef: ref,\n                decoration: {\n                    range: item.anchor.range,\n                    options: {\n                        // className: \"rangeHighlight\", // DEBUG highlight to see to what range a hint is attached\n                        description: 'InlayHint',\n                        showIfCollapsed: item.anchor.range.isEmpty(), // \"original\" range is empty\n                        collapseOnReplaceEdit: !item.anchor.range.isEmpty(),\n                        stickiness: 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */,\n                        [item.anchor.direction]: this._activeRenderMode === 0 /* RenderMode.Normal */ ? opts : undefined\n                    }\n                }\n            });\n        };\n        const addInjectedWhitespace = (item, isLast) => {\n            const marginRule = this._ruleFactory.createClassNameRef({\n                width: `${(fontSize / 3) | 0}px`,\n                display: 'inline-block'\n            });\n            addInjectedText(item, marginRule, '\\u200a', isLast ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None);\n        };\n        //\n        const { fontSize, fontFamily, padding, isUniform } = this._getLayoutInfo();\n        const fontFamilyVar = '--code-editorInlayHintsFontFamily';\n        this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);\n        for (const item of items) {\n            // whitespace leading the actual label\n            if (item.hint.paddingLeft) {\n                addInjectedWhitespace(item, false);\n            }\n            // the label with its parts\n            const parts = typeof item.hint.label === 'string'\n                ? [{ label: item.hint.label }]\n                : item.hint.label;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                const isFirst = i === 0;\n                const isLast = i === parts.length - 1;\n                const cssProperties = {\n                    fontSize: `${fontSize}px`,\n                    fontFamily: `var(${fontFamilyVar}), ${EDITOR_FONT_DEFAULTS.fontFamily}`,\n                    verticalAlign: isUniform ? 'baseline' : 'middle',\n                    unicodeBidi: 'isolate'\n                };\n                if (isNonEmptyArray(item.hint.textEdits)) {\n                    cssProperties.cursor = 'default';\n                }\n                this._fillInColors(cssProperties, item.hint);\n                if ((part.command || part.location) && ((_a = this._activeInlayHintPart) === null || _a === void 0 ? void 0 : _a.part.item) === item && this._activeInlayHintPart.part.index === i) {\n                    // active link!\n                    cssProperties.textDecoration = 'underline';\n                    if (this._activeInlayHintPart.hasTriggerModifier) {\n                        cssProperties.color = themeColorFromId(colors.editorActiveLinkForeground);\n                        cssProperties.cursor = 'pointer';\n                    }\n                }\n                if (padding) {\n                    if (isFirst && isLast) {\n                        // only element\n                        cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px`;\n                        cssProperties.borderRadius = `${(fontSize / 4) | 0}px`;\n                    }\n                    else if (isFirst) {\n                        // first element\n                        cssProperties.padding = `1px 0 1px ${Math.max(1, fontSize / 4) | 0}px`;\n                        cssProperties.borderRadius = `${(fontSize / 4) | 0}px 0 0 ${(fontSize / 4) | 0}px`;\n                    }\n                    else if (isLast) {\n                        // last element\n                        cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px 1px 0`;\n                        cssProperties.borderRadius = `0 ${(fontSize / 4) | 0}px ${(fontSize / 4) | 0}px 0`;\n                    }\n                    else {\n                        cssProperties.padding = `1px 0 1px 0`;\n                    }\n                }\n                addInjectedText(item, this._ruleFactory.createClassNameRef(cssProperties), fixSpace(part.label), isLast && !item.hint.paddingRight ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None, new RenderedInlayHintLabelPart(item, i));\n            }\n            // whitespace trailing the actual label\n            if (item.hint.paddingRight) {\n                addInjectedWhitespace(item, true);\n            }\n            if (newDecorationsData.length > InlayHintsController_1._MAX_DECORATORS) {\n                break;\n            }\n        }\n        // collect all decoration ids that are affected by the ranges\n        // and only update those decorations\n        const decorationIdsToReplace = [];\n        for (const range of ranges) {\n            for (const { id } of (_b = this._editor.getDecorationsInRange(range)) !== null && _b !== void 0 ? _b : []) {\n                const metadata = this._decorationsMetadata.get(id);\n                if (metadata) {\n                    decorationIdsToReplace.push(id);\n                    metadata.classNameRef.dispose();\n                    this._decorationsMetadata.delete(id);\n                }\n            }\n        }\n        const scrollState = StableEditorScrollState.capture(this._editor);\n        this._editor.changeDecorations(accessor => {\n            const newDecorationIds = accessor.deltaDecorations(decorationIdsToReplace, newDecorationsData.map(d => d.decoration));\n            for (let i = 0; i < newDecorationIds.length; i++) {\n                const data = newDecorationsData[i];\n                this._decorationsMetadata.set(newDecorationIds[i], data);\n            }\n        });\n        scrollState.restore(this._editor);\n    }\n    _fillInColors(props, hint) {\n        if (hint.kind === languages.InlayHintKind.Parameter) {\n            props.backgroundColor = themeColorFromId(colors.editorInlayHintParameterBackground);\n            props.color = themeColorFromId(colors.editorInlayHintParameterForeground);\n        }\n        else if (hint.kind === languages.InlayHintKind.Type) {\n            props.backgroundColor = themeColorFromId(colors.editorInlayHintTypeBackground);\n            props.color = themeColorFromId(colors.editorInlayHintTypeForeground);\n        }\n        else {\n            props.backgroundColor = themeColorFromId(colors.editorInlayHintBackground);\n            props.color = themeColorFromId(colors.editorInlayHintForeground);\n        }\n    }\n    _getLayoutInfo() {\n        const options = this._editor.getOption(139 /* EditorOption.inlayHints */);\n        const padding = options.padding;\n        const editorFontSize = this._editor.getOption(52 /* EditorOption.fontSize */);\n        const editorFontFamily = this._editor.getOption(49 /* EditorOption.fontFamily */);\n        let fontSize = options.fontSize;\n        if (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n            fontSize = editorFontSize;\n        }\n        const fontFamily = options.fontFamily || editorFontFamily;\n        const isUniform = !padding\n            && fontFamily === editorFontFamily\n            && fontSize === editorFontSize;\n        return { fontSize, fontFamily, padding, isUniform };\n    }\n    _removeAllDecorations() {\n        this._editor.removeDecorations(Array.from(this._decorationsMetadata.keys()));\n        for (const obj of this._decorationsMetadata.values()) {\n            obj.classNameRef.dispose();\n        }\n        this._decorationsMetadata.clear();\n    }\n};\nInlayHintsController.ID = 'editor.contrib.InlayHints';\nInlayHintsController._MAX_DECORATORS = 1500;\nInlayHintsController = InlayHintsController_1 = __decorate([\n    __param(1, ILanguageFeaturesService),\n    __param(2, ILanguageFeatureDebounceService),\n    __param(3, IInlayHintsCache),\n    __param(4, ICommandService),\n    __param(5, INotificationService),\n    __param(6, IInstantiationService)\n], InlayHintsController);\nexport { InlayHintsController };\n// Prevents the view from potentially visible whitespace\nfunction fixSpace(str) {\n    const noBreakWhitespace = '\\xa0';\n    return str.replace(/[ \\t]/g, noBreakWhitespace);\n}\nCommandsRegistry.registerCommand('_executeInlayHintProvider', async (accessor, ...args) => {\n    const [uri, range] = args;\n    assertType(URI.isUri(uri));\n    assertType(Range.isIRange(range));\n    const { inlayHintsProvider } = accessor.get(ILanguageFeaturesService);\n    const ref = await accessor.get(ITextModelService).createModelReference(uri);\n    try {\n        const model = await InlayHintsFragments.create(inlayHintsProvider, ref.object.textEditorModel, [Range.lift(range)], CancellationToken.None);\n        const result = model.items.map(i => i.hint);\n        setTimeout(() => model.dispose(), 0); // dispose after sending to ext host\n        return result;\n    }\n    finally {\n        ref.dispose();\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}