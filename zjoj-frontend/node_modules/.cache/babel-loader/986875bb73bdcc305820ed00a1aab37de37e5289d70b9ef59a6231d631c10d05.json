{"ast":null,"code":"/**\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('hast-util-sanitize').Schema} Options\n *   The sanitation schema defines how and if nodes and properties should be cleaned.\n *   See `hast-util-sanitize`.\n *   The default schema is exported as `defaultSchema`.\n */\n\nimport { sanitize as hastUtilSanitize, defaultSchema } from 'hast-util-sanitize';\n\n/**\n * Plugin to sanitize HTML.\n *\n * @type {import('unified').Plugin<[Options?] | Array<void>, Root, Root>}\n */\nexport default function rehypeSanitize(options = defaultSchema) {\n  // @ts-expect-error: assume input `root` matches output root.\n  return tree => hastUtilSanitize(tree, options);\n}\nexport { defaultSchema } from 'hast-util-sanitize';","map":{"version":3,"names":["sanitize","hastUtilSanitize","defaultSchema","rehypeSanitize","options","tree"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/rehype-sanitize/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('hast-util-sanitize').Schema} Options\n *   The sanitation schema defines how and if nodes and properties should be cleaned.\n *   See `hast-util-sanitize`.\n *   The default schema is exported as `defaultSchema`.\n */\n\nimport {sanitize as hastUtilSanitize, defaultSchema} from 'hast-util-sanitize'\n\n/**\n * Plugin to sanitize HTML.\n *\n * @type {import('unified').Plugin<[Options?] | Array<void>, Root, Root>}\n */\nexport default function rehypeSanitize(options = defaultSchema) {\n  // @ts-expect-error: assume input `root` matches output root.\n  return (tree) => hastUtilSanitize(tree, options)\n}\n\nexport {defaultSchema} from 'hast-util-sanitize'\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,QAAQ,IAAIC,gBAAgB,EAAEC,aAAa,QAAO,oBAAoB;;AAE9E;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAcA,CAACC,OAAO,GAAGF,aAAa,EAAE;EAC9D;EACA,OAAQG,IAAI,IAAKJ,gBAAgB,CAACI,IAAI,EAAED,OAAO,CAAC;AAClD;AAEA,SAAQF,aAAa,QAAO,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}