{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.45.0(5e5af013f8d295555a7210df0d5f2cea0bf5dd56)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/cpp/cpp.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".cpp\",\n  brackets: [{\n    token: \"delimiter.curly\",\n    open: \"{\",\n    close: \"}\"\n  }, {\n    token: \"delimiter.parenthesis\",\n    open: \"(\",\n    close: \")\"\n  }, {\n    token: \"delimiter.square\",\n    open: \"[\",\n    close: \"]\"\n  }, {\n    token: \"delimiter.angle\",\n    open: \"<\",\n    close: \">\"\n  }],\n  keywords: [\"abstract\", \"amp\", \"array\", \"auto\", \"bool\", \"break\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"constexpr\", \"const_cast\", \"continue\", \"cpu\", \"decltype\", \"default\", \"delegate\", \"delete\", \"do\", \"double\", \"dynamic_cast\", \"each\", \"else\", \"enum\", \"event\", \"explicit\", \"export\", \"extern\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"friend\", \"gcnew\", \"generic\", \"goto\", \"if\", \"in\", \"initonly\", \"inline\", \"int\", \"interface\", \"interior_ptr\", \"internal\", \"literal\", \"long\", \"mutable\", \"namespace\", \"new\", \"noexcept\", \"nullptr\", \"__nullptr\", \"operator\", \"override\", \"partial\", \"pascal\", \"pin_ptr\", \"private\", \"property\", \"protected\", \"public\", \"ref\", \"register\", \"reinterpret_cast\", \"restrict\", \"return\", \"safe_cast\", \"sealed\", \"short\", \"signed\", \"sizeof\", \"static\", \"static_assert\", \"static_cast\", \"struct\", \"switch\", \"template\", \"this\", \"thread_local\", \"throw\", \"tile_static\", \"true\", \"try\", \"typedef\", \"typeid\", \"typename\", \"union\", \"unsigned\", \"using\", \"virtual\", \"void\", \"volatile\", \"wchar_t\", \"where\", \"while\", \"_asm\", \"_based\", \"_cdecl\", \"_declspec\", \"_fastcall\", \"_if_exists\", \"_if_not_exists\", \"_inline\", \"_multiple_inheritance\", \"_pascal\", \"_single_inheritance\", \"_stdcall\", \"_virtual_inheritance\", \"_w64\", \"__abstract\", \"__alignof\", \"__asm\", \"__assume\", \"__based\", \"__box\", \"__builtin_alignof\", \"__cdecl\", \"__clrcall\", \"__declspec\", \"__delegate\", \"__event\", \"__except\", \"__fastcall\", \"__finally\", \"__forceinline\", \"__gc\", \"__hook\", \"__identifier\", \"__if_exists\", \"__if_not_exists\", \"__inline\", \"__int128\", \"__int16\", \"__int32\", \"__int64\", \"__int8\", \"__interface\", \"__leave\", \"__m128\", \"__m128d\", \"__m128i\", \"__m256\", \"__m256d\", \"__m256i\", \"__m512\", \"__m512d\", \"__m512i\", \"__m64\", \"__multiple_inheritance\", \"__newslot\", \"__nogc\", \"__noop\", \"__nounwind\", \"__novtordisp\", \"__pascal\", \"__pin\", \"__pragma\", \"__property\", \"__ptr32\", \"__ptr64\", \"__raise\", \"__restrict\", \"__resume\", \"__sealed\", \"__single_inheritance\", \"__stdcall\", \"__super\", \"__thiscall\", \"__try\", \"__try_cast\", \"__typeof\", \"__unaligned\", \"__unhook\", \"__uuidof\", \"__value\", \"__virtual_inheritance\", \"__w64\", \"__wchar_t\"],\n  operators: [\"=\", \">\", \"<\", \"!\", \"~\", \"?\", \":\", \"==\", \"<=\", \">=\", \"!=\", \"&&\", \"||\", \"++\", \"--\", \"+\", \"-\", \"*\", \"/\", \"&\", \"|\", \"^\", \"%\", \"<<\", \">>\", \">>>\", \"+=\", \"-=\", \"*=\", \"/=\", \"&=\", \"|=\", \"^=\", \"%=\", \"<<=\", \">>=\", \">>>=\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[0abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /([uU](ll|LL|l|L)|(ll|LL|l|L)?[uU]?)/,\n  floatsuffix: /[fFlL]?/,\n  encoding: /u|u8|U|L/,\n  tokenizer: {\n    root: [[/@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/, {\n      token: \"string.raw.begin\",\n      next: \"@raw.$1\"\n    }], [/[a-zA-Z_]\\w*/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword.$0\"\n        },\n        \"@default\": \"identifier\"\n      }\n    }], [/^\\s*#\\s*include/, {\n      token: \"keyword.directive.include\",\n      next: \"@include\"\n    }], [/^\\s*#\\s*\\w+/, \"keyword.directive\"], {\n      include: \"@whitespace\"\n    }, [/\\[\\s*\\[/, {\n      token: \"annotation\",\n      next: \"@annotation\"\n    }], [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@operators\": \"delimiter\",\n        \"@default\": \"\"\n      }\n    }], [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"], [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, \"number.hex\"], [/0[0-7']*[0-7](@integersuffix)/, \"number.octal\"], [/0[bB][0-1']*[0-1](@integersuffix)/, \"number.binary\"], [/\\d[\\d']*\\d(@integersuffix)/, \"number\"], [/\\d(@integersuffix)/, \"number\"], [/[;,.]/, \"delimiter\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"/, \"string\", \"@string\"], [/'[^\\\\']'/, \"string\"], [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]], [/'/, \"string.invalid\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@doccomment\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*\\\\$/, \"comment\", \"@linecomment\"], [/\\/\\/.*$/, \"comment\"]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    linecomment: [[/.*[^\\\\]$/, \"comment\", \"@pop\"], [/[^]+/, \"comment\"]],\n    doccomment: [[/[^\\/*]+/, \"comment.doc\"], [/\\*\\//, \"comment.doc\", \"@pop\"], [/[\\/*]/, \"comment.doc\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, \"string\", \"@pop\"]],\n    raw: [[/(.*)(\\))(?:([^ ()\\\\\\t\"]*))(\\\")/, {\n      cases: {\n        \"$3==$S2\": [\"string.raw\", \"string.raw.end\", \"string.raw.end\", {\n          token: \"string.raw.end\",\n          next: \"@pop\"\n        }],\n        \"@default\": [\"string.raw\", \"string.raw\", \"string.raw\", \"string.raw\"]\n      }\n    }], [/.*/, \"string.raw\"]],\n    annotation: [{\n      include: \"@whitespace\"\n    }, [/using|alignas/, \"keyword\"], [/[a-zA-Z0-9_]+/, \"annotation\"], [/[,:]/, \"delimiter\"], [/[()]/, \"@brackets\"], [/\\]\\s*\\]/, {\n      token: \"annotation\",\n      next: \"@pop\"\n    }]],\n    include: [[/(\\s*)(<)([^<>]*)(>)/, [\"\", \"keyword.directive.include.begin\", \"string.include.identifier\", {\n      token: \"keyword.directive.include.end\",\n      next: \"@pop\"\n    }]], [/(\\s*)(\")([^\"]*)(\")/, [\"\", \"keyword.directive.include.begin\", \"string.include.identifier\", {\n      token: \"keyword.directive.include.end\",\n      next: \"@pop\"\n    }]]]\n  }\n};\nexport { conf, language };","map":{"version":3,"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","token","keywords","operators","symbols","escapes","integersuffix","floatsuffix","encoding","tokenizer","root","next","cases","include","whitespace","comment","linecomment","doccomment","string","raw","annotation"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/basic-languages/cpp/cpp.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.45.0(5e5af013f8d295555a7210df0d5f2cea0bf5dd56)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/cpp/cpp.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"[\", close: \"]\" },\n    { open: \"{\", close: \"}\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".cpp\",\n  brackets: [\n    { token: \"delimiter.curly\", open: \"{\", close: \"}\" },\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\n    { token: \"delimiter.square\", open: \"[\", close: \"]\" },\n    { token: \"delimiter.angle\", open: \"<\", close: \">\" }\n  ],\n  keywords: [\n    \"abstract\",\n    \"amp\",\n    \"array\",\n    \"auto\",\n    \"bool\",\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"char\",\n    \"class\",\n    \"const\",\n    \"constexpr\",\n    \"const_cast\",\n    \"continue\",\n    \"cpu\",\n    \"decltype\",\n    \"default\",\n    \"delegate\",\n    \"delete\",\n    \"do\",\n    \"double\",\n    \"dynamic_cast\",\n    \"each\",\n    \"else\",\n    \"enum\",\n    \"event\",\n    \"explicit\",\n    \"export\",\n    \"extern\",\n    \"false\",\n    \"final\",\n    \"finally\",\n    \"float\",\n    \"for\",\n    \"friend\",\n    \"gcnew\",\n    \"generic\",\n    \"goto\",\n    \"if\",\n    \"in\",\n    \"initonly\",\n    \"inline\",\n    \"int\",\n    \"interface\",\n    \"interior_ptr\",\n    \"internal\",\n    \"literal\",\n    \"long\",\n    \"mutable\",\n    \"namespace\",\n    \"new\",\n    \"noexcept\",\n    \"nullptr\",\n    \"__nullptr\",\n    \"operator\",\n    \"override\",\n    \"partial\",\n    \"pascal\",\n    \"pin_ptr\",\n    \"private\",\n    \"property\",\n    \"protected\",\n    \"public\",\n    \"ref\",\n    \"register\",\n    \"reinterpret_cast\",\n    \"restrict\",\n    \"return\",\n    \"safe_cast\",\n    \"sealed\",\n    \"short\",\n    \"signed\",\n    \"sizeof\",\n    \"static\",\n    \"static_assert\",\n    \"static_cast\",\n    \"struct\",\n    \"switch\",\n    \"template\",\n    \"this\",\n    \"thread_local\",\n    \"throw\",\n    \"tile_static\",\n    \"true\",\n    \"try\",\n    \"typedef\",\n    \"typeid\",\n    \"typename\",\n    \"union\",\n    \"unsigned\",\n    \"using\",\n    \"virtual\",\n    \"void\",\n    \"volatile\",\n    \"wchar_t\",\n    \"where\",\n    \"while\",\n    \"_asm\",\n    \"_based\",\n    \"_cdecl\",\n    \"_declspec\",\n    \"_fastcall\",\n    \"_if_exists\",\n    \"_if_not_exists\",\n    \"_inline\",\n    \"_multiple_inheritance\",\n    \"_pascal\",\n    \"_single_inheritance\",\n    \"_stdcall\",\n    \"_virtual_inheritance\",\n    \"_w64\",\n    \"__abstract\",\n    \"__alignof\",\n    \"__asm\",\n    \"__assume\",\n    \"__based\",\n    \"__box\",\n    \"__builtin_alignof\",\n    \"__cdecl\",\n    \"__clrcall\",\n    \"__declspec\",\n    \"__delegate\",\n    \"__event\",\n    \"__except\",\n    \"__fastcall\",\n    \"__finally\",\n    \"__forceinline\",\n    \"__gc\",\n    \"__hook\",\n    \"__identifier\",\n    \"__if_exists\",\n    \"__if_not_exists\",\n    \"__inline\",\n    \"__int128\",\n    \"__int16\",\n    \"__int32\",\n    \"__int64\",\n    \"__int8\",\n    \"__interface\",\n    \"__leave\",\n    \"__m128\",\n    \"__m128d\",\n    \"__m128i\",\n    \"__m256\",\n    \"__m256d\",\n    \"__m256i\",\n    \"__m512\",\n    \"__m512d\",\n    \"__m512i\",\n    \"__m64\",\n    \"__multiple_inheritance\",\n    \"__newslot\",\n    \"__nogc\",\n    \"__noop\",\n    \"__nounwind\",\n    \"__novtordisp\",\n    \"__pascal\",\n    \"__pin\",\n    \"__pragma\",\n    \"__property\",\n    \"__ptr32\",\n    \"__ptr64\",\n    \"__raise\",\n    \"__restrict\",\n    \"__resume\",\n    \"__sealed\",\n    \"__single_inheritance\",\n    \"__stdcall\",\n    \"__super\",\n    \"__thiscall\",\n    \"__try\",\n    \"__try_cast\",\n    \"__typeof\",\n    \"__unaligned\",\n    \"__unhook\",\n    \"__uuidof\",\n    \"__value\",\n    \"__virtual_inheritance\",\n    \"__w64\",\n    \"__wchar_t\"\n  ],\n  operators: [\n    \"=\",\n    \">\",\n    \"<\",\n    \"!\",\n    \"~\",\n    \"?\",\n    \":\",\n    \"==\",\n    \"<=\",\n    \">=\",\n    \"!=\",\n    \"&&\",\n    \"||\",\n    \"++\",\n    \"--\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"%\",\n    \"<<\",\n    \">>\",\n    \">>>\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"/=\",\n    \"&=\",\n    \"|=\",\n    \"^=\",\n    \"%=\",\n    \"<<=\",\n    \">>=\",\n    \">>>=\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[0abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /([uU](ll|LL|l|L)|(ll|LL|l|L)?[uU]?)/,\n  floatsuffix: /[fFlL]?/,\n  encoding: /u|u8|U|L/,\n  tokenizer: {\n    root: [\n      [/@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/, { token: \"string.raw.begin\", next: \"@raw.$1\" }],\n      [\n        /[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/^\\s*#\\s*include/, { token: \"keyword.directive.include\", next: \"@include\" }],\n      [/^\\s*#\\s*\\w+/, \"keyword.directive\"],\n      { include: \"@whitespace\" },\n      [/\\[\\s*\\[/, { token: \"annotation\", next: \"@annotation\" }],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, \"number.hex\"],\n      [/0[0-7']*[0-7](@integersuffix)/, \"number.octal\"],\n      [/0[bB][0-1']*[0-1](@integersuffix)/, \"number.binary\"],\n      [/\\d[\\d']*\\d(@integersuffix)/, \"number\"],\n      [/\\d(@integersuffix)/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"/, \"string\", \"@string\"],\n      [/'[^\\\\']'/, \"string\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'/, \"string.invalid\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@doccomment\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*\\\\$/, \"comment\", \"@linecomment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    linecomment: [\n      [/.*[^\\\\]$/, \"comment\", \"@pop\"],\n      [/[^]+/, \"comment\"]\n    ],\n    doccomment: [\n      [/[^\\/*]+/, \"comment.doc\"],\n      [/\\*\\//, \"comment.doc\", \"@pop\"],\n      [/[\\/*]/, \"comment.doc\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string\", \"@pop\"]\n    ],\n    raw: [\n      [\n        /(.*)(\\))(?:([^ ()\\\\\\t\"]*))(\\\")/,\n        {\n          cases: {\n            \"$3==$S2\": [\n              \"string.raw\",\n              \"string.raw.end\",\n              \"string.raw.end\",\n              { token: \"string.raw.end\", next: \"@pop\" }\n            ],\n            \"@default\": [\"string.raw\", \"string.raw\", \"string.raw\", \"string.raw\"]\n          }\n        }\n      ],\n      [/.*/, \"string.raw\"]\n    ],\n    annotation: [\n      { include: \"@whitespace\" },\n      [/using|alignas/, \"keyword\"],\n      [/[a-zA-Z0-9_]+/, \"annotation\"],\n      [/[,:]/, \"delimiter\"],\n      [/[()]/, \"@brackets\"],\n      [/\\]\\s*\\]/, { token: \"annotation\", next: \"@pop\" }]\n    ],\n    include: [\n      [\n        /(\\s*)(<)([^<>]*)(>)/,\n        [\n          \"\",\n          \"keyword.directive.include.begin\",\n          \"string.include.identifier\",\n          { token: \"keyword.directive.include.end\", next: \"@pop\" }\n        ]\n      ],\n      [\n        /(\\s*)(\")([^\"]*)(\")/,\n        [\n          \"\",\n          \"keyword.directive.include.begin\",\n          \"string.include.identifier\",\n          { token: \"keyword.directive.include.end\", next: \"@pop\" }\n        ]\n      ]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}