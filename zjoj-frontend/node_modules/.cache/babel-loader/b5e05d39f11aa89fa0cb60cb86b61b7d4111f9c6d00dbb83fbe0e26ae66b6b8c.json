{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar WordHighlighter_1, WordHighlighterContribution_1;\nimport * as nls from '../../../../nls.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { alert } from '../../../../base/browser/ui/aria/aria.js';\nimport { createCancelablePromise, first, timeout } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { isDiffEditor } from '../../../browser/editorBrowser.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution, registerModelAndPositionCommand } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { DocumentHighlightKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { getHighlightDecorationOptions } from './highlightDecorations.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { score } from '../../../common/languageSelector.js';\n// import { TextualMultiDocumentHighlightFeature } from 'vs/editor/contrib/wordHighlighter/browser/textualHighlightProvider';\n// import { registerEditorFeature } from 'vs/editor/common/editorFeatures';\nconst ctxHasWordHighlights = new RawContextKey('hasWordHighlights', false);\nexport function getOccurrencesAtPosition(registry, model, position, token) {\n  const orderedByScore = registry.ordered(model);\n  // in order of score ask the occurrences provider\n  // until someone response with a good result\n  // (good = none empty array)\n  return first(orderedByScore.map(provider => () => {\n    return Promise.resolve(provider.provideDocumentHighlights(model, position, token)).then(undefined, onUnexpectedExternalError);\n  }), arrays.isNonEmptyArray).then(result => {\n    if (result) {\n      const map = new ResourceMap();\n      map.set(model.uri, result);\n      return map;\n    }\n    return new ResourceMap();\n  });\n}\nexport function getOccurrencesAcrossMultipleModels(registry, model, position, wordSeparators, token, otherModels) {\n  const orderedByScore = registry.ordered(model);\n  // in order of score ask the occurrences provider\n  // until someone response with a good result\n  // (good = none empty array)\n  return first(orderedByScore.map(provider => () => {\n    const filteredModels = otherModels.filter(otherModel => {\n      return score(provider.selector, otherModel.uri, otherModel.getLanguageId(), true, undefined, undefined) > 0;\n    });\n    return Promise.resolve(provider.provideMultiDocumentHighlights(model, position, filteredModels, token)).then(undefined, onUnexpectedExternalError);\n  }), t => t instanceof ResourceMap && t.size > 0);\n}\nclass OccurenceAtPositionRequest {\n  constructor(_model, _selection, _wordSeparators) {\n    this._model = _model;\n    this._selection = _selection;\n    this._wordSeparators = _wordSeparators;\n    this._wordRange = this._getCurrentWordRange(_model, _selection);\n    this._result = null;\n  }\n  get result() {\n    if (!this._result) {\n      this._result = createCancelablePromise(token => this._compute(this._model, this._selection, this._wordSeparators, token));\n    }\n    return this._result;\n  }\n  _getCurrentWordRange(model, selection) {\n    const word = model.getWordAtPosition(selection.getPosition());\n    if (word) {\n      return new Range(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\n    }\n    return null;\n  }\n  isValid(model, selection, decorations) {\n    const lineNumber = selection.startLineNumber;\n    const startColumn = selection.startColumn;\n    const endColumn = selection.endColumn;\n    const currentWordRange = this._getCurrentWordRange(model, selection);\n    let requestIsValid = Boolean(this._wordRange && this._wordRange.equalsRange(currentWordRange));\n    // Even if we are on a different word, if that word is in the decorations ranges, the request is still valid\n    // (Same symbol)\n    for (let i = 0, len = decorations.length; !requestIsValid && i < len; i++) {\n      const range = decorations.getRange(i);\n      if (range && range.startLineNumber === lineNumber) {\n        if (range.startColumn <= startColumn && range.endColumn >= endColumn) {\n          requestIsValid = true;\n        }\n      }\n    }\n    return requestIsValid;\n  }\n  cancel() {\n    this.result.cancel();\n  }\n}\nclass SemanticOccurenceAtPositionRequest extends OccurenceAtPositionRequest {\n  constructor(model, selection, wordSeparators, providers) {\n    super(model, selection, wordSeparators);\n    this._providers = providers;\n  }\n  _compute(model, selection, wordSeparators, token) {\n    return getOccurrencesAtPosition(this._providers, model, selection.getPosition(), token).then(value => {\n      if (!value) {\n        return new ResourceMap();\n      }\n      return value;\n    });\n  }\n}\nclass MultiModelOccurenceRequest extends OccurenceAtPositionRequest {\n  constructor(model, selection, wordSeparators, providers, otherModels) {\n    super(model, selection, wordSeparators);\n    this._providers = providers;\n    this._otherModels = otherModels;\n  }\n  _compute(model, selection, wordSeparators, token) {\n    return getOccurrencesAcrossMultipleModels(this._providers, model, selection.getPosition(), wordSeparators, token, this._otherModels).then(value => {\n      if (!value) {\n        return new ResourceMap();\n      }\n      return value;\n    });\n  }\n}\nclass TextualOccurenceRequest extends OccurenceAtPositionRequest {\n  constructor(model, selection, word, wordSeparators, otherModels) {\n    super(model, selection, wordSeparators);\n    this._otherModels = otherModels;\n    this._selectionIsEmpty = selection.isEmpty();\n    this._word = word;\n  }\n  _compute(model, selection, wordSeparators, token) {\n    return timeout(250, token).then(() => {\n      const result = new ResourceMap();\n      let wordResult;\n      if (this._word) {\n        wordResult = this._word;\n      } else {\n        wordResult = model.getWordAtPosition(selection.getPosition());\n      }\n      if (!wordResult) {\n        return new ResourceMap();\n      }\n      const allModels = [model, ...this._otherModels];\n      for (const otherModel of allModels) {\n        if (otherModel.isDisposed()) {\n          continue;\n        }\n        const matches = otherModel.findMatches(wordResult.word, true, false, true, wordSeparators, false);\n        const highlights = matches.map(m => ({\n          range: m.range,\n          kind: DocumentHighlightKind.Text\n        }));\n        if (highlights) {\n          result.set(otherModel.uri, highlights);\n        }\n      }\n      return result;\n    });\n  }\n  isValid(model, selection, decorations) {\n    const currentSelectionIsEmpty = selection.isEmpty();\n    if (this._selectionIsEmpty !== currentSelectionIsEmpty) {\n      return false;\n    }\n    return super.isValid(model, selection, decorations);\n  }\n}\nfunction computeOccurencesAtPosition(registry, model, selection, word, wordSeparators) {\n  if (registry.has(model)) {\n    return new SemanticOccurenceAtPositionRequest(model, selection, wordSeparators, registry);\n  }\n  return new TextualOccurenceRequest(model, selection, word, wordSeparators, []);\n}\nfunction computeOccurencesMultiModel(registry, model, selection, word, wordSeparators, otherModels) {\n  if (registry.has(model)) {\n    return new MultiModelOccurenceRequest(model, selection, wordSeparators, registry, otherModels);\n  }\n  return new TextualOccurenceRequest(model, selection, word, wordSeparators, otherModels);\n}\nregisterModelAndPositionCommand('_executeDocumentHighlights', async (accessor, model, position) => {\n  const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n  const map = await getOccurrencesAtPosition(languageFeaturesService.documentHighlightProvider, model, position, CancellationToken.None);\n  return map === null || map === void 0 ? void 0 : map.get(model.uri);\n});\nlet WordHighlighter = WordHighlighter_1 = class WordHighlighter {\n  constructor(editor, providers, multiProviders, contextKeyService, codeEditorService) {\n    this.toUnhook = new DisposableStore();\n    this.workerRequestTokenId = 0;\n    this.workerRequestCompleted = false;\n    this.workerRequestValue = new ResourceMap();\n    this.lastCursorPositionChangeTime = 0;\n    this.renderDecorationsTimer = -1;\n    this.editor = editor;\n    this.providers = providers;\n    this.multiDocumentProviders = multiProviders;\n    this.codeEditorService = codeEditorService;\n    this._hasWordHighlights = ctxHasWordHighlights.bindTo(contextKeyService);\n    this._ignorePositionChangeEvent = false;\n    this.occurrencesHighlight = this.editor.getOption(80 /* EditorOption.occurrencesHighlight */);\n    this.model = this.editor.getModel();\n    this.toUnhook.add(editor.onDidChangeCursorPosition(e => {\n      if (this._ignorePositionChangeEvent) {\n        // We are changing the position => ignore this event\n        return;\n      }\n      if (this.occurrencesHighlight === 'off') {\n        // Early exit if nothing needs to be done!\n        // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n        return;\n      }\n      this._onPositionChanged(e);\n    }));\n    this.toUnhook.add(editor.onDidChangeModelContent(e => {\n      this._stopAll();\n    }));\n    this.toUnhook.add(editor.onDidChangeModel(e => {\n      if (!e.newModelUrl && e.oldModelUrl) {\n        this._stopSingular();\n      } else {\n        if (WordHighlighter_1.query) {\n          this._run();\n        }\n      }\n    }));\n    this.toUnhook.add(editor.onDidChangeConfiguration(e => {\n      const newValue = this.editor.getOption(80 /* EditorOption.occurrencesHighlight */);\n      if (this.occurrencesHighlight !== newValue) {\n        this.occurrencesHighlight = newValue;\n        this._stopAll();\n      }\n    }));\n    this.decorations = this.editor.createDecorationsCollection();\n    this.workerRequestTokenId = 0;\n    this.workerRequest = null;\n    this.workerRequestCompleted = false;\n    this.lastCursorPositionChangeTime = 0;\n    this.renderDecorationsTimer = -1;\n    // if there is a query already, highlight off that query\n    if (WordHighlighter_1.query) {\n      this._run();\n    }\n  }\n  hasDecorations() {\n    return this.decorations.length > 0;\n  }\n  restore() {\n    if (this.occurrencesHighlight === 'off') {\n      return;\n    }\n    this._run();\n  }\n  _getSortedHighlights() {\n    return this.decorations.getRanges().sort(Range.compareRangesUsingStarts);\n  }\n  moveNext() {\n    const highlights = this._getSortedHighlights();\n    const index = highlights.findIndex(range => range.containsPosition(this.editor.getPosition()));\n    const newIndex = (index + 1) % highlights.length;\n    const dest = highlights[newIndex];\n    try {\n      this._ignorePositionChangeEvent = true;\n      this.editor.setPosition(dest.getStartPosition());\n      this.editor.revealRangeInCenterIfOutsideViewport(dest);\n      const word = this._getWord();\n      if (word) {\n        const lineContent = this.editor.getModel().getLineContent(dest.startLineNumber);\n        alert(`${lineContent}, ${newIndex + 1} of ${highlights.length} for '${word.word}'`);\n      }\n    } finally {\n      this._ignorePositionChangeEvent = false;\n    }\n  }\n  moveBack() {\n    const highlights = this._getSortedHighlights();\n    const index = highlights.findIndex(range => range.containsPosition(this.editor.getPosition()));\n    const newIndex = (index - 1 + highlights.length) % highlights.length;\n    const dest = highlights[newIndex];\n    try {\n      this._ignorePositionChangeEvent = true;\n      this.editor.setPosition(dest.getStartPosition());\n      this.editor.revealRangeInCenterIfOutsideViewport(dest);\n      const word = this._getWord();\n      if (word) {\n        const lineContent = this.editor.getModel().getLineContent(dest.startLineNumber);\n        alert(`${lineContent}, ${newIndex + 1} of ${highlights.length} for '${word.word}'`);\n      }\n    } finally {\n      this._ignorePositionChangeEvent = false;\n    }\n  }\n  _removeSingleDecorations() {\n    // return if no model\n    if (!this.editor.hasModel()) {\n      return;\n    }\n    const currentDecorationIDs = WordHighlighter_1.storedDecorations.get(this.editor.getModel().uri);\n    if (!currentDecorationIDs) {\n      return;\n    }\n    this.editor.removeDecorations(currentDecorationIDs);\n    WordHighlighter_1.storedDecorations.delete(this.editor.getModel().uri);\n    if (this.decorations.length > 0) {\n      this.decorations.clear();\n      this._hasWordHighlights.set(false);\n    }\n  }\n  _removeAllDecorations() {\n    const currentEditors = this.codeEditorService.listCodeEditors();\n    // iterate over editors and store models in currentModels\n    for (const editor of currentEditors) {\n      if (!editor.hasModel()) {\n        continue;\n      }\n      const currentDecorationIDs = WordHighlighter_1.storedDecorations.get(editor.getModel().uri);\n      if (!currentDecorationIDs) {\n        continue;\n      }\n      editor.removeDecorations(currentDecorationIDs);\n      WordHighlighter_1.storedDecorations.delete(editor.getModel().uri);\n      const editorHighlighterContrib = WordHighlighterContribution.get(editor);\n      if (!(editorHighlighterContrib === null || editorHighlighterContrib === void 0 ? void 0 : editorHighlighterContrib.wordHighlighter)) {\n        continue;\n      }\n      if (editorHighlighterContrib.wordHighlighter.decorations.length > 0) {\n        editorHighlighterContrib.wordHighlighter.decorations.clear();\n        editorHighlighterContrib.wordHighlighter._hasWordHighlights.set(false);\n      }\n    }\n  }\n  _stopSingular() {\n    var _a, _b, _c, _d;\n    // Remove any existing decorations + a possible query, and re - run to update decorations\n    this._removeSingleDecorations();\n    if (this.editor.hasWidgetFocus()) {\n      if (((_a = this.editor.getModel()) === null || _a === void 0 ? void 0 : _a.uri.scheme) !== Schemas.vscodeNotebookCell && ((_c = (_b = WordHighlighter_1.query) === null || _b === void 0 ? void 0 : _b.modelInfo) === null || _c === void 0 ? void 0 : _c.model.uri.scheme) !== Schemas.vscodeNotebookCell) {\n        // clear query if focused non-nb editor\n        WordHighlighter_1.query = null;\n        this._run();\n      } else {\n        // remove modelInfo to account for nb cell being disposed\n        if ((_d = WordHighlighter_1.query) === null || _d === void 0 ? void 0 : _d.modelInfo) {\n          WordHighlighter_1.query.modelInfo = null;\n        }\n      }\n    }\n    // Cancel any renderDecorationsTimer\n    if (this.renderDecorationsTimer !== -1) {\n      clearTimeout(this.renderDecorationsTimer);\n      this.renderDecorationsTimer = -1;\n    }\n    // Cancel any worker request\n    if (this.workerRequest !== null) {\n      this.workerRequest.cancel();\n      this.workerRequest = null;\n    }\n    // Invalidate any worker request callback\n    if (!this.workerRequestCompleted) {\n      this.workerRequestTokenId++;\n      this.workerRequestCompleted = true;\n    }\n  }\n  _stopAll() {\n    // Remove any existing decorations\n    this._removeAllDecorations();\n    // Cancel any renderDecorationsTimer\n    if (this.renderDecorationsTimer !== -1) {\n      clearTimeout(this.renderDecorationsTimer);\n      this.renderDecorationsTimer = -1;\n    }\n    // Cancel any worker request\n    if (this.workerRequest !== null) {\n      this.workerRequest.cancel();\n      this.workerRequest = null;\n    }\n    // Invalidate any worker request callback\n    if (!this.workerRequestCompleted) {\n      this.workerRequestTokenId++;\n      this.workerRequestCompleted = true;\n    }\n  }\n  _onPositionChanged(e) {\n    var _a;\n    // disabled\n    if (this.occurrencesHighlight === 'off') {\n      this._stopAll();\n      return;\n    }\n    // ignore typing & other\n    // need to check if the model is a notebook cell, should not stop if nb\n    if (e.reason !== 3 /* CursorChangeReason.Explicit */ && ((_a = this.editor.getModel()) === null || _a === void 0 ? void 0 : _a.uri.scheme) !== Schemas.vscodeNotebookCell) {\n      this._stopAll();\n      return;\n    }\n    this._run();\n  }\n  _getWord() {\n    const editorSelection = this.editor.getSelection();\n    const lineNumber = editorSelection.startLineNumber;\n    const startColumn = editorSelection.startColumn;\n    if (this.model.isDisposed()) {\n      return null;\n    }\n    return this.model.getWordAtPosition({\n      lineNumber: lineNumber,\n      column: startColumn\n    });\n  }\n  getOtherModelsToHighlight(model) {\n    if (!model) {\n      return [];\n    }\n    // notebook case\n    const isNotebookEditor = model.uri.scheme === Schemas.vscodeNotebookCell;\n    if (isNotebookEditor) {\n      const currentModels = [];\n      const currentEditors = this.codeEditorService.listCodeEditors();\n      for (const editor of currentEditors) {\n        const tempModel = editor.getModel();\n        if (tempModel && tempModel !== model && tempModel.uri.scheme === Schemas.vscodeNotebookCell) {\n          currentModels.push(tempModel);\n        }\n      }\n      return currentModels;\n    }\n    // inline case\n    // ? current works when highlighting outside of an inline diff, highlighting in.\n    // ? broken when highlighting within a diff editor. highlighting the main editor does not work\n    // ? editor group service could be useful here\n    const currentModels = [];\n    const currentEditors = this.codeEditorService.listCodeEditors();\n    for (const editor of currentEditors) {\n      if (!isDiffEditor(editor)) {\n        continue;\n      }\n      const diffModel = editor.getModel();\n      if (!diffModel) {\n        continue;\n      }\n      if (model === diffModel.modified) {\n        // embedded inline chat diff would pass this, allowing highlights\n        //? currentModels.push(diffModel.original);\n        currentModels.push(diffModel.modified);\n      }\n    }\n    if (currentModels.length) {\n      // no matching editors have been found\n      return currentModels;\n    }\n    // multi-doc OFF\n    if (this.occurrencesHighlight === 'singleFile') {\n      return [];\n    }\n    // multi-doc ON\n    for (const editor of currentEditors) {\n      const tempModel = editor.getModel();\n      const isValidModel = tempModel && tempModel !== model;\n      if (isValidModel) {\n        currentModels.push(tempModel);\n      }\n    }\n    return currentModels;\n  }\n  _run() {\n    var _a, _b;\n    let workerRequestIsValid;\n    if (!this.editor.hasWidgetFocus()) {\n      // no focus (new nb cell, etc)\n      if (WordHighlighter_1.query === null) {\n        // no previous query, nothing to highlight\n        return;\n      }\n    } else {\n      const editorSelection = this.editor.getSelection();\n      // ignore multiline selection\n      if (!editorSelection || editorSelection.startLineNumber !== editorSelection.endLineNumber) {\n        this._stopAll();\n        return;\n      }\n      const startColumn = editorSelection.startColumn;\n      const endColumn = editorSelection.endColumn;\n      const word = this._getWord();\n      // The selection must be inside a word or surround one word at most\n      if (!word || word.startColumn > startColumn || word.endColumn < endColumn) {\n        // no previous query, nothing to highlight\n        WordHighlighter_1.query = null;\n        this._stopAll();\n        return;\n      }\n      // All the effort below is trying to achieve this:\n      // - when cursor is moved to a word, trigger immediately a findOccurrences request\n      // - 250ms later after the last cursor move event, render the occurrences\n      // - no flickering!\n      workerRequestIsValid = this.workerRequest && this.workerRequest.isValid(this.model, editorSelection, this.decorations);\n      WordHighlighter_1.query = {\n        modelInfo: {\n          model: this.model,\n          selection: editorSelection\n        },\n        word: word\n      };\n    }\n    // There are 4 cases:\n    // a) old workerRequest is valid & completed, renderDecorationsTimer fired\n    // b) old workerRequest is valid & completed, renderDecorationsTimer not fired\n    // c) old workerRequest is valid, but not completed\n    // d) old workerRequest is not valid\n    // For a) no action is needed\n    // For c), member 'lastCursorPositionChangeTime' will be used when installing the timer so no action is needed\n    this.lastCursorPositionChangeTime = new Date().getTime();\n    if (workerRequestIsValid) {\n      if (this.workerRequestCompleted && this.renderDecorationsTimer !== -1) {\n        // case b)\n        // Delay the firing of renderDecorationsTimer by an extra 250 ms\n        clearTimeout(this.renderDecorationsTimer);\n        this.renderDecorationsTimer = -1;\n        this._beginRenderDecorations();\n      }\n    } else {\n      // case d)\n      // Stop all previous actions and start fresh\n      this._stopAll();\n      const myRequestId = ++this.workerRequestTokenId;\n      this.workerRequestCompleted = false;\n      const otherModelsToHighlight = this.getOtherModelsToHighlight(this.editor.getModel());\n      // 2 cases where we want to send the word\n      // a) there is no stored query model, but there is a word. This signals the editor that drove the highlight is disposed (cell out of viewport, etc)\n      // b) the queried model is not the current model. This signals that the editor that drove the highlight is still in the viewport, but we are highlighting a different cell\n      // otherwise, we send null in place of the word, and the model and selection are used to compute the word\n      const sendWord = !WordHighlighter_1.query.modelInfo && WordHighlighter_1.query.word || ((_a = WordHighlighter_1.query.modelInfo) === null || _a === void 0 ? void 0 : _a.model.uri) !== this.model.uri ? true : false;\n      if (!WordHighlighter_1.query.modelInfo || WordHighlighter_1.query.modelInfo.model.uri !== this.model.uri) {\n        // use this.model\n        this.workerRequest = this.computeWithModel(this.model, this.editor.getSelection(), sendWord ? WordHighlighter_1.query.word : null, otherModelsToHighlight);\n      } else {\n        // use stored query model + selection\n        this.workerRequest = this.computeWithModel(WordHighlighter_1.query.modelInfo.model, WordHighlighter_1.query.modelInfo.selection, WordHighlighter_1.query.word, otherModelsToHighlight);\n      }\n      (_b = this.workerRequest) === null || _b === void 0 ? void 0 : _b.result.then(data => {\n        if (myRequestId === this.workerRequestTokenId) {\n          this.workerRequestCompleted = true;\n          this.workerRequestValue = data || [];\n          this._beginRenderDecorations();\n        }\n      }, onUnexpectedError);\n    }\n  }\n  computeWithModel(model, selection, word, otherModels) {\n    if (!otherModels.length) {\n      return computeOccurencesAtPosition(this.providers, model, selection, word, this.editor.getOption(129 /* EditorOption.wordSeparators */));\n    } else {\n      return computeOccurencesMultiModel(this.multiDocumentProviders, model, selection, word, this.editor.getOption(129 /* EditorOption.wordSeparators */), otherModels);\n    }\n  }\n  _beginRenderDecorations() {\n    const currentTime = new Date().getTime();\n    const minimumRenderTime = this.lastCursorPositionChangeTime + 250;\n    if (currentTime >= minimumRenderTime) {\n      // Synchronous\n      this.renderDecorationsTimer = -1;\n      this.renderDecorations();\n    } else {\n      // Asynchronous\n      this.renderDecorationsTimer = setTimeout(() => {\n        this.renderDecorations();\n      }, minimumRenderTime - currentTime);\n    }\n  }\n  renderDecorations() {\n    var _a, _b, _c;\n    this.renderDecorationsTimer = -1;\n    // create new loop, iterate over current editors using this.codeEditorService.listCodeEditors(),\n    // if the URI of that codeEditor is in the map, then add the decorations to the decorations array\n    // then set the decorations for the editor\n    const currentEditors = this.codeEditorService.listCodeEditors();\n    for (const editor of currentEditors) {\n      const editorHighlighterContrib = WordHighlighterContribution.get(editor);\n      if (!editorHighlighterContrib) {\n        continue;\n      }\n      const newDecorations = [];\n      const uri = (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.uri;\n      if (uri && this.workerRequestValue.has(uri)) {\n        const oldDecorationIDs = WordHighlighter_1.storedDecorations.get(uri);\n        const newDocumentHighlights = this.workerRequestValue.get(uri);\n        if (newDocumentHighlights) {\n          for (const highlight of newDocumentHighlights) {\n            newDecorations.push({\n              range: highlight.range,\n              options: getHighlightDecorationOptions(highlight.kind)\n            });\n          }\n        }\n        let newDecorationIDs = [];\n        editor.changeDecorations(changeAccessor => {\n          newDecorationIDs = changeAccessor.deltaDecorations(oldDecorationIDs !== null && oldDecorationIDs !== void 0 ? oldDecorationIDs : [], newDecorations);\n        });\n        WordHighlighter_1.storedDecorations = WordHighlighter_1.storedDecorations.set(uri, newDecorationIDs);\n        if (newDecorations.length > 0) {\n          (_b = editorHighlighterContrib.wordHighlighter) === null || _b === void 0 ? void 0 : _b.decorations.set(newDecorations);\n          (_c = editorHighlighterContrib.wordHighlighter) === null || _c === void 0 ? void 0 : _c._hasWordHighlights.set(true);\n        }\n      }\n    }\n  }\n  dispose() {\n    this._stopSingular();\n    this.toUnhook.dispose();\n  }\n};\nWordHighlighter.storedDecorations = new ResourceMap();\nWordHighlighter.query = null;\nWordHighlighter = WordHighlighter_1 = __decorate([__param(4, ICodeEditorService)], WordHighlighter);\nlet WordHighlighterContribution = WordHighlighterContribution_1 = class WordHighlighterContribution extends Disposable {\n  static get(editor) {\n    return editor.getContribution(WordHighlighterContribution_1.ID);\n  }\n  constructor(editor, contextKeyService, languageFeaturesService, codeEditorService) {\n    super();\n    this._wordHighlighter = null;\n    const createWordHighlighterIfPossible = () => {\n      if (editor.hasModel() && !editor.getModel().isTooLargeForTokenization()) {\n        this._wordHighlighter = new WordHighlighter(editor, languageFeaturesService.documentHighlightProvider, languageFeaturesService.multiDocumentHighlightProvider, contextKeyService, codeEditorService);\n      }\n    };\n    this._register(editor.onDidChangeModel(e => {\n      if (this._wordHighlighter) {\n        this._wordHighlighter.dispose();\n        this._wordHighlighter = null;\n      }\n      createWordHighlighterIfPossible();\n    }));\n    createWordHighlighterIfPossible();\n  }\n  get wordHighlighter() {\n    return this._wordHighlighter;\n  }\n  saveViewState() {\n    if (this._wordHighlighter && this._wordHighlighter.hasDecorations()) {\n      return true;\n    }\n    return false;\n  }\n  moveNext() {\n    var _a;\n    (_a = this._wordHighlighter) === null || _a === void 0 ? void 0 : _a.moveNext();\n  }\n  moveBack() {\n    var _a;\n    (_a = this._wordHighlighter) === null || _a === void 0 ? void 0 : _a.moveBack();\n  }\n  restoreViewState(state) {\n    if (this._wordHighlighter && state) {\n      this._wordHighlighter.restore();\n    }\n  }\n  dispose() {\n    if (this._wordHighlighter) {\n      this._wordHighlighter.dispose();\n      this._wordHighlighter = null;\n    }\n    super.dispose();\n  }\n};\nWordHighlighterContribution.ID = 'editor.contrib.wordHighlighter';\nWordHighlighterContribution = WordHighlighterContribution_1 = __decorate([__param(1, IContextKeyService), __param(2, ILanguageFeaturesService), __param(3, ICodeEditorService)], WordHighlighterContribution);\nexport { WordHighlighterContribution };\nclass WordHighlightNavigationAction extends EditorAction {\n  constructor(next, opts) {\n    super(opts);\n    this._isNext = next;\n  }\n  run(accessor, editor) {\n    const controller = WordHighlighterContribution.get(editor);\n    if (!controller) {\n      return;\n    }\n    if (this._isNext) {\n      controller.moveNext();\n    } else {\n      controller.moveBack();\n    }\n  }\n}\nclass NextWordHighlightAction extends WordHighlightNavigationAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.wordHighlight.next',\n      label: nls.localize('wordHighlight.next.label', \"Go to Next Symbol Highlight\"),\n      alias: 'Go to Next Symbol Highlight',\n      precondition: ctxHasWordHighlights,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 65 /* KeyCode.F7 */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n}\nclass PrevWordHighlightAction extends WordHighlightNavigationAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.wordHighlight.prev',\n      label: nls.localize('wordHighlight.previous.label', \"Go to Previous Symbol Highlight\"),\n      alias: 'Go to Previous Symbol Highlight',\n      precondition: ctxHasWordHighlights,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024 /* KeyMod.Shift */ | 65 /* KeyCode.F7 */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n}\nclass TriggerWordHighlightAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.wordHighlight.trigger',\n      label: nls.localize('wordHighlight.trigger.label', \"Trigger Symbol Highlight\"),\n      alias: 'Trigger Symbol Highlight',\n      precondition: ctxHasWordHighlights.toNegated(),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 0,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  run(accessor, editor, args) {\n    const controller = WordHighlighterContribution.get(editor);\n    if (!controller) {\n      return;\n    }\n    controller.restoreViewState(true);\n  }\n}\nregisterEditorContribution(WordHighlighterContribution.ID, WordHighlighterContribution, 0 /* EditorContributionInstantiation.Eager */); // eager because it uses `saveViewState`/`restoreViewState`\nregisterEditorAction(NextWordHighlightAction);\nregisterEditorAction(PrevWordHighlightAction);\nregisterEditorAction(TriggerWordHighlightAction);\n// registerEditorFeature(TextualMultiDocumentHighlightFeature);","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","WordHighlighter_1","WordHighlighterContribution_1","nls","arrays","alert","createCancelablePromise","first","timeout","CancellationToken","onUnexpectedError","onUnexpectedExternalError","Disposable","DisposableStore","isDiffEditor","EditorAction","registerEditorAction","registerEditorContribution","registerModelAndPositionCommand","ICodeEditorService","Range","EditorContextKeys","DocumentHighlightKind","ILanguageFeaturesService","getHighlightDecorationOptions","IContextKeyService","RawContextKey","Schemas","ResourceMap","score","ctxHasWordHighlights","getOccurrencesAtPosition","registry","model","position","token","orderedByScore","ordered","map","provider","Promise","resolve","provideDocumentHighlights","then","undefined","isNonEmptyArray","result","set","uri","getOccurrencesAcrossMultipleModels","wordSeparators","otherModels","filteredModels","filter","otherModel","selector","getLanguageId","provideMultiDocumentHighlights","t","size","OccurenceAtPositionRequest","constructor","_model","_selection","_wordSeparators","_wordRange","_getCurrentWordRange","_result","_compute","selection","word","getWordAtPosition","getPosition","startLineNumber","startColumn","endColumn","isValid","decorations","lineNumber","currentWordRange","requestIsValid","Boolean","equalsRange","len","range","getRange","cancel","SemanticOccurenceAtPositionRequest","providers","_providers","value","MultiModelOccurenceRequest","_otherModels","TextualOccurenceRequest","_selectionIsEmpty","isEmpty","_word","wordResult","allModels","isDisposed","matches","findMatches","highlights","m","kind","Text","currentSelectionIsEmpty","computeOccurencesAtPosition","has","computeOccurencesMultiModel","accessor","languageFeaturesService","get","documentHighlightProvider","None","WordHighlighter","editor","multiProviders","contextKeyService","codeEditorService","toUnhook","workerRequestTokenId","workerRequestCompleted","workerRequestValue","lastCursorPositionChangeTime","renderDecorationsTimer","multiDocumentProviders","_hasWordHighlights","bindTo","_ignorePositionChangeEvent","occurrencesHighlight","getOption","getModel","add","onDidChangeCursorPosition","e","_onPositionChanged","onDidChangeModelContent","_stopAll","onDidChangeModel","newModelUrl","oldModelUrl","_stopSingular","query","_run","onDidChangeConfiguration","newValue","createDecorationsCollection","workerRequest","hasDecorations","restore","_getSortedHighlights","getRanges","sort","compareRangesUsingStarts","moveNext","index","findIndex","containsPosition","newIndex","dest","setPosition","getStartPosition","revealRangeInCenterIfOutsideViewport","_getWord","lineContent","getLineContent","moveBack","_removeSingleDecorations","hasModel","currentDecorationIDs","storedDecorations","removeDecorations","delete","clear","_removeAllDecorations","currentEditors","listCodeEditors","editorHighlighterContrib","WordHighlighterContribution","wordHighlighter","_a","_b","_c","_d","hasWidgetFocus","scheme","vscodeNotebookCell","modelInfo","clearTimeout","reason","editorSelection","getSelection","column","getOtherModelsToHighlight","isNotebookEditor","currentModels","tempModel","push","diffModel","modified","isValidModel","workerRequestIsValid","endLineNumber","Date","getTime","_beginRenderDecorations","myRequestId","otherModelsToHighlight","sendWord","computeWithModel","data","currentTime","minimumRenderTime","renderDecorations","setTimeout","newDecorations","oldDecorationIDs","newDocumentHighlights","highlight","options","newDecorationIDs","changeDecorations","changeAccessor","deltaDecorations","dispose","getContribution","ID","_wordHighlighter","createWordHighlighterIfPossible","isTooLargeForTokenization","multiDocumentHighlightProvider","_register","saveViewState","restoreViewState","state","WordHighlightNavigationAction","next","opts","_isNext","run","controller","NextWordHighlightAction","id","label","localize","alias","precondition","kbOpts","kbExpr","editorTextFocus","primary","weight","PrevWordHighlightAction","TriggerWordHighlightAction","toNegated","args"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar WordHighlighter_1, WordHighlighterContribution_1;\nimport * as nls from '../../../../nls.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { alert } from '../../../../base/browser/ui/aria/aria.js';\nimport { createCancelablePromise, first, timeout } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { isDiffEditor } from '../../../browser/editorBrowser.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution, registerModelAndPositionCommand } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { DocumentHighlightKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { getHighlightDecorationOptions } from './highlightDecorations.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { score } from '../../../common/languageSelector.js';\n// import { TextualMultiDocumentHighlightFeature } from 'vs/editor/contrib/wordHighlighter/browser/textualHighlightProvider';\n// import { registerEditorFeature } from 'vs/editor/common/editorFeatures';\nconst ctxHasWordHighlights = new RawContextKey('hasWordHighlights', false);\nexport function getOccurrencesAtPosition(registry, model, position, token) {\n    const orderedByScore = registry.ordered(model);\n    // in order of score ask the occurrences provider\n    // until someone response with a good result\n    // (good = none empty array)\n    return first(orderedByScore.map(provider => () => {\n        return Promise.resolve(provider.provideDocumentHighlights(model, position, token))\n            .then(undefined, onUnexpectedExternalError);\n    }), arrays.isNonEmptyArray).then(result => {\n        if (result) {\n            const map = new ResourceMap();\n            map.set(model.uri, result);\n            return map;\n        }\n        return new ResourceMap();\n    });\n}\nexport function getOccurrencesAcrossMultipleModels(registry, model, position, wordSeparators, token, otherModels) {\n    const orderedByScore = registry.ordered(model);\n    // in order of score ask the occurrences provider\n    // until someone response with a good result\n    // (good = none empty array)\n    return first(orderedByScore.map(provider => () => {\n        const filteredModels = otherModels.filter(otherModel => {\n            return score(provider.selector, otherModel.uri, otherModel.getLanguageId(), true, undefined, undefined) > 0;\n        });\n        return Promise.resolve(provider.provideMultiDocumentHighlights(model, position, filteredModels, token))\n            .then(undefined, onUnexpectedExternalError);\n    }), (t) => t instanceof ResourceMap && t.size > 0);\n}\nclass OccurenceAtPositionRequest {\n    constructor(_model, _selection, _wordSeparators) {\n        this._model = _model;\n        this._selection = _selection;\n        this._wordSeparators = _wordSeparators;\n        this._wordRange = this._getCurrentWordRange(_model, _selection);\n        this._result = null;\n    }\n    get result() {\n        if (!this._result) {\n            this._result = createCancelablePromise(token => this._compute(this._model, this._selection, this._wordSeparators, token));\n        }\n        return this._result;\n    }\n    _getCurrentWordRange(model, selection) {\n        const word = model.getWordAtPosition(selection.getPosition());\n        if (word) {\n            return new Range(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\n        }\n        return null;\n    }\n    isValid(model, selection, decorations) {\n        const lineNumber = selection.startLineNumber;\n        const startColumn = selection.startColumn;\n        const endColumn = selection.endColumn;\n        const currentWordRange = this._getCurrentWordRange(model, selection);\n        let requestIsValid = Boolean(this._wordRange && this._wordRange.equalsRange(currentWordRange));\n        // Even if we are on a different word, if that word is in the decorations ranges, the request is still valid\n        // (Same symbol)\n        for (let i = 0, len = decorations.length; !requestIsValid && i < len; i++) {\n            const range = decorations.getRange(i);\n            if (range && range.startLineNumber === lineNumber) {\n                if (range.startColumn <= startColumn && range.endColumn >= endColumn) {\n                    requestIsValid = true;\n                }\n            }\n        }\n        return requestIsValid;\n    }\n    cancel() {\n        this.result.cancel();\n    }\n}\nclass SemanticOccurenceAtPositionRequest extends OccurenceAtPositionRequest {\n    constructor(model, selection, wordSeparators, providers) {\n        super(model, selection, wordSeparators);\n        this._providers = providers;\n    }\n    _compute(model, selection, wordSeparators, token) {\n        return getOccurrencesAtPosition(this._providers, model, selection.getPosition(), token).then(value => {\n            if (!value) {\n                return new ResourceMap();\n            }\n            return value;\n        });\n    }\n}\nclass MultiModelOccurenceRequest extends OccurenceAtPositionRequest {\n    constructor(model, selection, wordSeparators, providers, otherModels) {\n        super(model, selection, wordSeparators);\n        this._providers = providers;\n        this._otherModels = otherModels;\n    }\n    _compute(model, selection, wordSeparators, token) {\n        return getOccurrencesAcrossMultipleModels(this._providers, model, selection.getPosition(), wordSeparators, token, this._otherModels).then(value => {\n            if (!value) {\n                return new ResourceMap();\n            }\n            return value;\n        });\n    }\n}\nclass TextualOccurenceRequest extends OccurenceAtPositionRequest {\n    constructor(model, selection, word, wordSeparators, otherModels) {\n        super(model, selection, wordSeparators);\n        this._otherModels = otherModels;\n        this._selectionIsEmpty = selection.isEmpty();\n        this._word = word;\n    }\n    _compute(model, selection, wordSeparators, token) {\n        return timeout(250, token).then(() => {\n            const result = new ResourceMap();\n            let wordResult;\n            if (this._word) {\n                wordResult = this._word;\n            }\n            else {\n                wordResult = model.getWordAtPosition(selection.getPosition());\n            }\n            if (!wordResult) {\n                return new ResourceMap();\n            }\n            const allModels = [model, ...this._otherModels];\n            for (const otherModel of allModels) {\n                if (otherModel.isDisposed()) {\n                    continue;\n                }\n                const matches = otherModel.findMatches(wordResult.word, true, false, true, wordSeparators, false);\n                const highlights = matches.map(m => ({\n                    range: m.range,\n                    kind: DocumentHighlightKind.Text\n                }));\n                if (highlights) {\n                    result.set(otherModel.uri, highlights);\n                }\n            }\n            return result;\n        });\n    }\n    isValid(model, selection, decorations) {\n        const currentSelectionIsEmpty = selection.isEmpty();\n        if (this._selectionIsEmpty !== currentSelectionIsEmpty) {\n            return false;\n        }\n        return super.isValid(model, selection, decorations);\n    }\n}\nfunction computeOccurencesAtPosition(registry, model, selection, word, wordSeparators) {\n    if (registry.has(model)) {\n        return new SemanticOccurenceAtPositionRequest(model, selection, wordSeparators, registry);\n    }\n    return new TextualOccurenceRequest(model, selection, word, wordSeparators, []);\n}\nfunction computeOccurencesMultiModel(registry, model, selection, word, wordSeparators, otherModels) {\n    if (registry.has(model)) {\n        return new MultiModelOccurenceRequest(model, selection, wordSeparators, registry, otherModels);\n    }\n    return new TextualOccurenceRequest(model, selection, word, wordSeparators, otherModels);\n}\nregisterModelAndPositionCommand('_executeDocumentHighlights', async (accessor, model, position) => {\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const map = await getOccurrencesAtPosition(languageFeaturesService.documentHighlightProvider, model, position, CancellationToken.None);\n    return map === null || map === void 0 ? void 0 : map.get(model.uri);\n});\nlet WordHighlighter = WordHighlighter_1 = class WordHighlighter {\n    constructor(editor, providers, multiProviders, contextKeyService, codeEditorService) {\n        this.toUnhook = new DisposableStore();\n        this.workerRequestTokenId = 0;\n        this.workerRequestCompleted = false;\n        this.workerRequestValue = new ResourceMap();\n        this.lastCursorPositionChangeTime = 0;\n        this.renderDecorationsTimer = -1;\n        this.editor = editor;\n        this.providers = providers;\n        this.multiDocumentProviders = multiProviders;\n        this.codeEditorService = codeEditorService;\n        this._hasWordHighlights = ctxHasWordHighlights.bindTo(contextKeyService);\n        this._ignorePositionChangeEvent = false;\n        this.occurrencesHighlight = this.editor.getOption(80 /* EditorOption.occurrencesHighlight */);\n        this.model = this.editor.getModel();\n        this.toUnhook.add(editor.onDidChangeCursorPosition((e) => {\n            if (this._ignorePositionChangeEvent) {\n                // We are changing the position => ignore this event\n                return;\n            }\n            if (this.occurrencesHighlight === 'off') {\n                // Early exit if nothing needs to be done!\n                // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n                return;\n            }\n            this._onPositionChanged(e);\n        }));\n        this.toUnhook.add(editor.onDidChangeModelContent((e) => {\n            this._stopAll();\n        }));\n        this.toUnhook.add(editor.onDidChangeModel((e) => {\n            if (!e.newModelUrl && e.oldModelUrl) {\n                this._stopSingular();\n            }\n            else {\n                if (WordHighlighter_1.query) {\n                    this._run();\n                }\n            }\n        }));\n        this.toUnhook.add(editor.onDidChangeConfiguration((e) => {\n            const newValue = this.editor.getOption(80 /* EditorOption.occurrencesHighlight */);\n            if (this.occurrencesHighlight !== newValue) {\n                this.occurrencesHighlight = newValue;\n                this._stopAll();\n            }\n        }));\n        this.decorations = this.editor.createDecorationsCollection();\n        this.workerRequestTokenId = 0;\n        this.workerRequest = null;\n        this.workerRequestCompleted = false;\n        this.lastCursorPositionChangeTime = 0;\n        this.renderDecorationsTimer = -1;\n        // if there is a query already, highlight off that query\n        if (WordHighlighter_1.query) {\n            this._run();\n        }\n    }\n    hasDecorations() {\n        return (this.decorations.length > 0);\n    }\n    restore() {\n        if (this.occurrencesHighlight === 'off') {\n            return;\n        }\n        this._run();\n    }\n    _getSortedHighlights() {\n        return (this.decorations.getRanges()\n            .sort(Range.compareRangesUsingStarts));\n    }\n    moveNext() {\n        const highlights = this._getSortedHighlights();\n        const index = highlights.findIndex((range) => range.containsPosition(this.editor.getPosition()));\n        const newIndex = ((index + 1) % highlights.length);\n        const dest = highlights[newIndex];\n        try {\n            this._ignorePositionChangeEvent = true;\n            this.editor.setPosition(dest.getStartPosition());\n            this.editor.revealRangeInCenterIfOutsideViewport(dest);\n            const word = this._getWord();\n            if (word) {\n                const lineContent = this.editor.getModel().getLineContent(dest.startLineNumber);\n                alert(`${lineContent}, ${newIndex + 1} of ${highlights.length} for '${word.word}'`);\n            }\n        }\n        finally {\n            this._ignorePositionChangeEvent = false;\n        }\n    }\n    moveBack() {\n        const highlights = this._getSortedHighlights();\n        const index = highlights.findIndex((range) => range.containsPosition(this.editor.getPosition()));\n        const newIndex = ((index - 1 + highlights.length) % highlights.length);\n        const dest = highlights[newIndex];\n        try {\n            this._ignorePositionChangeEvent = true;\n            this.editor.setPosition(dest.getStartPosition());\n            this.editor.revealRangeInCenterIfOutsideViewport(dest);\n            const word = this._getWord();\n            if (word) {\n                const lineContent = this.editor.getModel().getLineContent(dest.startLineNumber);\n                alert(`${lineContent}, ${newIndex + 1} of ${highlights.length} for '${word.word}'`);\n            }\n        }\n        finally {\n            this._ignorePositionChangeEvent = false;\n        }\n    }\n    _removeSingleDecorations() {\n        // return if no model\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        const currentDecorationIDs = WordHighlighter_1.storedDecorations.get(this.editor.getModel().uri);\n        if (!currentDecorationIDs) {\n            return;\n        }\n        this.editor.removeDecorations(currentDecorationIDs);\n        WordHighlighter_1.storedDecorations.delete(this.editor.getModel().uri);\n        if (this.decorations.length > 0) {\n            this.decorations.clear();\n            this._hasWordHighlights.set(false);\n        }\n    }\n    _removeAllDecorations() {\n        const currentEditors = this.codeEditorService.listCodeEditors();\n        // iterate over editors and store models in currentModels\n        for (const editor of currentEditors) {\n            if (!editor.hasModel()) {\n                continue;\n            }\n            const currentDecorationIDs = WordHighlighter_1.storedDecorations.get(editor.getModel().uri);\n            if (!currentDecorationIDs) {\n                continue;\n            }\n            editor.removeDecorations(currentDecorationIDs);\n            WordHighlighter_1.storedDecorations.delete(editor.getModel().uri);\n            const editorHighlighterContrib = WordHighlighterContribution.get(editor);\n            if (!(editorHighlighterContrib === null || editorHighlighterContrib === void 0 ? void 0 : editorHighlighterContrib.wordHighlighter)) {\n                continue;\n            }\n            if (editorHighlighterContrib.wordHighlighter.decorations.length > 0) {\n                editorHighlighterContrib.wordHighlighter.decorations.clear();\n                editorHighlighterContrib.wordHighlighter._hasWordHighlights.set(false);\n            }\n        }\n    }\n    _stopSingular() {\n        var _a, _b, _c, _d;\n        // Remove any existing decorations + a possible query, and re - run to update decorations\n        this._removeSingleDecorations();\n        if (this.editor.hasWidgetFocus()) {\n            if (((_a = this.editor.getModel()) === null || _a === void 0 ? void 0 : _a.uri.scheme) !== Schemas.vscodeNotebookCell && ((_c = (_b = WordHighlighter_1.query) === null || _b === void 0 ? void 0 : _b.modelInfo) === null || _c === void 0 ? void 0 : _c.model.uri.scheme) !== Schemas.vscodeNotebookCell) { // clear query if focused non-nb editor\n                WordHighlighter_1.query = null;\n                this._run();\n            }\n            else { // remove modelInfo to account for nb cell being disposed\n                if ((_d = WordHighlighter_1.query) === null || _d === void 0 ? void 0 : _d.modelInfo) {\n                    WordHighlighter_1.query.modelInfo = null;\n                }\n            }\n        }\n        // Cancel any renderDecorationsTimer\n        if (this.renderDecorationsTimer !== -1) {\n            clearTimeout(this.renderDecorationsTimer);\n            this.renderDecorationsTimer = -1;\n        }\n        // Cancel any worker request\n        if (this.workerRequest !== null) {\n            this.workerRequest.cancel();\n            this.workerRequest = null;\n        }\n        // Invalidate any worker request callback\n        if (!this.workerRequestCompleted) {\n            this.workerRequestTokenId++;\n            this.workerRequestCompleted = true;\n        }\n    }\n    _stopAll() {\n        // Remove any existing decorations\n        this._removeAllDecorations();\n        // Cancel any renderDecorationsTimer\n        if (this.renderDecorationsTimer !== -1) {\n            clearTimeout(this.renderDecorationsTimer);\n            this.renderDecorationsTimer = -1;\n        }\n        // Cancel any worker request\n        if (this.workerRequest !== null) {\n            this.workerRequest.cancel();\n            this.workerRequest = null;\n        }\n        // Invalidate any worker request callback\n        if (!this.workerRequestCompleted) {\n            this.workerRequestTokenId++;\n            this.workerRequestCompleted = true;\n        }\n    }\n    _onPositionChanged(e) {\n        var _a;\n        // disabled\n        if (this.occurrencesHighlight === 'off') {\n            this._stopAll();\n            return;\n        }\n        // ignore typing & other\n        // need to check if the model is a notebook cell, should not stop if nb\n        if (e.reason !== 3 /* CursorChangeReason.Explicit */ && ((_a = this.editor.getModel()) === null || _a === void 0 ? void 0 : _a.uri.scheme) !== Schemas.vscodeNotebookCell) {\n            this._stopAll();\n            return;\n        }\n        this._run();\n    }\n    _getWord() {\n        const editorSelection = this.editor.getSelection();\n        const lineNumber = editorSelection.startLineNumber;\n        const startColumn = editorSelection.startColumn;\n        if (this.model.isDisposed()) {\n            return null;\n        }\n        return this.model.getWordAtPosition({\n            lineNumber: lineNumber,\n            column: startColumn\n        });\n    }\n    getOtherModelsToHighlight(model) {\n        if (!model) {\n            return [];\n        }\n        // notebook case\n        const isNotebookEditor = model.uri.scheme === Schemas.vscodeNotebookCell;\n        if (isNotebookEditor) {\n            const currentModels = [];\n            const currentEditors = this.codeEditorService.listCodeEditors();\n            for (const editor of currentEditors) {\n                const tempModel = editor.getModel();\n                if (tempModel && tempModel !== model && tempModel.uri.scheme === Schemas.vscodeNotebookCell) {\n                    currentModels.push(tempModel);\n                }\n            }\n            return currentModels;\n        }\n        // inline case\n        // ? current works when highlighting outside of an inline diff, highlighting in.\n        // ? broken when highlighting within a diff editor. highlighting the main editor does not work\n        // ? editor group service could be useful here\n        const currentModels = [];\n        const currentEditors = this.codeEditorService.listCodeEditors();\n        for (const editor of currentEditors) {\n            if (!isDiffEditor(editor)) {\n                continue;\n            }\n            const diffModel = editor.getModel();\n            if (!diffModel) {\n                continue;\n            }\n            if (model === diffModel.modified) { // embedded inline chat diff would pass this, allowing highlights\n                //? currentModels.push(diffModel.original);\n                currentModels.push(diffModel.modified);\n            }\n        }\n        if (currentModels.length) { // no matching editors have been found\n            return currentModels;\n        }\n        // multi-doc OFF\n        if (this.occurrencesHighlight === 'singleFile') {\n            return [];\n        }\n        // multi-doc ON\n        for (const editor of currentEditors) {\n            const tempModel = editor.getModel();\n            const isValidModel = tempModel && tempModel !== model;\n            if (isValidModel) {\n                currentModels.push(tempModel);\n            }\n        }\n        return currentModels;\n    }\n    _run() {\n        var _a, _b;\n        let workerRequestIsValid;\n        if (!this.editor.hasWidgetFocus()) { // no focus (new nb cell, etc)\n            if (WordHighlighter_1.query === null) {\n                // no previous query, nothing to highlight\n                return;\n            }\n        }\n        else {\n            const editorSelection = this.editor.getSelection();\n            // ignore multiline selection\n            if (!editorSelection || editorSelection.startLineNumber !== editorSelection.endLineNumber) {\n                this._stopAll();\n                return;\n            }\n            const startColumn = editorSelection.startColumn;\n            const endColumn = editorSelection.endColumn;\n            const word = this._getWord();\n            // The selection must be inside a word or surround one word at most\n            if (!word || word.startColumn > startColumn || word.endColumn < endColumn) {\n                // no previous query, nothing to highlight\n                WordHighlighter_1.query = null;\n                this._stopAll();\n                return;\n            }\n            // All the effort below is trying to achieve this:\n            // - when cursor is moved to a word, trigger immediately a findOccurrences request\n            // - 250ms later after the last cursor move event, render the occurrences\n            // - no flickering!\n            workerRequestIsValid = (this.workerRequest && this.workerRequest.isValid(this.model, editorSelection, this.decorations));\n            WordHighlighter_1.query = {\n                modelInfo: {\n                    model: this.model,\n                    selection: editorSelection,\n                },\n                word: word\n            };\n        }\n        // There are 4 cases:\n        // a) old workerRequest is valid & completed, renderDecorationsTimer fired\n        // b) old workerRequest is valid & completed, renderDecorationsTimer not fired\n        // c) old workerRequest is valid, but not completed\n        // d) old workerRequest is not valid\n        // For a) no action is needed\n        // For c), member 'lastCursorPositionChangeTime' will be used when installing the timer so no action is needed\n        this.lastCursorPositionChangeTime = (new Date()).getTime();\n        if (workerRequestIsValid) {\n            if (this.workerRequestCompleted && this.renderDecorationsTimer !== -1) {\n                // case b)\n                // Delay the firing of renderDecorationsTimer by an extra 250 ms\n                clearTimeout(this.renderDecorationsTimer);\n                this.renderDecorationsTimer = -1;\n                this._beginRenderDecorations();\n            }\n        }\n        else {\n            // case d)\n            // Stop all previous actions and start fresh\n            this._stopAll();\n            const myRequestId = ++this.workerRequestTokenId;\n            this.workerRequestCompleted = false;\n            const otherModelsToHighlight = this.getOtherModelsToHighlight(this.editor.getModel());\n            // 2 cases where we want to send the word\n            // a) there is no stored query model, but there is a word. This signals the editor that drove the highlight is disposed (cell out of viewport, etc)\n            // b) the queried model is not the current model. This signals that the editor that drove the highlight is still in the viewport, but we are highlighting a different cell\n            // otherwise, we send null in place of the word, and the model and selection are used to compute the word\n            const sendWord = (!WordHighlighter_1.query.modelInfo && WordHighlighter_1.query.word) ||\n                (((_a = WordHighlighter_1.query.modelInfo) === null || _a === void 0 ? void 0 : _a.model.uri) !== this.model.uri)\n                ? true : false;\n            if (!WordHighlighter_1.query.modelInfo || (WordHighlighter_1.query.modelInfo.model.uri !== this.model.uri)) { // use this.model\n                this.workerRequest = this.computeWithModel(this.model, this.editor.getSelection(), sendWord ? WordHighlighter_1.query.word : null, otherModelsToHighlight);\n            }\n            else { // use stored query model + selection\n                this.workerRequest = this.computeWithModel(WordHighlighter_1.query.modelInfo.model, WordHighlighter_1.query.modelInfo.selection, WordHighlighter_1.query.word, otherModelsToHighlight);\n            }\n            (_b = this.workerRequest) === null || _b === void 0 ? void 0 : _b.result.then(data => {\n                if (myRequestId === this.workerRequestTokenId) {\n                    this.workerRequestCompleted = true;\n                    this.workerRequestValue = data || [];\n                    this._beginRenderDecorations();\n                }\n            }, onUnexpectedError);\n        }\n    }\n    computeWithModel(model, selection, word, otherModels) {\n        if (!otherModels.length) {\n            return computeOccurencesAtPosition(this.providers, model, selection, word, this.editor.getOption(129 /* EditorOption.wordSeparators */));\n        }\n        else {\n            return computeOccurencesMultiModel(this.multiDocumentProviders, model, selection, word, this.editor.getOption(129 /* EditorOption.wordSeparators */), otherModels);\n        }\n    }\n    _beginRenderDecorations() {\n        const currentTime = (new Date()).getTime();\n        const minimumRenderTime = this.lastCursorPositionChangeTime + 250;\n        if (currentTime >= minimumRenderTime) {\n            // Synchronous\n            this.renderDecorationsTimer = -1;\n            this.renderDecorations();\n        }\n        else {\n            // Asynchronous\n            this.renderDecorationsTimer = setTimeout(() => {\n                this.renderDecorations();\n            }, (minimumRenderTime - currentTime));\n        }\n    }\n    renderDecorations() {\n        var _a, _b, _c;\n        this.renderDecorationsTimer = -1;\n        // create new loop, iterate over current editors using this.codeEditorService.listCodeEditors(),\n        // if the URI of that codeEditor is in the map, then add the decorations to the decorations array\n        // then set the decorations for the editor\n        const currentEditors = this.codeEditorService.listCodeEditors();\n        for (const editor of currentEditors) {\n            const editorHighlighterContrib = WordHighlighterContribution.get(editor);\n            if (!editorHighlighterContrib) {\n                continue;\n            }\n            const newDecorations = [];\n            const uri = (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.uri;\n            if (uri && this.workerRequestValue.has(uri)) {\n                const oldDecorationIDs = WordHighlighter_1.storedDecorations.get(uri);\n                const newDocumentHighlights = this.workerRequestValue.get(uri);\n                if (newDocumentHighlights) {\n                    for (const highlight of newDocumentHighlights) {\n                        newDecorations.push({\n                            range: highlight.range,\n                            options: getHighlightDecorationOptions(highlight.kind)\n                        });\n                    }\n                }\n                let newDecorationIDs = [];\n                editor.changeDecorations((changeAccessor) => {\n                    newDecorationIDs = changeAccessor.deltaDecorations(oldDecorationIDs !== null && oldDecorationIDs !== void 0 ? oldDecorationIDs : [], newDecorations);\n                });\n                WordHighlighter_1.storedDecorations = WordHighlighter_1.storedDecorations.set(uri, newDecorationIDs);\n                if (newDecorations.length > 0) {\n                    (_b = editorHighlighterContrib.wordHighlighter) === null || _b === void 0 ? void 0 : _b.decorations.set(newDecorations);\n                    (_c = editorHighlighterContrib.wordHighlighter) === null || _c === void 0 ? void 0 : _c._hasWordHighlights.set(true);\n                }\n            }\n        }\n    }\n    dispose() {\n        this._stopSingular();\n        this.toUnhook.dispose();\n    }\n};\nWordHighlighter.storedDecorations = new ResourceMap();\nWordHighlighter.query = null;\nWordHighlighter = WordHighlighter_1 = __decorate([\n    __param(4, ICodeEditorService)\n], WordHighlighter);\nlet WordHighlighterContribution = WordHighlighterContribution_1 = class WordHighlighterContribution extends Disposable {\n    static get(editor) {\n        return editor.getContribution(WordHighlighterContribution_1.ID);\n    }\n    constructor(editor, contextKeyService, languageFeaturesService, codeEditorService) {\n        super();\n        this._wordHighlighter = null;\n        const createWordHighlighterIfPossible = () => {\n            if (editor.hasModel() && !editor.getModel().isTooLargeForTokenization()) {\n                this._wordHighlighter = new WordHighlighter(editor, languageFeaturesService.documentHighlightProvider, languageFeaturesService.multiDocumentHighlightProvider, contextKeyService, codeEditorService);\n            }\n        };\n        this._register(editor.onDidChangeModel((e) => {\n            if (this._wordHighlighter) {\n                this._wordHighlighter.dispose();\n                this._wordHighlighter = null;\n            }\n            createWordHighlighterIfPossible();\n        }));\n        createWordHighlighterIfPossible();\n    }\n    get wordHighlighter() {\n        return this._wordHighlighter;\n    }\n    saveViewState() {\n        if (this._wordHighlighter && this._wordHighlighter.hasDecorations()) {\n            return true;\n        }\n        return false;\n    }\n    moveNext() {\n        var _a;\n        (_a = this._wordHighlighter) === null || _a === void 0 ? void 0 : _a.moveNext();\n    }\n    moveBack() {\n        var _a;\n        (_a = this._wordHighlighter) === null || _a === void 0 ? void 0 : _a.moveBack();\n    }\n    restoreViewState(state) {\n        if (this._wordHighlighter && state) {\n            this._wordHighlighter.restore();\n        }\n    }\n    dispose() {\n        if (this._wordHighlighter) {\n            this._wordHighlighter.dispose();\n            this._wordHighlighter = null;\n        }\n        super.dispose();\n    }\n};\nWordHighlighterContribution.ID = 'editor.contrib.wordHighlighter';\nWordHighlighterContribution = WordHighlighterContribution_1 = __decorate([\n    __param(1, IContextKeyService),\n    __param(2, ILanguageFeaturesService),\n    __param(3, ICodeEditorService)\n], WordHighlighterContribution);\nexport { WordHighlighterContribution };\nclass WordHighlightNavigationAction extends EditorAction {\n    constructor(next, opts) {\n        super(opts);\n        this._isNext = next;\n    }\n    run(accessor, editor) {\n        const controller = WordHighlighterContribution.get(editor);\n        if (!controller) {\n            return;\n        }\n        if (this._isNext) {\n            controller.moveNext();\n        }\n        else {\n            controller.moveBack();\n        }\n    }\n}\nclass NextWordHighlightAction extends WordHighlightNavigationAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.wordHighlight.next',\n            label: nls.localize('wordHighlight.next.label', \"Go to Next Symbol Highlight\"),\n            alias: 'Go to Next Symbol Highlight',\n            precondition: ctxHasWordHighlights,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 65 /* KeyCode.F7 */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n}\nclass PrevWordHighlightAction extends WordHighlightNavigationAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.wordHighlight.prev',\n            label: nls.localize('wordHighlight.previous.label', \"Go to Previous Symbol Highlight\"),\n            alias: 'Go to Previous Symbol Highlight',\n            precondition: ctxHasWordHighlights,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 1024 /* KeyMod.Shift */ | 65 /* KeyCode.F7 */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n}\nclass TriggerWordHighlightAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.wordHighlight.trigger',\n            label: nls.localize('wordHighlight.trigger.label', \"Trigger Symbol Highlight\"),\n            alias: 'Trigger Symbol Highlight',\n            precondition: ctxHasWordHighlights.toNegated(),\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 0,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(accessor, editor, args) {\n        const controller = WordHighlighterContribution.get(editor);\n        if (!controller) {\n            return;\n        }\n        controller.restoreViewState(true);\n    }\n}\nregisterEditorContribution(WordHighlighterContribution.ID, WordHighlighterContribution, 0 /* EditorContributionInstantiation.Eager */); // eager because it uses `saveViewState`/`restoreViewState`\nregisterEditorAction(NextWordHighlightAction);\nregisterEditorAction(PrevWordHighlightAction);\nregisterEditorAction(TriggerWordHighlightAction);\n// registerEditorFeature(TextualMultiDocumentHighlightFeature);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}