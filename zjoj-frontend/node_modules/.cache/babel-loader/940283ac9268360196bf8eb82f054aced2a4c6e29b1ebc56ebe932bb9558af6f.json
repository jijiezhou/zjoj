{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class LinesDecorationsOverlay extends DedupOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n    this._decorationsLeft = layoutInfo.decorationsLeft;\n    this._decorationsWidth = layoutInfo.decorationsWidth;\n    this._renderResult = null;\n    this._context.addEventHandler(this);\n  }\n  dispose() {\n    this._context.removeEventHandler(this);\n    this._renderResult = null;\n    super.dispose();\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n    this._decorationsLeft = layoutInfo.decorationsLeft;\n    this._decorationsWidth = layoutInfo.decorationsWidth;\n    return true;\n  }\n  onDecorationsChanged(e) {\n    return true;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLinesChanged(e) {\n    return true;\n  }\n  onLinesDeleted(e) {\n    return true;\n  }\n  onLinesInserted(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    return e.scrollTopChanged;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  // --- end event handlers\n  _getDecorations(ctx) {\n    const decorations = ctx.getDecorationsInViewport();\n    const r = [];\n    let rLen = 0;\n    for (let i = 0, len = decorations.length; i < len; i++) {\n      const d = decorations[i];\n      const linesDecorationsClassName = d.options.linesDecorationsClassName;\n      const zIndex = d.options.zIndex;\n      if (linesDecorationsClassName) {\n        r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName, zIndex);\n      }\n      const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n      if (firstLineDecorationClassName) {\n        r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName, zIndex);\n      }\n    }\n    return r;\n  }\n  prepareRender(ctx) {\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n    const left = this._decorationsLeft.toString();\n    const width = this._decorationsWidth.toString();\n    const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n    const output = [];\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      const decorations = toRender[lineIndex].getDecorations();\n      let lineOutput = '';\n      for (const decoration of decorations) {\n        lineOutput += '<div class=\"cldr ' + decoration.className + common;\n      }\n      output[lineIndex] = lineOutput;\n    }\n    this._renderResult = output;\n  }\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n    return this._renderResult[lineNumber - startLineNumber];\n  }\n}","map":{"version":3,"names":["DecorationToRender","DedupOverlay","LinesDecorationsOverlay","constructor","context","_context","options","configuration","layoutInfo","get","_decorationsLeft","decorationsLeft","_decorationsWidth","decorationsWidth","_renderResult","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","_getDecorations","ctx","decorations","getDecorationsInViewport","r","rLen","i","len","length","d","linesDecorationsClassName","zIndex","range","startLineNumber","endLineNumber","firstLineDecorationClassName","prepareRender","visibleStartLineNumber","visibleRange","visibleEndLineNumber","toRender","_render","left","toString","width","common","output","lineNumber","lineIndex","getDecorations","lineOutput","decoration","className","render"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/linesDecorations/linesDecorations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class LinesDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const linesDecorationsClassName = d.options.linesDecorationsClassName;\n            const zIndex = d.options.zIndex;\n            if (linesDecorationsClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName, zIndex);\n            }\n            const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n            if (firstLineDecorationClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName, zIndex);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const left = this._decorationsLeft.toString();\n        const width = this._decorationsWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const decorations = toRender[lineIndex].getDecorations();\n            let lineOutput = '';\n            for (const decoration of decorations) {\n                lineOutput += '<div class=\"cldr ' + decoration.className + common;\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}