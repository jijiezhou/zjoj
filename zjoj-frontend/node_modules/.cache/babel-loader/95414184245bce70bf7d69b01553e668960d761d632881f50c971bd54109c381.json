{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { h } from '../../../../base/browser/dom.js';\nimport { renderIcon } from '../../../../base/browser/ui/iconLabel/iconLabels.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorunWithStore, derived } from '../../../../base/common/observable.js';\nimport { diffAddDecoration, diffAddDecorationEmpty, diffDeleteDecoration, diffDeleteDecorationEmpty, diffLineAddDecorationBackground, diffLineAddDecorationBackgroundWithIndicator, diffLineDeleteDecorationBackground, diffLineDeleteDecorationBackgroundWithIndicator, diffWholeLineAddDecoration, diffWholeLineDeleteDecoration } from './decorations.js';\nimport { MovedBlocksLinesPart } from './movedBlocksLines.js';\nimport { applyObservableDecorations } from './utils.js';\nimport { LineRange, LineRangeSet } from '../../../common/core/lineRange.js';\nimport { Range } from '../../../common/core/range.js';\nimport { GlyphMarginLane } from '../../../common/model.js';\nimport { localize } from '../../../../nls.js';\nexport class DiffEditorDecorations extends Disposable {\n  constructor(_editors, _diffModel, _options, widget) {\n    super();\n    this._editors = _editors;\n    this._diffModel = _diffModel;\n    this._options = _options;\n    this._decorations = derived(this, reader => {\n      var _a;\n      const diff = (_a = this._diffModel.read(reader)) === null || _a === void 0 ? void 0 : _a.diff.read(reader);\n      if (!diff) {\n        return null;\n      }\n      const movedTextToCompare = this._diffModel.read(reader).movedTextToCompare.read(reader);\n      const renderIndicators = this._options.renderIndicators.read(reader);\n      const showEmptyDecorations = this._options.showEmptyDecorations.read(reader);\n      const originalDecorations = [];\n      const modifiedDecorations = [];\n      if (!movedTextToCompare) {\n        for (const m of diff.mappings) {\n          if (!m.lineRangeMapping.original.isEmpty) {\n            originalDecorations.push({\n              range: m.lineRangeMapping.original.toInclusiveRange(),\n              options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground\n            });\n          }\n          if (!m.lineRangeMapping.modified.isEmpty) {\n            modifiedDecorations.push({\n              range: m.lineRangeMapping.modified.toInclusiveRange(),\n              options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground\n            });\n          }\n          if (m.lineRangeMapping.modified.isEmpty || m.lineRangeMapping.original.isEmpty) {\n            if (!m.lineRangeMapping.original.isEmpty) {\n              originalDecorations.push({\n                range: m.lineRangeMapping.original.toInclusiveRange(),\n                options: diffWholeLineDeleteDecoration\n              });\n            }\n            if (!m.lineRangeMapping.modified.isEmpty) {\n              modifiedDecorations.push({\n                range: m.lineRangeMapping.modified.toInclusiveRange(),\n                options: diffWholeLineAddDecoration\n              });\n            }\n          } else {\n            for (const i of m.lineRangeMapping.innerChanges || []) {\n              // Don't show empty markers outside the line range\n              if (m.lineRangeMapping.original.contains(i.originalRange.startLineNumber)) {\n                originalDecorations.push({\n                  range: i.originalRange,\n                  options: i.originalRange.isEmpty() && showEmptyDecorations ? diffDeleteDecorationEmpty : diffDeleteDecoration\n                });\n              }\n              if (m.lineRangeMapping.modified.contains(i.modifiedRange.startLineNumber)) {\n                modifiedDecorations.push({\n                  range: i.modifiedRange,\n                  options: i.modifiedRange.isEmpty() && showEmptyDecorations ? diffAddDecorationEmpty : diffAddDecoration\n                });\n              }\n            }\n          }\n        }\n      }\n      if (movedTextToCompare) {\n        for (const m of movedTextToCompare.changes) {\n          const fullRangeOriginal = m.original.toInclusiveRange();\n          if (fullRangeOriginal) {\n            originalDecorations.push({\n              range: fullRangeOriginal,\n              options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground\n            });\n          }\n          const fullRangeModified = m.modified.toInclusiveRange();\n          if (fullRangeModified) {\n            modifiedDecorations.push({\n              range: fullRangeModified,\n              options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground\n            });\n          }\n          for (const i of m.innerChanges || []) {\n            originalDecorations.push({\n              range: i.originalRange,\n              options: diffDeleteDecoration\n            });\n            modifiedDecorations.push({\n              range: i.modifiedRange,\n              options: diffAddDecoration\n            });\n          }\n        }\n      }\n      const activeMovedText = this._diffModel.read(reader).activeMovedText.read(reader);\n      for (const m of diff.movedTexts) {\n        originalDecorations.push({\n          range: m.lineRangeMapping.original.toInclusiveRange(),\n          options: {\n            description: 'moved',\n            blockClassName: 'movedOriginal' + (m === activeMovedText ? ' currentMove' : ''),\n            blockPadding: [MovedBlocksLinesPart.movedCodeBlockPadding, 0, MovedBlocksLinesPart.movedCodeBlockPadding, MovedBlocksLinesPart.movedCodeBlockPadding]\n          }\n        });\n        modifiedDecorations.push({\n          range: m.lineRangeMapping.modified.toInclusiveRange(),\n          options: {\n            description: 'moved',\n            blockClassName: 'movedModified' + (m === activeMovedText ? ' currentMove' : ''),\n            blockPadding: [4, 0, 4, 4]\n          }\n        });\n      }\n      return {\n        originalDecorations,\n        modifiedDecorations\n      };\n    });\n    this._register(new RevertButtonsFeature(_editors, _diffModel, _options, widget));\n    this._register(applyObservableDecorations(this._editors.original, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.originalDecorations) || [])));\n    this._register(applyObservableDecorations(this._editors.modified, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.modifiedDecorations) || [])));\n  }\n}\nclass RevertButtonsFeature extends Disposable {\n  constructor(_editors, _diffModel, _options, _widget) {\n    super();\n    this._editors = _editors;\n    this._diffModel = _diffModel;\n    this._options = _options;\n    this._widget = _widget;\n    const emptyArr = [];\n    const selectedDiffs = derived(this, reader => {\n      /** @description selectedDiffs */\n      const model = this._diffModel.read(reader);\n      const diff = model === null || model === void 0 ? void 0 : model.diff.read(reader);\n      if (!diff) {\n        return emptyArr;\n      }\n      const selections = this._editors.modifiedSelections.read(reader);\n      if (selections.every(s => s.isEmpty())) {\n        return emptyArr;\n      }\n      const lineRanges = new LineRangeSet(selections.map(s => LineRange.fromRangeInclusive(s)));\n      const mappings = diff.mappings.filter(m => m.lineRangeMapping.innerChanges && lineRanges.intersects(m.lineRangeMapping.modified));\n      const result = mappings.map(mapping => ({\n        mapping,\n        rangeMappings: mapping.lineRangeMapping.innerChanges.filter(c => selections.some(s => Range.areIntersecting(c.modifiedRange, s)))\n      }));\n      if (result.length === 0 || result.every(r => r.rangeMappings.length === 0)) {\n        return emptyArr;\n      }\n      return result;\n    });\n    this._register(autorunWithStore((reader, store) => {\n      const model = this._diffModel.read(reader);\n      const diff = model === null || model === void 0 ? void 0 : model.diff.read(reader);\n      if (!model || !diff) {\n        return;\n      }\n      const movedTextToCompare = this._diffModel.read(reader).movedTextToCompare.read(reader);\n      if (movedTextToCompare) {\n        return;\n      }\n      if (!this._options.shouldRenderRevertArrows.read(reader)) {\n        return;\n      }\n      const glyphWidgetsModified = [];\n      const selectedDiffs_ = selectedDiffs.read(reader);\n      const diffsSet = new Set(selectedDiffs_.map(d => d.mapping));\n      if (selectedDiffs_.length > 0) {\n        const selections = this._editors.modifiedSelections.read(reader);\n        const btn = new RevertButton(selections[selections.length - 1].positionLineNumber, this._widget, selectedDiffs_.flatMap(d => d.rangeMappings), true);\n        this._editors.modified.addGlyphMarginWidget(btn);\n        glyphWidgetsModified.push(btn);\n      }\n      for (const m of diff.mappings) {\n        if (diffsSet.has(m)) {\n          continue;\n        }\n        if (!m.lineRangeMapping.modified.isEmpty && m.lineRangeMapping.innerChanges) {\n          const btn = new RevertButton(m.lineRangeMapping.modified.startLineNumber, this._widget, m.lineRangeMapping.innerChanges, false);\n          this._editors.modified.addGlyphMarginWidget(btn);\n          glyphWidgetsModified.push(btn);\n        }\n      }\n      store.add(toDisposable(() => {\n        for (const w of glyphWidgetsModified) {\n          this._editors.modified.removeGlyphMarginWidget(w);\n        }\n      }));\n    }));\n  }\n}\nclass RevertButton {\n  getId() {\n    return this._id;\n  }\n  constructor(_lineNumber, _widget, _diffs, _selection) {\n    this._lineNumber = _lineNumber;\n    this._widget = _widget;\n    this._diffs = _diffs;\n    this._selection = _selection;\n    this._id = `revertButton${RevertButton.counter++}`;\n    this._domNode = h('div.revertButton', {\n      title: this._selection ? localize('revertSelectedChanges', 'Revert Selected Changes') : localize('revertChange', 'Revert Change')\n    }, [renderIcon(Codicon.arrowRight)]).root;\n    this._domNode.onmousedown = e => {\n      // don't prevent context menu from showing up\n      if (e.button !== 2) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    };\n    this._domNode.onmouseup = e => {\n      e.stopPropagation();\n      e.preventDefault();\n    };\n    this._domNode.onclick = e => {\n      this._widget.revertRangeMappings(this._diffs);\n      e.stopPropagation();\n      e.preventDefault();\n    };\n  }\n  /**\n   * Get the dom node of the glyph widget.\n   */\n  getDomNode() {\n    return this._domNode;\n  }\n  /**\n   * Get the placement of the glyph widget.\n   */\n  getPosition() {\n    return {\n      lane: GlyphMarginLane.Right,\n      range: {\n        startColumn: 1,\n        startLineNumber: this._lineNumber,\n        endColumn: 1,\n        endLineNumber: this._lineNumber\n      },\n      zIndex: 10001\n    };\n  }\n}\nRevertButton.counter = 0;","map":{"version":3,"names":["h","renderIcon","Codicon","Disposable","toDisposable","autorunWithStore","derived","diffAddDecoration","diffAddDecorationEmpty","diffDeleteDecoration","diffDeleteDecorationEmpty","diffLineAddDecorationBackground","diffLineAddDecorationBackgroundWithIndicator","diffLineDeleteDecorationBackground","diffLineDeleteDecorationBackgroundWithIndicator","diffWholeLineAddDecoration","diffWholeLineDeleteDecoration","MovedBlocksLinesPart","applyObservableDecorations","LineRange","LineRangeSet","Range","GlyphMarginLane","localize","DiffEditorDecorations","constructor","_editors","_diffModel","_options","widget","_decorations","reader","_a","diff","read","movedTextToCompare","renderIndicators","showEmptyDecorations","originalDecorations","modifiedDecorations","m","mappings","lineRangeMapping","original","isEmpty","push","range","toInclusiveRange","options","modified","i","innerChanges","contains","originalRange","startLineNumber","modifiedRange","changes","fullRangeOriginal","fullRangeModified","activeMovedText","movedTexts","description","blockClassName","blockPadding","movedCodeBlockPadding","_register","RevertButtonsFeature","map","d","_widget","emptyArr","selectedDiffs","model","selections","modifiedSelections","every","s","lineRanges","fromRangeInclusive","filter","intersects","result","mapping","rangeMappings","c","some","areIntersecting","length","r","store","shouldRenderRevertArrows","glyphWidgetsModified","selectedDiffs_","diffsSet","Set","btn","RevertButton","positionLineNumber","flatMap","addGlyphMarginWidget","has","add","w","removeGlyphMarginWidget","getId","_id","_lineNumber","_diffs","_selection","counter","_domNode","title","arrowRight","root","onmousedown","e","button","stopPropagation","preventDefault","onmouseup","onclick","revertRangeMappings","getDomNode","getPosition","lane","Right","startColumn","endColumn","endLineNumber","zIndex"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditor/diffEditorDecorations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { h } from '../../../../base/browser/dom.js';\nimport { renderIcon } from '../../../../base/browser/ui/iconLabel/iconLabels.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorunWithStore, derived } from '../../../../base/common/observable.js';\nimport { diffAddDecoration, diffAddDecorationEmpty, diffDeleteDecoration, diffDeleteDecorationEmpty, diffLineAddDecorationBackground, diffLineAddDecorationBackgroundWithIndicator, diffLineDeleteDecorationBackground, diffLineDeleteDecorationBackgroundWithIndicator, diffWholeLineAddDecoration, diffWholeLineDeleteDecoration } from './decorations.js';\nimport { MovedBlocksLinesPart } from './movedBlocksLines.js';\nimport { applyObservableDecorations } from './utils.js';\nimport { LineRange, LineRangeSet } from '../../../common/core/lineRange.js';\nimport { Range } from '../../../common/core/range.js';\nimport { GlyphMarginLane } from '../../../common/model.js';\nimport { localize } from '../../../../nls.js';\nexport class DiffEditorDecorations extends Disposable {\n    constructor(_editors, _diffModel, _options, widget) {\n        super();\n        this._editors = _editors;\n        this._diffModel = _diffModel;\n        this._options = _options;\n        this._decorations = derived(this, (reader) => {\n            var _a;\n            const diff = (_a = this._diffModel.read(reader)) === null || _a === void 0 ? void 0 : _a.diff.read(reader);\n            if (!diff) {\n                return null;\n            }\n            const movedTextToCompare = this._diffModel.read(reader).movedTextToCompare.read(reader);\n            const renderIndicators = this._options.renderIndicators.read(reader);\n            const showEmptyDecorations = this._options.showEmptyDecorations.read(reader);\n            const originalDecorations = [];\n            const modifiedDecorations = [];\n            if (!movedTextToCompare) {\n                for (const m of diff.mappings) {\n                    if (!m.lineRangeMapping.original.isEmpty) {\n                        originalDecorations.push({ range: m.lineRangeMapping.original.toInclusiveRange(), options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground });\n                    }\n                    if (!m.lineRangeMapping.modified.isEmpty) {\n                        modifiedDecorations.push({ range: m.lineRangeMapping.modified.toInclusiveRange(), options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground });\n                    }\n                    if (m.lineRangeMapping.modified.isEmpty || m.lineRangeMapping.original.isEmpty) {\n                        if (!m.lineRangeMapping.original.isEmpty) {\n                            originalDecorations.push({ range: m.lineRangeMapping.original.toInclusiveRange(), options: diffWholeLineDeleteDecoration });\n                        }\n                        if (!m.lineRangeMapping.modified.isEmpty) {\n                            modifiedDecorations.push({ range: m.lineRangeMapping.modified.toInclusiveRange(), options: diffWholeLineAddDecoration });\n                        }\n                    }\n                    else {\n                        for (const i of m.lineRangeMapping.innerChanges || []) {\n                            // Don't show empty markers outside the line range\n                            if (m.lineRangeMapping.original.contains(i.originalRange.startLineNumber)) {\n                                originalDecorations.push({ range: i.originalRange, options: (i.originalRange.isEmpty() && showEmptyDecorations) ? diffDeleteDecorationEmpty : diffDeleteDecoration });\n                            }\n                            if (m.lineRangeMapping.modified.contains(i.modifiedRange.startLineNumber)) {\n                                modifiedDecorations.push({ range: i.modifiedRange, options: (i.modifiedRange.isEmpty() && showEmptyDecorations) ? diffAddDecorationEmpty : diffAddDecoration });\n                            }\n                        }\n                    }\n                }\n            }\n            if (movedTextToCompare) {\n                for (const m of movedTextToCompare.changes) {\n                    const fullRangeOriginal = m.original.toInclusiveRange();\n                    if (fullRangeOriginal) {\n                        originalDecorations.push({ range: fullRangeOriginal, options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground });\n                    }\n                    const fullRangeModified = m.modified.toInclusiveRange();\n                    if (fullRangeModified) {\n                        modifiedDecorations.push({ range: fullRangeModified, options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground });\n                    }\n                    for (const i of m.innerChanges || []) {\n                        originalDecorations.push({ range: i.originalRange, options: diffDeleteDecoration });\n                        modifiedDecorations.push({ range: i.modifiedRange, options: diffAddDecoration });\n                    }\n                }\n            }\n            const activeMovedText = this._diffModel.read(reader).activeMovedText.read(reader);\n            for (const m of diff.movedTexts) {\n                originalDecorations.push({\n                    range: m.lineRangeMapping.original.toInclusiveRange(), options: {\n                        description: 'moved',\n                        blockClassName: 'movedOriginal' + (m === activeMovedText ? ' currentMove' : ''),\n                        blockPadding: [MovedBlocksLinesPart.movedCodeBlockPadding, 0, MovedBlocksLinesPart.movedCodeBlockPadding, MovedBlocksLinesPart.movedCodeBlockPadding],\n                    }\n                });\n                modifiedDecorations.push({\n                    range: m.lineRangeMapping.modified.toInclusiveRange(), options: {\n                        description: 'moved',\n                        blockClassName: 'movedModified' + (m === activeMovedText ? ' currentMove' : ''),\n                        blockPadding: [4, 0, 4, 4],\n                    }\n                });\n            }\n            return { originalDecorations, modifiedDecorations };\n        });\n        this._register(new RevertButtonsFeature(_editors, _diffModel, _options, widget));\n        this._register(applyObservableDecorations(this._editors.original, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.originalDecorations) || [])));\n        this._register(applyObservableDecorations(this._editors.modified, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.modifiedDecorations) || [])));\n    }\n}\nclass RevertButtonsFeature extends Disposable {\n    constructor(_editors, _diffModel, _options, _widget) {\n        super();\n        this._editors = _editors;\n        this._diffModel = _diffModel;\n        this._options = _options;\n        this._widget = _widget;\n        const emptyArr = [];\n        const selectedDiffs = derived(this, (reader) => {\n            /** @description selectedDiffs */\n            const model = this._diffModel.read(reader);\n            const diff = model === null || model === void 0 ? void 0 : model.diff.read(reader);\n            if (!diff) {\n                return emptyArr;\n            }\n            const selections = this._editors.modifiedSelections.read(reader);\n            if (selections.every(s => s.isEmpty())) {\n                return emptyArr;\n            }\n            const lineRanges = new LineRangeSet(selections.map(s => LineRange.fromRangeInclusive(s)));\n            const mappings = diff.mappings.filter(m => m.lineRangeMapping.innerChanges && lineRanges.intersects(m.lineRangeMapping.modified));\n            const result = mappings.map(mapping => ({\n                mapping,\n                rangeMappings: mapping.lineRangeMapping.innerChanges.filter(c => selections.some(s => Range.areIntersecting(c.modifiedRange, s)))\n            }));\n            if (result.length === 0 || result.every(r => r.rangeMappings.length === 0)) {\n                return emptyArr;\n            }\n            return result;\n        });\n        this._register(autorunWithStore((reader, store) => {\n            const model = this._diffModel.read(reader);\n            const diff = model === null || model === void 0 ? void 0 : model.diff.read(reader);\n            if (!model || !diff) {\n                return;\n            }\n            const movedTextToCompare = this._diffModel.read(reader).movedTextToCompare.read(reader);\n            if (movedTextToCompare) {\n                return;\n            }\n            if (!this._options.shouldRenderRevertArrows.read(reader)) {\n                return;\n            }\n            const glyphWidgetsModified = [];\n            const selectedDiffs_ = selectedDiffs.read(reader);\n            const diffsSet = new Set(selectedDiffs_.map(d => d.mapping));\n            if (selectedDiffs_.length > 0) {\n                const selections = this._editors.modifiedSelections.read(reader);\n                const btn = new RevertButton(selections[selections.length - 1].positionLineNumber, this._widget, selectedDiffs_.flatMap(d => d.rangeMappings), true);\n                this._editors.modified.addGlyphMarginWidget(btn);\n                glyphWidgetsModified.push(btn);\n            }\n            for (const m of diff.mappings) {\n                if (diffsSet.has(m)) {\n                    continue;\n                }\n                if (!m.lineRangeMapping.modified.isEmpty && m.lineRangeMapping.innerChanges) {\n                    const btn = new RevertButton(m.lineRangeMapping.modified.startLineNumber, this._widget, m.lineRangeMapping.innerChanges, false);\n                    this._editors.modified.addGlyphMarginWidget(btn);\n                    glyphWidgetsModified.push(btn);\n                }\n            }\n            store.add(toDisposable(() => {\n                for (const w of glyphWidgetsModified) {\n                    this._editors.modified.removeGlyphMarginWidget(w);\n                }\n            }));\n        }));\n    }\n}\nclass RevertButton {\n    getId() { return this._id; }\n    constructor(_lineNumber, _widget, _diffs, _selection) {\n        this._lineNumber = _lineNumber;\n        this._widget = _widget;\n        this._diffs = _diffs;\n        this._selection = _selection;\n        this._id = `revertButton${RevertButton.counter++}`;\n        this._domNode = h('div.revertButton', {\n            title: this._selection\n                ? localize('revertSelectedChanges', 'Revert Selected Changes')\n                : localize('revertChange', 'Revert Change')\n        }, [renderIcon(Codicon.arrowRight)]).root;\n        this._domNode.onmousedown = e => {\n            // don't prevent context menu from showing up\n            if (e.button !== 2) {\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this._domNode.onmouseup = e => {\n            e.stopPropagation();\n            e.preventDefault();\n        };\n        this._domNode.onclick = (e) => {\n            this._widget.revertRangeMappings(this._diffs);\n            e.stopPropagation();\n            e.preventDefault();\n        };\n    }\n    /**\n     * Get the dom node of the glyph widget.\n     */\n    getDomNode() {\n        return this._domNode;\n    }\n    /**\n     * Get the placement of the glyph widget.\n     */\n    getPosition() {\n        return {\n            lane: GlyphMarginLane.Right,\n            range: {\n                startColumn: 1,\n                startLineNumber: this._lineNumber,\n                endColumn: 1,\n                endLineNumber: this._lineNumber,\n            },\n            zIndex: 10001,\n        };\n    }\n}\nRevertButton.counter = 0;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}