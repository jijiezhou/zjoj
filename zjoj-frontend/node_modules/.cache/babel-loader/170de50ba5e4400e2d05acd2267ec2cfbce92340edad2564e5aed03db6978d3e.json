{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../../base/common/arrays.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\n// TODO@hediet: These classes are copied from outlineModel.ts because of layering issues.\n// Because these classes just depend on the DocumentSymbolProvider (which is in the core editor),\n// they should be moved to the core editor as well.\nexport class TreeElement {\n  remove() {\n    var _a;\n    (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.delete(this.id);\n  }\n  static findId(candidate, container) {\n    // complex id-computation which contains the origin/extension,\n    // the parent path, and some dedupe logic when names collide\n    let candidateId;\n    if (typeof candidate === 'string') {\n      candidateId = `${container.id}/${candidate}`;\n    } else {\n      candidateId = `${container.id}/${candidate.name}`;\n      if (container.children.get(candidateId) !== undefined) {\n        candidateId = `${container.id}/${candidate.name}_${candidate.range.startLineNumber}_${candidate.range.startColumn}`;\n      }\n    }\n    let id = candidateId;\n    for (let i = 0; container.children.get(id) !== undefined; i++) {\n      id = `${candidateId}_${i}`;\n    }\n    return id;\n  }\n  static empty(element) {\n    return element.children.size === 0;\n  }\n}\nexport class OutlineElement extends TreeElement {\n  constructor(id, parent, symbol) {\n    super();\n    this.id = id;\n    this.parent = parent;\n    this.symbol = symbol;\n    this.children = new Map();\n  }\n}\nexport class OutlineGroup extends TreeElement {\n  constructor(id, parent, label, order) {\n    super();\n    this.id = id;\n    this.parent = parent;\n    this.label = label;\n    this.order = order;\n    this.children = new Map();\n  }\n}\nexport class OutlineModel extends TreeElement {\n  static create(registry, textModel, token) {\n    const cts = new CancellationTokenSource(token);\n    const result = new OutlineModel(textModel.uri);\n    const provider = registry.ordered(textModel);\n    const promises = provider.map((provider, index) => {\n      var _a;\n      const id = TreeElement.findId(`provider_${index}`, result);\n      const group = new OutlineGroup(id, result, (_a = provider.displayName) !== null && _a !== void 0 ? _a : 'Unknown Outline Provider', index);\n      return Promise.resolve(provider.provideDocumentSymbols(textModel, cts.token)).then(result => {\n        for (const info of result || []) {\n          OutlineModel._makeOutlineElement(info, group);\n        }\n        return group;\n      }, err => {\n        onUnexpectedExternalError(err);\n        return group;\n      }).then(group => {\n        if (!TreeElement.empty(group)) {\n          result._groups.set(id, group);\n        } else {\n          group.remove();\n        }\n      });\n    });\n    const listener = registry.onDidChange(() => {\n      const newProvider = registry.ordered(textModel);\n      if (!equals(newProvider, provider)) {\n        cts.cancel();\n      }\n    });\n    return Promise.all(promises).then(() => {\n      if (cts.token.isCancellationRequested && !token.isCancellationRequested) {\n        return OutlineModel.create(registry, textModel, token);\n      } else {\n        return result._compact();\n      }\n    }).finally(() => {\n      cts.dispose();\n      listener.dispose();\n    });\n  }\n  static _makeOutlineElement(info, container) {\n    const id = TreeElement.findId(info, container);\n    const res = new OutlineElement(id, container, info);\n    if (info.children) {\n      for (const childInfo of info.children) {\n        OutlineModel._makeOutlineElement(childInfo, res);\n      }\n    }\n    container.children.set(res.id, res);\n  }\n  constructor(uri) {\n    super();\n    this.uri = uri;\n    this.id = 'root';\n    this.parent = undefined;\n    this._groups = new Map();\n    this.children = new Map();\n    this.id = 'root';\n    this.parent = undefined;\n  }\n  _compact() {\n    let count = 0;\n    for (const [key, group] of this._groups) {\n      if (group.children.size === 0) {\n        // empty\n        this._groups.delete(key);\n      } else {\n        count += 1;\n      }\n    }\n    if (count !== 1) {\n      //\n      this.children = this._groups;\n    } else {\n      // adopt all elements of the first group\n      const group = Iterable.first(this._groups.values());\n      for (const [, child] of group.children) {\n        child.parent = this;\n        this.children.set(child.id, child);\n      }\n    }\n    return this;\n  }\n  getTopLevelSymbols() {\n    const roots = [];\n    for (const child of this.children.values()) {\n      if (child instanceof OutlineElement) {\n        roots.push(child.symbol);\n      } else {\n        roots.push(...Iterable.map(child.children.values(), child => child.symbol));\n      }\n    }\n    return roots.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n  }\n  asListOfDocumentSymbols() {\n    const roots = this.getTopLevelSymbols();\n    const bucket = [];\n    OutlineModel._flattenDocumentSymbols(bucket, roots, '');\n    return bucket.sort((a, b) => Position.compare(Range.getStartPosition(a.range), Range.getStartPosition(b.range)) || Position.compare(Range.getEndPosition(b.range), Range.getEndPosition(a.range)));\n  }\n  static _flattenDocumentSymbols(bucket, entries, overrideContainerLabel) {\n    for (const entry of entries) {\n      bucket.push({\n        kind: entry.kind,\n        tags: entry.tags,\n        name: entry.name,\n        detail: entry.detail,\n        containerName: entry.containerName || overrideContainerLabel,\n        range: entry.range,\n        selectionRange: entry.selectionRange,\n        children: undefined // we flatten it...\n      });\n      // Recurse over children\n      if (entry.children) {\n        OutlineModel._flattenDocumentSymbols(bucket, entry.children, entry.name);\n      }\n    }\n  }\n}","map":{"version":3,"names":["equals","CancellationTokenSource","onUnexpectedExternalError","Iterable","Position","Range","TreeElement","remove","_a","parent","children","delete","id","findId","candidate","container","candidateId","name","get","undefined","range","startLineNumber","startColumn","i","empty","element","size","OutlineElement","constructor","symbol","Map","OutlineGroup","label","order","OutlineModel","create","registry","textModel","token","cts","result","uri","provider","ordered","promises","map","index","group","displayName","Promise","resolve","provideDocumentSymbols","then","info","_makeOutlineElement","err","_groups","set","listener","onDidChange","newProvider","cancel","all","isCancellationRequested","_compact","finally","dispose","res","childInfo","count","key","first","values","child","getTopLevelSymbols","roots","push","sort","a","b","compareRangesUsingStarts","asListOfDocumentSymbols","bucket","_flattenDocumentSymbols","compare","getStartPosition","getEndPosition","entries","overrideContainerLabel","entry","kind","tags","detail","containerName","selectionRange"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditor/outlineModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../../base/common/arrays.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\n// TODO@hediet: These classes are copied from outlineModel.ts because of layering issues.\n// Because these classes just depend on the DocumentSymbolProvider (which is in the core editor),\n// they should be moved to the core editor as well.\nexport class TreeElement {\n    remove() {\n        var _a;\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.delete(this.id);\n    }\n    static findId(candidate, container) {\n        // complex id-computation which contains the origin/extension,\n        // the parent path, and some dedupe logic when names collide\n        let candidateId;\n        if (typeof candidate === 'string') {\n            candidateId = `${container.id}/${candidate}`;\n        }\n        else {\n            candidateId = `${container.id}/${candidate.name}`;\n            if (container.children.get(candidateId) !== undefined) {\n                candidateId = `${container.id}/${candidate.name}_${candidate.range.startLineNumber}_${candidate.range.startColumn}`;\n            }\n        }\n        let id = candidateId;\n        for (let i = 0; container.children.get(id) !== undefined; i++) {\n            id = `${candidateId}_${i}`;\n        }\n        return id;\n    }\n    static empty(element) {\n        return element.children.size === 0;\n    }\n}\nexport class OutlineElement extends TreeElement {\n    constructor(id, parent, symbol) {\n        super();\n        this.id = id;\n        this.parent = parent;\n        this.symbol = symbol;\n        this.children = new Map();\n    }\n}\nexport class OutlineGroup extends TreeElement {\n    constructor(id, parent, label, order) {\n        super();\n        this.id = id;\n        this.parent = parent;\n        this.label = label;\n        this.order = order;\n        this.children = new Map();\n    }\n}\nexport class OutlineModel extends TreeElement {\n    static create(registry, textModel, token) {\n        const cts = new CancellationTokenSource(token);\n        const result = new OutlineModel(textModel.uri);\n        const provider = registry.ordered(textModel);\n        const promises = provider.map((provider, index) => {\n            var _a;\n            const id = TreeElement.findId(`provider_${index}`, result);\n            const group = new OutlineGroup(id, result, (_a = provider.displayName) !== null && _a !== void 0 ? _a : 'Unknown Outline Provider', index);\n            return Promise.resolve(provider.provideDocumentSymbols(textModel, cts.token)).then(result => {\n                for (const info of result || []) {\n                    OutlineModel._makeOutlineElement(info, group);\n                }\n                return group;\n            }, err => {\n                onUnexpectedExternalError(err);\n                return group;\n            }).then(group => {\n                if (!TreeElement.empty(group)) {\n                    result._groups.set(id, group);\n                }\n                else {\n                    group.remove();\n                }\n            });\n        });\n        const listener = registry.onDidChange(() => {\n            const newProvider = registry.ordered(textModel);\n            if (!equals(newProvider, provider)) {\n                cts.cancel();\n            }\n        });\n        return Promise.all(promises).then(() => {\n            if (cts.token.isCancellationRequested && !token.isCancellationRequested) {\n                return OutlineModel.create(registry, textModel, token);\n            }\n            else {\n                return result._compact();\n            }\n        }).finally(() => {\n            cts.dispose();\n            listener.dispose();\n        });\n    }\n    static _makeOutlineElement(info, container) {\n        const id = TreeElement.findId(info, container);\n        const res = new OutlineElement(id, container, info);\n        if (info.children) {\n            for (const childInfo of info.children) {\n                OutlineModel._makeOutlineElement(childInfo, res);\n            }\n        }\n        container.children.set(res.id, res);\n    }\n    constructor(uri) {\n        super();\n        this.uri = uri;\n        this.id = 'root';\n        this.parent = undefined;\n        this._groups = new Map();\n        this.children = new Map();\n        this.id = 'root';\n        this.parent = undefined;\n    }\n    _compact() {\n        let count = 0;\n        for (const [key, group] of this._groups) {\n            if (group.children.size === 0) { // empty\n                this._groups.delete(key);\n            }\n            else {\n                count += 1;\n            }\n        }\n        if (count !== 1) {\n            //\n            this.children = this._groups;\n        }\n        else {\n            // adopt all elements of the first group\n            const group = Iterable.first(this._groups.values());\n            for (const [, child] of group.children) {\n                child.parent = this;\n                this.children.set(child.id, child);\n            }\n        }\n        return this;\n    }\n    getTopLevelSymbols() {\n        const roots = [];\n        for (const child of this.children.values()) {\n            if (child instanceof OutlineElement) {\n                roots.push(child.symbol);\n            }\n            else {\n                roots.push(...Iterable.map(child.children.values(), child => child.symbol));\n            }\n        }\n        return roots.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n    }\n    asListOfDocumentSymbols() {\n        const roots = this.getTopLevelSymbols();\n        const bucket = [];\n        OutlineModel._flattenDocumentSymbols(bucket, roots, '');\n        return bucket.sort((a, b) => Position.compare(Range.getStartPosition(a.range), Range.getStartPosition(b.range)) || Position.compare(Range.getEndPosition(b.range), Range.getEndPosition(a.range)));\n    }\n    static _flattenDocumentSymbols(bucket, entries, overrideContainerLabel) {\n        for (const entry of entries) {\n            bucket.push({\n                kind: entry.kind,\n                tags: entry.tags,\n                name: entry.name,\n                detail: entry.detail,\n                containerName: entry.containerName || overrideContainerLabel,\n                range: entry.range,\n                selectionRange: entry.selectionRange,\n                children: undefined, // we flatten it...\n            });\n            // Recurse over children\n            if (entry.children) {\n                OutlineModel._flattenDocumentSymbols(bucket, entry.children, entry.name);\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}