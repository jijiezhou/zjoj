{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { transaction } from '../../../../base/common/observable.js';\nimport { asyncTransaction } from '../../../../base/common/observableInternal/base.js';\nimport { EditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { showNextInlineSuggestionActionId, showPreviousInlineSuggestionActionId, inlineSuggestCommitId } from './commandIds.js';\nimport { InlineCompletionContextKeys } from './inlineCompletionContextKeys.js';\nimport { InlineCompletionsController } from './inlineCompletionsController.js';\nimport { Context as SuggestContext } from '../../suggest/browser/suggest.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId, Action2 } from '../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nexport class ShowNextInlineSuggestionAction extends EditorAction {\n  constructor() {\n    super({\n      id: ShowNextInlineSuggestionAction.ID,\n      label: nls.localize('action.inlineSuggest.showNext', \"Show Next Inline Suggestion\"),\n      alias: 'Show Next Inline Suggestion',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n      kbOpts: {\n        weight: 100,\n        primary: 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */\n      }\n    });\n  }\n  async run(accessor, editor) {\n    var _a;\n    const controller = InlineCompletionsController.get(editor);\n    (_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.next();\n  }\n}\nShowNextInlineSuggestionAction.ID = showNextInlineSuggestionActionId;\nexport class ShowPreviousInlineSuggestionAction extends EditorAction {\n  constructor() {\n    super({\n      id: ShowPreviousInlineSuggestionAction.ID,\n      label: nls.localize('action.inlineSuggest.showPrevious', \"Show Previous Inline Suggestion\"),\n      alias: 'Show Previous Inline Suggestion',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n      kbOpts: {\n        weight: 100,\n        primary: 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */\n      }\n    });\n  }\n  async run(accessor, editor) {\n    var _a;\n    const controller = InlineCompletionsController.get(editor);\n    (_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.previous();\n  }\n}\nShowPreviousInlineSuggestionAction.ID = showPreviousInlineSuggestionActionId;\nexport class TriggerInlineSuggestionAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.inlineSuggest.trigger',\n      label: nls.localize('action.inlineSuggest.trigger', \"Trigger Inline Suggestion\"),\n      alias: 'Trigger Inline Suggestion',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineCompletionsController.get(editor);\n    await asyncTransaction(async tx => {\n      var _a;\n      /** @description triggerExplicitly from command */\n      await ((_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.triggerExplicitly(tx));\n      controller === null || controller === void 0 ? void 0 : controller.playAudioCue(tx);\n    });\n  }\n}\nexport class AcceptNextWordOfInlineCompletion extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.inlineSuggest.acceptNextWord',\n      label: nls.localize('action.inlineSuggest.acceptNextWord', \"Accept Next Word Of Inline Suggestion\"),\n      alias: 'Accept Next Word Of Inline Suggestion',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */,\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible)\n      },\n      menuOpts: [{\n        menuId: MenuId.InlineSuggestionToolbar,\n        title: nls.localize('acceptWord', 'Accept Word'),\n        group: 'primary',\n        order: 2\n      }]\n    });\n  }\n  async run(accessor, editor) {\n    var _a;\n    const controller = InlineCompletionsController.get(editor);\n    await ((_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.acceptNextWord(controller.editor));\n  }\n}\nexport class AcceptNextLineOfInlineCompletion extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.inlineSuggest.acceptNextLine',\n      label: nls.localize('action.inlineSuggest.acceptNextLine', \"Accept Next Line Of Inline Suggestion\"),\n      alias: 'Accept Next Line Of Inline Suggestion',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 1\n      },\n      menuOpts: [{\n        menuId: MenuId.InlineSuggestionToolbar,\n        title: nls.localize('acceptLine', 'Accept Line'),\n        group: 'secondary',\n        order: 2\n      }]\n    });\n  }\n  async run(accessor, editor) {\n    var _a;\n    const controller = InlineCompletionsController.get(editor);\n    await ((_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.acceptNextLine(controller.editor));\n  }\n}\nexport class AcceptInlineCompletion extends EditorAction {\n  constructor() {\n    super({\n      id: inlineSuggestCommitId,\n      label: nls.localize('action.inlineSuggest.accept', \"Accept Inline Suggestion\"),\n      alias: 'Accept Inline Suggestion',\n      precondition: InlineCompletionContextKeys.inlineSuggestionVisible,\n      menuOpts: [{\n        menuId: MenuId.InlineSuggestionToolbar,\n        title: nls.localize('accept', \"Accept\"),\n        group: 'primary',\n        order: 1\n      }],\n      kbOpts: {\n        primary: 2 /* KeyCode.Tab */,\n        weight: 200,\n        kbExpr: ContextKeyExpr.and(InlineCompletionContextKeys.inlineSuggestionVisible, EditorContextKeys.tabMovesFocus.toNegated(), InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize, SuggestContext.Visible.toNegated(), EditorContextKeys.hoverFocused.toNegated())\n      }\n    });\n  }\n  async run(accessor, editor) {\n    var _a;\n    const controller = InlineCompletionsController.get(editor);\n    if (controller) {\n      (_a = controller.model.get()) === null || _a === void 0 ? void 0 : _a.accept(controller.editor);\n      controller.editor.focus();\n    }\n  }\n}\nexport class HideInlineCompletion extends EditorAction {\n  constructor() {\n    super({\n      id: HideInlineCompletion.ID,\n      label: nls.localize('action.inlineSuggest.hide', \"Hide Inline Suggestion\"),\n      alias: 'Hide Inline Suggestion',\n      precondition: InlineCompletionContextKeys.inlineSuggestionVisible,\n      kbOpts: {\n        weight: 100,\n        primary: 9 /* KeyCode.Escape */\n      }\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineCompletionsController.get(editor);\n    transaction(tx => {\n      var _a;\n      (_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.stop(tx);\n    });\n  }\n}\nHideInlineCompletion.ID = 'editor.action.inlineSuggest.hide';\nexport class ToggleAlwaysShowInlineSuggestionToolbar extends Action2 {\n  constructor() {\n    super({\n      id: ToggleAlwaysShowInlineSuggestionToolbar.ID,\n      title: nls.localize('action.inlineSuggest.alwaysShowToolbar', \"Always Show Toolbar\"),\n      f1: false,\n      precondition: undefined,\n      menu: [{\n        id: MenuId.InlineSuggestionToolbar,\n        group: 'secondary',\n        order: 10\n      }],\n      toggled: ContextKeyExpr.equals('config.editor.inlineSuggest.showToolbar', 'always')\n    });\n  }\n  async run(accessor, editor) {\n    const configService = accessor.get(IConfigurationService);\n    const currentValue = configService.getValue('editor.inlineSuggest.showToolbar');\n    const newValue = currentValue === 'always' ? 'onHover' : 'always';\n    configService.updateValue('editor.inlineSuggest.showToolbar', newValue);\n  }\n}\nToggleAlwaysShowInlineSuggestionToolbar.ID = 'editor.action.inlineSuggest.toggleAlwaysShowToolbar';","map":{"version":3,"names":["transaction","asyncTransaction","EditorAction","EditorContextKeys","showNextInlineSuggestionActionId","showPreviousInlineSuggestionActionId","inlineSuggestCommitId","InlineCompletionContextKeys","InlineCompletionsController","Context","SuggestContext","nls","MenuId","Action2","IConfigurationService","ContextKeyExpr","ShowNextInlineSuggestionAction","constructor","id","ID","label","localize","alias","precondition","and","writable","inlineSuggestionVisible","kbOpts","weight","primary","run","accessor","editor","_a","controller","get","model","next","ShowPreviousInlineSuggestionAction","previous","TriggerInlineSuggestionAction","tx","triggerExplicitly","playAudioCue","AcceptNextWordOfInlineCompletion","kbExpr","menuOpts","menuId","InlineSuggestionToolbar","title","group","order","acceptNextWord","AcceptNextLineOfInlineCompletion","acceptNextLine","AcceptInlineCompletion","tabMovesFocus","toNegated","inlineSuggestionHasIndentationLessThanTabSize","Visible","hoverFocused","accept","focus","HideInlineCompletion","stop","ToggleAlwaysShowInlineSuggestionToolbar","f1","undefined","menu","toggled","equals","configService","currentValue","getValue","newValue","updateValue"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/commands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { transaction } from '../../../../base/common/observable.js';\nimport { asyncTransaction } from '../../../../base/common/observableInternal/base.js';\nimport { EditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { showNextInlineSuggestionActionId, showPreviousInlineSuggestionActionId, inlineSuggestCommitId } from './commandIds.js';\nimport { InlineCompletionContextKeys } from './inlineCompletionContextKeys.js';\nimport { InlineCompletionsController } from './inlineCompletionsController.js';\nimport { Context as SuggestContext } from '../../suggest/browser/suggest.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId, Action2 } from '../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nexport class ShowNextInlineSuggestionAction extends EditorAction {\n    constructor() {\n        super({\n            id: ShowNextInlineSuggestionAction.ID,\n            label: nls.localize('action.inlineSuggest.showNext', \"Show Next Inline Suggestion\"),\n            alias: 'Show Next Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100,\n                primary: 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */,\n            },\n        });\n    }\n    async run(accessor, editor) {\n        var _a;\n        const controller = InlineCompletionsController.get(editor);\n        (_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.next();\n    }\n}\nShowNextInlineSuggestionAction.ID = showNextInlineSuggestionActionId;\nexport class ShowPreviousInlineSuggestionAction extends EditorAction {\n    constructor() {\n        super({\n            id: ShowPreviousInlineSuggestionAction.ID,\n            label: nls.localize('action.inlineSuggest.showPrevious', \"Show Previous Inline Suggestion\"),\n            alias: 'Show Previous Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100,\n                primary: 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */,\n            },\n        });\n    }\n    async run(accessor, editor) {\n        var _a;\n        const controller = InlineCompletionsController.get(editor);\n        (_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.previous();\n    }\n}\nShowPreviousInlineSuggestionAction.ID = showPreviousInlineSuggestionActionId;\nexport class TriggerInlineSuggestionAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineSuggest.trigger',\n            label: nls.localize('action.inlineSuggest.trigger', \"Trigger Inline Suggestion\"),\n            alias: 'Trigger Inline Suggestion',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineCompletionsController.get(editor);\n        await asyncTransaction(async (tx) => {\n            var _a;\n            /** @description triggerExplicitly from command */\n            await ((_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.triggerExplicitly(tx));\n            controller === null || controller === void 0 ? void 0 : controller.playAudioCue(tx);\n        });\n    }\n}\nexport class AcceptNextWordOfInlineCompletion extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineSuggest.acceptNextWord',\n            label: nls.localize('action.inlineSuggest.acceptNextWord', \"Accept Next Word Of Inline Suggestion\"),\n            alias: 'Accept Next Word Of Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */,\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            },\n            menuOpts: [{\n                    menuId: MenuId.InlineSuggestionToolbar,\n                    title: nls.localize('acceptWord', 'Accept Word'),\n                    group: 'primary',\n                    order: 2,\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        var _a;\n        const controller = InlineCompletionsController.get(editor);\n        await ((_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.acceptNextWord(controller.editor));\n    }\n}\nexport class AcceptNextLineOfInlineCompletion extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineSuggest.acceptNextLine',\n            label: nls.localize('action.inlineSuggest.acceptNextLine', \"Accept Next Line Of Inline Suggestion\"),\n            alias: 'Accept Next Line Of Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n            },\n            menuOpts: [{\n                    menuId: MenuId.InlineSuggestionToolbar,\n                    title: nls.localize('acceptLine', 'Accept Line'),\n                    group: 'secondary',\n                    order: 2,\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        var _a;\n        const controller = InlineCompletionsController.get(editor);\n        await ((_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.acceptNextLine(controller.editor));\n    }\n}\nexport class AcceptInlineCompletion extends EditorAction {\n    constructor() {\n        super({\n            id: inlineSuggestCommitId,\n            label: nls.localize('action.inlineSuggest.accept', \"Accept Inline Suggestion\"),\n            alias: 'Accept Inline Suggestion',\n            precondition: InlineCompletionContextKeys.inlineSuggestionVisible,\n            menuOpts: [{\n                    menuId: MenuId.InlineSuggestionToolbar,\n                    title: nls.localize('accept', \"Accept\"),\n                    group: 'primary',\n                    order: 1,\n                }],\n            kbOpts: {\n                primary: 2 /* KeyCode.Tab */,\n                weight: 200,\n                kbExpr: ContextKeyExpr.and(InlineCompletionContextKeys.inlineSuggestionVisible, EditorContextKeys.tabMovesFocus.toNegated(), InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize, SuggestContext.Visible.toNegated(), EditorContextKeys.hoverFocused.toNegated()),\n            }\n        });\n    }\n    async run(accessor, editor) {\n        var _a;\n        const controller = InlineCompletionsController.get(editor);\n        if (controller) {\n            (_a = controller.model.get()) === null || _a === void 0 ? void 0 : _a.accept(controller.editor);\n            controller.editor.focus();\n        }\n    }\n}\nexport class HideInlineCompletion extends EditorAction {\n    constructor() {\n        super({\n            id: HideInlineCompletion.ID,\n            label: nls.localize('action.inlineSuggest.hide', \"Hide Inline Suggestion\"),\n            alias: 'Hide Inline Suggestion',\n            precondition: InlineCompletionContextKeys.inlineSuggestionVisible,\n            kbOpts: {\n                weight: 100,\n                primary: 9 /* KeyCode.Escape */,\n            }\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineCompletionsController.get(editor);\n        transaction(tx => {\n            var _a;\n            (_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.stop(tx);\n        });\n    }\n}\nHideInlineCompletion.ID = 'editor.action.inlineSuggest.hide';\nexport class ToggleAlwaysShowInlineSuggestionToolbar extends Action2 {\n    constructor() {\n        super({\n            id: ToggleAlwaysShowInlineSuggestionToolbar.ID,\n            title: nls.localize('action.inlineSuggest.alwaysShowToolbar', \"Always Show Toolbar\"),\n            f1: false,\n            precondition: undefined,\n            menu: [{\n                    id: MenuId.InlineSuggestionToolbar,\n                    group: 'secondary',\n                    order: 10,\n                }],\n            toggled: ContextKeyExpr.equals('config.editor.inlineSuggest.showToolbar', 'always')\n        });\n    }\n    async run(accessor, editor) {\n        const configService = accessor.get(IConfigurationService);\n        const currentValue = configService.getValue('editor.inlineSuggest.showToolbar');\n        const newValue = currentValue === 'always' ? 'onHover' : 'always';\n        configService.updateValue('editor.inlineSuggest.showToolbar', newValue);\n    }\n}\nToggleAlwaysShowInlineSuggestionToolbar.ID = 'editor.action.inlineSuggest.toggleAlwaysShowToolbar';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}