{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { autorun } from '../../../../base/common/observable.js';\nimport { firstNonWhitespaceIndex } from '../../../../base/common/strings.js';\nimport { CursorColumns } from '../../../common/core/cursorColumns.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../nls.js';\nexport class InlineCompletionContextKeys extends Disposable {\n  constructor(contextKeyService, model) {\n    super();\n    this.contextKeyService = contextKeyService;\n    this.model = model;\n    this.inlineCompletionVisible = InlineCompletionContextKeys.inlineSuggestionVisible.bindTo(this.contextKeyService);\n    this.inlineCompletionSuggestsIndentation = InlineCompletionContextKeys.inlineSuggestionHasIndentation.bindTo(this.contextKeyService);\n    this.inlineCompletionSuggestsIndentationLessThanTabSize = InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService);\n    this.suppressSuggestions = InlineCompletionContextKeys.suppressSuggestions.bindTo(this.contextKeyService);\n    this._register(autorun(reader => {\n      /** @description update context key: inlineCompletionVisible, suppressSuggestions */\n      const model = this.model.read(reader);\n      const state = model === null || model === void 0 ? void 0 : model.state.read(reader);\n      const isInlineCompletionVisible = !!(state === null || state === void 0 ? void 0 : state.inlineCompletion) && (state === null || state === void 0 ? void 0 : state.ghostText) !== undefined && !(state === null || state === void 0 ? void 0 : state.ghostText.isEmpty());\n      this.inlineCompletionVisible.set(isInlineCompletionVisible);\n      if ((state === null || state === void 0 ? void 0 : state.ghostText) && (state === null || state === void 0 ? void 0 : state.inlineCompletion)) {\n        this.suppressSuggestions.set(state.inlineCompletion.inlineCompletion.source.inlineCompletions.suppressSuggestions);\n      }\n    }));\n    this._register(autorun(reader => {\n      /** @description update context key: inlineCompletionSuggestsIndentation, inlineCompletionSuggestsIndentationLessThanTabSize */\n      const model = this.model.read(reader);\n      let startsWithIndentation = false;\n      let startsWithIndentationLessThanTabSize = true;\n      const ghostText = model === null || model === void 0 ? void 0 : model.ghostText.read(reader);\n      if (!!(model === null || model === void 0 ? void 0 : model.selectedSuggestItem) && ghostText && ghostText.parts.length > 0) {\n        const {\n          column,\n          lines\n        } = ghostText.parts[0];\n        const firstLine = lines[0];\n        const indentationEndColumn = model.textModel.getLineIndentColumn(ghostText.lineNumber);\n        const inIndentation = column <= indentationEndColumn;\n        if (inIndentation) {\n          let firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n          if (firstNonWsIdx === -1) {\n            firstNonWsIdx = firstLine.length - 1;\n          }\n          startsWithIndentation = firstNonWsIdx > 0;\n          const tabSize = model.textModel.getOptions().tabSize;\n          const visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n          startsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n        }\n      }\n      this.inlineCompletionSuggestsIndentation.set(startsWithIndentation);\n      this.inlineCompletionSuggestsIndentationLessThanTabSize.set(startsWithIndentationLessThanTabSize);\n    }));\n  }\n}\nInlineCompletionContextKeys.inlineSuggestionVisible = new RawContextKey('inlineSuggestionVisible', false, localize('inlineSuggestionVisible', \"Whether an inline suggestion is visible\"));\nInlineCompletionContextKeys.inlineSuggestionHasIndentation = new RawContextKey('inlineSuggestionHasIndentation', false, localize('inlineSuggestionHasIndentation', \"Whether the inline suggestion starts with whitespace\"));\nInlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey('inlineSuggestionHasIndentationLessThanTabSize', true, localize('inlineSuggestionHasIndentationLessThanTabSize', \"Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab\"));\nInlineCompletionContextKeys.suppressSuggestions = new RawContextKey('inlineSuggestionSuppressSuggestions', undefined, localize('suppressSuggestions', \"Whether suggestions should be suppressed for the current suggestion\"));","map":{"version":3,"names":["autorun","firstNonWhitespaceIndex","CursorColumns","RawContextKey","Disposable","localize","InlineCompletionContextKeys","constructor","contextKeyService","model","inlineCompletionVisible","inlineSuggestionVisible","bindTo","inlineCompletionSuggestsIndentation","inlineSuggestionHasIndentation","inlineCompletionSuggestsIndentationLessThanTabSize","inlineSuggestionHasIndentationLessThanTabSize","suppressSuggestions","_register","reader","read","state","isInlineCompletionVisible","inlineCompletion","ghostText","undefined","isEmpty","set","source","inlineCompletions","startsWithIndentation","startsWithIndentationLessThanTabSize","selectedSuggestItem","parts","length","column","lines","firstLine","indentationEndColumn","textModel","getLineIndentColumn","lineNumber","inIndentation","firstNonWsIdx","tabSize","getOptions","visibleColumnIndentation","visibleColumnFromColumn"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletionContextKeys.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { autorun } from '../../../../base/common/observable.js';\nimport { firstNonWhitespaceIndex } from '../../../../base/common/strings.js';\nimport { CursorColumns } from '../../../common/core/cursorColumns.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../nls.js';\nexport class InlineCompletionContextKeys extends Disposable {\n    constructor(contextKeyService, model) {\n        super();\n        this.contextKeyService = contextKeyService;\n        this.model = model;\n        this.inlineCompletionVisible = InlineCompletionContextKeys.inlineSuggestionVisible.bindTo(this.contextKeyService);\n        this.inlineCompletionSuggestsIndentation = InlineCompletionContextKeys.inlineSuggestionHasIndentation.bindTo(this.contextKeyService);\n        this.inlineCompletionSuggestsIndentationLessThanTabSize = InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService);\n        this.suppressSuggestions = InlineCompletionContextKeys.suppressSuggestions.bindTo(this.contextKeyService);\n        this._register(autorun(reader => {\n            /** @description update context key: inlineCompletionVisible, suppressSuggestions */\n            const model = this.model.read(reader);\n            const state = model === null || model === void 0 ? void 0 : model.state.read(reader);\n            const isInlineCompletionVisible = !!(state === null || state === void 0 ? void 0 : state.inlineCompletion) && (state === null || state === void 0 ? void 0 : state.ghostText) !== undefined && !(state === null || state === void 0 ? void 0 : state.ghostText.isEmpty());\n            this.inlineCompletionVisible.set(isInlineCompletionVisible);\n            if ((state === null || state === void 0 ? void 0 : state.ghostText) && (state === null || state === void 0 ? void 0 : state.inlineCompletion)) {\n                this.suppressSuggestions.set(state.inlineCompletion.inlineCompletion.source.inlineCompletions.suppressSuggestions);\n            }\n        }));\n        this._register(autorun(reader => {\n            /** @description update context key: inlineCompletionSuggestsIndentation, inlineCompletionSuggestsIndentationLessThanTabSize */\n            const model = this.model.read(reader);\n            let startsWithIndentation = false;\n            let startsWithIndentationLessThanTabSize = true;\n            const ghostText = model === null || model === void 0 ? void 0 : model.ghostText.read(reader);\n            if (!!(model === null || model === void 0 ? void 0 : model.selectedSuggestItem) && ghostText && ghostText.parts.length > 0) {\n                const { column, lines } = ghostText.parts[0];\n                const firstLine = lines[0];\n                const indentationEndColumn = model.textModel.getLineIndentColumn(ghostText.lineNumber);\n                const inIndentation = column <= indentationEndColumn;\n                if (inIndentation) {\n                    let firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n                    if (firstNonWsIdx === -1) {\n                        firstNonWsIdx = firstLine.length - 1;\n                    }\n                    startsWithIndentation = firstNonWsIdx > 0;\n                    const tabSize = model.textModel.getOptions().tabSize;\n                    const visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n                    startsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n                }\n            }\n            this.inlineCompletionSuggestsIndentation.set(startsWithIndentation);\n            this.inlineCompletionSuggestsIndentationLessThanTabSize.set(startsWithIndentationLessThanTabSize);\n        }));\n    }\n}\nInlineCompletionContextKeys.inlineSuggestionVisible = new RawContextKey('inlineSuggestionVisible', false, localize('inlineSuggestionVisible', \"Whether an inline suggestion is visible\"));\nInlineCompletionContextKeys.inlineSuggestionHasIndentation = new RawContextKey('inlineSuggestionHasIndentation', false, localize('inlineSuggestionHasIndentation', \"Whether the inline suggestion starts with whitespace\"));\nInlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey('inlineSuggestionHasIndentationLessThanTabSize', true, localize('inlineSuggestionHasIndentationLessThanTabSize', \"Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab\"));\nInlineCompletionContextKeys.suppressSuggestions = new RawContextKey('inlineSuggestionSuppressSuggestions', undefined, localize('suppressSuggestions', \"Whether suggestions should be suppressed for the current suggestion\"));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}