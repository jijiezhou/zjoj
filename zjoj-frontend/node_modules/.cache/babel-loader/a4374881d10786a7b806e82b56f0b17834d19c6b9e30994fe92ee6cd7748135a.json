{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('vfile').Value} Value\n */\n\n/**\n * @typedef Point\n *   unist point, where `line` and `column` can be `undefined`.\n * @property {number | undefined} line\n *   Line.\n * @property {number | undefined} column\n *   Column.\n * @property {number | undefined} [offset]\n *   Offset.\n *\n * @typedef PointLike\n *   unist point, allowed as input.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @callback ToPoint\n *   Get a line/column-based `point` from `offset`.\n * @param {number | null | undefined} [offset]\n *   Something that should be an `offset.\n * @returns {Point}\n *   Point, line/column are undefined for invalid or out of bounds input.\n *\n * @callback ToOffset\n *   Get an offset from a line/column-based `point`.\n * @param {Point | null | undefined} [point]\n *   Something that should be a `point.\n * @returns {number}\n *   Offset or `-1` for invalid or out of bounds input.\n *\n * @typedef Location\n *   Accessors for index.\n * @property {ToPoint} toPoint\n *   Get a line/column-based `point` from `offset`.\n * @property {ToOffset} toOffset\n *   Get an offset from a line/column-based `point`.\n */\n\n/**\n * Index the given document so you can translate between line/column and offset\n * based positional info.\n *\n * @param {VFile | Value} file\n *   File to index.\n * @returns {Location}\n *   Accessors for index.\n */\nexport function location(file) {\n  const value = String(file);\n  /** @type {Array<number>} */\n  const indices = [];\n  const search = /\\r?\\n|\\r/g;\n  while (search.test(value)) {\n    indices.push(search.lastIndex);\n  }\n  indices.push(value.length + 1);\n  return {\n    toPoint,\n    toOffset\n  };\n\n  /** @type {ToPoint} */\n  function toPoint(offset) {\n    let index = -1;\n    if (typeof offset === 'number' && offset > -1 && offset < indices[indices.length - 1]) {\n      while (++index < indices.length) {\n        if (indices[index] > offset) {\n          return {\n            line: index + 1,\n            column: offset - (index > 0 ? indices[index - 1] : 0) + 1,\n            offset\n          };\n        }\n      }\n    }\n    return {\n      line: undefined,\n      column: undefined,\n      offset: undefined\n    };\n  }\n\n  /** @type {ToOffset} */\n  function toOffset(point) {\n    const line = point && point.line;\n    const column = point && point.column;\n    if (typeof line === 'number' && typeof column === 'number' && !Number.isNaN(line) && !Number.isNaN(column) && line - 1 in indices) {\n      const offset = (indices[line - 2] || 0) + column - 1 || 0;\n      if (offset > -1 && offset < indices[indices.length - 1]) {\n        return offset;\n      }\n    }\n    return -1;\n  }\n}","map":{"version":3,"names":["location","file","value","String","indices","search","test","push","lastIndex","length","toPoint","toOffset","offset","index","line","column","undefined","point","Number","isNaN"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/vfile-location/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('vfile').Value} Value\n */\n\n/**\n * @typedef Point\n *   unist point, where `line` and `column` can be `undefined`.\n * @property {number | undefined} line\n *   Line.\n * @property {number | undefined} column\n *   Column.\n * @property {number | undefined} [offset]\n *   Offset.\n *\n * @typedef PointLike\n *   unist point, allowed as input.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @callback ToPoint\n *   Get a line/column-based `point` from `offset`.\n * @param {number | null | undefined} [offset]\n *   Something that should be an `offset.\n * @returns {Point}\n *   Point, line/column are undefined for invalid or out of bounds input.\n *\n * @callback ToOffset\n *   Get an offset from a line/column-based `point`.\n * @param {Point | null | undefined} [point]\n *   Something that should be a `point.\n * @returns {number}\n *   Offset or `-1` for invalid or out of bounds input.\n *\n * @typedef Location\n *   Accessors for index.\n * @property {ToPoint} toPoint\n *   Get a line/column-based `point` from `offset`.\n * @property {ToOffset} toOffset\n *   Get an offset from a line/column-based `point`.\n */\n\n/**\n * Index the given document so you can translate between line/column and offset\n * based positional info.\n *\n * @param {VFile | Value} file\n *   File to index.\n * @returns {Location}\n *   Accessors for index.\n */\nexport function location(file) {\n  const value = String(file)\n  /** @type {Array<number>} */\n  const indices = []\n  const search = /\\r?\\n|\\r/g\n\n  while (search.test(value)) {\n    indices.push(search.lastIndex)\n  }\n\n  indices.push(value.length + 1)\n\n  return {toPoint, toOffset}\n\n  /** @type {ToPoint} */\n  function toPoint(offset) {\n    let index = -1\n\n    if (\n      typeof offset === 'number' &&\n      offset > -1 &&\n      offset < indices[indices.length - 1]\n    ) {\n      while (++index < indices.length) {\n        if (indices[index] > offset) {\n          return {\n            line: index + 1,\n            column: offset - (index > 0 ? indices[index - 1] : 0) + 1,\n            offset\n          }\n        }\n      }\n    }\n\n    return {line: undefined, column: undefined, offset: undefined}\n  }\n\n  /** @type {ToOffset} */\n  function toOffset(point) {\n    const line = point && point.line\n    const column = point && point.column\n\n    if (\n      typeof line === 'number' &&\n      typeof column === 'number' &&\n      !Number.isNaN(line) &&\n      !Number.isNaN(column) &&\n      line - 1 in indices\n    ) {\n      const offset = (indices[line - 2] || 0) + column - 1 || 0\n\n      if (offset > -1 && offset < indices[indices.length - 1]) {\n        return offset\n      }\n    }\n\n    return -1\n  }\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAQA,CAACC,IAAI,EAAE;EAC7B,MAAMC,KAAK,GAAGC,MAAM,CAACF,IAAI,CAAC;EAC1B;EACA,MAAMG,OAAO,GAAG,EAAE;EAClB,MAAMC,MAAM,GAAG,WAAW;EAE1B,OAAOA,MAAM,CAACC,IAAI,CAACJ,KAAK,CAAC,EAAE;IACzBE,OAAO,CAACG,IAAI,CAACF,MAAM,CAACG,SAAS,CAAC;EAChC;EAEAJ,OAAO,CAACG,IAAI,CAACL,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC;EAE9B,OAAO;IAACC,OAAO;IAAEC;EAAQ,CAAC;;EAE1B;EACA,SAASD,OAAOA,CAACE,MAAM,EAAE;IACvB,IAAIC,KAAK,GAAG,CAAC,CAAC;IAEd,IACE,OAAOD,MAAM,KAAK,QAAQ,IAC1BA,MAAM,GAAG,CAAC,CAAC,IACXA,MAAM,GAAGR,OAAO,CAACA,OAAO,CAACK,MAAM,GAAG,CAAC,CAAC,EACpC;MACA,OAAO,EAAEI,KAAK,GAAGT,OAAO,CAACK,MAAM,EAAE;QAC/B,IAAIL,OAAO,CAACS,KAAK,CAAC,GAAGD,MAAM,EAAE;UAC3B,OAAO;YACLE,IAAI,EAAED,KAAK,GAAG,CAAC;YACfE,MAAM,EAAEH,MAAM,IAAIC,KAAK,GAAG,CAAC,GAAGT,OAAO,CAACS,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;YACzDD;UACF,CAAC;QACH;MACF;IACF;IAEA,OAAO;MAACE,IAAI,EAAEE,SAAS;MAAED,MAAM,EAAEC,SAAS;MAAEJ,MAAM,EAAEI;IAAS,CAAC;EAChE;;EAEA;EACA,SAASL,QAAQA,CAACM,KAAK,EAAE;IACvB,MAAMH,IAAI,GAAGG,KAAK,IAAIA,KAAK,CAACH,IAAI;IAChC,MAAMC,MAAM,GAAGE,KAAK,IAAIA,KAAK,CAACF,MAAM;IAEpC,IACE,OAAOD,IAAI,KAAK,QAAQ,IACxB,OAAOC,MAAM,KAAK,QAAQ,IAC1B,CAACG,MAAM,CAACC,KAAK,CAACL,IAAI,CAAC,IACnB,CAACI,MAAM,CAACC,KAAK,CAACJ,MAAM,CAAC,IACrBD,IAAI,GAAG,CAAC,IAAIV,OAAO,EACnB;MACA,MAAMQ,MAAM,GAAG,CAACR,OAAO,CAACU,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAIC,MAAM,GAAG,CAAC,IAAI,CAAC;MAEzD,IAAIH,MAAM,GAAG,CAAC,CAAC,IAAIA,MAAM,GAAGR,OAAO,CAACA,OAAO,CAACK,MAAM,GAAG,CAAC,CAAC,EAAE;QACvD,OAAOG,MAAM;MACf;IACF;IAEA,OAAO,CAAC,CAAC;EACX;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}