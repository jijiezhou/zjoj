{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { PageCoordinates } from '../editorDom.js';\nimport { PartFingerprints } from '../view/viewPart.js';\nimport { ViewLine } from '../viewParts/lines/viewLine.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range as EditorRange } from '../../common/core/range.js';\nimport { CursorColumns } from '../../common/core/cursorColumns.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { AtomicTabMoveOperations } from '../../common/cursor/cursorAtomicMoveOperations.js';\nclass UnknownHitTestResult {\n  constructor(hitTarget = null) {\n    this.hitTarget = hitTarget;\n    this.type = 0 /* HitTestResultType.Unknown */;\n  }\n}\nclass ContentHitTestResult {\n  constructor(position, spanNode, injectedText) {\n    this.position = position;\n    this.spanNode = spanNode;\n    this.injectedText = injectedText;\n    this.type = 1 /* HitTestResultType.Content */;\n  }\n}\nvar HitTestResult;\n(function (HitTestResult) {\n  function createFromDOMInfo(ctx, spanNode, offset) {\n    const position = ctx.getPositionFromDOMInfo(spanNode, offset);\n    if (position) {\n      return new ContentHitTestResult(position, spanNode, null);\n    }\n    return new UnknownHitTestResult(spanNode);\n  }\n  HitTestResult.createFromDOMInfo = createFromDOMInfo;\n})(HitTestResult || (HitTestResult = {}));\nexport class PointerHandlerLastRenderData {\n  constructor(lastViewCursorsRenderData, lastTextareaPosition) {\n    this.lastViewCursorsRenderData = lastViewCursorsRenderData;\n    this.lastTextareaPosition = lastTextareaPosition;\n  }\n}\nexport class MouseTarget {\n  static _deduceRage(position, range = null) {\n    if (!range && position) {\n      return new EditorRange(position.lineNumber, position.column, position.lineNumber, position.column);\n    }\n    return range !== null && range !== void 0 ? range : null;\n  }\n  static createUnknown(element, mouseColumn, position) {\n    return {\n      type: 0 /* MouseTargetType.UNKNOWN */,\n      element,\n      mouseColumn,\n      position,\n      range: this._deduceRage(position)\n    };\n  }\n  static createTextarea(element, mouseColumn) {\n    return {\n      type: 1 /* MouseTargetType.TEXTAREA */,\n      element,\n      mouseColumn,\n      position: null,\n      range: null\n    };\n  }\n  static createMargin(type, element, mouseColumn, position, range, detail) {\n    return {\n      type,\n      element,\n      mouseColumn,\n      position,\n      range,\n      detail\n    };\n  }\n  static createViewZone(type, element, mouseColumn, position, detail) {\n    return {\n      type,\n      element,\n      mouseColumn,\n      position,\n      range: this._deduceRage(position),\n      detail\n    };\n  }\n  static createContentText(element, mouseColumn, position, range, detail) {\n    return {\n      type: 6 /* MouseTargetType.CONTENT_TEXT */,\n      element,\n      mouseColumn,\n      position,\n      range: this._deduceRage(position, range),\n      detail\n    };\n  }\n  static createContentEmpty(element, mouseColumn, position, detail) {\n    return {\n      type: 7 /* MouseTargetType.CONTENT_EMPTY */,\n      element,\n      mouseColumn,\n      position,\n      range: this._deduceRage(position),\n      detail\n    };\n  }\n  static createContentWidget(element, mouseColumn, detail) {\n    return {\n      type: 9 /* MouseTargetType.CONTENT_WIDGET */,\n      element,\n      mouseColumn,\n      position: null,\n      range: null,\n      detail\n    };\n  }\n  static createScrollbar(element, mouseColumn, position) {\n    return {\n      type: 11 /* MouseTargetType.SCROLLBAR */,\n      element,\n      mouseColumn,\n      position,\n      range: this._deduceRage(position)\n    };\n  }\n  static createOverlayWidget(element, mouseColumn, detail) {\n    return {\n      type: 12 /* MouseTargetType.OVERLAY_WIDGET */,\n      element,\n      mouseColumn,\n      position: null,\n      range: null,\n      detail\n    };\n  }\n  static createOutsideEditor(mouseColumn, position, outsidePosition, outsideDistance) {\n    return {\n      type: 13 /* MouseTargetType.OUTSIDE_EDITOR */,\n      element: null,\n      mouseColumn,\n      position,\n      range: this._deduceRage(position),\n      outsidePosition,\n      outsideDistance\n    };\n  }\n  static _typeToString(type) {\n    if (type === 1 /* MouseTargetType.TEXTAREA */) {\n      return 'TEXTAREA';\n    }\n    if (type === 2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */) {\n      return 'GUTTER_GLYPH_MARGIN';\n    }\n    if (type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */) {\n      return 'GUTTER_LINE_NUMBERS';\n    }\n    if (type === 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */) {\n      return 'GUTTER_LINE_DECORATIONS';\n    }\n    if (type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */) {\n      return 'GUTTER_VIEW_ZONE';\n    }\n    if (type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n      return 'CONTENT_TEXT';\n    }\n    if (type === 7 /* MouseTargetType.CONTENT_EMPTY */) {\n      return 'CONTENT_EMPTY';\n    }\n    if (type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */) {\n      return 'CONTENT_VIEW_ZONE';\n    }\n    if (type === 9 /* MouseTargetType.CONTENT_WIDGET */) {\n      return 'CONTENT_WIDGET';\n    }\n    if (type === 10 /* MouseTargetType.OVERVIEW_RULER */) {\n      return 'OVERVIEW_RULER';\n    }\n    if (type === 11 /* MouseTargetType.SCROLLBAR */) {\n      return 'SCROLLBAR';\n    }\n    if (type === 12 /* MouseTargetType.OVERLAY_WIDGET */) {\n      return 'OVERLAY_WIDGET';\n    }\n    return 'UNKNOWN';\n  }\n  static toString(target) {\n    return this._typeToString(target.type) + ': ' + target.position + ' - ' + target.range + ' - ' + JSON.stringify(target.detail);\n  }\n}\nclass ElementPath {\n  static isTextArea(path) {\n    return path.length === 2 && path[0] === 3 /* PartFingerprint.OverflowGuard */ && path[1] === 6 /* PartFingerprint.TextArea */;\n  }\n  static isChildOfViewLines(path) {\n    return path.length >= 4 && path[0] === 3 /* PartFingerprint.OverflowGuard */ && path[3] === 7 /* PartFingerprint.ViewLines */;\n  }\n  static isStrictChildOfViewLines(path) {\n    return path.length > 4 && path[0] === 3 /* PartFingerprint.OverflowGuard */ && path[3] === 7 /* PartFingerprint.ViewLines */;\n  }\n  static isChildOfScrollableElement(path) {\n    return path.length >= 2 && path[0] === 3 /* PartFingerprint.OverflowGuard */ && path[1] === 5 /* PartFingerprint.ScrollableElement */;\n  }\n  static isChildOfMinimap(path) {\n    return path.length >= 2 && path[0] === 3 /* PartFingerprint.OverflowGuard */ && path[1] === 8 /* PartFingerprint.Minimap */;\n  }\n  static isChildOfContentWidgets(path) {\n    return path.length >= 4 && path[0] === 3 /* PartFingerprint.OverflowGuard */ && path[3] === 1 /* PartFingerprint.ContentWidgets */;\n  }\n  static isChildOfOverflowGuard(path) {\n    return path.length >= 1 && path[0] === 3 /* PartFingerprint.OverflowGuard */;\n  }\n  static isChildOfOverflowingContentWidgets(path) {\n    return path.length >= 1 && path[0] === 2 /* PartFingerprint.OverflowingContentWidgets */;\n  }\n  static isChildOfOverlayWidgets(path) {\n    return path.length >= 2 && path[0] === 3 /* PartFingerprint.OverflowGuard */ && path[1] === 4 /* PartFingerprint.OverlayWidgets */;\n  }\n}\nexport class HitTestContext {\n  constructor(context, viewHelper, lastRenderData) {\n    this.viewModel = context.viewModel;\n    const options = context.configuration.options;\n    this.layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n    this.viewDomNode = viewHelper.viewDomNode;\n    this.lineHeight = options.get(66 /* EditorOption.lineHeight */);\n    this.stickyTabStops = options.get(115 /* EditorOption.stickyTabStops */);\n    this.typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n    this.lastRenderData = lastRenderData;\n    this._context = context;\n    this._viewHelper = viewHelper;\n  }\n  getZoneAtCoord(mouseVerticalOffset) {\n    return HitTestContext.getZoneAtCoord(this._context, mouseVerticalOffset);\n  }\n  static getZoneAtCoord(context, mouseVerticalOffset) {\n    // The target is either a view zone or the empty space after the last view-line\n    const viewZoneWhitespace = context.viewLayout.getWhitespaceAtVerticalOffset(mouseVerticalOffset);\n    if (viewZoneWhitespace) {\n      const viewZoneMiddle = viewZoneWhitespace.verticalOffset + viewZoneWhitespace.height / 2;\n      const lineCount = context.viewModel.getLineCount();\n      let positionBefore = null;\n      let position;\n      let positionAfter = null;\n      if (viewZoneWhitespace.afterLineNumber !== lineCount) {\n        // There are more lines after this view zone\n        positionAfter = new Position(viewZoneWhitespace.afterLineNumber + 1, 1);\n      }\n      if (viewZoneWhitespace.afterLineNumber > 0) {\n        // There are more lines above this view zone\n        positionBefore = new Position(viewZoneWhitespace.afterLineNumber, context.viewModel.getLineMaxColumn(viewZoneWhitespace.afterLineNumber));\n      }\n      if (positionAfter === null) {\n        position = positionBefore;\n      } else if (positionBefore === null) {\n        position = positionAfter;\n      } else if (mouseVerticalOffset < viewZoneMiddle) {\n        position = positionBefore;\n      } else {\n        position = positionAfter;\n      }\n      return {\n        viewZoneId: viewZoneWhitespace.id,\n        afterLineNumber: viewZoneWhitespace.afterLineNumber,\n        positionBefore: positionBefore,\n        positionAfter: positionAfter,\n        position: position\n      };\n    }\n    return null;\n  }\n  getFullLineRangeAtCoord(mouseVerticalOffset) {\n    if (this._context.viewLayout.isAfterLines(mouseVerticalOffset)) {\n      // Below the last line\n      const lineNumber = this._context.viewModel.getLineCount();\n      const maxLineColumn = this._context.viewModel.getLineMaxColumn(lineNumber);\n      return {\n        range: new EditorRange(lineNumber, maxLineColumn, lineNumber, maxLineColumn),\n        isAfterLines: true\n      };\n    }\n    const lineNumber = this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n    const maxLineColumn = this._context.viewModel.getLineMaxColumn(lineNumber);\n    return {\n      range: new EditorRange(lineNumber, 1, lineNumber, maxLineColumn),\n      isAfterLines: false\n    };\n  }\n  getLineNumberAtVerticalOffset(mouseVerticalOffset) {\n    return this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n  }\n  isAfterLines(mouseVerticalOffset) {\n    return this._context.viewLayout.isAfterLines(mouseVerticalOffset);\n  }\n  isInTopPadding(mouseVerticalOffset) {\n    return this._context.viewLayout.isInTopPadding(mouseVerticalOffset);\n  }\n  isInBottomPadding(mouseVerticalOffset) {\n    return this._context.viewLayout.isInBottomPadding(mouseVerticalOffset);\n  }\n  getVerticalOffsetForLineNumber(lineNumber) {\n    return this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n  }\n  findAttribute(element, attr) {\n    return HitTestContext._findAttribute(element, attr, this._viewHelper.viewDomNode);\n  }\n  static _findAttribute(element, attr, stopAt) {\n    while (element && element !== element.ownerDocument.body) {\n      if (element.hasAttribute && element.hasAttribute(attr)) {\n        return element.getAttribute(attr);\n      }\n      if (element === stopAt) {\n        return null;\n      }\n      element = element.parentNode;\n    }\n    return null;\n  }\n  getLineWidth(lineNumber) {\n    return this._viewHelper.getLineWidth(lineNumber);\n  }\n  visibleRangeForPosition(lineNumber, column) {\n    return this._viewHelper.visibleRangeForPosition(lineNumber, column);\n  }\n  getPositionFromDOMInfo(spanNode, offset) {\n    return this._viewHelper.getPositionFromDOMInfo(spanNode, offset);\n  }\n  getCurrentScrollTop() {\n    return this._context.viewLayout.getCurrentScrollTop();\n  }\n  getCurrentScrollLeft() {\n    return this._context.viewLayout.getCurrentScrollLeft();\n  }\n}\nclass BareHitTestRequest {\n  constructor(ctx, editorPos, pos, relativePos) {\n    this.editorPos = editorPos;\n    this.pos = pos;\n    this.relativePos = relativePos;\n    this.mouseVerticalOffset = Math.max(0, ctx.getCurrentScrollTop() + this.relativePos.y);\n    this.mouseContentHorizontalOffset = ctx.getCurrentScrollLeft() + this.relativePos.x - ctx.layoutInfo.contentLeft;\n    this.isInMarginArea = this.relativePos.x < ctx.layoutInfo.contentLeft && this.relativePos.x >= ctx.layoutInfo.glyphMarginLeft;\n    this.isInContentArea = !this.isInMarginArea;\n    this.mouseColumn = Math.max(0, MouseTargetFactory._getMouseColumn(this.mouseContentHorizontalOffset, ctx.typicalHalfwidthCharacterWidth));\n  }\n}\nclass HitTestRequest extends BareHitTestRequest {\n  constructor(ctx, editorPos, pos, relativePos, target) {\n    super(ctx, editorPos, pos, relativePos);\n    this._ctx = ctx;\n    if (target) {\n      this.target = target;\n      this.targetPath = PartFingerprints.collect(target, ctx.viewDomNode);\n    } else {\n      this.target = null;\n      this.targetPath = new Uint8Array(0);\n    }\n  }\n  toString() {\n    return `pos(${this.pos.x},${this.pos.y}), editorPos(${this.editorPos.x},${this.editorPos.y}), relativePos(${this.relativePos.x},${this.relativePos.y}), mouseVerticalOffset: ${this.mouseVerticalOffset}, mouseContentHorizontalOffset: ${this.mouseContentHorizontalOffset}\\n\\ttarget: ${this.target ? this.target.outerHTML : null}`;\n  }\n  _getMouseColumn(position = null) {\n    if (position && position.column < this._ctx.viewModel.getLineMaxColumn(position.lineNumber)) {\n      // Most likely, the line contains foreign decorations...\n      return CursorColumns.visibleColumnFromColumn(this._ctx.viewModel.getLineContent(position.lineNumber), position.column, this._ctx.viewModel.model.getOptions().tabSize) + 1;\n    }\n    return this.mouseColumn;\n  }\n  fulfillUnknown(position = null) {\n    return MouseTarget.createUnknown(this.target, this._getMouseColumn(position), position);\n  }\n  fulfillTextarea() {\n    return MouseTarget.createTextarea(this.target, this._getMouseColumn());\n  }\n  fulfillMargin(type, position, range, detail) {\n    return MouseTarget.createMargin(type, this.target, this._getMouseColumn(position), position, range, detail);\n  }\n  fulfillViewZone(type, position, detail) {\n    return MouseTarget.createViewZone(type, this.target, this._getMouseColumn(position), position, detail);\n  }\n  fulfillContentText(position, range, detail) {\n    return MouseTarget.createContentText(this.target, this._getMouseColumn(position), position, range, detail);\n  }\n  fulfillContentEmpty(position, detail) {\n    return MouseTarget.createContentEmpty(this.target, this._getMouseColumn(position), position, detail);\n  }\n  fulfillContentWidget(detail) {\n    return MouseTarget.createContentWidget(this.target, this._getMouseColumn(), detail);\n  }\n  fulfillScrollbar(position) {\n    return MouseTarget.createScrollbar(this.target, this._getMouseColumn(position), position);\n  }\n  fulfillOverlayWidget(detail) {\n    return MouseTarget.createOverlayWidget(this.target, this._getMouseColumn(), detail);\n  }\n  withTarget(target) {\n    return new HitTestRequest(this._ctx, this.editorPos, this.pos, this.relativePos, target);\n  }\n}\nconst EMPTY_CONTENT_AFTER_LINES = {\n  isAfterLines: true\n};\nfunction createEmptyContentDataInLines(horizontalDistanceToText) {\n  return {\n    isAfterLines: false,\n    horizontalDistanceToText: horizontalDistanceToText\n  };\n}\nexport class MouseTargetFactory {\n  constructor(context, viewHelper) {\n    this._context = context;\n    this._viewHelper = viewHelper;\n  }\n  mouseTargetIsWidget(e) {\n    const t = e.target;\n    const path = PartFingerprints.collect(t, this._viewHelper.viewDomNode);\n    // Is it a content widget?\n    if (ElementPath.isChildOfContentWidgets(path) || ElementPath.isChildOfOverflowingContentWidgets(path)) {\n      return true;\n    }\n    // Is it an overlay widget?\n    if (ElementPath.isChildOfOverlayWidgets(path)) {\n      return true;\n    }\n    return false;\n  }\n  createMouseTarget(lastRenderData, editorPos, pos, relativePos, target) {\n    const ctx = new HitTestContext(this._context, this._viewHelper, lastRenderData);\n    const request = new HitTestRequest(ctx, editorPos, pos, relativePos, target);\n    try {\n      const r = MouseTargetFactory._createMouseTarget(ctx, request, false);\n      if (r.type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n        // Snap to the nearest soft tab boundary if atomic soft tabs are enabled.\n        if (ctx.stickyTabStops && r.position !== null) {\n          const position = MouseTargetFactory._snapToSoftTabBoundary(r.position, ctx.viewModel);\n          const range = EditorRange.fromPositions(position, position).plusRange(r.range);\n          return request.fulfillContentText(position, range, r.detail);\n        }\n      }\n      // console.log(MouseTarget.toString(r));\n      return r;\n    } catch (err) {\n      // console.log(err);\n      return request.fulfillUnknown();\n    }\n  }\n  static _createMouseTarget(ctx, request, domHitTestExecuted) {\n    // console.log(`${domHitTestExecuted ? '=>' : ''}CAME IN REQUEST: ${request}`);\n    // First ensure the request has a target\n    if (request.target === null) {\n      if (domHitTestExecuted) {\n        // Still no target... and we have already executed hit test...\n        return request.fulfillUnknown();\n      }\n      const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n      if (hitTestResult.type === 1 /* HitTestResultType.Content */) {\n        return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n      }\n      return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n    }\n    // we know for a fact that request.target is not null\n    const resolvedRequest = request;\n    let result = null;\n    if (!ElementPath.isChildOfOverflowGuard(request.targetPath) && !ElementPath.isChildOfOverflowingContentWidgets(request.targetPath)) {\n      // We only render dom nodes inside the overflow guard or in the overflowing content widgets\n      result = result || request.fulfillUnknown();\n    }\n    result = result || MouseTargetFactory._hitTestContentWidget(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestOverlayWidget(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestMinimap(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestScrollbarSlider(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestViewZone(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestMargin(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestViewCursor(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestTextArea(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestViewLines(ctx, resolvedRequest, domHitTestExecuted);\n    result = result || MouseTargetFactory._hitTestScrollbar(ctx, resolvedRequest);\n    return result || request.fulfillUnknown();\n  }\n  static _hitTestContentWidget(ctx, request) {\n    // Is it a content widget?\n    if (ElementPath.isChildOfContentWidgets(request.targetPath) || ElementPath.isChildOfOverflowingContentWidgets(request.targetPath)) {\n      const widgetId = ctx.findAttribute(request.target, 'widgetId');\n      if (widgetId) {\n        return request.fulfillContentWidget(widgetId);\n      } else {\n        return request.fulfillUnknown();\n      }\n    }\n    return null;\n  }\n  static _hitTestOverlayWidget(ctx, request) {\n    // Is it an overlay widget?\n    if (ElementPath.isChildOfOverlayWidgets(request.targetPath)) {\n      const widgetId = ctx.findAttribute(request.target, 'widgetId');\n      if (widgetId) {\n        return request.fulfillOverlayWidget(widgetId);\n      } else {\n        return request.fulfillUnknown();\n      }\n    }\n    return null;\n  }\n  static _hitTestViewCursor(ctx, request) {\n    if (request.target) {\n      // Check if we've hit a painted cursor\n      const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n      for (const d of lastViewCursorsRenderData) {\n        if (request.target === d.domNode) {\n          return request.fulfillContentText(d.position, null, {\n            mightBeForeignElement: false,\n            injectedText: null\n          });\n        }\n      }\n    }\n    if (request.isInContentArea) {\n      // Edge has a bug when hit-testing the exact position of a cursor,\n      // instead of returning the correct dom node, it returns the\n      // first or last rendered view line dom node, therefore help it out\n      // and first check if we are on top of a cursor\n      const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n      const mouseContentHorizontalOffset = request.mouseContentHorizontalOffset;\n      const mouseVerticalOffset = request.mouseVerticalOffset;\n      for (const d of lastViewCursorsRenderData) {\n        if (mouseContentHorizontalOffset < d.contentLeft) {\n          // mouse position is to the left of the cursor\n          continue;\n        }\n        if (mouseContentHorizontalOffset > d.contentLeft + d.width) {\n          // mouse position is to the right of the cursor\n          continue;\n        }\n        const cursorVerticalOffset = ctx.getVerticalOffsetForLineNumber(d.position.lineNumber);\n        if (cursorVerticalOffset <= mouseVerticalOffset && mouseVerticalOffset <= cursorVerticalOffset + d.height) {\n          return request.fulfillContentText(d.position, null, {\n            mightBeForeignElement: false,\n            injectedText: null\n          });\n        }\n      }\n    }\n    return null;\n  }\n  static _hitTestViewZone(ctx, request) {\n    const viewZoneData = ctx.getZoneAtCoord(request.mouseVerticalOffset);\n    if (viewZoneData) {\n      const mouseTargetType = request.isInContentArea ? 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ : 5 /* MouseTargetType.GUTTER_VIEW_ZONE */;\n      return request.fulfillViewZone(mouseTargetType, viewZoneData.position, viewZoneData);\n    }\n    return null;\n  }\n  static _hitTestTextArea(ctx, request) {\n    // Is it the textarea?\n    if (ElementPath.isTextArea(request.targetPath)) {\n      if (ctx.lastRenderData.lastTextareaPosition) {\n        return request.fulfillContentText(ctx.lastRenderData.lastTextareaPosition, null, {\n          mightBeForeignElement: false,\n          injectedText: null\n        });\n      }\n      return request.fulfillTextarea();\n    }\n    return null;\n  }\n  static _hitTestMargin(ctx, request) {\n    if (request.isInMarginArea) {\n      const res = ctx.getFullLineRangeAtCoord(request.mouseVerticalOffset);\n      const pos = res.range.getStartPosition();\n      let offset = Math.abs(request.relativePos.x);\n      const detail = {\n        isAfterLines: res.isAfterLines,\n        glyphMarginLeft: ctx.layoutInfo.glyphMarginLeft,\n        glyphMarginWidth: ctx.layoutInfo.glyphMarginWidth,\n        lineNumbersWidth: ctx.layoutInfo.lineNumbersWidth,\n        offsetX: offset\n      };\n      offset -= ctx.layoutInfo.glyphMarginLeft;\n      if (offset <= ctx.layoutInfo.glyphMarginWidth) {\n        // On the glyph margin\n        return request.fulfillMargin(2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */, pos, res.range, detail);\n      }\n      offset -= ctx.layoutInfo.glyphMarginWidth;\n      if (offset <= ctx.layoutInfo.lineNumbersWidth) {\n        // On the line numbers\n        return request.fulfillMargin(3 /* MouseTargetType.GUTTER_LINE_NUMBERS */, pos, res.range, detail);\n      }\n      offset -= ctx.layoutInfo.lineNumbersWidth;\n      // On the line decorations\n      return request.fulfillMargin(4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */, pos, res.range, detail);\n    }\n    return null;\n  }\n  static _hitTestViewLines(ctx, request, domHitTestExecuted) {\n    if (!ElementPath.isChildOfViewLines(request.targetPath)) {\n      return null;\n    }\n    if (ctx.isInTopPadding(request.mouseVerticalOffset)) {\n      return request.fulfillContentEmpty(new Position(1, 1), EMPTY_CONTENT_AFTER_LINES);\n    }\n    // Check if it is below any lines and any view zones\n    if (ctx.isAfterLines(request.mouseVerticalOffset) || ctx.isInBottomPadding(request.mouseVerticalOffset)) {\n      // This most likely indicates it happened after the last view-line\n      const lineCount = ctx.viewModel.getLineCount();\n      const maxLineColumn = ctx.viewModel.getLineMaxColumn(lineCount);\n      return request.fulfillContentEmpty(new Position(lineCount, maxLineColumn), EMPTY_CONTENT_AFTER_LINES);\n    }\n    if (domHitTestExecuted) {\n      // Check if we are hitting a view-line (can happen in the case of inline decorations on empty lines)\n      // See https://github.com/microsoft/vscode/issues/46942\n      if (ElementPath.isStrictChildOfViewLines(request.targetPath)) {\n        const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n        if (ctx.viewModel.getLineLength(lineNumber) === 0) {\n          const lineWidth = ctx.getLineWidth(lineNumber);\n          const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n          return request.fulfillContentEmpty(new Position(lineNumber, 1), detail);\n        }\n        const lineWidth = ctx.getLineWidth(lineNumber);\n        if (request.mouseContentHorizontalOffset >= lineWidth) {\n          const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n          const pos = new Position(lineNumber, ctx.viewModel.getLineMaxColumn(lineNumber));\n          return request.fulfillContentEmpty(pos, detail);\n        }\n      }\n      // We have already executed hit test...\n      return request.fulfillUnknown();\n    }\n    const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n    if (hitTestResult.type === 1 /* HitTestResultType.Content */) {\n      return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n    }\n    return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n  }\n  static _hitTestMinimap(ctx, request) {\n    if (ElementPath.isChildOfMinimap(request.targetPath)) {\n      const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n      const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n      return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n    }\n    return null;\n  }\n  static _hitTestScrollbarSlider(ctx, request) {\n    if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n      if (request.target && request.target.nodeType === 1) {\n        const className = request.target.className;\n        if (className && /\\b(slider|scrollbar)\\b/.test(className)) {\n          const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n          const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n          return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n        }\n      }\n    }\n    return null;\n  }\n  static _hitTestScrollbar(ctx, request) {\n    // Is it the overview ruler?\n    // Is it a child of the scrollable element?\n    if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n      const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n      const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n      return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n    }\n    return null;\n  }\n  getMouseColumn(relativePos) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n    const mouseContentHorizontalOffset = this._context.viewLayout.getCurrentScrollLeft() + relativePos.x - layoutInfo.contentLeft;\n    return MouseTargetFactory._getMouseColumn(mouseContentHorizontalOffset, options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth);\n  }\n  static _getMouseColumn(mouseContentHorizontalOffset, typicalHalfwidthCharacterWidth) {\n    if (mouseContentHorizontalOffset < 0) {\n      return 1;\n    }\n    const chars = Math.round(mouseContentHorizontalOffset / typicalHalfwidthCharacterWidth);\n    return chars + 1;\n  }\n  static createMouseTargetFromHitTestPosition(ctx, request, spanNode, pos, injectedText) {\n    const lineNumber = pos.lineNumber;\n    const column = pos.column;\n    const lineWidth = ctx.getLineWidth(lineNumber);\n    if (request.mouseContentHorizontalOffset > lineWidth) {\n      const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n      return request.fulfillContentEmpty(pos, detail);\n    }\n    const visibleRange = ctx.visibleRangeForPosition(lineNumber, column);\n    if (!visibleRange) {\n      return request.fulfillUnknown(pos);\n    }\n    const columnHorizontalOffset = visibleRange.left;\n    if (Math.abs(request.mouseContentHorizontalOffset - columnHorizontalOffset) < 1) {\n      return request.fulfillContentText(pos, null, {\n        mightBeForeignElement: !!injectedText,\n        injectedText\n      });\n    }\n    const points = [];\n    points.push({\n      offset: visibleRange.left,\n      column: column\n    });\n    if (column > 1) {\n      const visibleRange = ctx.visibleRangeForPosition(lineNumber, column - 1);\n      if (visibleRange) {\n        points.push({\n          offset: visibleRange.left,\n          column: column - 1\n        });\n      }\n    }\n    const lineMaxColumn = ctx.viewModel.getLineMaxColumn(lineNumber);\n    if (column < lineMaxColumn) {\n      const visibleRange = ctx.visibleRangeForPosition(lineNumber, column + 1);\n      if (visibleRange) {\n        points.push({\n          offset: visibleRange.left,\n          column: column + 1\n        });\n      }\n    }\n    points.sort((a, b) => a.offset - b.offset);\n    const mouseCoordinates = request.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode));\n    const spanNodeClientRect = spanNode.getBoundingClientRect();\n    const mouseIsOverSpanNode = spanNodeClientRect.left <= mouseCoordinates.clientX && mouseCoordinates.clientX <= spanNodeClientRect.right;\n    let rng = null;\n    for (let i = 1; i < points.length; i++) {\n      const prev = points[i - 1];\n      const curr = points[i];\n      if (prev.offset <= request.mouseContentHorizontalOffset && request.mouseContentHorizontalOffset <= curr.offset) {\n        rng = new EditorRange(lineNumber, prev.column, lineNumber, curr.column);\n        // See https://github.com/microsoft/vscode/issues/152819\n        // Due to the use of zwj, the browser's hit test result is skewed towards the left\n        // Here we try to correct that if the mouse horizontal offset is closer to the right than the left\n        const prevDelta = Math.abs(prev.offset - request.mouseContentHorizontalOffset);\n        const nextDelta = Math.abs(curr.offset - request.mouseContentHorizontalOffset);\n        pos = prevDelta < nextDelta ? new Position(lineNumber, prev.column) : new Position(lineNumber, curr.column);\n        break;\n      }\n    }\n    return request.fulfillContentText(pos, rng, {\n      mightBeForeignElement: !mouseIsOverSpanNode || !!injectedText,\n      injectedText\n    });\n  }\n  /**\n   * Most probably WebKit browsers and Edge\n   */\n  static _doHitTestWithCaretRangeFromPoint(ctx, request) {\n    // In Chrome, especially on Linux it is possible to click between lines,\n    // so try to adjust the `hity` below so that it lands in the center of a line\n    const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n    const lineStartVerticalOffset = ctx.getVerticalOffsetForLineNumber(lineNumber);\n    const lineEndVerticalOffset = lineStartVerticalOffset + ctx.lineHeight;\n    const isBelowLastLine = lineNumber === ctx.viewModel.getLineCount() && request.mouseVerticalOffset > lineEndVerticalOffset;\n    if (!isBelowLastLine) {\n      const lineCenteredVerticalOffset = Math.floor((lineStartVerticalOffset + lineEndVerticalOffset) / 2);\n      let adjustedPageY = request.pos.y + (lineCenteredVerticalOffset - request.mouseVerticalOffset);\n      if (adjustedPageY <= request.editorPos.y) {\n        adjustedPageY = request.editorPos.y + 1;\n      }\n      if (adjustedPageY >= request.editorPos.y + request.editorPos.height) {\n        adjustedPageY = request.editorPos.y + request.editorPos.height - 1;\n      }\n      const adjustedPage = new PageCoordinates(request.pos.x, adjustedPageY);\n      const r = this._actualDoHitTestWithCaretRangeFromPoint(ctx, adjustedPage.toClientCoordinates(dom.getWindow(ctx.viewDomNode)));\n      if (r.type === 1 /* HitTestResultType.Content */) {\n        return r;\n      }\n    }\n    // Also try to hit test without the adjustment (for the edge cases that we are near the top or bottom)\n    return this._actualDoHitTestWithCaretRangeFromPoint(ctx, request.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode)));\n  }\n  static _actualDoHitTestWithCaretRangeFromPoint(ctx, coords) {\n    const shadowRoot = dom.getShadowRoot(ctx.viewDomNode);\n    let range;\n    if (shadowRoot) {\n      if (typeof shadowRoot.caretRangeFromPoint === 'undefined') {\n        range = shadowCaretRangeFromPoint(shadowRoot, coords.clientX, coords.clientY);\n      } else {\n        range = shadowRoot.caretRangeFromPoint(coords.clientX, coords.clientY);\n      }\n    } else {\n      range = ctx.viewDomNode.ownerDocument.caretRangeFromPoint(coords.clientX, coords.clientY);\n    }\n    if (!range || !range.startContainer) {\n      return new UnknownHitTestResult();\n    }\n    // Chrome always hits a TEXT_NODE, while Edge sometimes hits a token span\n    const startContainer = range.startContainer;\n    if (startContainer.nodeType === startContainer.TEXT_NODE) {\n      // startContainer is expected to be the token text\n      const parent1 = startContainer.parentNode; // expected to be the token span\n      const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n      const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n      const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n      if (parent3ClassName === ViewLine.CLASS_NAME) {\n        return HitTestResult.createFromDOMInfo(ctx, parent1, range.startOffset);\n      } else {\n        return new UnknownHitTestResult(startContainer.parentNode);\n      }\n    } else if (startContainer.nodeType === startContainer.ELEMENT_NODE) {\n      // startContainer is expected to be the token span\n      const parent1 = startContainer.parentNode; // expected to be the view line container span\n      const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line div\n      const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n      if (parent2ClassName === ViewLine.CLASS_NAME) {\n        return HitTestResult.createFromDOMInfo(ctx, startContainer, startContainer.textContent.length);\n      } else {\n        return new UnknownHitTestResult(startContainer);\n      }\n    }\n    return new UnknownHitTestResult();\n  }\n  /**\n   * Most probably Gecko\n   */\n  static _doHitTestWithCaretPositionFromPoint(ctx, coords) {\n    const hitResult = ctx.viewDomNode.ownerDocument.caretPositionFromPoint(coords.clientX, coords.clientY);\n    if (hitResult.offsetNode.nodeType === hitResult.offsetNode.TEXT_NODE) {\n      // offsetNode is expected to be the token text\n      const parent1 = hitResult.offsetNode.parentNode; // expected to be the token span\n      const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n      const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n      const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n      if (parent3ClassName === ViewLine.CLASS_NAME) {\n        return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode.parentNode, hitResult.offset);\n      } else {\n        return new UnknownHitTestResult(hitResult.offsetNode.parentNode);\n      }\n    }\n    // For inline decorations, Gecko sometimes returns the `<span>` of the line and the offset is the `<span>` with the inline decoration\n    // Some other times, it returns the `<span>` with the inline decoration\n    if (hitResult.offsetNode.nodeType === hitResult.offsetNode.ELEMENT_NODE) {\n      const parent1 = hitResult.offsetNode.parentNode;\n      const parent1ClassName = parent1 && parent1.nodeType === parent1.ELEMENT_NODE ? parent1.className : null;\n      const parent2 = parent1 ? parent1.parentNode : null;\n      const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n      if (parent1ClassName === ViewLine.CLASS_NAME) {\n        // it returned the `<span>` of the line and the offset is the `<span>` with the inline decoration\n        const tokenSpan = hitResult.offsetNode.childNodes[Math.min(hitResult.offset, hitResult.offsetNode.childNodes.length - 1)];\n        if (tokenSpan) {\n          return HitTestResult.createFromDOMInfo(ctx, tokenSpan, 0);\n        }\n      } else if (parent2ClassName === ViewLine.CLASS_NAME) {\n        // it returned the `<span>` with the inline decoration\n        return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode, 0);\n      }\n    }\n    return new UnknownHitTestResult(hitResult.offsetNode);\n  }\n  static _snapToSoftTabBoundary(position, viewModel) {\n    const lineContent = viewModel.getLineContent(position.lineNumber);\n    const {\n      tabSize\n    } = viewModel.model.getOptions();\n    const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, position.column - 1, tabSize, 2 /* Direction.Nearest */);\n    if (newPosition !== -1) {\n      return new Position(position.lineNumber, newPosition + 1);\n    }\n    return position;\n  }\n  static _doHitTest(ctx, request) {\n    let result = new UnknownHitTestResult();\n    if (typeof ctx.viewDomNode.ownerDocument.caretRangeFromPoint === 'function') {\n      result = this._doHitTestWithCaretRangeFromPoint(ctx, request);\n    } else if (ctx.viewDomNode.ownerDocument.caretPositionFromPoint) {\n      result = this._doHitTestWithCaretPositionFromPoint(ctx, request.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode)));\n    }\n    if (result.type === 1 /* HitTestResultType.Content */) {\n      const injectedText = ctx.viewModel.getInjectedTextAt(result.position);\n      const normalizedPosition = ctx.viewModel.normalizePosition(result.position, 2 /* PositionAffinity.None */);\n      if (injectedText || !normalizedPosition.equals(result.position)) {\n        result = new ContentHitTestResult(normalizedPosition, result.spanNode, injectedText);\n      }\n    }\n    return result;\n  }\n}\nfunction shadowCaretRangeFromPoint(shadowRoot, x, y) {\n  const range = document.createRange();\n  // Get the element under the point\n  let el = shadowRoot.elementFromPoint(x, y);\n  if (el !== null) {\n    // Get the last child of the element until its firstChild is a text node\n    // This assumes that the pointer is on the right of the line, out of the tokens\n    // and that we want to get the offset of the last token of the line\n    while (el && el.firstChild && el.firstChild.nodeType !== el.firstChild.TEXT_NODE && el.lastChild && el.lastChild.firstChild) {\n      el = el.lastChild;\n    }\n    // Grab its rect\n    const rect = el.getBoundingClientRect();\n    // And its font (the computed shorthand font property might be empty, see #3217)\n    const elWindow = dom.getWindow(el);\n    const fontStyle = elWindow.getComputedStyle(el, null).getPropertyValue('font-style');\n    const fontVariant = elWindow.getComputedStyle(el, null).getPropertyValue('font-variant');\n    const fontWeight = elWindow.getComputedStyle(el, null).getPropertyValue('font-weight');\n    const fontSize = elWindow.getComputedStyle(el, null).getPropertyValue('font-size');\n    const lineHeight = elWindow.getComputedStyle(el, null).getPropertyValue('line-height');\n    const fontFamily = elWindow.getComputedStyle(el, null).getPropertyValue('font-family');\n    const font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontSize}/${lineHeight} ${fontFamily}`;\n    // And also its txt content\n    const text = el.innerText;\n    // Position the pixel cursor at the left of the element\n    let pixelCursor = rect.left;\n    let offset = 0;\n    let step;\n    // If the point is on the right of the box put the cursor after the last character\n    if (x > rect.left + rect.width) {\n      offset = text.length;\n    } else {\n      const charWidthReader = CharWidthReader.getInstance();\n      // Goes through all the characters of the innerText, and checks if the x of the point\n      // belongs to the character.\n      for (let i = 0; i < text.length + 1; i++) {\n        // The step is half the width of the character\n        step = charWidthReader.getCharWidth(text.charAt(i), font) / 2;\n        // Move to the center of the character\n        pixelCursor += step;\n        // If the x of the point is smaller that the position of the cursor, the point is over that character\n        if (x < pixelCursor) {\n          offset = i;\n          break;\n        }\n        // Move between the current character and the next\n        pixelCursor += step;\n      }\n    }\n    // Creates a range with the text node of the element and set the offset found\n    range.setStart(el.firstChild, offset);\n    range.setEnd(el.firstChild, offset);\n  }\n  return range;\n}\nclass CharWidthReader {\n  static getInstance() {\n    if (!CharWidthReader._INSTANCE) {\n      CharWidthReader._INSTANCE = new CharWidthReader();\n    }\n    return CharWidthReader._INSTANCE;\n  }\n  constructor() {\n    this._cache = {};\n    this._canvas = document.createElement('canvas');\n  }\n  getCharWidth(char, font) {\n    const cacheKey = char + font;\n    if (this._cache[cacheKey]) {\n      return this._cache[cacheKey];\n    }\n    const context = this._canvas.getContext('2d');\n    context.font = font;\n    const metrics = context.measureText(char);\n    const width = metrics.width;\n    this._cache[cacheKey] = width;\n    return width;\n  }\n}\nCharWidthReader._INSTANCE = null;","map":{"version":3,"names":["PageCoordinates","PartFingerprints","ViewLine","Position","Range","EditorRange","CursorColumns","dom","AtomicTabMoveOperations","UnknownHitTestResult","constructor","hitTarget","type","ContentHitTestResult","position","spanNode","injectedText","HitTestResult","createFromDOMInfo","ctx","offset","getPositionFromDOMInfo","PointerHandlerLastRenderData","lastViewCursorsRenderData","lastTextareaPosition","MouseTarget","_deduceRage","range","lineNumber","column","createUnknown","element","mouseColumn","createTextarea","createMargin","detail","createViewZone","createContentText","createContentEmpty","createContentWidget","createScrollbar","createOverlayWidget","createOutsideEditor","outsidePosition","outsideDistance","_typeToString","toString","target","JSON","stringify","ElementPath","isTextArea","path","length","isChildOfViewLines","isStrictChildOfViewLines","isChildOfScrollableElement","isChildOfMinimap","isChildOfContentWidgets","isChildOfOverflowGuard","isChildOfOverflowingContentWidgets","isChildOfOverlayWidgets","HitTestContext","context","viewHelper","lastRenderData","viewModel","options","configuration","layoutInfo","get","viewDomNode","lineHeight","stickyTabStops","typicalHalfwidthCharacterWidth","_context","_viewHelper","getZoneAtCoord","mouseVerticalOffset","viewZoneWhitespace","viewLayout","getWhitespaceAtVerticalOffset","viewZoneMiddle","verticalOffset","height","lineCount","getLineCount","positionBefore","positionAfter","afterLineNumber","getLineMaxColumn","viewZoneId","id","getFullLineRangeAtCoord","isAfterLines","maxLineColumn","getLineNumberAtVerticalOffset","isInTopPadding","isInBottomPadding","getVerticalOffsetForLineNumber","findAttribute","attr","_findAttribute","stopAt","ownerDocument","body","hasAttribute","getAttribute","parentNode","getLineWidth","visibleRangeForPosition","getCurrentScrollTop","getCurrentScrollLeft","BareHitTestRequest","editorPos","pos","relativePos","Math","max","y","mouseContentHorizontalOffset","x","contentLeft","isInMarginArea","glyphMarginLeft","isInContentArea","MouseTargetFactory","_getMouseColumn","HitTestRequest","_ctx","targetPath","collect","Uint8Array","outerHTML","visibleColumnFromColumn","getLineContent","model","getOptions","tabSize","fulfillUnknown","fulfillTextarea","fulfillMargin","fulfillViewZone","fulfillContentText","fulfillContentEmpty","fulfillContentWidget","fulfillScrollbar","fulfillOverlayWidget","withTarget","EMPTY_CONTENT_AFTER_LINES","createEmptyContentDataInLines","horizontalDistanceToText","mouseTargetIsWidget","e","t","createMouseTarget","request","r","_createMouseTarget","_snapToSoftTabBoundary","fromPositions","plusRange","err","domHitTestExecuted","hitTestResult","_doHitTest","createMouseTargetFromHitTestPosition","resolvedRequest","result","_hitTestContentWidget","_hitTestOverlayWidget","_hitTestMinimap","_hitTestScrollbarSlider","_hitTestViewZone","_hitTestMargin","_hitTestViewCursor","_hitTestTextArea","_hitTestViewLines","_hitTestScrollbar","widgetId","d","domNode","mightBeForeignElement","width","cursorVerticalOffset","viewZoneData","mouseTargetType","res","getStartPosition","abs","glyphMarginWidth","lineNumbersWidth","offsetX","getLineLength","lineWidth","possibleLineNumber","maxColumn","nodeType","className","test","getMouseColumn","chars","round","visibleRange","columnHorizontalOffset","left","points","push","lineMaxColumn","sort","a","b","mouseCoordinates","toClientCoordinates","getWindow","spanNodeClientRect","getBoundingClientRect","mouseIsOverSpanNode","clientX","right","rng","i","prev","curr","prevDelta","nextDelta","_doHitTestWithCaretRangeFromPoint","lineStartVerticalOffset","lineEndVerticalOffset","isBelowLastLine","lineCenteredVerticalOffset","floor","adjustedPageY","adjustedPage","_actualDoHitTestWithCaretRangeFromPoint","coords","shadowRoot","getShadowRoot","caretRangeFromPoint","shadowCaretRangeFromPoint","clientY","startContainer","TEXT_NODE","parent1","parent2","parent3","parent3ClassName","ELEMENT_NODE","CLASS_NAME","startOffset","parent2ClassName","textContent","_doHitTestWithCaretPositionFromPoint","hitResult","caretPositionFromPoint","offsetNode","parent1ClassName","tokenSpan","childNodes","min","lineContent","newPosition","atomicPosition","getInjectedTextAt","normalizedPosition","normalizePosition","equals","document","createRange","el","elementFromPoint","firstChild","lastChild","rect","elWindow","fontStyle","getComputedStyle","getPropertyValue","fontVariant","fontWeight","fontSize","fontFamily","font","text","innerText","pixelCursor","step","charWidthReader","CharWidthReader","getInstance","getCharWidth","charAt","setStart","setEnd","_INSTANCE","_cache","_canvas","createElement","char","cacheKey","getContext","metrics","measureText"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/browser/controller/mouseTarget.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { PageCoordinates } from '../editorDom.js';\nimport { PartFingerprints } from '../view/viewPart.js';\nimport { ViewLine } from '../viewParts/lines/viewLine.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range as EditorRange } from '../../common/core/range.js';\nimport { CursorColumns } from '../../common/core/cursorColumns.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { AtomicTabMoveOperations } from '../../common/cursor/cursorAtomicMoveOperations.js';\nclass UnknownHitTestResult {\n    constructor(hitTarget = null) {\n        this.hitTarget = hitTarget;\n        this.type = 0 /* HitTestResultType.Unknown */;\n    }\n}\nclass ContentHitTestResult {\n    constructor(position, spanNode, injectedText) {\n        this.position = position;\n        this.spanNode = spanNode;\n        this.injectedText = injectedText;\n        this.type = 1 /* HitTestResultType.Content */;\n    }\n}\nvar HitTestResult;\n(function (HitTestResult) {\n    function createFromDOMInfo(ctx, spanNode, offset) {\n        const position = ctx.getPositionFromDOMInfo(spanNode, offset);\n        if (position) {\n            return new ContentHitTestResult(position, spanNode, null);\n        }\n        return new UnknownHitTestResult(spanNode);\n    }\n    HitTestResult.createFromDOMInfo = createFromDOMInfo;\n})(HitTestResult || (HitTestResult = {}));\nexport class PointerHandlerLastRenderData {\n    constructor(lastViewCursorsRenderData, lastTextareaPosition) {\n        this.lastViewCursorsRenderData = lastViewCursorsRenderData;\n        this.lastTextareaPosition = lastTextareaPosition;\n    }\n}\nexport class MouseTarget {\n    static _deduceRage(position, range = null) {\n        if (!range && position) {\n            return new EditorRange(position.lineNumber, position.column, position.lineNumber, position.column);\n        }\n        return range !== null && range !== void 0 ? range : null;\n    }\n    static createUnknown(element, mouseColumn, position) {\n        return { type: 0 /* MouseTargetType.UNKNOWN */, element, mouseColumn, position, range: this._deduceRage(position) };\n    }\n    static createTextarea(element, mouseColumn) {\n        return { type: 1 /* MouseTargetType.TEXTAREA */, element, mouseColumn, position: null, range: null };\n    }\n    static createMargin(type, element, mouseColumn, position, range, detail) {\n        return { type, element, mouseColumn, position, range, detail };\n    }\n    static createViewZone(type, element, mouseColumn, position, detail) {\n        return { type, element, mouseColumn, position, range: this._deduceRage(position), detail };\n    }\n    static createContentText(element, mouseColumn, position, range, detail) {\n        return { type: 6 /* MouseTargetType.CONTENT_TEXT */, element, mouseColumn, position, range: this._deduceRage(position, range), detail };\n    }\n    static createContentEmpty(element, mouseColumn, position, detail) {\n        return { type: 7 /* MouseTargetType.CONTENT_EMPTY */, element, mouseColumn, position, range: this._deduceRage(position), detail };\n    }\n    static createContentWidget(element, mouseColumn, detail) {\n        return { type: 9 /* MouseTargetType.CONTENT_WIDGET */, element, mouseColumn, position: null, range: null, detail };\n    }\n    static createScrollbar(element, mouseColumn, position) {\n        return { type: 11 /* MouseTargetType.SCROLLBAR */, element, mouseColumn, position, range: this._deduceRage(position) };\n    }\n    static createOverlayWidget(element, mouseColumn, detail) {\n        return { type: 12 /* MouseTargetType.OVERLAY_WIDGET */, element, mouseColumn, position: null, range: null, detail };\n    }\n    static createOutsideEditor(mouseColumn, position, outsidePosition, outsideDistance) {\n        return { type: 13 /* MouseTargetType.OUTSIDE_EDITOR */, element: null, mouseColumn, position, range: this._deduceRage(position), outsidePosition, outsideDistance };\n    }\n    static _typeToString(type) {\n        if (type === 1 /* MouseTargetType.TEXTAREA */) {\n            return 'TEXTAREA';\n        }\n        if (type === 2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */) {\n            return 'GUTTER_GLYPH_MARGIN';\n        }\n        if (type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */) {\n            return 'GUTTER_LINE_NUMBERS';\n        }\n        if (type === 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */) {\n            return 'GUTTER_LINE_DECORATIONS';\n        }\n        if (type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */) {\n            return 'GUTTER_VIEW_ZONE';\n        }\n        if (type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n            return 'CONTENT_TEXT';\n        }\n        if (type === 7 /* MouseTargetType.CONTENT_EMPTY */) {\n            return 'CONTENT_EMPTY';\n        }\n        if (type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */) {\n            return 'CONTENT_VIEW_ZONE';\n        }\n        if (type === 9 /* MouseTargetType.CONTENT_WIDGET */) {\n            return 'CONTENT_WIDGET';\n        }\n        if (type === 10 /* MouseTargetType.OVERVIEW_RULER */) {\n            return 'OVERVIEW_RULER';\n        }\n        if (type === 11 /* MouseTargetType.SCROLLBAR */) {\n            return 'SCROLLBAR';\n        }\n        if (type === 12 /* MouseTargetType.OVERLAY_WIDGET */) {\n            return 'OVERLAY_WIDGET';\n        }\n        return 'UNKNOWN';\n    }\n    static toString(target) {\n        return this._typeToString(target.type) + ': ' + target.position + ' - ' + target.range + ' - ' + JSON.stringify(target.detail);\n    }\n}\nclass ElementPath {\n    static isTextArea(path) {\n        return (path.length === 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 6 /* PartFingerprint.TextArea */);\n    }\n    static isChildOfViewLines(path) {\n        return (path.length >= 4\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[3] === 7 /* PartFingerprint.ViewLines */);\n    }\n    static isStrictChildOfViewLines(path) {\n        return (path.length > 4\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[3] === 7 /* PartFingerprint.ViewLines */);\n    }\n    static isChildOfScrollableElement(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 5 /* PartFingerprint.ScrollableElement */);\n    }\n    static isChildOfMinimap(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 8 /* PartFingerprint.Minimap */);\n    }\n    static isChildOfContentWidgets(path) {\n        return (path.length >= 4\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[3] === 1 /* PartFingerprint.ContentWidgets */);\n    }\n    static isChildOfOverflowGuard(path) {\n        return (path.length >= 1\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */);\n    }\n    static isChildOfOverflowingContentWidgets(path) {\n        return (path.length >= 1\n            && path[0] === 2 /* PartFingerprint.OverflowingContentWidgets */);\n    }\n    static isChildOfOverlayWidgets(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 4 /* PartFingerprint.OverlayWidgets */);\n    }\n}\nexport class HitTestContext {\n    constructor(context, viewHelper, lastRenderData) {\n        this.viewModel = context.viewModel;\n        const options = context.configuration.options;\n        this.layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this.viewDomNode = viewHelper.viewDomNode;\n        this.lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this.stickyTabStops = options.get(115 /* EditorOption.stickyTabStops */);\n        this.typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this.lastRenderData = lastRenderData;\n        this._context = context;\n        this._viewHelper = viewHelper;\n    }\n    getZoneAtCoord(mouseVerticalOffset) {\n        return HitTestContext.getZoneAtCoord(this._context, mouseVerticalOffset);\n    }\n    static getZoneAtCoord(context, mouseVerticalOffset) {\n        // The target is either a view zone or the empty space after the last view-line\n        const viewZoneWhitespace = context.viewLayout.getWhitespaceAtVerticalOffset(mouseVerticalOffset);\n        if (viewZoneWhitespace) {\n            const viewZoneMiddle = viewZoneWhitespace.verticalOffset + viewZoneWhitespace.height / 2;\n            const lineCount = context.viewModel.getLineCount();\n            let positionBefore = null;\n            let position;\n            let positionAfter = null;\n            if (viewZoneWhitespace.afterLineNumber !== lineCount) {\n                // There are more lines after this view zone\n                positionAfter = new Position(viewZoneWhitespace.afterLineNumber + 1, 1);\n            }\n            if (viewZoneWhitespace.afterLineNumber > 0) {\n                // There are more lines above this view zone\n                positionBefore = new Position(viewZoneWhitespace.afterLineNumber, context.viewModel.getLineMaxColumn(viewZoneWhitespace.afterLineNumber));\n            }\n            if (positionAfter === null) {\n                position = positionBefore;\n            }\n            else if (positionBefore === null) {\n                position = positionAfter;\n            }\n            else if (mouseVerticalOffset < viewZoneMiddle) {\n                position = positionBefore;\n            }\n            else {\n                position = positionAfter;\n            }\n            return {\n                viewZoneId: viewZoneWhitespace.id,\n                afterLineNumber: viewZoneWhitespace.afterLineNumber,\n                positionBefore: positionBefore,\n                positionAfter: positionAfter,\n                position: position\n            };\n        }\n        return null;\n    }\n    getFullLineRangeAtCoord(mouseVerticalOffset) {\n        if (this._context.viewLayout.isAfterLines(mouseVerticalOffset)) {\n            // Below the last line\n            const lineNumber = this._context.viewModel.getLineCount();\n            const maxLineColumn = this._context.viewModel.getLineMaxColumn(lineNumber);\n            return {\n                range: new EditorRange(lineNumber, maxLineColumn, lineNumber, maxLineColumn),\n                isAfterLines: true\n            };\n        }\n        const lineNumber = this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n        const maxLineColumn = this._context.viewModel.getLineMaxColumn(lineNumber);\n        return {\n            range: new EditorRange(lineNumber, 1, lineNumber, maxLineColumn),\n            isAfterLines: false\n        };\n    }\n    getLineNumberAtVerticalOffset(mouseVerticalOffset) {\n        return this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n    }\n    isAfterLines(mouseVerticalOffset) {\n        return this._context.viewLayout.isAfterLines(mouseVerticalOffset);\n    }\n    isInTopPadding(mouseVerticalOffset) {\n        return this._context.viewLayout.isInTopPadding(mouseVerticalOffset);\n    }\n    isInBottomPadding(mouseVerticalOffset) {\n        return this._context.viewLayout.isInBottomPadding(mouseVerticalOffset);\n    }\n    getVerticalOffsetForLineNumber(lineNumber) {\n        return this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n    }\n    findAttribute(element, attr) {\n        return HitTestContext._findAttribute(element, attr, this._viewHelper.viewDomNode);\n    }\n    static _findAttribute(element, attr, stopAt) {\n        while (element && element !== element.ownerDocument.body) {\n            if (element.hasAttribute && element.hasAttribute(attr)) {\n                return element.getAttribute(attr);\n            }\n            if (element === stopAt) {\n                return null;\n            }\n            element = element.parentNode;\n        }\n        return null;\n    }\n    getLineWidth(lineNumber) {\n        return this._viewHelper.getLineWidth(lineNumber);\n    }\n    visibleRangeForPosition(lineNumber, column) {\n        return this._viewHelper.visibleRangeForPosition(lineNumber, column);\n    }\n    getPositionFromDOMInfo(spanNode, offset) {\n        return this._viewHelper.getPositionFromDOMInfo(spanNode, offset);\n    }\n    getCurrentScrollTop() {\n        return this._context.viewLayout.getCurrentScrollTop();\n    }\n    getCurrentScrollLeft() {\n        return this._context.viewLayout.getCurrentScrollLeft();\n    }\n}\nclass BareHitTestRequest {\n    constructor(ctx, editorPos, pos, relativePos) {\n        this.editorPos = editorPos;\n        this.pos = pos;\n        this.relativePos = relativePos;\n        this.mouseVerticalOffset = Math.max(0, ctx.getCurrentScrollTop() + this.relativePos.y);\n        this.mouseContentHorizontalOffset = ctx.getCurrentScrollLeft() + this.relativePos.x - ctx.layoutInfo.contentLeft;\n        this.isInMarginArea = (this.relativePos.x < ctx.layoutInfo.contentLeft && this.relativePos.x >= ctx.layoutInfo.glyphMarginLeft);\n        this.isInContentArea = !this.isInMarginArea;\n        this.mouseColumn = Math.max(0, MouseTargetFactory._getMouseColumn(this.mouseContentHorizontalOffset, ctx.typicalHalfwidthCharacterWidth));\n    }\n}\nclass HitTestRequest extends BareHitTestRequest {\n    constructor(ctx, editorPos, pos, relativePos, target) {\n        super(ctx, editorPos, pos, relativePos);\n        this._ctx = ctx;\n        if (target) {\n            this.target = target;\n            this.targetPath = PartFingerprints.collect(target, ctx.viewDomNode);\n        }\n        else {\n            this.target = null;\n            this.targetPath = new Uint8Array(0);\n        }\n    }\n    toString() {\n        return `pos(${this.pos.x},${this.pos.y}), editorPos(${this.editorPos.x},${this.editorPos.y}), relativePos(${this.relativePos.x},${this.relativePos.y}), mouseVerticalOffset: ${this.mouseVerticalOffset}, mouseContentHorizontalOffset: ${this.mouseContentHorizontalOffset}\\n\\ttarget: ${this.target ? this.target.outerHTML : null}`;\n    }\n    _getMouseColumn(position = null) {\n        if (position && position.column < this._ctx.viewModel.getLineMaxColumn(position.lineNumber)) {\n            // Most likely, the line contains foreign decorations...\n            return CursorColumns.visibleColumnFromColumn(this._ctx.viewModel.getLineContent(position.lineNumber), position.column, this._ctx.viewModel.model.getOptions().tabSize) + 1;\n        }\n        return this.mouseColumn;\n    }\n    fulfillUnknown(position = null) {\n        return MouseTarget.createUnknown(this.target, this._getMouseColumn(position), position);\n    }\n    fulfillTextarea() {\n        return MouseTarget.createTextarea(this.target, this._getMouseColumn());\n    }\n    fulfillMargin(type, position, range, detail) {\n        return MouseTarget.createMargin(type, this.target, this._getMouseColumn(position), position, range, detail);\n    }\n    fulfillViewZone(type, position, detail) {\n        return MouseTarget.createViewZone(type, this.target, this._getMouseColumn(position), position, detail);\n    }\n    fulfillContentText(position, range, detail) {\n        return MouseTarget.createContentText(this.target, this._getMouseColumn(position), position, range, detail);\n    }\n    fulfillContentEmpty(position, detail) {\n        return MouseTarget.createContentEmpty(this.target, this._getMouseColumn(position), position, detail);\n    }\n    fulfillContentWidget(detail) {\n        return MouseTarget.createContentWidget(this.target, this._getMouseColumn(), detail);\n    }\n    fulfillScrollbar(position) {\n        return MouseTarget.createScrollbar(this.target, this._getMouseColumn(position), position);\n    }\n    fulfillOverlayWidget(detail) {\n        return MouseTarget.createOverlayWidget(this.target, this._getMouseColumn(), detail);\n    }\n    withTarget(target) {\n        return new HitTestRequest(this._ctx, this.editorPos, this.pos, this.relativePos, target);\n    }\n}\nconst EMPTY_CONTENT_AFTER_LINES = { isAfterLines: true };\nfunction createEmptyContentDataInLines(horizontalDistanceToText) {\n    return {\n        isAfterLines: false,\n        horizontalDistanceToText: horizontalDistanceToText\n    };\n}\nexport class MouseTargetFactory {\n    constructor(context, viewHelper) {\n        this._context = context;\n        this._viewHelper = viewHelper;\n    }\n    mouseTargetIsWidget(e) {\n        const t = e.target;\n        const path = PartFingerprints.collect(t, this._viewHelper.viewDomNode);\n        // Is it a content widget?\n        if (ElementPath.isChildOfContentWidgets(path) || ElementPath.isChildOfOverflowingContentWidgets(path)) {\n            return true;\n        }\n        // Is it an overlay widget?\n        if (ElementPath.isChildOfOverlayWidgets(path)) {\n            return true;\n        }\n        return false;\n    }\n    createMouseTarget(lastRenderData, editorPos, pos, relativePos, target) {\n        const ctx = new HitTestContext(this._context, this._viewHelper, lastRenderData);\n        const request = new HitTestRequest(ctx, editorPos, pos, relativePos, target);\n        try {\n            const r = MouseTargetFactory._createMouseTarget(ctx, request, false);\n            if (r.type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n                // Snap to the nearest soft tab boundary if atomic soft tabs are enabled.\n                if (ctx.stickyTabStops && r.position !== null) {\n                    const position = MouseTargetFactory._snapToSoftTabBoundary(r.position, ctx.viewModel);\n                    const range = EditorRange.fromPositions(position, position).plusRange(r.range);\n                    return request.fulfillContentText(position, range, r.detail);\n                }\n            }\n            // console.log(MouseTarget.toString(r));\n            return r;\n        }\n        catch (err) {\n            // console.log(err);\n            return request.fulfillUnknown();\n        }\n    }\n    static _createMouseTarget(ctx, request, domHitTestExecuted) {\n        // console.log(`${domHitTestExecuted ? '=>' : ''}CAME IN REQUEST: ${request}`);\n        // First ensure the request has a target\n        if (request.target === null) {\n            if (domHitTestExecuted) {\n                // Still no target... and we have already executed hit test...\n                return request.fulfillUnknown();\n            }\n            const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n            if (hitTestResult.type === 1 /* HitTestResultType.Content */) {\n                return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n            }\n            return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n        }\n        // we know for a fact that request.target is not null\n        const resolvedRequest = request;\n        let result = null;\n        if (!ElementPath.isChildOfOverflowGuard(request.targetPath) && !ElementPath.isChildOfOverflowingContentWidgets(request.targetPath)) {\n            // We only render dom nodes inside the overflow guard or in the overflowing content widgets\n            result = result || request.fulfillUnknown();\n        }\n        result = result || MouseTargetFactory._hitTestContentWidget(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestOverlayWidget(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestMinimap(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestScrollbarSlider(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewZone(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestMargin(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewCursor(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestTextArea(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewLines(ctx, resolvedRequest, domHitTestExecuted);\n        result = result || MouseTargetFactory._hitTestScrollbar(ctx, resolvedRequest);\n        return (result || request.fulfillUnknown());\n    }\n    static _hitTestContentWidget(ctx, request) {\n        // Is it a content widget?\n        if (ElementPath.isChildOfContentWidgets(request.targetPath) || ElementPath.isChildOfOverflowingContentWidgets(request.targetPath)) {\n            const widgetId = ctx.findAttribute(request.target, 'widgetId');\n            if (widgetId) {\n                return request.fulfillContentWidget(widgetId);\n            }\n            else {\n                return request.fulfillUnknown();\n            }\n        }\n        return null;\n    }\n    static _hitTestOverlayWidget(ctx, request) {\n        // Is it an overlay widget?\n        if (ElementPath.isChildOfOverlayWidgets(request.targetPath)) {\n            const widgetId = ctx.findAttribute(request.target, 'widgetId');\n            if (widgetId) {\n                return request.fulfillOverlayWidget(widgetId);\n            }\n            else {\n                return request.fulfillUnknown();\n            }\n        }\n        return null;\n    }\n    static _hitTestViewCursor(ctx, request) {\n        if (request.target) {\n            // Check if we've hit a painted cursor\n            const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n            for (const d of lastViewCursorsRenderData) {\n                if (request.target === d.domNode) {\n                    return request.fulfillContentText(d.position, null, { mightBeForeignElement: false, injectedText: null });\n                }\n            }\n        }\n        if (request.isInContentArea) {\n            // Edge has a bug when hit-testing the exact position of a cursor,\n            // instead of returning the correct dom node, it returns the\n            // first or last rendered view line dom node, therefore help it out\n            // and first check if we are on top of a cursor\n            const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n            const mouseContentHorizontalOffset = request.mouseContentHorizontalOffset;\n            const mouseVerticalOffset = request.mouseVerticalOffset;\n            for (const d of lastViewCursorsRenderData) {\n                if (mouseContentHorizontalOffset < d.contentLeft) {\n                    // mouse position is to the left of the cursor\n                    continue;\n                }\n                if (mouseContentHorizontalOffset > d.contentLeft + d.width) {\n                    // mouse position is to the right of the cursor\n                    continue;\n                }\n                const cursorVerticalOffset = ctx.getVerticalOffsetForLineNumber(d.position.lineNumber);\n                if (cursorVerticalOffset <= mouseVerticalOffset\n                    && mouseVerticalOffset <= cursorVerticalOffset + d.height) {\n                    return request.fulfillContentText(d.position, null, { mightBeForeignElement: false, injectedText: null });\n                }\n            }\n        }\n        return null;\n    }\n    static _hitTestViewZone(ctx, request) {\n        const viewZoneData = ctx.getZoneAtCoord(request.mouseVerticalOffset);\n        if (viewZoneData) {\n            const mouseTargetType = (request.isInContentArea ? 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ : 5 /* MouseTargetType.GUTTER_VIEW_ZONE */);\n            return request.fulfillViewZone(mouseTargetType, viewZoneData.position, viewZoneData);\n        }\n        return null;\n    }\n    static _hitTestTextArea(ctx, request) {\n        // Is it the textarea?\n        if (ElementPath.isTextArea(request.targetPath)) {\n            if (ctx.lastRenderData.lastTextareaPosition) {\n                return request.fulfillContentText(ctx.lastRenderData.lastTextareaPosition, null, { mightBeForeignElement: false, injectedText: null });\n            }\n            return request.fulfillTextarea();\n        }\n        return null;\n    }\n    static _hitTestMargin(ctx, request) {\n        if (request.isInMarginArea) {\n            const res = ctx.getFullLineRangeAtCoord(request.mouseVerticalOffset);\n            const pos = res.range.getStartPosition();\n            let offset = Math.abs(request.relativePos.x);\n            const detail = {\n                isAfterLines: res.isAfterLines,\n                glyphMarginLeft: ctx.layoutInfo.glyphMarginLeft,\n                glyphMarginWidth: ctx.layoutInfo.glyphMarginWidth,\n                lineNumbersWidth: ctx.layoutInfo.lineNumbersWidth,\n                offsetX: offset\n            };\n            offset -= ctx.layoutInfo.glyphMarginLeft;\n            if (offset <= ctx.layoutInfo.glyphMarginWidth) {\n                // On the glyph margin\n                return request.fulfillMargin(2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */, pos, res.range, detail);\n            }\n            offset -= ctx.layoutInfo.glyphMarginWidth;\n            if (offset <= ctx.layoutInfo.lineNumbersWidth) {\n                // On the line numbers\n                return request.fulfillMargin(3 /* MouseTargetType.GUTTER_LINE_NUMBERS */, pos, res.range, detail);\n            }\n            offset -= ctx.layoutInfo.lineNumbersWidth;\n            // On the line decorations\n            return request.fulfillMargin(4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */, pos, res.range, detail);\n        }\n        return null;\n    }\n    static _hitTestViewLines(ctx, request, domHitTestExecuted) {\n        if (!ElementPath.isChildOfViewLines(request.targetPath)) {\n            return null;\n        }\n        if (ctx.isInTopPadding(request.mouseVerticalOffset)) {\n            return request.fulfillContentEmpty(new Position(1, 1), EMPTY_CONTENT_AFTER_LINES);\n        }\n        // Check if it is below any lines and any view zones\n        if (ctx.isAfterLines(request.mouseVerticalOffset) || ctx.isInBottomPadding(request.mouseVerticalOffset)) {\n            // This most likely indicates it happened after the last view-line\n            const lineCount = ctx.viewModel.getLineCount();\n            const maxLineColumn = ctx.viewModel.getLineMaxColumn(lineCount);\n            return request.fulfillContentEmpty(new Position(lineCount, maxLineColumn), EMPTY_CONTENT_AFTER_LINES);\n        }\n        if (domHitTestExecuted) {\n            // Check if we are hitting a view-line (can happen in the case of inline decorations on empty lines)\n            // See https://github.com/microsoft/vscode/issues/46942\n            if (ElementPath.isStrictChildOfViewLines(request.targetPath)) {\n                const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n                if (ctx.viewModel.getLineLength(lineNumber) === 0) {\n                    const lineWidth = ctx.getLineWidth(lineNumber);\n                    const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n                    return request.fulfillContentEmpty(new Position(lineNumber, 1), detail);\n                }\n                const lineWidth = ctx.getLineWidth(lineNumber);\n                if (request.mouseContentHorizontalOffset >= lineWidth) {\n                    const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n                    const pos = new Position(lineNumber, ctx.viewModel.getLineMaxColumn(lineNumber));\n                    return request.fulfillContentEmpty(pos, detail);\n                }\n            }\n            // We have already executed hit test...\n            return request.fulfillUnknown();\n        }\n        const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n        if (hitTestResult.type === 1 /* HitTestResultType.Content */) {\n            return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n        }\n        return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n    }\n    static _hitTestMinimap(ctx, request) {\n        if (ElementPath.isChildOfMinimap(request.targetPath)) {\n            const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n            const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n            return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n        }\n        return null;\n    }\n    static _hitTestScrollbarSlider(ctx, request) {\n        if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n            if (request.target && request.target.nodeType === 1) {\n                const className = request.target.className;\n                if (className && /\\b(slider|scrollbar)\\b/.test(className)) {\n                    const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n                    const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n                    return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n                }\n            }\n        }\n        return null;\n    }\n    static _hitTestScrollbar(ctx, request) {\n        // Is it the overview ruler?\n        // Is it a child of the scrollable element?\n        if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n            const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n            const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n            return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n        }\n        return null;\n    }\n    getMouseColumn(relativePos) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        const mouseContentHorizontalOffset = this._context.viewLayout.getCurrentScrollLeft() + relativePos.x - layoutInfo.contentLeft;\n        return MouseTargetFactory._getMouseColumn(mouseContentHorizontalOffset, options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth);\n    }\n    static _getMouseColumn(mouseContentHorizontalOffset, typicalHalfwidthCharacterWidth) {\n        if (mouseContentHorizontalOffset < 0) {\n            return 1;\n        }\n        const chars = Math.round(mouseContentHorizontalOffset / typicalHalfwidthCharacterWidth);\n        return (chars + 1);\n    }\n    static createMouseTargetFromHitTestPosition(ctx, request, spanNode, pos, injectedText) {\n        const lineNumber = pos.lineNumber;\n        const column = pos.column;\n        const lineWidth = ctx.getLineWidth(lineNumber);\n        if (request.mouseContentHorizontalOffset > lineWidth) {\n            const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n            return request.fulfillContentEmpty(pos, detail);\n        }\n        const visibleRange = ctx.visibleRangeForPosition(lineNumber, column);\n        if (!visibleRange) {\n            return request.fulfillUnknown(pos);\n        }\n        const columnHorizontalOffset = visibleRange.left;\n        if (Math.abs(request.mouseContentHorizontalOffset - columnHorizontalOffset) < 1) {\n            return request.fulfillContentText(pos, null, { mightBeForeignElement: !!injectedText, injectedText });\n        }\n        const points = [];\n        points.push({ offset: visibleRange.left, column: column });\n        if (column > 1) {\n            const visibleRange = ctx.visibleRangeForPosition(lineNumber, column - 1);\n            if (visibleRange) {\n                points.push({ offset: visibleRange.left, column: column - 1 });\n            }\n        }\n        const lineMaxColumn = ctx.viewModel.getLineMaxColumn(lineNumber);\n        if (column < lineMaxColumn) {\n            const visibleRange = ctx.visibleRangeForPosition(lineNumber, column + 1);\n            if (visibleRange) {\n                points.push({ offset: visibleRange.left, column: column + 1 });\n            }\n        }\n        points.sort((a, b) => a.offset - b.offset);\n        const mouseCoordinates = request.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode));\n        const spanNodeClientRect = spanNode.getBoundingClientRect();\n        const mouseIsOverSpanNode = (spanNodeClientRect.left <= mouseCoordinates.clientX && mouseCoordinates.clientX <= spanNodeClientRect.right);\n        let rng = null;\n        for (let i = 1; i < points.length; i++) {\n            const prev = points[i - 1];\n            const curr = points[i];\n            if (prev.offset <= request.mouseContentHorizontalOffset && request.mouseContentHorizontalOffset <= curr.offset) {\n                rng = new EditorRange(lineNumber, prev.column, lineNumber, curr.column);\n                // See https://github.com/microsoft/vscode/issues/152819\n                // Due to the use of zwj, the browser's hit test result is skewed towards the left\n                // Here we try to correct that if the mouse horizontal offset is closer to the right than the left\n                const prevDelta = Math.abs(prev.offset - request.mouseContentHorizontalOffset);\n                const nextDelta = Math.abs(curr.offset - request.mouseContentHorizontalOffset);\n                pos = (prevDelta < nextDelta\n                    ? new Position(lineNumber, prev.column)\n                    : new Position(lineNumber, curr.column));\n                break;\n            }\n        }\n        return request.fulfillContentText(pos, rng, { mightBeForeignElement: !mouseIsOverSpanNode || !!injectedText, injectedText });\n    }\n    /**\n     * Most probably WebKit browsers and Edge\n     */\n    static _doHitTestWithCaretRangeFromPoint(ctx, request) {\n        // In Chrome, especially on Linux it is possible to click between lines,\n        // so try to adjust the `hity` below so that it lands in the center of a line\n        const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n        const lineStartVerticalOffset = ctx.getVerticalOffsetForLineNumber(lineNumber);\n        const lineEndVerticalOffset = lineStartVerticalOffset + ctx.lineHeight;\n        const isBelowLastLine = (lineNumber === ctx.viewModel.getLineCount()\n            && request.mouseVerticalOffset > lineEndVerticalOffset);\n        if (!isBelowLastLine) {\n            const lineCenteredVerticalOffset = Math.floor((lineStartVerticalOffset + lineEndVerticalOffset) / 2);\n            let adjustedPageY = request.pos.y + (lineCenteredVerticalOffset - request.mouseVerticalOffset);\n            if (adjustedPageY <= request.editorPos.y) {\n                adjustedPageY = request.editorPos.y + 1;\n            }\n            if (adjustedPageY >= request.editorPos.y + request.editorPos.height) {\n                adjustedPageY = request.editorPos.y + request.editorPos.height - 1;\n            }\n            const adjustedPage = new PageCoordinates(request.pos.x, adjustedPageY);\n            const r = this._actualDoHitTestWithCaretRangeFromPoint(ctx, adjustedPage.toClientCoordinates(dom.getWindow(ctx.viewDomNode)));\n            if (r.type === 1 /* HitTestResultType.Content */) {\n                return r;\n            }\n        }\n        // Also try to hit test without the adjustment (for the edge cases that we are near the top or bottom)\n        return this._actualDoHitTestWithCaretRangeFromPoint(ctx, request.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode)));\n    }\n    static _actualDoHitTestWithCaretRangeFromPoint(ctx, coords) {\n        const shadowRoot = dom.getShadowRoot(ctx.viewDomNode);\n        let range;\n        if (shadowRoot) {\n            if (typeof shadowRoot.caretRangeFromPoint === 'undefined') {\n                range = shadowCaretRangeFromPoint(shadowRoot, coords.clientX, coords.clientY);\n            }\n            else {\n                range = shadowRoot.caretRangeFromPoint(coords.clientX, coords.clientY);\n            }\n        }\n        else {\n            range = ctx.viewDomNode.ownerDocument.caretRangeFromPoint(coords.clientX, coords.clientY);\n        }\n        if (!range || !range.startContainer) {\n            return new UnknownHitTestResult();\n        }\n        // Chrome always hits a TEXT_NODE, while Edge sometimes hits a token span\n        const startContainer = range.startContainer;\n        if (startContainer.nodeType === startContainer.TEXT_NODE) {\n            // startContainer is expected to be the token text\n            const parent1 = startContainer.parentNode; // expected to be the token span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n            const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n            const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n            if (parent3ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, parent1, range.startOffset);\n            }\n            else {\n                return new UnknownHitTestResult(startContainer.parentNode);\n            }\n        }\n        else if (startContainer.nodeType === startContainer.ELEMENT_NODE) {\n            // startContainer is expected to be the token span\n            const parent1 = startContainer.parentNode; // expected to be the view line container span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line div\n            const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n            if (parent2ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, startContainer, startContainer.textContent.length);\n            }\n            else {\n                return new UnknownHitTestResult(startContainer);\n            }\n        }\n        return new UnknownHitTestResult();\n    }\n    /**\n     * Most probably Gecko\n     */\n    static _doHitTestWithCaretPositionFromPoint(ctx, coords) {\n        const hitResult = ctx.viewDomNode.ownerDocument.caretPositionFromPoint(coords.clientX, coords.clientY);\n        if (hitResult.offsetNode.nodeType === hitResult.offsetNode.TEXT_NODE) {\n            // offsetNode is expected to be the token text\n            const parent1 = hitResult.offsetNode.parentNode; // expected to be the token span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n            const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n            const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n            if (parent3ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode.parentNode, hitResult.offset);\n            }\n            else {\n                return new UnknownHitTestResult(hitResult.offsetNode.parentNode);\n            }\n        }\n        // For inline decorations, Gecko sometimes returns the `<span>` of the line and the offset is the `<span>` with the inline decoration\n        // Some other times, it returns the `<span>` with the inline decoration\n        if (hitResult.offsetNode.nodeType === hitResult.offsetNode.ELEMENT_NODE) {\n            const parent1 = hitResult.offsetNode.parentNode;\n            const parent1ClassName = parent1 && parent1.nodeType === parent1.ELEMENT_NODE ? parent1.className : null;\n            const parent2 = parent1 ? parent1.parentNode : null;\n            const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n            if (parent1ClassName === ViewLine.CLASS_NAME) {\n                // it returned the `<span>` of the line and the offset is the `<span>` with the inline decoration\n                const tokenSpan = hitResult.offsetNode.childNodes[Math.min(hitResult.offset, hitResult.offsetNode.childNodes.length - 1)];\n                if (tokenSpan) {\n                    return HitTestResult.createFromDOMInfo(ctx, tokenSpan, 0);\n                }\n            }\n            else if (parent2ClassName === ViewLine.CLASS_NAME) {\n                // it returned the `<span>` with the inline decoration\n                return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode, 0);\n            }\n        }\n        return new UnknownHitTestResult(hitResult.offsetNode);\n    }\n    static _snapToSoftTabBoundary(position, viewModel) {\n        const lineContent = viewModel.getLineContent(position.lineNumber);\n        const { tabSize } = viewModel.model.getOptions();\n        const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, position.column - 1, tabSize, 2 /* Direction.Nearest */);\n        if (newPosition !== -1) {\n            return new Position(position.lineNumber, newPosition + 1);\n        }\n        return position;\n    }\n    static _doHitTest(ctx, request) {\n        let result = new UnknownHitTestResult();\n        if (typeof ctx.viewDomNode.ownerDocument.caretRangeFromPoint === 'function') {\n            result = this._doHitTestWithCaretRangeFromPoint(ctx, request);\n        }\n        else if (ctx.viewDomNode.ownerDocument.caretPositionFromPoint) {\n            result = this._doHitTestWithCaretPositionFromPoint(ctx, request.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode)));\n        }\n        if (result.type === 1 /* HitTestResultType.Content */) {\n            const injectedText = ctx.viewModel.getInjectedTextAt(result.position);\n            const normalizedPosition = ctx.viewModel.normalizePosition(result.position, 2 /* PositionAffinity.None */);\n            if (injectedText || !normalizedPosition.equals(result.position)) {\n                result = new ContentHitTestResult(normalizedPosition, result.spanNode, injectedText);\n            }\n        }\n        return result;\n    }\n}\nfunction shadowCaretRangeFromPoint(shadowRoot, x, y) {\n    const range = document.createRange();\n    // Get the element under the point\n    let el = shadowRoot.elementFromPoint(x, y);\n    if (el !== null) {\n        // Get the last child of the element until its firstChild is a text node\n        // This assumes that the pointer is on the right of the line, out of the tokens\n        // and that we want to get the offset of the last token of the line\n        while (el && el.firstChild && el.firstChild.nodeType !== el.firstChild.TEXT_NODE && el.lastChild && el.lastChild.firstChild) {\n            el = el.lastChild;\n        }\n        // Grab its rect\n        const rect = el.getBoundingClientRect();\n        // And its font (the computed shorthand font property might be empty, see #3217)\n        const elWindow = dom.getWindow(el);\n        const fontStyle = elWindow.getComputedStyle(el, null).getPropertyValue('font-style');\n        const fontVariant = elWindow.getComputedStyle(el, null).getPropertyValue('font-variant');\n        const fontWeight = elWindow.getComputedStyle(el, null).getPropertyValue('font-weight');\n        const fontSize = elWindow.getComputedStyle(el, null).getPropertyValue('font-size');\n        const lineHeight = elWindow.getComputedStyle(el, null).getPropertyValue('line-height');\n        const fontFamily = elWindow.getComputedStyle(el, null).getPropertyValue('font-family');\n        const font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontSize}/${lineHeight} ${fontFamily}`;\n        // And also its txt content\n        const text = el.innerText;\n        // Position the pixel cursor at the left of the element\n        let pixelCursor = rect.left;\n        let offset = 0;\n        let step;\n        // If the point is on the right of the box put the cursor after the last character\n        if (x > rect.left + rect.width) {\n            offset = text.length;\n        }\n        else {\n            const charWidthReader = CharWidthReader.getInstance();\n            // Goes through all the characters of the innerText, and checks if the x of the point\n            // belongs to the character.\n            for (let i = 0; i < text.length + 1; i++) {\n                // The step is half the width of the character\n                step = charWidthReader.getCharWidth(text.charAt(i), font) / 2;\n                // Move to the center of the character\n                pixelCursor += step;\n                // If the x of the point is smaller that the position of the cursor, the point is over that character\n                if (x < pixelCursor) {\n                    offset = i;\n                    break;\n                }\n                // Move between the current character and the next\n                pixelCursor += step;\n            }\n        }\n        // Creates a range with the text node of the element and set the offset found\n        range.setStart(el.firstChild, offset);\n        range.setEnd(el.firstChild, offset);\n    }\n    return range;\n}\nclass CharWidthReader {\n    static getInstance() {\n        if (!CharWidthReader._INSTANCE) {\n            CharWidthReader._INSTANCE = new CharWidthReader();\n        }\n        return CharWidthReader._INSTANCE;\n    }\n    constructor() {\n        this._cache = {};\n        this._canvas = document.createElement('canvas');\n    }\n    getCharWidth(char, font) {\n        const cacheKey = char + font;\n        if (this._cache[cacheKey]) {\n            return this._cache[cacheKey];\n        }\n        const context = this._canvas.getContext('2d');\n        context.font = font;\n        const metrics = context.measureText(char);\n        const width = metrics.width;\n        this._cache[cacheKey] = width;\n        return width;\n    }\n}\nCharWidthReader._INSTANCE = null;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}