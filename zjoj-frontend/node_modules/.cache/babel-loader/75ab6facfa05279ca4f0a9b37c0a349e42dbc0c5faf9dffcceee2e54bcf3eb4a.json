{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n  const root = Object.create(null);\n  for (const key in properties) {\n    addToValueTree(root, key, properties[key], conflictReporter);\n  }\n  return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n  const segments = key.split('.');\n  const last = segments.pop();\n  let curr = settingsTreeRoot;\n  for (let i = 0; i < segments.length; i++) {\n    const s = segments[i];\n    let obj = curr[s];\n    switch (typeof obj) {\n      case 'undefined':\n        obj = curr[s] = Object.create(null);\n        break;\n      case 'object':\n        break;\n      default:\n        conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\n        return;\n    }\n    curr = obj;\n  }\n  if (typeof curr === 'object' && curr !== null) {\n    try {\n      curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n    } catch (e) {\n      conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n    }\n  } else {\n    conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n  }\n}\nexport function removeFromValueTree(valueTree, key) {\n  const segments = key.split('.');\n  doRemoveFromValueTree(valueTree, segments);\n}\nfunction doRemoveFromValueTree(valueTree, segments) {\n  const first = segments.shift();\n  if (segments.length === 0) {\n    // Reached last segment\n    delete valueTree[first];\n    return;\n  }\n  if (Object.keys(valueTree).indexOf(first) !== -1) {\n    const value = valueTree[first];\n    if (typeof value === 'object' && !Array.isArray(value)) {\n      doRemoveFromValueTree(value, segments);\n      if (Object.keys(value).length === 0) {\n        delete valueTree[first];\n      }\n    }\n  }\n}\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n  function accessSetting(config, path) {\n    let current = config;\n    for (const component of path) {\n      if (typeof current !== 'object' || current === null) {\n        return undefined;\n      }\n      current = current[component];\n    }\n    return current;\n  }\n  const path = settingPath.split('.');\n  const result = accessSetting(config, path);\n  return typeof result === 'undefined' ? defaultValue : result;\n}\nexport function getLanguageTagSettingPlainKey(settingKey) {\n  return settingKey.replace(/[\\[\\]]/g, '');\n}","map":{"version":3,"names":["createDecorator","IConfigurationService","toValuesTree","properties","conflictReporter","root","Object","create","key","addToValueTree","settingsTreeRoot","value","segments","split","last","pop","curr","i","length","s","obj","slice","join","JSON","stringify","e","removeFromValueTree","valueTree","doRemoveFromValueTree","first","shift","keys","indexOf","Array","isArray","getConfigurationValue","config","settingPath","defaultValue","accessSetting","path","current","component","undefined","result","getLanguageTagSettingPlainKey","settingKey","replace"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n    const root = Object.create(null);\n    for (const key in properties) {\n        addToValueTree(root, key, properties[key], conflictReporter);\n    }\n    return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n    const segments = key.split('.');\n    const last = segments.pop();\n    let curr = settingsTreeRoot;\n    for (let i = 0; i < segments.length; i++) {\n        const s = segments[i];\n        let obj = curr[s];\n        switch (typeof obj) {\n            case 'undefined':\n                obj = curr[s] = Object.create(null);\n                break;\n            case 'object':\n                break;\n            default:\n                conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\n                return;\n        }\n        curr = obj;\n    }\n    if (typeof curr === 'object' && curr !== null) {\n        try {\n            curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n        }\n        catch (e) {\n            conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n        }\n    }\n    else {\n        conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n    }\n}\nexport function removeFromValueTree(valueTree, key) {\n    const segments = key.split('.');\n    doRemoveFromValueTree(valueTree, segments);\n}\nfunction doRemoveFromValueTree(valueTree, segments) {\n    const first = segments.shift();\n    if (segments.length === 0) {\n        // Reached last segment\n        delete valueTree[first];\n        return;\n    }\n    if (Object.keys(valueTree).indexOf(first) !== -1) {\n        const value = valueTree[first];\n        if (typeof value === 'object' && !Array.isArray(value)) {\n            doRemoveFromValueTree(value, segments);\n            if (Object.keys(value).length === 0) {\n                delete valueTree[first];\n            }\n        }\n    }\n}\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n    function accessSetting(config, path) {\n        let current = config;\n        for (const component of path) {\n            if (typeof current !== 'object' || current === null) {\n                return undefined;\n            }\n            current = current[component];\n        }\n        return current;\n    }\n    const path = settingPath.split('.');\n    const result = accessSetting(config, path);\n    return typeof result === 'undefined' ? defaultValue : result;\n}\nexport function getLanguageTagSettingPlainKey(settingKey) {\n    return settingKey.replace(/[\\[\\]]/g, '');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,6CAA6C;AAC7E,OAAO,MAAMC,qBAAqB,GAAGD,eAAe,CAAC,sBAAsB,CAAC;AAC5E,OAAO,SAASE,YAAYA,CAACC,UAAU,EAAEC,gBAAgB,EAAE;EACvD,MAAMC,IAAI,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAChC,KAAK,MAAMC,GAAG,IAAIL,UAAU,EAAE;IAC1BM,cAAc,CAACJ,IAAI,EAAEG,GAAG,EAAEL,UAAU,CAACK,GAAG,CAAC,EAAEJ,gBAAgB,CAAC;EAChE;EACA,OAAOC,IAAI;AACf;AACA,OAAO,SAASI,cAAcA,CAACC,gBAAgB,EAAEF,GAAG,EAAEG,KAAK,EAAEP,gBAAgB,EAAE;EAC3E,MAAMQ,QAAQ,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC;EAC/B,MAAMC,IAAI,GAAGF,QAAQ,CAACG,GAAG,CAAC,CAAC;EAC3B,IAAIC,IAAI,GAAGN,gBAAgB;EAC3B,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,MAAME,CAAC,GAAGP,QAAQ,CAACK,CAAC,CAAC;IACrB,IAAIG,GAAG,GAAGJ,IAAI,CAACG,CAAC,CAAC;IACjB,QAAQ,OAAOC,GAAG;MACd,KAAK,WAAW;QACZA,GAAG,GAAGJ,IAAI,CAACG,CAAC,CAAC,GAAGb,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QACnC;MACJ,KAAK,QAAQ;QACT;MACJ;QACIH,gBAAgB,CAAE,YAAWI,GAAI,OAAMI,QAAQ,CAACS,KAAK,CAAC,CAAC,EAAEJ,CAAC,GAAG,CAAC,CAAC,CAACK,IAAI,CAAC,GAAG,CAAE,OAAMC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAE,EAAC,CAAC;QACtG;IACR;IACAJ,IAAI,GAAGI,GAAG;EACd;EACA,IAAI,OAAOJ,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,EAAE;IAC3C,IAAI;MACAA,IAAI,CAACF,IAAI,CAAC,GAAGH,KAAK,CAAC,CAAC;IACxB,CAAC,CACD,OAAOc,CAAC,EAAE;MACNrB,gBAAgB,CAAE,YAAWI,GAAI,OAAMI,QAAQ,CAACU,IAAI,CAAC,GAAG,CAAE,OAAMC,IAAI,CAACC,SAAS,CAACR,IAAI,CAAE,EAAC,CAAC;IAC3F;EACJ,CAAC,MACI;IACDZ,gBAAgB,CAAE,YAAWI,GAAI,OAAMI,QAAQ,CAACU,IAAI,CAAC,GAAG,CAAE,OAAMC,IAAI,CAACC,SAAS,CAACR,IAAI,CAAE,EAAC,CAAC;EAC3F;AACJ;AACA,OAAO,SAASU,mBAAmBA,CAACC,SAAS,EAAEnB,GAAG,EAAE;EAChD,MAAMI,QAAQ,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC;EAC/Be,qBAAqB,CAACD,SAAS,EAAEf,QAAQ,CAAC;AAC9C;AACA,SAASgB,qBAAqBA,CAACD,SAAS,EAAEf,QAAQ,EAAE;EAChD,MAAMiB,KAAK,GAAGjB,QAAQ,CAACkB,KAAK,CAAC,CAAC;EAC9B,IAAIlB,QAAQ,CAACM,MAAM,KAAK,CAAC,EAAE;IACvB;IACA,OAAOS,SAAS,CAACE,KAAK,CAAC;IACvB;EACJ;EACA,IAAIvB,MAAM,CAACyB,IAAI,CAACJ,SAAS,CAAC,CAACK,OAAO,CAACH,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;IAC9C,MAAMlB,KAAK,GAAGgB,SAAS,CAACE,KAAK,CAAC;IAC9B,IAAI,OAAOlB,KAAK,KAAK,QAAQ,IAAI,CAACsB,KAAK,CAACC,OAAO,CAACvB,KAAK,CAAC,EAAE;MACpDiB,qBAAqB,CAACjB,KAAK,EAAEC,QAAQ,CAAC;MACtC,IAAIN,MAAM,CAACyB,IAAI,CAACpB,KAAK,CAAC,CAACO,MAAM,KAAK,CAAC,EAAE;QACjC,OAAOS,SAAS,CAACE,KAAK,CAAC;MAC3B;IACJ;EACJ;AACJ;AACA;AACA;AACA;AACA,OAAO,SAASM,qBAAqBA,CAACC,MAAM,EAAEC,WAAW,EAAEC,YAAY,EAAE;EACrE,SAASC,aAAaA,CAACH,MAAM,EAAEI,IAAI,EAAE;IACjC,IAAIC,OAAO,GAAGL,MAAM;IACpB,KAAK,MAAMM,SAAS,IAAIF,IAAI,EAAE;MAC1B,IAAI,OAAOC,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAAE;QACjD,OAAOE,SAAS;MACpB;MACAF,OAAO,GAAGA,OAAO,CAACC,SAAS,CAAC;IAChC;IACA,OAAOD,OAAO;EAClB;EACA,MAAMD,IAAI,GAAGH,WAAW,CAACxB,KAAK,CAAC,GAAG,CAAC;EACnC,MAAM+B,MAAM,GAAGL,aAAa,CAACH,MAAM,EAAEI,IAAI,CAAC;EAC1C,OAAO,OAAOI,MAAM,KAAK,WAAW,GAAGN,YAAY,GAAGM,MAAM;AAChE;AACA,OAAO,SAASC,6BAA6BA,CAACC,UAAU,EAAE;EACtD,OAAOA,UAAU,CAACC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}