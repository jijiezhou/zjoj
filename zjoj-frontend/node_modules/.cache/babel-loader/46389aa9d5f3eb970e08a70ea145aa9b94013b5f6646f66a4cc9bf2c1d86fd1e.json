{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { ComposedTreeDelegate } from './abstractTree.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { CompressibleObjectTree, ObjectTree } from './objectTree.js';\nimport { ObjectTreeElementCollapseState, TreeError, WeakMapper } from './tree.js';\nimport { createCancelablePromise, Promises, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { isCancellationError, onUnexpectedError } from '../../../common/errors.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nimport { DisposableStore, dispose } from '../../../common/lifecycle.js';\nimport { isIterable } from '../../../common/types.js';\nfunction createAsyncDataTreeNode(props) {\n  return {\n    ...props,\n    children: [],\n    refreshPromise: undefined,\n    stale: true,\n    slow: false,\n    forceExpanded: false\n  };\n}\nfunction isAncestor(ancestor, descendant) {\n  if (!descendant.parent) {\n    return false;\n  } else if (descendant.parent === ancestor) {\n    return true;\n  } else {\n    return isAncestor(ancestor, descendant.parent);\n  }\n}\nfunction intersects(node, other) {\n  return node === other || isAncestor(node, other) || isAncestor(other, node);\n}\nclass AsyncDataTreeNodeWrapper {\n  get element() {\n    return this.node.element.element;\n  }\n  get children() {\n    return this.node.children.map(node => new AsyncDataTreeNodeWrapper(node));\n  }\n  get depth() {\n    return this.node.depth;\n  }\n  get visibleChildrenCount() {\n    return this.node.visibleChildrenCount;\n  }\n  get visibleChildIndex() {\n    return this.node.visibleChildIndex;\n  }\n  get collapsible() {\n    return this.node.collapsible;\n  }\n  get collapsed() {\n    return this.node.collapsed;\n  }\n  get visible() {\n    return this.node.visible;\n  }\n  get filterData() {\n    return this.node.filterData;\n  }\n  constructor(node) {\n    this.node = node;\n  }\n}\nclass AsyncDataTreeRenderer {\n  constructor(renderer, nodeMapper, onDidChangeTwistieState) {\n    this.renderer = renderer;\n    this.nodeMapper = nodeMapper;\n    this.onDidChangeTwistieState = onDidChangeTwistieState;\n    this.renderedNodes = new Map();\n    this.templateId = renderer.templateId;\n  }\n  renderTemplate(container) {\n    const templateData = this.renderer.renderTemplate(container);\n    return {\n      templateData\n    };\n  }\n  renderElement(node, index, templateData, height) {\n    this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  renderTwistie(element, twistieElement) {\n    if (element.slow) {\n      twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n      return true;\n    } else {\n      twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n      return false;\n    }\n  }\n  disposeElement(node, index, templateData, height) {\n    var _a, _b;\n    (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.templateData);\n  }\n  dispose() {\n    this.renderedNodes.clear();\n  }\n}\nfunction asTreeEvent(e) {\n  return {\n    browserEvent: e.browserEvent,\n    elements: e.elements.map(e => e.element)\n  };\n}\nfunction asTreeMouseEvent(e) {\n  return {\n    browserEvent: e.browserEvent,\n    element: e.element && e.element.element,\n    target: e.target\n  };\n}\nclass AsyncDataTreeElementsDragAndDropData extends ElementsDragAndDropData {\n  constructor(data) {\n    super(data.elements.map(node => node.element));\n    this.data = data;\n  }\n}\nfunction asAsyncDataTreeDragAndDropData(data) {\n  if (data instanceof ElementsDragAndDropData) {\n    return new AsyncDataTreeElementsDragAndDropData(data);\n  }\n  return data;\n}\nclass AsyncDataTreeNodeListDragAndDrop {\n  constructor(dnd) {\n    this.dnd = dnd;\n  }\n  getDragURI(node) {\n    return this.dnd.getDragURI(node.element);\n  }\n  getDragLabel(nodes, originalEvent) {\n    if (this.dnd.getDragLabel) {\n      return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n    }\n    return undefined;\n  }\n  onDragStart(data, originalEvent) {\n    var _a, _b;\n    (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asAsyncDataTreeDragAndDropData(data), originalEvent);\n  }\n  onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\n    return this.dnd.onDragOver(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n  }\n  drop(data, targetNode, targetIndex, originalEvent) {\n    this.dnd.drop(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n  }\n  onDragEnd(originalEvent) {\n    var _a, _b;\n    (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n  }\n  dispose() {\n    this.dnd.dispose();\n  }\n}\nfunction asObjectTreeOptions(options) {\n  return options && {\n    ...options,\n    collapseByDefault: true,\n    identityProvider: options.identityProvider && {\n      getId(el) {\n        return options.identityProvider.getId(el.element);\n      }\n    },\n    dnd: options.dnd && new AsyncDataTreeNodeListDragAndDrop(options.dnd),\n    multipleSelectionController: options.multipleSelectionController && {\n      isSelectionSingleChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionSingleChangeEvent({\n          ...e,\n          element: e.element\n        });\n      },\n      isSelectionRangeChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionRangeChangeEvent({\n          ...e,\n          element: e.element\n        });\n      }\n    },\n    accessibilityProvider: options.accessibilityProvider && {\n      ...options.accessibilityProvider,\n      getPosInSet: undefined,\n      getSetSize: undefined,\n      getRole: options.accessibilityProvider.getRole ? el => {\n        return options.accessibilityProvider.getRole(el.element);\n      } : () => 'treeitem',\n      isChecked: options.accessibilityProvider.isChecked ? e => {\n        var _a;\n        return !!((_a = options.accessibilityProvider) === null || _a === void 0 ? void 0 : _a.isChecked(e.element));\n      } : undefined,\n      getAriaLabel(e) {\n        return options.accessibilityProvider.getAriaLabel(e.element);\n      },\n      getWidgetAriaLabel() {\n        return options.accessibilityProvider.getWidgetAriaLabel();\n      },\n      getWidgetRole: options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n      getAriaLevel: options.accessibilityProvider.getAriaLevel && (node => {\n        return options.accessibilityProvider.getAriaLevel(node.element);\n      }),\n      getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n        return options.accessibilityProvider.getActiveDescendantId(node.element);\n      })\n    },\n    filter: options.filter && {\n      filter(e, parentVisibility) {\n        return options.filter.filter(e.element, parentVisibility);\n      }\n    },\n    keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n      ...options.keyboardNavigationLabelProvider,\n      getKeyboardNavigationLabel(e) {\n        return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e.element);\n      }\n    },\n    sorter: undefined,\n    expandOnlyOnTwistieClick: typeof options.expandOnlyOnTwistieClick === 'undefined' ? undefined : typeof options.expandOnlyOnTwistieClick !== 'function' ? options.expandOnlyOnTwistieClick : e => options.expandOnlyOnTwistieClick(e.element),\n    defaultFindVisibility: e => {\n      if (e.hasChildren && e.stale) {\n        return 1 /* TreeVisibility.Visible */;\n      } else if (typeof options.defaultFindVisibility === 'number') {\n        return options.defaultFindVisibility;\n      } else if (typeof options.defaultFindVisibility === 'undefined') {\n        return 2 /* TreeVisibility.Recurse */;\n      } else {\n        return options.defaultFindVisibility(e.element);\n      }\n    }\n  };\n}\nfunction dfs(node, fn) {\n  fn(node);\n  node.children.forEach(child => dfs(child, fn));\n}\nexport class AsyncDataTree {\n  get onDidScroll() {\n    return this.tree.onDidScroll;\n  }\n  get onDidChangeFocus() {\n    return Event.map(this.tree.onDidChangeFocus, asTreeEvent);\n  }\n  get onDidChangeSelection() {\n    return Event.map(this.tree.onDidChangeSelection, asTreeEvent);\n  }\n  get onMouseDblClick() {\n    return Event.map(this.tree.onMouseDblClick, asTreeMouseEvent);\n  }\n  get onPointer() {\n    return Event.map(this.tree.onPointer, asTreeMouseEvent);\n  }\n  get onDidFocus() {\n    return this.tree.onDidFocus;\n  }\n  /**\n   * To be used internally only!\n   * @deprecated\n   */\n  get onDidChangeModel() {\n    return this.tree.onDidChangeModel;\n  }\n  get onDidChangeCollapseState() {\n    return this.tree.onDidChangeCollapseState;\n  }\n  get onDidChangeFindOpenState() {\n    return this.tree.onDidChangeFindOpenState;\n  }\n  get onDidDispose() {\n    return this.tree.onDidDispose;\n  }\n  constructor(user, container, delegate, renderers, dataSource, options = {}) {\n    this.user = user;\n    this.dataSource = dataSource;\n    this.nodes = new Map();\n    this.subTreeRefreshPromises = new Map();\n    this.refreshPromises = new Map();\n    this._onDidRender = new Emitter();\n    this._onDidChangeNodeSlowState = new Emitter();\n    this.nodeMapper = new WeakMapper(node => new AsyncDataTreeNodeWrapper(node));\n    this.disposables = new DisposableStore();\n    this.identityProvider = options.identityProvider;\n    this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n    this.sorter = options.sorter;\n    this.getDefaultCollapseState = e => options.collapseByDefault ? options.collapseByDefault(e) ? ObjectTreeElementCollapseState.PreserveOrCollapsed : ObjectTreeElementCollapseState.PreserveOrExpanded : undefined;\n    this.tree = this.createTree(user, container, delegate, renderers, options);\n    this.onDidChangeFindMode = this.tree.onDidChangeFindMode;\n    this.root = createAsyncDataTreeNode({\n      element: undefined,\n      parent: null,\n      hasChildren: true,\n      defaultCollapseState: undefined\n    });\n    if (this.identityProvider) {\n      this.root = {\n        ...this.root,\n        id: null\n      };\n    }\n    this.nodes.set(null, this.root);\n    this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);\n  }\n  createTree(user, container, delegate, renderers, options) {\n    const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n    const objectTreeRenderers = renderers.map(r => new AsyncDataTreeRenderer(r, this.nodeMapper, this._onDidChangeNodeSlowState.event));\n    const objectTreeOptions = asObjectTreeOptions(options) || {};\n    return new ObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n  }\n  updateOptions(options = {}) {\n    this.tree.updateOptions(options);\n  }\n  // Widget\n  getHTMLElement() {\n    return this.tree.getHTMLElement();\n  }\n  get scrollTop() {\n    return this.tree.scrollTop;\n  }\n  set scrollTop(scrollTop) {\n    this.tree.scrollTop = scrollTop;\n  }\n  get scrollHeight() {\n    return this.tree.scrollHeight;\n  }\n  get renderHeight() {\n    return this.tree.renderHeight;\n  }\n  domFocus() {\n    this.tree.domFocus();\n  }\n  layout(height, width) {\n    this.tree.layout(height, width);\n  }\n  style(styles) {\n    this.tree.style(styles);\n  }\n  // Model\n  getInput() {\n    return this.root.element;\n  }\n  async setInput(input, viewState) {\n    this.refreshPromises.forEach(promise => promise.cancel());\n    this.refreshPromises.clear();\n    this.root.element = input;\n    const viewStateContext = viewState && {\n      viewState,\n      focus: [],\n      selection: []\n    };\n    await this._updateChildren(input, true, false, viewStateContext);\n    if (viewStateContext) {\n      this.tree.setFocus(viewStateContext.focus);\n      this.tree.setSelection(viewStateContext.selection);\n    }\n    if (viewState && typeof viewState.scrollTop === 'number') {\n      this.scrollTop = viewState.scrollTop;\n    }\n  }\n  async _updateChildren(element = this.root.element, recursive = true, rerender = false, viewStateContext, options) {\n    if (typeof this.root.element === 'undefined') {\n      throw new TreeError(this.user, 'Tree input not set');\n    }\n    if (this.root.refreshPromise) {\n      await this.root.refreshPromise;\n      await Event.toPromise(this._onDidRender.event);\n    }\n    const node = this.getDataNode(element);\n    await this.refreshAndRenderNode(node, recursive, viewStateContext, options);\n    if (rerender) {\n      try {\n        this.tree.rerender(node);\n      } catch (_a) {\n        // missing nodes are fine, this could've resulted from\n        // parallel refresh calls, removing `node` altogether\n      }\n    }\n  }\n  // View\n  rerender(element) {\n    if (element === undefined || element === this.root.element) {\n      this.tree.rerender();\n      return;\n    }\n    const node = this.getDataNode(element);\n    this.tree.rerender(node);\n  }\n  // Tree\n  getNode(element = this.root.element) {\n    const dataNode = this.getDataNode(element);\n    const node = this.tree.getNode(dataNode === this.root ? null : dataNode);\n    return this.nodeMapper.map(node);\n  }\n  collapse(element, recursive = false) {\n    const node = this.getDataNode(element);\n    return this.tree.collapse(node === this.root ? null : node, recursive);\n  }\n  async expand(element, recursive = false) {\n    if (typeof this.root.element === 'undefined') {\n      throw new TreeError(this.user, 'Tree input not set');\n    }\n    if (this.root.refreshPromise) {\n      await this.root.refreshPromise;\n      await Event.toPromise(this._onDidRender.event);\n    }\n    const node = this.getDataNode(element);\n    if (this.tree.hasElement(node) && !this.tree.isCollapsible(node)) {\n      return false;\n    }\n    if (node.refreshPromise) {\n      await this.root.refreshPromise;\n      await Event.toPromise(this._onDidRender.event);\n    }\n    if (node !== this.root && !node.refreshPromise && !this.tree.isCollapsed(node)) {\n      return false;\n    }\n    const result = this.tree.expand(node === this.root ? null : node, recursive);\n    if (node.refreshPromise) {\n      await this.root.refreshPromise;\n      await Event.toPromise(this._onDidRender.event);\n    }\n    return result;\n  }\n  setSelection(elements, browserEvent) {\n    const nodes = elements.map(e => this.getDataNode(e));\n    this.tree.setSelection(nodes, browserEvent);\n  }\n  getSelection() {\n    const nodes = this.tree.getSelection();\n    return nodes.map(n => n.element);\n  }\n  setFocus(elements, browserEvent) {\n    const nodes = elements.map(e => this.getDataNode(e));\n    this.tree.setFocus(nodes, browserEvent);\n  }\n  getFocus() {\n    const nodes = this.tree.getFocus();\n    return nodes.map(n => n.element);\n  }\n  reveal(element, relativeTop) {\n    this.tree.reveal(this.getDataNode(element), relativeTop);\n  }\n  // Tree navigation\n  getParentElement(element) {\n    const node = this.tree.getParentElement(this.getDataNode(element));\n    return node && node.element;\n  }\n  getFirstElementChild(element = this.root.element) {\n    const dataNode = this.getDataNode(element);\n    const node = this.tree.getFirstElementChild(dataNode === this.root ? null : dataNode);\n    return node && node.element;\n  }\n  // Implementation\n  getDataNode(element) {\n    const node = this.nodes.get(element === this.root.element ? null : element);\n    if (!node) {\n      throw new TreeError(this.user, `Data tree node not found: ${element}`);\n    }\n    return node;\n  }\n  async refreshAndRenderNode(node, recursive, viewStateContext, options) {\n    await this.refreshNode(node, recursive, viewStateContext);\n    this.render(node, viewStateContext, options);\n  }\n  async refreshNode(node, recursive, viewStateContext) {\n    let result;\n    this.subTreeRefreshPromises.forEach((refreshPromise, refreshNode) => {\n      if (!result && intersects(refreshNode, node)) {\n        result = refreshPromise.then(() => this.refreshNode(node, recursive, viewStateContext));\n      }\n    });\n    if (result) {\n      return result;\n    }\n    if (node !== this.root) {\n      const treeNode = this.tree.getNode(node);\n      if (treeNode.collapsed) {\n        node.hasChildren = !!this.dataSource.hasChildren(node.element);\n        node.stale = true;\n        return;\n      }\n    }\n    return this.doRefreshSubTree(node, recursive, viewStateContext);\n  }\n  async doRefreshSubTree(node, recursive, viewStateContext) {\n    let done;\n    node.refreshPromise = new Promise(c => done = c);\n    this.subTreeRefreshPromises.set(node, node.refreshPromise);\n    node.refreshPromise.finally(() => {\n      node.refreshPromise = undefined;\n      this.subTreeRefreshPromises.delete(node);\n    });\n    try {\n      const childrenToRefresh = await this.doRefreshNode(node, recursive, viewStateContext);\n      node.stale = false;\n      await Promises.settled(childrenToRefresh.map(child => this.doRefreshSubTree(child, recursive, viewStateContext)));\n    } finally {\n      done();\n    }\n  }\n  async doRefreshNode(node, recursive, viewStateContext) {\n    node.hasChildren = !!this.dataSource.hasChildren(node.element);\n    let childrenPromise;\n    if (!node.hasChildren) {\n      childrenPromise = Promise.resolve(Iterable.empty());\n    } else {\n      const children = this.doGetChildren(node);\n      if (isIterable(children)) {\n        childrenPromise = Promise.resolve(children);\n      } else {\n        const slowTimeout = timeout(800);\n        slowTimeout.then(() => {\n          node.slow = true;\n          this._onDidChangeNodeSlowState.fire(node);\n        }, _ => null);\n        childrenPromise = children.finally(() => slowTimeout.cancel());\n      }\n    }\n    try {\n      const children = await childrenPromise;\n      return this.setChildren(node, children, recursive, viewStateContext);\n    } catch (err) {\n      if (node !== this.root && this.tree.hasElement(node)) {\n        this.tree.collapse(node);\n      }\n      if (isCancellationError(err)) {\n        return [];\n      }\n      throw err;\n    } finally {\n      if (node.slow) {\n        node.slow = false;\n        this._onDidChangeNodeSlowState.fire(node);\n      }\n    }\n  }\n  doGetChildren(node) {\n    let result = this.refreshPromises.get(node);\n    if (result) {\n      return result;\n    }\n    const children = this.dataSource.getChildren(node.element);\n    if (isIterable(children)) {\n      return this.processChildren(children);\n    } else {\n      result = createCancelablePromise(async () => this.processChildren(await children));\n      this.refreshPromises.set(node, result);\n      return result.finally(() => {\n        this.refreshPromises.delete(node);\n      });\n    }\n  }\n  _onDidChangeCollapseState({\n    node,\n    deep\n  }) {\n    if (node.element === null) {\n      return;\n    }\n    if (!node.collapsed && node.element.stale) {\n      if (deep) {\n        this.collapse(node.element.element);\n      } else {\n        this.refreshAndRenderNode(node.element, false).catch(onUnexpectedError);\n      }\n    }\n  }\n  setChildren(node, childrenElementsIterable, recursive, viewStateContext) {\n    const childrenElements = [...childrenElementsIterable];\n    // perf: if the node was and still is a leaf, avoid all this hassle\n    if (node.children.length === 0 && childrenElements.length === 0) {\n      return [];\n    }\n    const nodesToForget = new Map();\n    const childrenTreeNodesById = new Map();\n    for (const child of node.children) {\n      nodesToForget.set(child.element, child);\n      if (this.identityProvider) {\n        childrenTreeNodesById.set(child.id, {\n          node: child,\n          collapsed: this.tree.hasElement(child) && this.tree.isCollapsed(child)\n        });\n      }\n    }\n    const childrenToRefresh = [];\n    const children = childrenElements.map(element => {\n      const hasChildren = !!this.dataSource.hasChildren(element);\n      if (!this.identityProvider) {\n        const asyncDataTreeNode = createAsyncDataTreeNode({\n          element,\n          parent: node,\n          hasChildren,\n          defaultCollapseState: this.getDefaultCollapseState(element)\n        });\n        if (hasChildren && asyncDataTreeNode.defaultCollapseState === ObjectTreeElementCollapseState.PreserveOrExpanded) {\n          childrenToRefresh.push(asyncDataTreeNode);\n        }\n        return asyncDataTreeNode;\n      }\n      const id = this.identityProvider.getId(element).toString();\n      const result = childrenTreeNodesById.get(id);\n      if (result) {\n        const asyncDataTreeNode = result.node;\n        nodesToForget.delete(asyncDataTreeNode.element);\n        this.nodes.delete(asyncDataTreeNode.element);\n        this.nodes.set(element, asyncDataTreeNode);\n        asyncDataTreeNode.element = element;\n        asyncDataTreeNode.hasChildren = hasChildren;\n        if (recursive) {\n          if (result.collapsed) {\n            asyncDataTreeNode.children.forEach(node => dfs(node, node => this.nodes.delete(node.element)));\n            asyncDataTreeNode.children.splice(0, asyncDataTreeNode.children.length);\n            asyncDataTreeNode.stale = true;\n          } else {\n            childrenToRefresh.push(asyncDataTreeNode);\n          }\n        } else if (hasChildren && !result.collapsed) {\n          childrenToRefresh.push(asyncDataTreeNode);\n        }\n        return asyncDataTreeNode;\n      }\n      const childAsyncDataTreeNode = createAsyncDataTreeNode({\n        element,\n        parent: node,\n        id,\n        hasChildren,\n        defaultCollapseState: this.getDefaultCollapseState(element)\n      });\n      if (viewStateContext && viewStateContext.viewState.focus && viewStateContext.viewState.focus.indexOf(id) > -1) {\n        viewStateContext.focus.push(childAsyncDataTreeNode);\n      }\n      if (viewStateContext && viewStateContext.viewState.selection && viewStateContext.viewState.selection.indexOf(id) > -1) {\n        viewStateContext.selection.push(childAsyncDataTreeNode);\n      }\n      if (viewStateContext && viewStateContext.viewState.expanded && viewStateContext.viewState.expanded.indexOf(id) > -1) {\n        childrenToRefresh.push(childAsyncDataTreeNode);\n      } else if (hasChildren && childAsyncDataTreeNode.defaultCollapseState === ObjectTreeElementCollapseState.PreserveOrExpanded) {\n        childrenToRefresh.push(childAsyncDataTreeNode);\n      }\n      return childAsyncDataTreeNode;\n    });\n    for (const node of nodesToForget.values()) {\n      dfs(node, node => this.nodes.delete(node.element));\n    }\n    for (const child of children) {\n      this.nodes.set(child.element, child);\n    }\n    node.children.splice(0, node.children.length, ...children);\n    // TODO@joao this doesn't take filter into account\n    if (node !== this.root && this.autoExpandSingleChildren && children.length === 1 && childrenToRefresh.length === 0) {\n      children[0].forceExpanded = true;\n      childrenToRefresh.push(children[0]);\n    }\n    return childrenToRefresh;\n  }\n  render(node, viewStateContext, options) {\n    const children = node.children.map(node => this.asTreeElement(node, viewStateContext));\n    const objectTreeOptions = options && {\n      ...options,\n      diffIdentityProvider: options.diffIdentityProvider && {\n        getId(node) {\n          return options.diffIdentityProvider.getId(node.element);\n        }\n      }\n    };\n    this.tree.setChildren(node === this.root ? null : node, children, objectTreeOptions);\n    if (node !== this.root) {\n      this.tree.setCollapsible(node, node.hasChildren);\n    }\n    this._onDidRender.fire();\n  }\n  asTreeElement(node, viewStateContext) {\n    if (node.stale) {\n      return {\n        element: node,\n        collapsible: node.hasChildren,\n        collapsed: true\n      };\n    }\n    let collapsed;\n    if (viewStateContext && viewStateContext.viewState.expanded && node.id && viewStateContext.viewState.expanded.indexOf(node.id) > -1) {\n      collapsed = false;\n    } else if (node.forceExpanded) {\n      collapsed = false;\n      node.forceExpanded = false;\n    } else {\n      collapsed = node.defaultCollapseState;\n    }\n    return {\n      element: node,\n      children: node.hasChildren ? Iterable.map(node.children, child => this.asTreeElement(child, viewStateContext)) : [],\n      collapsible: node.hasChildren,\n      collapsed\n    };\n  }\n  processChildren(children) {\n    if (this.sorter) {\n      children = [...children].sort(this.sorter.compare.bind(this.sorter));\n    }\n    return children;\n  }\n  dispose() {\n    this.disposables.dispose();\n    this.tree.dispose();\n  }\n}\nclass CompressibleAsyncDataTreeNodeWrapper {\n  get element() {\n    return {\n      elements: this.node.element.elements.map(e => e.element),\n      incompressible: this.node.element.incompressible\n    };\n  }\n  get children() {\n    return this.node.children.map(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n  }\n  get depth() {\n    return this.node.depth;\n  }\n  get visibleChildrenCount() {\n    return this.node.visibleChildrenCount;\n  }\n  get visibleChildIndex() {\n    return this.node.visibleChildIndex;\n  }\n  get collapsible() {\n    return this.node.collapsible;\n  }\n  get collapsed() {\n    return this.node.collapsed;\n  }\n  get visible() {\n    return this.node.visible;\n  }\n  get filterData() {\n    return this.node.filterData;\n  }\n  constructor(node) {\n    this.node = node;\n  }\n}\nclass CompressibleAsyncDataTreeRenderer {\n  constructor(renderer, nodeMapper, compressibleNodeMapperProvider, onDidChangeTwistieState) {\n    this.renderer = renderer;\n    this.nodeMapper = nodeMapper;\n    this.compressibleNodeMapperProvider = compressibleNodeMapperProvider;\n    this.onDidChangeTwistieState = onDidChangeTwistieState;\n    this.renderedNodes = new Map();\n    this.disposables = [];\n    this.templateId = renderer.templateId;\n  }\n  renderTemplate(container) {\n    const templateData = this.renderer.renderTemplate(container);\n    return {\n      templateData\n    };\n  }\n  renderElement(node, index, templateData, height) {\n    this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  renderCompressedElements(node, index, templateData, height) {\n    this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n  }\n  renderTwistie(element, twistieElement) {\n    if (element.slow) {\n      twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n      return true;\n    } else {\n      twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n      return false;\n    }\n  }\n  disposeElement(node, index, templateData, height) {\n    var _a, _b;\n    (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  disposeCompressedElements(node, index, templateData, height) {\n    var _a, _b;\n    (_b = (_a = this.renderer).disposeCompressedElements) === null || _b === void 0 ? void 0 : _b.call(_a, this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n  }\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.templateData);\n  }\n  dispose() {\n    this.renderedNodes.clear();\n    this.disposables = dispose(this.disposables);\n  }\n}\nfunction asCompressibleObjectTreeOptions(options) {\n  const objectTreeOptions = options && asObjectTreeOptions(options);\n  return objectTreeOptions && {\n    ...objectTreeOptions,\n    keyboardNavigationLabelProvider: objectTreeOptions.keyboardNavigationLabelProvider && {\n      ...objectTreeOptions.keyboardNavigationLabelProvider,\n      getCompressedNodeKeyboardNavigationLabel(els) {\n        return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(els.map(e => e.element));\n      }\n    }\n  };\n}\nexport class CompressibleAsyncDataTree extends AsyncDataTree {\n  constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options = {}) {\n    super(user, container, virtualDelegate, renderers, dataSource, options);\n    this.compressionDelegate = compressionDelegate;\n    this.compressibleNodeMapper = new WeakMapper(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n    this.filter = options.filter;\n  }\n  createTree(user, container, delegate, renderers, options) {\n    const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n    const objectTreeRenderers = renderers.map(r => new CompressibleAsyncDataTreeRenderer(r, this.nodeMapper, () => this.compressibleNodeMapper, this._onDidChangeNodeSlowState.event));\n    const objectTreeOptions = asCompressibleObjectTreeOptions(options) || {};\n    return new CompressibleObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n  }\n  asTreeElement(node, viewStateContext) {\n    return {\n      incompressible: this.compressionDelegate.isIncompressible(node.element),\n      ...super.asTreeElement(node, viewStateContext)\n    };\n  }\n  updateOptions(options = {}) {\n    this.tree.updateOptions(options);\n  }\n  render(node, viewStateContext) {\n    if (!this.identityProvider) {\n      return super.render(node, viewStateContext);\n    }\n    // Preserve traits across compressions. Hacky but does the trick.\n    // This is hard to fix properly since it requires rewriting the traits\n    // across trees and lists. Let's just keep it this way for now.\n    const getId = element => this.identityProvider.getId(element).toString();\n    const getUncompressedIds = nodes => {\n      const result = new Set();\n      for (const node of nodes) {\n        const compressedNode = this.tree.getCompressedTreeNode(node === this.root ? null : node);\n        if (!compressedNode.element) {\n          continue;\n        }\n        for (const node of compressedNode.element.elements) {\n          result.add(getId(node.element));\n        }\n      }\n      return result;\n    };\n    const oldSelection = getUncompressedIds(this.tree.getSelection());\n    const oldFocus = getUncompressedIds(this.tree.getFocus());\n    super.render(node, viewStateContext);\n    const selection = this.getSelection();\n    let didChangeSelection = false;\n    const focus = this.getFocus();\n    let didChangeFocus = false;\n    const visit = node => {\n      const compressedNode = node.element;\n      if (compressedNode) {\n        for (let i = 0; i < compressedNode.elements.length; i++) {\n          const id = getId(compressedNode.elements[i].element);\n          const element = compressedNode.elements[compressedNode.elements.length - 1].element;\n          // github.com/microsoft/vscode/issues/85938\n          if (oldSelection.has(id) && selection.indexOf(element) === -1) {\n            selection.push(element);\n            didChangeSelection = true;\n          }\n          if (oldFocus.has(id) && focus.indexOf(element) === -1) {\n            focus.push(element);\n            didChangeFocus = true;\n          }\n        }\n      }\n      node.children.forEach(visit);\n    };\n    visit(this.tree.getCompressedTreeNode(node === this.root ? null : node));\n    if (didChangeSelection) {\n      this.setSelection(selection);\n    }\n    if (didChangeFocus) {\n      this.setFocus(focus);\n    }\n  }\n  // For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\n  // and we have to filter everything beforehand\n  // Related to #85193 and #85835\n  processChildren(children) {\n    if (this.filter) {\n      children = Iterable.filter(children, e => {\n        const result = this.filter.filter(e, 1 /* TreeVisibility.Visible */);\n        const visibility = getVisibility(result);\n        if (visibility === 2 /* TreeVisibility.Recurse */) {\n          throw new Error('Recursive tree visibility not supported in async data compressed trees');\n        }\n        return visibility === 1 /* TreeVisibility.Visible */;\n      });\n    }\n    return super.processChildren(children);\n  }\n}\nfunction getVisibility(filterResult) {\n  if (typeof filterResult === 'boolean') {\n    return filterResult ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n  } else if (isFilterResult(filterResult)) {\n    return getVisibleState(filterResult.visibility);\n  } else {\n    return getVisibleState(filterResult);\n  }\n}","map":{"version":3,"names":["ElementsDragAndDropData","ComposedTreeDelegate","getVisibleState","isFilterResult","CompressibleObjectTree","ObjectTree","ObjectTreeElementCollapseState","TreeError","WeakMapper","createCancelablePromise","Promises","timeout","Codicon","ThemeIcon","isCancellationError","onUnexpectedError","Emitter","Event","Iterable","DisposableStore","dispose","isIterable","createAsyncDataTreeNode","props","children","refreshPromise","undefined","stale","slow","forceExpanded","isAncestor","ancestor","descendant","parent","intersects","node","other","AsyncDataTreeNodeWrapper","element","map","depth","visibleChildrenCount","visibleChildIndex","collapsible","collapsed","visible","filterData","constructor","AsyncDataTreeRenderer","renderer","nodeMapper","onDidChangeTwistieState","renderedNodes","Map","templateId","renderTemplate","container","templateData","renderElement","index","height","renderTwistie","twistieElement","classList","add","asClassNameArray","treeItemLoading","remove","disposeElement","_a","_b","call","disposeTemplate","clear","asTreeEvent","e","browserEvent","elements","asTreeMouseEvent","target","AsyncDataTreeElementsDragAndDropData","data","asAsyncDataTreeDragAndDropData","AsyncDataTreeNodeListDragAndDrop","dnd","getDragURI","getDragLabel","nodes","originalEvent","onDragStart","onDragOver","targetNode","targetIndex","raw","drop","onDragEnd","asObjectTreeOptions","options","collapseByDefault","identityProvider","getId","el","multipleSelectionController","isSelectionSingleChangeEvent","isSelectionRangeChangeEvent","accessibilityProvider","getPosInSet","getSetSize","getRole","isChecked","getAriaLabel","getWidgetAriaLabel","getWidgetRole","getAriaLevel","getActiveDescendantId","filter","parentVisibility","keyboardNavigationLabelProvider","getKeyboardNavigationLabel","sorter","expandOnlyOnTwistieClick","defaultFindVisibility","hasChildren","dfs","fn","forEach","child","AsyncDataTree","onDidScroll","tree","onDidChangeFocus","onDidChangeSelection","onMouseDblClick","onPointer","onDidFocus","onDidChangeModel","onDidChangeCollapseState","onDidChangeFindOpenState","onDidDispose","user","delegate","renderers","dataSource","subTreeRefreshPromises","refreshPromises","_onDidRender","_onDidChangeNodeSlowState","disposables","autoExpandSingleChildren","getDefaultCollapseState","PreserveOrCollapsed","PreserveOrExpanded","createTree","onDidChangeFindMode","root","defaultCollapseState","id","set","_onDidChangeCollapseState","objectTreeDelegate","objectTreeRenderers","r","event","objectTreeOptions","updateOptions","getHTMLElement","scrollTop","scrollHeight","renderHeight","domFocus","layout","width","style","styles","getInput","setInput","input","viewState","promise","cancel","viewStateContext","focus","selection","_updateChildren","setFocus","setSelection","recursive","rerender","toPromise","getDataNode","refreshAndRenderNode","getNode","dataNode","collapse","expand","hasElement","isCollapsible","isCollapsed","result","getSelection","n","getFocus","reveal","relativeTop","getParentElement","getFirstElementChild","get","refreshNode","render","then","treeNode","doRefreshSubTree","done","Promise","c","finally","delete","childrenToRefresh","doRefreshNode","settled","childrenPromise","resolve","empty","doGetChildren","slowTimeout","fire","_","setChildren","err","getChildren","processChildren","deep","catch","childrenElementsIterable","childrenElements","length","nodesToForget","childrenTreeNodesById","asyncDataTreeNode","push","toString","splice","childAsyncDataTreeNode","indexOf","expanded","values","asTreeElement","diffIdentityProvider","setCollapsible","sort","compare","bind","CompressibleAsyncDataTreeNodeWrapper","incompressible","CompressibleAsyncDataTreeRenderer","compressibleNodeMapperProvider","renderCompressedElements","disposeCompressedElements","asCompressibleObjectTreeOptions","getCompressedNodeKeyboardNavigationLabel","els","CompressibleAsyncDataTree","virtualDelegate","compressionDelegate","compressibleNodeMapper","isIncompressible","getUncompressedIds","Set","compressedNode","getCompressedTreeNode","oldSelection","oldFocus","didChangeSelection","didChangeFocus","visit","i","has","visibility","getVisibility","Error","filterResult"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/asyncDataTree.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { ComposedTreeDelegate } from './abstractTree.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { CompressibleObjectTree, ObjectTree } from './objectTree.js';\nimport { ObjectTreeElementCollapseState, TreeError, WeakMapper } from './tree.js';\nimport { createCancelablePromise, Promises, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { isCancellationError, onUnexpectedError } from '../../../common/errors.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nimport { DisposableStore, dispose } from '../../../common/lifecycle.js';\nimport { isIterable } from '../../../common/types.js';\nfunction createAsyncDataTreeNode(props) {\n    return {\n        ...props,\n        children: [],\n        refreshPromise: undefined,\n        stale: true,\n        slow: false,\n        forceExpanded: false\n    };\n}\nfunction isAncestor(ancestor, descendant) {\n    if (!descendant.parent) {\n        return false;\n    }\n    else if (descendant.parent === ancestor) {\n        return true;\n    }\n    else {\n        return isAncestor(ancestor, descendant.parent);\n    }\n}\nfunction intersects(node, other) {\n    return node === other || isAncestor(node, other) || isAncestor(other, node);\n}\nclass AsyncDataTreeNodeWrapper {\n    get element() { return this.node.element.element; }\n    get children() { return this.node.children.map(node => new AsyncDataTreeNodeWrapper(node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n    constructor(node) {\n        this.node = node;\n    }\n}\nclass AsyncDataTreeRenderer {\n    constructor(renderer, nodeMapper, onDidChangeTwistieState) {\n        this.renderer = renderer;\n        this.nodeMapper = nodeMapper;\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\n        this.renderedNodes = new Map();\n        this.templateId = renderer.templateId;\n    }\n    renderTemplate(container) {\n        const templateData = this.renderer.renderTemplate(container);\n        return { templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    renderTwistie(element, twistieElement) {\n        if (element.slow) {\n            twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return true;\n        }\n        else {\n            twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return false;\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    dispose() {\n        this.renderedNodes.clear();\n    }\n}\nfunction asTreeEvent(e) {\n    return {\n        browserEvent: e.browserEvent,\n        elements: e.elements.map(e => e.element)\n    };\n}\nfunction asTreeMouseEvent(e) {\n    return {\n        browserEvent: e.browserEvent,\n        element: e.element && e.element.element,\n        target: e.target\n    };\n}\nclass AsyncDataTreeElementsDragAndDropData extends ElementsDragAndDropData {\n    constructor(data) {\n        super(data.elements.map(node => node.element));\n        this.data = data;\n    }\n}\nfunction asAsyncDataTreeDragAndDropData(data) {\n    if (data instanceof ElementsDragAndDropData) {\n        return new AsyncDataTreeElementsDragAndDropData(data);\n    }\n    return data;\n}\nclass AsyncDataTreeNodeListDragAndDrop {\n    constructor(dnd) {\n        this.dnd = dnd;\n    }\n    getDragURI(node) {\n        return this.dnd.getDragURI(node.element);\n    }\n    getDragLabel(nodes, originalEvent) {\n        if (this.dnd.getDragLabel) {\n            return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n        }\n        return undefined;\n    }\n    onDragStart(data, originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asAsyncDataTreeDragAndDropData(data), originalEvent);\n    }\n    onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\n        return this.dnd.onDragOver(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    drop(data, targetNode, targetIndex, originalEvent) {\n        this.dnd.drop(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    onDragEnd(originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n    }\n    dispose() {\n        this.dnd.dispose();\n    }\n}\nfunction asObjectTreeOptions(options) {\n    return options && {\n        ...options,\n        collapseByDefault: true,\n        identityProvider: options.identityProvider && {\n            getId(el) {\n                return options.identityProvider.getId(el.element);\n            }\n        },\n        dnd: options.dnd && new AsyncDataTreeNodeListDragAndDrop(options.dnd),\n        multipleSelectionController: options.multipleSelectionController && {\n            isSelectionSingleChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionSingleChangeEvent({ ...e, element: e.element });\n            },\n            isSelectionRangeChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionRangeChangeEvent({ ...e, element: e.element });\n            }\n        },\n        accessibilityProvider: options.accessibilityProvider && {\n            ...options.accessibilityProvider,\n            getPosInSet: undefined,\n            getSetSize: undefined,\n            getRole: options.accessibilityProvider.getRole ? (el) => {\n                return options.accessibilityProvider.getRole(el.element);\n            } : () => 'treeitem',\n            isChecked: options.accessibilityProvider.isChecked ? (e) => {\n                var _a;\n                return !!((_a = options.accessibilityProvider) === null || _a === void 0 ? void 0 : _a.isChecked(e.element));\n            } : undefined,\n            getAriaLabel(e) {\n                return options.accessibilityProvider.getAriaLabel(e.element);\n            },\n            getWidgetAriaLabel() {\n                return options.accessibilityProvider.getWidgetAriaLabel();\n            },\n            getWidgetRole: options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n            getAriaLevel: options.accessibilityProvider.getAriaLevel && (node => {\n                return options.accessibilityProvider.getAriaLevel(node.element);\n            }),\n            getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n                return options.accessibilityProvider.getActiveDescendantId(node.element);\n            })\n        },\n        filter: options.filter && {\n            filter(e, parentVisibility) {\n                return options.filter.filter(e.element, parentVisibility);\n            }\n        },\n        keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n            ...options.keyboardNavigationLabelProvider,\n            getKeyboardNavigationLabel(e) {\n                return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e.element);\n            }\n        },\n        sorter: undefined,\n        expandOnlyOnTwistieClick: typeof options.expandOnlyOnTwistieClick === 'undefined' ? undefined : (typeof options.expandOnlyOnTwistieClick !== 'function' ? options.expandOnlyOnTwistieClick : (e => options.expandOnlyOnTwistieClick(e.element))),\n        defaultFindVisibility: e => {\n            if (e.hasChildren && e.stale) {\n                return 1 /* TreeVisibility.Visible */;\n            }\n            else if (typeof options.defaultFindVisibility === 'number') {\n                return options.defaultFindVisibility;\n            }\n            else if (typeof options.defaultFindVisibility === 'undefined') {\n                return 2 /* TreeVisibility.Recurse */;\n            }\n            else {\n                return options.defaultFindVisibility(e.element);\n            }\n        }\n    };\n}\nfunction dfs(node, fn) {\n    fn(node);\n    node.children.forEach(child => dfs(child, fn));\n}\nexport class AsyncDataTree {\n    get onDidScroll() { return this.tree.onDidScroll; }\n    get onDidChangeFocus() { return Event.map(this.tree.onDidChangeFocus, asTreeEvent); }\n    get onDidChangeSelection() { return Event.map(this.tree.onDidChangeSelection, asTreeEvent); }\n    get onMouseDblClick() { return Event.map(this.tree.onMouseDblClick, asTreeMouseEvent); }\n    get onPointer() { return Event.map(this.tree.onPointer, asTreeMouseEvent); }\n    get onDidFocus() { return this.tree.onDidFocus; }\n    /**\n     * To be used internally only!\n     * @deprecated\n     */\n    get onDidChangeModel() { return this.tree.onDidChangeModel; }\n    get onDidChangeCollapseState() { return this.tree.onDidChangeCollapseState; }\n    get onDidChangeFindOpenState() { return this.tree.onDidChangeFindOpenState; }\n    get onDidDispose() { return this.tree.onDidDispose; }\n    constructor(user, container, delegate, renderers, dataSource, options = {}) {\n        this.user = user;\n        this.dataSource = dataSource;\n        this.nodes = new Map();\n        this.subTreeRefreshPromises = new Map();\n        this.refreshPromises = new Map();\n        this._onDidRender = new Emitter();\n        this._onDidChangeNodeSlowState = new Emitter();\n        this.nodeMapper = new WeakMapper(node => new AsyncDataTreeNodeWrapper(node));\n        this.disposables = new DisposableStore();\n        this.identityProvider = options.identityProvider;\n        this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n        this.sorter = options.sorter;\n        this.getDefaultCollapseState = e => options.collapseByDefault ? (options.collapseByDefault(e) ? ObjectTreeElementCollapseState.PreserveOrCollapsed : ObjectTreeElementCollapseState.PreserveOrExpanded) : undefined;\n        this.tree = this.createTree(user, container, delegate, renderers, options);\n        this.onDidChangeFindMode = this.tree.onDidChangeFindMode;\n        this.root = createAsyncDataTreeNode({\n            element: undefined,\n            parent: null,\n            hasChildren: true,\n            defaultCollapseState: undefined\n        });\n        if (this.identityProvider) {\n            this.root = {\n                ...this.root,\n                id: null\n            };\n        }\n        this.nodes.set(null, this.root);\n        this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);\n    }\n    createTree(user, container, delegate, renderers, options) {\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n        const objectTreeRenderers = renderers.map(r => new AsyncDataTreeRenderer(r, this.nodeMapper, this._onDidChangeNodeSlowState.event));\n        const objectTreeOptions = asObjectTreeOptions(options) || {};\n        return new ObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n    updateOptions(options = {}) {\n        this.tree.updateOptions(options);\n    }\n    // Widget\n    getHTMLElement() {\n        return this.tree.getHTMLElement();\n    }\n    get scrollTop() {\n        return this.tree.scrollTop;\n    }\n    set scrollTop(scrollTop) {\n        this.tree.scrollTop = scrollTop;\n    }\n    get scrollHeight() {\n        return this.tree.scrollHeight;\n    }\n    get renderHeight() {\n        return this.tree.renderHeight;\n    }\n    domFocus() {\n        this.tree.domFocus();\n    }\n    layout(height, width) {\n        this.tree.layout(height, width);\n    }\n    style(styles) {\n        this.tree.style(styles);\n    }\n    // Model\n    getInput() {\n        return this.root.element;\n    }\n    async setInput(input, viewState) {\n        this.refreshPromises.forEach(promise => promise.cancel());\n        this.refreshPromises.clear();\n        this.root.element = input;\n        const viewStateContext = viewState && { viewState, focus: [], selection: [] };\n        await this._updateChildren(input, true, false, viewStateContext);\n        if (viewStateContext) {\n            this.tree.setFocus(viewStateContext.focus);\n            this.tree.setSelection(viewStateContext.selection);\n        }\n        if (viewState && typeof viewState.scrollTop === 'number') {\n            this.scrollTop = viewState.scrollTop;\n        }\n    }\n    async _updateChildren(element = this.root.element, recursive = true, rerender = false, viewStateContext, options) {\n        if (typeof this.root.element === 'undefined') {\n            throw new TreeError(this.user, 'Tree input not set');\n        }\n        if (this.root.refreshPromise) {\n            await this.root.refreshPromise;\n            await Event.toPromise(this._onDidRender.event);\n        }\n        const node = this.getDataNode(element);\n        await this.refreshAndRenderNode(node, recursive, viewStateContext, options);\n        if (rerender) {\n            try {\n                this.tree.rerender(node);\n            }\n            catch (_a) {\n                // missing nodes are fine, this could've resulted from\n                // parallel refresh calls, removing `node` altogether\n            }\n        }\n    }\n    // View\n    rerender(element) {\n        if (element === undefined || element === this.root.element) {\n            this.tree.rerender();\n            return;\n        }\n        const node = this.getDataNode(element);\n        this.tree.rerender(node);\n    }\n    // Tree\n    getNode(element = this.root.element) {\n        const dataNode = this.getDataNode(element);\n        const node = this.tree.getNode(dataNode === this.root ? null : dataNode);\n        return this.nodeMapper.map(node);\n    }\n    collapse(element, recursive = false) {\n        const node = this.getDataNode(element);\n        return this.tree.collapse(node === this.root ? null : node, recursive);\n    }\n    async expand(element, recursive = false) {\n        if (typeof this.root.element === 'undefined') {\n            throw new TreeError(this.user, 'Tree input not set');\n        }\n        if (this.root.refreshPromise) {\n            await this.root.refreshPromise;\n            await Event.toPromise(this._onDidRender.event);\n        }\n        const node = this.getDataNode(element);\n        if (this.tree.hasElement(node) && !this.tree.isCollapsible(node)) {\n            return false;\n        }\n        if (node.refreshPromise) {\n            await this.root.refreshPromise;\n            await Event.toPromise(this._onDidRender.event);\n        }\n        if (node !== this.root && !node.refreshPromise && !this.tree.isCollapsed(node)) {\n            return false;\n        }\n        const result = this.tree.expand(node === this.root ? null : node, recursive);\n        if (node.refreshPromise) {\n            await this.root.refreshPromise;\n            await Event.toPromise(this._onDidRender.event);\n        }\n        return result;\n    }\n    setSelection(elements, browserEvent) {\n        const nodes = elements.map(e => this.getDataNode(e));\n        this.tree.setSelection(nodes, browserEvent);\n    }\n    getSelection() {\n        const nodes = this.tree.getSelection();\n        return nodes.map(n => n.element);\n    }\n    setFocus(elements, browserEvent) {\n        const nodes = elements.map(e => this.getDataNode(e));\n        this.tree.setFocus(nodes, browserEvent);\n    }\n    getFocus() {\n        const nodes = this.tree.getFocus();\n        return nodes.map(n => n.element);\n    }\n    reveal(element, relativeTop) {\n        this.tree.reveal(this.getDataNode(element), relativeTop);\n    }\n    // Tree navigation\n    getParentElement(element) {\n        const node = this.tree.getParentElement(this.getDataNode(element));\n        return (node && node.element);\n    }\n    getFirstElementChild(element = this.root.element) {\n        const dataNode = this.getDataNode(element);\n        const node = this.tree.getFirstElementChild(dataNode === this.root ? null : dataNode);\n        return (node && node.element);\n    }\n    // Implementation\n    getDataNode(element) {\n        const node = this.nodes.get((element === this.root.element ? null : element));\n        if (!node) {\n            throw new TreeError(this.user, `Data tree node not found: ${element}`);\n        }\n        return node;\n    }\n    async refreshAndRenderNode(node, recursive, viewStateContext, options) {\n        await this.refreshNode(node, recursive, viewStateContext);\n        this.render(node, viewStateContext, options);\n    }\n    async refreshNode(node, recursive, viewStateContext) {\n        let result;\n        this.subTreeRefreshPromises.forEach((refreshPromise, refreshNode) => {\n            if (!result && intersects(refreshNode, node)) {\n                result = refreshPromise.then(() => this.refreshNode(node, recursive, viewStateContext));\n            }\n        });\n        if (result) {\n            return result;\n        }\n        if (node !== this.root) {\n            const treeNode = this.tree.getNode(node);\n            if (treeNode.collapsed) {\n                node.hasChildren = !!this.dataSource.hasChildren(node.element);\n                node.stale = true;\n                return;\n            }\n        }\n        return this.doRefreshSubTree(node, recursive, viewStateContext);\n    }\n    async doRefreshSubTree(node, recursive, viewStateContext) {\n        let done;\n        node.refreshPromise = new Promise(c => done = c);\n        this.subTreeRefreshPromises.set(node, node.refreshPromise);\n        node.refreshPromise.finally(() => {\n            node.refreshPromise = undefined;\n            this.subTreeRefreshPromises.delete(node);\n        });\n        try {\n            const childrenToRefresh = await this.doRefreshNode(node, recursive, viewStateContext);\n            node.stale = false;\n            await Promises.settled(childrenToRefresh.map(child => this.doRefreshSubTree(child, recursive, viewStateContext)));\n        }\n        finally {\n            done();\n        }\n    }\n    async doRefreshNode(node, recursive, viewStateContext) {\n        node.hasChildren = !!this.dataSource.hasChildren(node.element);\n        let childrenPromise;\n        if (!node.hasChildren) {\n            childrenPromise = Promise.resolve(Iterable.empty());\n        }\n        else {\n            const children = this.doGetChildren(node);\n            if (isIterable(children)) {\n                childrenPromise = Promise.resolve(children);\n            }\n            else {\n                const slowTimeout = timeout(800);\n                slowTimeout.then(() => {\n                    node.slow = true;\n                    this._onDidChangeNodeSlowState.fire(node);\n                }, _ => null);\n                childrenPromise = children.finally(() => slowTimeout.cancel());\n            }\n        }\n        try {\n            const children = await childrenPromise;\n            return this.setChildren(node, children, recursive, viewStateContext);\n        }\n        catch (err) {\n            if (node !== this.root && this.tree.hasElement(node)) {\n                this.tree.collapse(node);\n            }\n            if (isCancellationError(err)) {\n                return [];\n            }\n            throw err;\n        }\n        finally {\n            if (node.slow) {\n                node.slow = false;\n                this._onDidChangeNodeSlowState.fire(node);\n            }\n        }\n    }\n    doGetChildren(node) {\n        let result = this.refreshPromises.get(node);\n        if (result) {\n            return result;\n        }\n        const children = this.dataSource.getChildren(node.element);\n        if (isIterable(children)) {\n            return this.processChildren(children);\n        }\n        else {\n            result = createCancelablePromise(async () => this.processChildren(await children));\n            this.refreshPromises.set(node, result);\n            return result.finally(() => { this.refreshPromises.delete(node); });\n        }\n    }\n    _onDidChangeCollapseState({ node, deep }) {\n        if (node.element === null) {\n            return;\n        }\n        if (!node.collapsed && node.element.stale) {\n            if (deep) {\n                this.collapse(node.element.element);\n            }\n            else {\n                this.refreshAndRenderNode(node.element, false)\n                    .catch(onUnexpectedError);\n            }\n        }\n    }\n    setChildren(node, childrenElementsIterable, recursive, viewStateContext) {\n        const childrenElements = [...childrenElementsIterable];\n        // perf: if the node was and still is a leaf, avoid all this hassle\n        if (node.children.length === 0 && childrenElements.length === 0) {\n            return [];\n        }\n        const nodesToForget = new Map();\n        const childrenTreeNodesById = new Map();\n        for (const child of node.children) {\n            nodesToForget.set(child.element, child);\n            if (this.identityProvider) {\n                childrenTreeNodesById.set(child.id, { node: child, collapsed: this.tree.hasElement(child) && this.tree.isCollapsed(child) });\n            }\n        }\n        const childrenToRefresh = [];\n        const children = childrenElements.map(element => {\n            const hasChildren = !!this.dataSource.hasChildren(element);\n            if (!this.identityProvider) {\n                const asyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, hasChildren, defaultCollapseState: this.getDefaultCollapseState(element) });\n                if (hasChildren && asyncDataTreeNode.defaultCollapseState === ObjectTreeElementCollapseState.PreserveOrExpanded) {\n                    childrenToRefresh.push(asyncDataTreeNode);\n                }\n                return asyncDataTreeNode;\n            }\n            const id = this.identityProvider.getId(element).toString();\n            const result = childrenTreeNodesById.get(id);\n            if (result) {\n                const asyncDataTreeNode = result.node;\n                nodesToForget.delete(asyncDataTreeNode.element);\n                this.nodes.delete(asyncDataTreeNode.element);\n                this.nodes.set(element, asyncDataTreeNode);\n                asyncDataTreeNode.element = element;\n                asyncDataTreeNode.hasChildren = hasChildren;\n                if (recursive) {\n                    if (result.collapsed) {\n                        asyncDataTreeNode.children.forEach(node => dfs(node, node => this.nodes.delete(node.element)));\n                        asyncDataTreeNode.children.splice(0, asyncDataTreeNode.children.length);\n                        asyncDataTreeNode.stale = true;\n                    }\n                    else {\n                        childrenToRefresh.push(asyncDataTreeNode);\n                    }\n                }\n                else if (hasChildren && !result.collapsed) {\n                    childrenToRefresh.push(asyncDataTreeNode);\n                }\n                return asyncDataTreeNode;\n            }\n            const childAsyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, id, hasChildren, defaultCollapseState: this.getDefaultCollapseState(element) });\n            if (viewStateContext && viewStateContext.viewState.focus && viewStateContext.viewState.focus.indexOf(id) > -1) {\n                viewStateContext.focus.push(childAsyncDataTreeNode);\n            }\n            if (viewStateContext && viewStateContext.viewState.selection && viewStateContext.viewState.selection.indexOf(id) > -1) {\n                viewStateContext.selection.push(childAsyncDataTreeNode);\n            }\n            if (viewStateContext && viewStateContext.viewState.expanded && viewStateContext.viewState.expanded.indexOf(id) > -1) {\n                childrenToRefresh.push(childAsyncDataTreeNode);\n            }\n            else if (hasChildren && childAsyncDataTreeNode.defaultCollapseState === ObjectTreeElementCollapseState.PreserveOrExpanded) {\n                childrenToRefresh.push(childAsyncDataTreeNode);\n            }\n            return childAsyncDataTreeNode;\n        });\n        for (const node of nodesToForget.values()) {\n            dfs(node, node => this.nodes.delete(node.element));\n        }\n        for (const child of children) {\n            this.nodes.set(child.element, child);\n        }\n        node.children.splice(0, node.children.length, ...children);\n        // TODO@joao this doesn't take filter into account\n        if (node !== this.root && this.autoExpandSingleChildren && children.length === 1 && childrenToRefresh.length === 0) {\n            children[0].forceExpanded = true;\n            childrenToRefresh.push(children[0]);\n        }\n        return childrenToRefresh;\n    }\n    render(node, viewStateContext, options) {\n        const children = node.children.map(node => this.asTreeElement(node, viewStateContext));\n        const objectTreeOptions = options && {\n            ...options,\n            diffIdentityProvider: options.diffIdentityProvider && {\n                getId(node) {\n                    return options.diffIdentityProvider.getId(node.element);\n                }\n            }\n        };\n        this.tree.setChildren(node === this.root ? null : node, children, objectTreeOptions);\n        if (node !== this.root) {\n            this.tree.setCollapsible(node, node.hasChildren);\n        }\n        this._onDidRender.fire();\n    }\n    asTreeElement(node, viewStateContext) {\n        if (node.stale) {\n            return {\n                element: node,\n                collapsible: node.hasChildren,\n                collapsed: true\n            };\n        }\n        let collapsed;\n        if (viewStateContext && viewStateContext.viewState.expanded && node.id && viewStateContext.viewState.expanded.indexOf(node.id) > -1) {\n            collapsed = false;\n        }\n        else if (node.forceExpanded) {\n            collapsed = false;\n            node.forceExpanded = false;\n        }\n        else {\n            collapsed = node.defaultCollapseState;\n        }\n        return {\n            element: node,\n            children: node.hasChildren ? Iterable.map(node.children, child => this.asTreeElement(child, viewStateContext)) : [],\n            collapsible: node.hasChildren,\n            collapsed\n        };\n    }\n    processChildren(children) {\n        if (this.sorter) {\n            children = [...children].sort(this.sorter.compare.bind(this.sorter));\n        }\n        return children;\n    }\n    dispose() {\n        this.disposables.dispose();\n        this.tree.dispose();\n    }\n}\nclass CompressibleAsyncDataTreeNodeWrapper {\n    get element() {\n        return {\n            elements: this.node.element.elements.map(e => e.element),\n            incompressible: this.node.element.incompressible\n        };\n    }\n    get children() { return this.node.children.map(node => new CompressibleAsyncDataTreeNodeWrapper(node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n    constructor(node) {\n        this.node = node;\n    }\n}\nclass CompressibleAsyncDataTreeRenderer {\n    constructor(renderer, nodeMapper, compressibleNodeMapperProvider, onDidChangeTwistieState) {\n        this.renderer = renderer;\n        this.nodeMapper = nodeMapper;\n        this.compressibleNodeMapperProvider = compressibleNodeMapperProvider;\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\n        this.renderedNodes = new Map();\n        this.disposables = [];\n        this.templateId = renderer.templateId;\n    }\n    renderTemplate(container) {\n        const templateData = this.renderer.renderTemplate(container);\n        return { templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    renderCompressedElements(node, index, templateData, height) {\n        this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n    renderTwistie(element, twistieElement) {\n        if (element.slow) {\n            twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return true;\n        }\n        else {\n            twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return false;\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    disposeCompressedElements(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeCompressedElements) === null || _b === void 0 ? void 0 : _b.call(_a, this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    dispose() {\n        this.renderedNodes.clear();\n        this.disposables = dispose(this.disposables);\n    }\n}\nfunction asCompressibleObjectTreeOptions(options) {\n    const objectTreeOptions = options && asObjectTreeOptions(options);\n    return objectTreeOptions && {\n        ...objectTreeOptions,\n        keyboardNavigationLabelProvider: objectTreeOptions.keyboardNavigationLabelProvider && {\n            ...objectTreeOptions.keyboardNavigationLabelProvider,\n            getCompressedNodeKeyboardNavigationLabel(els) {\n                return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(els.map(e => e.element));\n            }\n        }\n    };\n}\nexport class CompressibleAsyncDataTree extends AsyncDataTree {\n    constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options = {}) {\n        super(user, container, virtualDelegate, renderers, dataSource, options);\n        this.compressionDelegate = compressionDelegate;\n        this.compressibleNodeMapper = new WeakMapper(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n        this.filter = options.filter;\n    }\n    createTree(user, container, delegate, renderers, options) {\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n        const objectTreeRenderers = renderers.map(r => new CompressibleAsyncDataTreeRenderer(r, this.nodeMapper, () => this.compressibleNodeMapper, this._onDidChangeNodeSlowState.event));\n        const objectTreeOptions = asCompressibleObjectTreeOptions(options) || {};\n        return new CompressibleObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n    asTreeElement(node, viewStateContext) {\n        return {\n            incompressible: this.compressionDelegate.isIncompressible(node.element),\n            ...super.asTreeElement(node, viewStateContext)\n        };\n    }\n    updateOptions(options = {}) {\n        this.tree.updateOptions(options);\n    }\n    render(node, viewStateContext) {\n        if (!this.identityProvider) {\n            return super.render(node, viewStateContext);\n        }\n        // Preserve traits across compressions. Hacky but does the trick.\n        // This is hard to fix properly since it requires rewriting the traits\n        // across trees and lists. Let's just keep it this way for now.\n        const getId = (element) => this.identityProvider.getId(element).toString();\n        const getUncompressedIds = (nodes) => {\n            const result = new Set();\n            for (const node of nodes) {\n                const compressedNode = this.tree.getCompressedTreeNode(node === this.root ? null : node);\n                if (!compressedNode.element) {\n                    continue;\n                }\n                for (const node of compressedNode.element.elements) {\n                    result.add(getId(node.element));\n                }\n            }\n            return result;\n        };\n        const oldSelection = getUncompressedIds(this.tree.getSelection());\n        const oldFocus = getUncompressedIds(this.tree.getFocus());\n        super.render(node, viewStateContext);\n        const selection = this.getSelection();\n        let didChangeSelection = false;\n        const focus = this.getFocus();\n        let didChangeFocus = false;\n        const visit = (node) => {\n            const compressedNode = node.element;\n            if (compressedNode) {\n                for (let i = 0; i < compressedNode.elements.length; i++) {\n                    const id = getId(compressedNode.elements[i].element);\n                    const element = compressedNode.elements[compressedNode.elements.length - 1].element;\n                    // github.com/microsoft/vscode/issues/85938\n                    if (oldSelection.has(id) && selection.indexOf(element) === -1) {\n                        selection.push(element);\n                        didChangeSelection = true;\n                    }\n                    if (oldFocus.has(id) && focus.indexOf(element) === -1) {\n                        focus.push(element);\n                        didChangeFocus = true;\n                    }\n                }\n            }\n            node.children.forEach(visit);\n        };\n        visit(this.tree.getCompressedTreeNode(node === this.root ? null : node));\n        if (didChangeSelection) {\n            this.setSelection(selection);\n        }\n        if (didChangeFocus) {\n            this.setFocus(focus);\n        }\n    }\n    // For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\n    // and we have to filter everything beforehand\n    // Related to #85193 and #85835\n    processChildren(children) {\n        if (this.filter) {\n            children = Iterable.filter(children, e => {\n                const result = this.filter.filter(e, 1 /* TreeVisibility.Visible */);\n                const visibility = getVisibility(result);\n                if (visibility === 2 /* TreeVisibility.Recurse */) {\n                    throw new Error('Recursive tree visibility not supported in async data compressed trees');\n                }\n                return visibility === 1 /* TreeVisibility.Visible */;\n            });\n        }\n        return super.processChildren(children);\n    }\n}\nfunction getVisibility(filterResult) {\n    if (typeof filterResult === 'boolean') {\n        return filterResult ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n    }\n    else if (isFilterResult(filterResult)) {\n        return getVisibleState(filterResult.visibility);\n    }\n    else {\n        return getVisibleState(filterResult);\n    }\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA,SAASA,uBAAuB,QAAQ,qBAAqB;AAC7D,SAASC,oBAAoB,QAAQ,mBAAmB;AACxD,SAASC,eAAe,EAAEC,cAAc,QAAQ,qBAAqB;AACrE,SAASC,sBAAsB,EAAEC,UAAU,QAAQ,iBAAiB;AACpE,SAASC,8BAA8B,EAAEC,SAAS,EAAEC,UAAU,QAAQ,WAAW;AACjF,SAASC,uBAAuB,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,0BAA0B;AACrF,SAASC,OAAO,QAAQ,6BAA6B;AACrD,SAASC,SAAS,QAAQ,8BAA8B;AACxD,SAASC,mBAAmB,EAAEC,iBAAiB,QAAQ,2BAA2B;AAClF,SAASC,OAAO,EAAEC,KAAK,QAAQ,0BAA0B;AACzD,SAASC,QAAQ,QAAQ,6BAA6B;AACtD,SAASC,eAAe,EAAEC,OAAO,QAAQ,8BAA8B;AACvE,SAASC,UAAU,QAAQ,0BAA0B;AACrD,SAASC,uBAAuBA,CAACC,KAAK,EAAE;EACpC,OAAO;IACH,GAAGA,KAAK;IACRC,QAAQ,EAAE,EAAE;IACZC,cAAc,EAAEC,SAAS;IACzBC,KAAK,EAAE,IAAI;IACXC,IAAI,EAAE,KAAK;IACXC,aAAa,EAAE;EACnB,CAAC;AACL;AACA,SAASC,UAAUA,CAACC,QAAQ,EAAEC,UAAU,EAAE;EACtC,IAAI,CAACA,UAAU,CAACC,MAAM,EAAE;IACpB,OAAO,KAAK;EAChB,CAAC,MACI,IAAID,UAAU,CAACC,MAAM,KAAKF,QAAQ,EAAE;IACrC,OAAO,IAAI;EACf,CAAC,MACI;IACD,OAAOD,UAAU,CAACC,QAAQ,EAAEC,UAAU,CAACC,MAAM,CAAC;EAClD;AACJ;AACA,SAASC,UAAUA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAC7B,OAAOD,IAAI,KAAKC,KAAK,IAAIN,UAAU,CAACK,IAAI,EAAEC,KAAK,CAAC,IAAIN,UAAU,CAACM,KAAK,EAAED,IAAI,CAAC;AAC/E;AACA,MAAME,wBAAwB,CAAC;EAC3B,IAAIC,OAAOA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACH,IAAI,CAACG,OAAO,CAACA,OAAO;EAAE;EAClD,IAAId,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACW,IAAI,CAACX,QAAQ,CAACe,GAAG,CAACJ,IAAI,IAAI,IAAIE,wBAAwB,CAACF,IAAI,CAAC,CAAC;EAAE;EAC5F,IAAIK,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACL,IAAI,CAACK,KAAK;EAAE;EACtC,IAAIC,oBAAoBA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACN,IAAI,CAACM,oBAAoB;EAAE;EACpE,IAAIC,iBAAiBA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACP,IAAI,CAACO,iBAAiB;EAAE;EAC9D,IAAIC,WAAWA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACR,IAAI,CAACQ,WAAW;EAAE;EAClD,IAAIC,SAASA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACT,IAAI,CAACS,SAAS;EAAE;EAC9C,IAAIC,OAAOA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACV,IAAI,CAACU,OAAO;EAAE;EAC1C,IAAIC,UAAUA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACX,IAAI,CAACW,UAAU;EAAE;EAChDC,WAAWA,CAACZ,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;AACJ;AACA,MAAMa,qBAAqB,CAAC;EACxBD,WAAWA,CAACE,QAAQ,EAAEC,UAAU,EAAEC,uBAAuB,EAAE;IACvD,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,uBAAuB,GAAGA,uBAAuB;IACtD,IAAI,CAACC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC9B,IAAI,CAACC,UAAU,GAAGL,QAAQ,CAACK,UAAU;EACzC;EACAC,cAAcA,CAACC,SAAS,EAAE;IACtB,MAAMC,YAAY,GAAG,IAAI,CAACR,QAAQ,CAACM,cAAc,CAACC,SAAS,CAAC;IAC5D,OAAO;MAAEC;IAAa,CAAC;EAC3B;EACAC,aAAaA,CAACvB,IAAI,EAAEwB,KAAK,EAAEF,YAAY,EAAEG,MAAM,EAAE;IAC7C,IAAI,CAACX,QAAQ,CAACS,aAAa,CAAC,IAAI,CAACR,UAAU,CAACX,GAAG,CAACJ,IAAI,CAAC,EAAEwB,KAAK,EAAEF,YAAY,CAACA,YAAY,EAAEG,MAAM,CAAC;EACpG;EACAC,aAAaA,CAACvB,OAAO,EAAEwB,cAAc,EAAE;IACnC,IAAIxB,OAAO,CAACV,IAAI,EAAE;MACdkC,cAAc,CAACC,SAAS,CAACC,GAAG,CAAC,GAAGnD,SAAS,CAACoD,gBAAgB,CAACrD,OAAO,CAACsD,eAAe,CAAC,CAAC;MACpF,OAAO,IAAI;IACf,CAAC,MACI;MACDJ,cAAc,CAACC,SAAS,CAACI,MAAM,CAAC,GAAGtD,SAAS,CAACoD,gBAAgB,CAACrD,OAAO,CAACsD,eAAe,CAAC,CAAC;MACvF,OAAO,KAAK;IAChB;EACJ;EACAE,cAAcA,CAACjC,IAAI,EAAEwB,KAAK,EAAEF,YAAY,EAAEG,MAAM,EAAE;IAC9C,IAAIS,EAAE,EAAEC,EAAE;IACV,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACpB,QAAQ,EAAEmB,cAAc,MAAM,IAAI,IAAIE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,IAAI,CAACF,EAAE,EAAE,IAAI,CAACnB,UAAU,CAACX,GAAG,CAACJ,IAAI,CAAC,EAAEwB,KAAK,EAAEF,YAAY,CAACA,YAAY,EAAEG,MAAM,CAAC;EACpK;EACAY,eAAeA,CAACf,YAAY,EAAE;IAC1B,IAAI,CAACR,QAAQ,CAACuB,eAAe,CAACf,YAAY,CAACA,YAAY,CAAC;EAC5D;EACArC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACgC,aAAa,CAACqB,KAAK,CAAC,CAAC;EAC9B;AACJ;AACA,SAASC,WAAWA,CAACC,CAAC,EAAE;EACpB,OAAO;IACHC,YAAY,EAAED,CAAC,CAACC,YAAY;IAC5BC,QAAQ,EAAEF,CAAC,CAACE,QAAQ,CAACtC,GAAG,CAACoC,CAAC,IAAIA,CAAC,CAACrC,OAAO;EAC3C,CAAC;AACL;AACA,SAASwC,gBAAgBA,CAACH,CAAC,EAAE;EACzB,OAAO;IACHC,YAAY,EAAED,CAAC,CAACC,YAAY;IAC5BtC,OAAO,EAAEqC,CAAC,CAACrC,OAAO,IAAIqC,CAAC,CAACrC,OAAO,CAACA,OAAO;IACvCyC,MAAM,EAAEJ,CAAC,CAACI;EACd,CAAC;AACL;AACA,MAAMC,oCAAoC,SAAShF,uBAAuB,CAAC;EACvE+C,WAAWA,CAACkC,IAAI,EAAE;IACd,KAAK,CAACA,IAAI,CAACJ,QAAQ,CAACtC,GAAG,CAACJ,IAAI,IAAIA,IAAI,CAACG,OAAO,CAAC,CAAC;IAC9C,IAAI,CAAC2C,IAAI,GAAGA,IAAI;EACpB;AACJ;AACA,SAASC,8BAA8BA,CAACD,IAAI,EAAE;EAC1C,IAAIA,IAAI,YAAYjF,uBAAuB,EAAE;IACzC,OAAO,IAAIgF,oCAAoC,CAACC,IAAI,CAAC;EACzD;EACA,OAAOA,IAAI;AACf;AACA,MAAME,gCAAgC,CAAC;EACnCpC,WAAWA,CAACqC,GAAG,EAAE;IACb,IAAI,CAACA,GAAG,GAAGA,GAAG;EAClB;EACAC,UAAUA,CAAClD,IAAI,EAAE;IACb,OAAO,IAAI,CAACiD,GAAG,CAACC,UAAU,CAAClD,IAAI,CAACG,OAAO,CAAC;EAC5C;EACAgD,YAAYA,CAACC,KAAK,EAAEC,aAAa,EAAE;IAC/B,IAAI,IAAI,CAACJ,GAAG,CAACE,YAAY,EAAE;MACvB,OAAO,IAAI,CAACF,GAAG,CAACE,YAAY,CAACC,KAAK,CAAChD,GAAG,CAACJ,IAAI,IAAIA,IAAI,CAACG,OAAO,CAAC,EAAEkD,aAAa,CAAC;IAChF;IACA,OAAO9D,SAAS;EACpB;EACA+D,WAAWA,CAACR,IAAI,EAAEO,aAAa,EAAE;IAC7B,IAAInB,EAAE,EAAEC,EAAE;IACV,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACe,GAAG,EAAEK,WAAW,MAAM,IAAI,IAAInB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,IAAI,CAACF,EAAE,EAAEa,8BAA8B,CAACD,IAAI,CAAC,EAAEO,aAAa,CAAC;EAC5I;EACAE,UAAUA,CAACT,IAAI,EAAEU,UAAU,EAAEC,WAAW,EAAEJ,aAAa,EAAEK,GAAG,GAAG,IAAI,EAAE;IACjE,OAAO,IAAI,CAACT,GAAG,CAACM,UAAU,CAACR,8BAA8B,CAACD,IAAI,CAAC,EAAEU,UAAU,IAAIA,UAAU,CAACrD,OAAO,EAAEsD,WAAW,EAAEJ,aAAa,CAAC;EAClI;EACAM,IAAIA,CAACb,IAAI,EAAEU,UAAU,EAAEC,WAAW,EAAEJ,aAAa,EAAE;IAC/C,IAAI,CAACJ,GAAG,CAACU,IAAI,CAACZ,8BAA8B,CAACD,IAAI,CAAC,EAAEU,UAAU,IAAIA,UAAU,CAACrD,OAAO,EAAEsD,WAAW,EAAEJ,aAAa,CAAC;EACrH;EACAO,SAASA,CAACP,aAAa,EAAE;IACrB,IAAInB,EAAE,EAAEC,EAAE;IACV,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACe,GAAG,EAAEW,SAAS,MAAM,IAAI,IAAIzB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,IAAI,CAACF,EAAE,EAAEmB,aAAa,CAAC;EACpG;EACApE,OAAOA,CAAA,EAAG;IACN,IAAI,CAACgE,GAAG,CAAChE,OAAO,CAAC,CAAC;EACtB;AACJ;AACA,SAAS4E,mBAAmBA,CAACC,OAAO,EAAE;EAClC,OAAOA,OAAO,IAAI;IACd,GAAGA,OAAO;IACVC,iBAAiB,EAAE,IAAI;IACvBC,gBAAgB,EAAEF,OAAO,CAACE,gBAAgB,IAAI;MAC1CC,KAAKA,CAACC,EAAE,EAAE;QACN,OAAOJ,OAAO,CAACE,gBAAgB,CAACC,KAAK,CAACC,EAAE,CAAC/D,OAAO,CAAC;MACrD;IACJ,CAAC;IACD8C,GAAG,EAAEa,OAAO,CAACb,GAAG,IAAI,IAAID,gCAAgC,CAACc,OAAO,CAACb,GAAG,CAAC;IACrEkB,2BAA2B,EAAEL,OAAO,CAACK,2BAA2B,IAAI;MAChEC,4BAA4BA,CAAC5B,CAAC,EAAE;QAC5B,OAAOsB,OAAO,CAACK,2BAA2B,CAACC,4BAA4B,CAAC;UAAE,GAAG5B,CAAC;UAAErC,OAAO,EAAEqC,CAAC,CAACrC;QAAQ,CAAC,CAAC;MACzG,CAAC;MACDkE,2BAA2BA,CAAC7B,CAAC,EAAE;QAC3B,OAAOsB,OAAO,CAACK,2BAA2B,CAACE,2BAA2B,CAAC;UAAE,GAAG7B,CAAC;UAAErC,OAAO,EAAEqC,CAAC,CAACrC;QAAQ,CAAC,CAAC;MACxG;IACJ,CAAC;IACDmE,qBAAqB,EAAER,OAAO,CAACQ,qBAAqB,IAAI;MACpD,GAAGR,OAAO,CAACQ,qBAAqB;MAChCC,WAAW,EAAEhF,SAAS;MACtBiF,UAAU,EAAEjF,SAAS;MACrBkF,OAAO,EAAEX,OAAO,CAACQ,qBAAqB,CAACG,OAAO,GAAIP,EAAE,IAAK;QACrD,OAAOJ,OAAO,CAACQ,qBAAqB,CAACG,OAAO,CAACP,EAAE,CAAC/D,OAAO,CAAC;MAC5D,CAAC,GAAG,MAAM,UAAU;MACpBuE,SAAS,EAAEZ,OAAO,CAACQ,qBAAqB,CAACI,SAAS,GAAIlC,CAAC,IAAK;QACxD,IAAIN,EAAE;QACN,OAAO,CAAC,EAAE,CAACA,EAAE,GAAG4B,OAAO,CAACQ,qBAAqB,MAAM,IAAI,IAAIpC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACwC,SAAS,CAAClC,CAAC,CAACrC,OAAO,CAAC,CAAC;MAChH,CAAC,GAAGZ,SAAS;MACboF,YAAYA,CAACnC,CAAC,EAAE;QACZ,OAAOsB,OAAO,CAACQ,qBAAqB,CAACK,YAAY,CAACnC,CAAC,CAACrC,OAAO,CAAC;MAChE,CAAC;MACDyE,kBAAkBA,CAAA,EAAG;QACjB,OAAOd,OAAO,CAACQ,qBAAqB,CAACM,kBAAkB,CAAC,CAAC;MAC7D,CAAC;MACDC,aAAa,EAAEf,OAAO,CAACQ,qBAAqB,CAACO,aAAa,GAAG,MAAMf,OAAO,CAACQ,qBAAqB,CAACO,aAAa,CAAC,CAAC,GAAG,MAAM,MAAM;MAC/HC,YAAY,EAAEhB,OAAO,CAACQ,qBAAqB,CAACQ,YAAY,KAAK9E,IAAI,IAAI;QACjE,OAAO8D,OAAO,CAACQ,qBAAqB,CAACQ,YAAY,CAAC9E,IAAI,CAACG,OAAO,CAAC;MACnE,CAAC,CAAC;MACF4E,qBAAqB,EAAEjB,OAAO,CAACQ,qBAAqB,CAACS,qBAAqB,KAAK/E,IAAI,IAAI;QACnF,OAAO8D,OAAO,CAACQ,qBAAqB,CAACS,qBAAqB,CAAC/E,IAAI,CAACG,OAAO,CAAC;MAC5E,CAAC;IACL,CAAC;IACD6E,MAAM,EAAElB,OAAO,CAACkB,MAAM,IAAI;MACtBA,MAAMA,CAACxC,CAAC,EAAEyC,gBAAgB,EAAE;QACxB,OAAOnB,OAAO,CAACkB,MAAM,CAACA,MAAM,CAACxC,CAAC,CAACrC,OAAO,EAAE8E,gBAAgB,CAAC;MAC7D;IACJ,CAAC;IACDC,+BAA+B,EAAEpB,OAAO,CAACoB,+BAA+B,IAAI;MACxE,GAAGpB,OAAO,CAACoB,+BAA+B;MAC1CC,0BAA0BA,CAAC3C,CAAC,EAAE;QAC1B,OAAOsB,OAAO,CAACoB,+BAA+B,CAACC,0BAA0B,CAAC3C,CAAC,CAACrC,OAAO,CAAC;MACxF;IACJ,CAAC;IACDiF,MAAM,EAAE7F,SAAS;IACjB8F,wBAAwB,EAAE,OAAOvB,OAAO,CAACuB,wBAAwB,KAAK,WAAW,GAAG9F,SAAS,GAAI,OAAOuE,OAAO,CAACuB,wBAAwB,KAAK,UAAU,GAAGvB,OAAO,CAACuB,wBAAwB,GAAI7C,CAAC,IAAIsB,OAAO,CAACuB,wBAAwB,CAAC7C,CAAC,CAACrC,OAAO,CAAG;IAChPmF,qBAAqB,EAAE9C,CAAC,IAAI;MACxB,IAAIA,CAAC,CAAC+C,WAAW,IAAI/C,CAAC,CAAChD,KAAK,EAAE;QAC1B,OAAO,CAAC,CAAC;MACb,CAAC,MACI,IAAI,OAAOsE,OAAO,CAACwB,qBAAqB,KAAK,QAAQ,EAAE;QACxD,OAAOxB,OAAO,CAACwB,qBAAqB;MACxC,CAAC,MACI,IAAI,OAAOxB,OAAO,CAACwB,qBAAqB,KAAK,WAAW,EAAE;QAC3D,OAAO,CAAC,CAAC;MACb,CAAC,MACI;QACD,OAAOxB,OAAO,CAACwB,qBAAqB,CAAC9C,CAAC,CAACrC,OAAO,CAAC;MACnD;IACJ;EACJ,CAAC;AACL;AACA,SAASqF,GAAGA,CAACxF,IAAI,EAAEyF,EAAE,EAAE;EACnBA,EAAE,CAACzF,IAAI,CAAC;EACRA,IAAI,CAACX,QAAQ,CAACqG,OAAO,CAACC,KAAK,IAAIH,GAAG,CAACG,KAAK,EAAEF,EAAE,CAAC,CAAC;AAClD;AACA,OAAO,MAAMG,aAAa,CAAC;EACvB,IAAIC,WAAWA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,IAAI,CAACD,WAAW;EAAE;EAClD,IAAIE,gBAAgBA,CAAA,EAAG;IAAE,OAAOjH,KAAK,CAACsB,GAAG,CAAC,IAAI,CAAC0F,IAAI,CAACC,gBAAgB,EAAExD,WAAW,CAAC;EAAE;EACpF,IAAIyD,oBAAoBA,CAAA,EAAG;IAAE,OAAOlH,KAAK,CAACsB,GAAG,CAAC,IAAI,CAAC0F,IAAI,CAACE,oBAAoB,EAAEzD,WAAW,CAAC;EAAE;EAC5F,IAAI0D,eAAeA,CAAA,EAAG;IAAE,OAAOnH,KAAK,CAACsB,GAAG,CAAC,IAAI,CAAC0F,IAAI,CAACG,eAAe,EAAEtD,gBAAgB,CAAC;EAAE;EACvF,IAAIuD,SAASA,CAAA,EAAG;IAAE,OAAOpH,KAAK,CAACsB,GAAG,CAAC,IAAI,CAAC0F,IAAI,CAACI,SAAS,EAAEvD,gBAAgB,CAAC;EAAE;EAC3E,IAAIwD,UAAUA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACL,IAAI,CAACK,UAAU;EAAE;EAChD;AACJ;AACA;AACA;EACI,IAAIC,gBAAgBA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACN,IAAI,CAACM,gBAAgB;EAAE;EAC5D,IAAIC,wBAAwBA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACP,IAAI,CAACO,wBAAwB;EAAE;EAC5E,IAAIC,wBAAwBA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACR,IAAI,CAACQ,wBAAwB;EAAE;EAC5E,IAAIC,YAAYA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACT,IAAI,CAACS,YAAY;EAAE;EACpD3F,WAAWA,CAAC4F,IAAI,EAAEnF,SAAS,EAAEoF,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAE7C,OAAO,GAAG,CAAC,CAAC,EAAE;IACxE,IAAI,CAAC0C,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACG,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACvD,KAAK,GAAG,IAAIlC,GAAG,CAAC,CAAC;IACtB,IAAI,CAAC0F,sBAAsB,GAAG,IAAI1F,GAAG,CAAC,CAAC;IACvC,IAAI,CAAC2F,eAAe,GAAG,IAAI3F,GAAG,CAAC,CAAC;IAChC,IAAI,CAAC4F,YAAY,GAAG,IAAIjI,OAAO,CAAC,CAAC;IACjC,IAAI,CAACkI,yBAAyB,GAAG,IAAIlI,OAAO,CAAC,CAAC;IAC9C,IAAI,CAACkC,UAAU,GAAG,IAAI1C,UAAU,CAAC2B,IAAI,IAAI,IAAIE,wBAAwB,CAACF,IAAI,CAAC,CAAC;IAC5E,IAAI,CAACgH,WAAW,GAAG,IAAIhI,eAAe,CAAC,CAAC;IACxC,IAAI,CAACgF,gBAAgB,GAAGF,OAAO,CAACE,gBAAgB;IAChD,IAAI,CAACiD,wBAAwB,GAAG,OAAOnD,OAAO,CAACmD,wBAAwB,KAAK,WAAW,GAAG,KAAK,GAAGnD,OAAO,CAACmD,wBAAwB;IAClI,IAAI,CAAC7B,MAAM,GAAGtB,OAAO,CAACsB,MAAM;IAC5B,IAAI,CAAC8B,uBAAuB,GAAG1E,CAAC,IAAIsB,OAAO,CAACC,iBAAiB,GAAID,OAAO,CAACC,iBAAiB,CAACvB,CAAC,CAAC,GAAGrE,8BAA8B,CAACgJ,mBAAmB,GAAGhJ,8BAA8B,CAACiJ,kBAAkB,GAAI7H,SAAS;IACnN,IAAI,CAACuG,IAAI,GAAG,IAAI,CAACuB,UAAU,CAACb,IAAI,EAAEnF,SAAS,EAAEoF,QAAQ,EAAEC,SAAS,EAAE5C,OAAO,CAAC;IAC1E,IAAI,CAACwD,mBAAmB,GAAG,IAAI,CAACxB,IAAI,CAACwB,mBAAmB;IACxD,IAAI,CAACC,IAAI,GAAGpI,uBAAuB,CAAC;MAChCgB,OAAO,EAAEZ,SAAS;MAClBO,MAAM,EAAE,IAAI;MACZyF,WAAW,EAAE,IAAI;MACjBiC,oBAAoB,EAAEjI;IAC1B,CAAC,CAAC;IACF,IAAI,IAAI,CAACyE,gBAAgB,EAAE;MACvB,IAAI,CAACuD,IAAI,GAAG;QACR,GAAG,IAAI,CAACA,IAAI;QACZE,EAAE,EAAE;MACR,CAAC;IACL;IACA,IAAI,CAACrE,KAAK,CAACsE,GAAG,CAAC,IAAI,EAAE,IAAI,CAACH,IAAI,CAAC;IAC/B,IAAI,CAACzB,IAAI,CAACO,wBAAwB,CAAC,IAAI,CAACsB,yBAAyB,EAAE,IAAI,EAAE,IAAI,CAACX,WAAW,CAAC;EAC9F;EACAK,UAAUA,CAACb,IAAI,EAAEnF,SAAS,EAAEoF,QAAQ,EAAEC,SAAS,EAAE5C,OAAO,EAAE;IACtD,MAAM8D,kBAAkB,GAAG,IAAI9J,oBAAoB,CAAC2I,QAAQ,CAAC;IAC7D,MAAMoB,mBAAmB,GAAGnB,SAAS,CAACtG,GAAG,CAAC0H,CAAC,IAAI,IAAIjH,qBAAqB,CAACiH,CAAC,EAAE,IAAI,CAAC/G,UAAU,EAAE,IAAI,CAACgG,yBAAyB,CAACgB,KAAK,CAAC,CAAC;IACnI,MAAMC,iBAAiB,GAAGnE,mBAAmB,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC5D,OAAO,IAAI5F,UAAU,CAACsI,IAAI,EAAEnF,SAAS,EAAEuG,kBAAkB,EAAEC,mBAAmB,EAAEG,iBAAiB,CAAC;EACtG;EACAC,aAAaA,CAACnE,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,IAAI,CAACgC,IAAI,CAACmC,aAAa,CAACnE,OAAO,CAAC;EACpC;EACA;EACAoE,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAACpC,IAAI,CAACoC,cAAc,CAAC,CAAC;EACrC;EACA,IAAIC,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACrC,IAAI,CAACqC,SAAS;EAC9B;EACA,IAAIA,SAASA,CAACA,SAAS,EAAE;IACrB,IAAI,CAACrC,IAAI,CAACqC,SAAS,GAAGA,SAAS;EACnC;EACA,IAAIC,YAAYA,CAAA,EAAG;IACf,OAAO,IAAI,CAACtC,IAAI,CAACsC,YAAY;EACjC;EACA,IAAIC,YAAYA,CAAA,EAAG;IACf,OAAO,IAAI,CAACvC,IAAI,CAACuC,YAAY;EACjC;EACAC,QAAQA,CAAA,EAAG;IACP,IAAI,CAACxC,IAAI,CAACwC,QAAQ,CAAC,CAAC;EACxB;EACAC,MAAMA,CAAC9G,MAAM,EAAE+G,KAAK,EAAE;IAClB,IAAI,CAAC1C,IAAI,CAACyC,MAAM,CAAC9G,MAAM,EAAE+G,KAAK,CAAC;EACnC;EACAC,KAAKA,CAACC,MAAM,EAAE;IACV,IAAI,CAAC5C,IAAI,CAAC2C,KAAK,CAACC,MAAM,CAAC;EAC3B;EACA;EACAC,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACpB,IAAI,CAACpH,OAAO;EAC5B;EACA,MAAMyI,QAAQA,CAACC,KAAK,EAAEC,SAAS,EAAE;IAC7B,IAAI,CAACjC,eAAe,CAACnB,OAAO,CAACqD,OAAO,IAAIA,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC;IACzD,IAAI,CAACnC,eAAe,CAACvE,KAAK,CAAC,CAAC;IAC5B,IAAI,CAACiF,IAAI,CAACpH,OAAO,GAAG0I,KAAK;IACzB,MAAMI,gBAAgB,GAAGH,SAAS,IAAI;MAAEA,SAAS;MAAEI,KAAK,EAAE,EAAE;MAAEC,SAAS,EAAE;IAAG,CAAC;IAC7E,MAAM,IAAI,CAACC,eAAe,CAACP,KAAK,EAAE,IAAI,EAAE,KAAK,EAAEI,gBAAgB,CAAC;IAChE,IAAIA,gBAAgB,EAAE;MAClB,IAAI,CAACnD,IAAI,CAACuD,QAAQ,CAACJ,gBAAgB,CAACC,KAAK,CAAC;MAC1C,IAAI,CAACpD,IAAI,CAACwD,YAAY,CAACL,gBAAgB,CAACE,SAAS,CAAC;IACtD;IACA,IAAIL,SAAS,IAAI,OAAOA,SAAS,CAACX,SAAS,KAAK,QAAQ,EAAE;MACtD,IAAI,CAACA,SAAS,GAAGW,SAAS,CAACX,SAAS;IACxC;EACJ;EACA,MAAMiB,eAAeA,CAACjJ,OAAO,GAAG,IAAI,CAACoH,IAAI,CAACpH,OAAO,EAAEoJ,SAAS,GAAG,IAAI,EAAEC,QAAQ,GAAG,KAAK,EAAEP,gBAAgB,EAAEnF,OAAO,EAAE;IAC9G,IAAI,OAAO,IAAI,CAACyD,IAAI,CAACpH,OAAO,KAAK,WAAW,EAAE;MAC1C,MAAM,IAAI/B,SAAS,CAAC,IAAI,CAACoI,IAAI,EAAE,oBAAoB,CAAC;IACxD;IACA,IAAI,IAAI,CAACe,IAAI,CAACjI,cAAc,EAAE;MAC1B,MAAM,IAAI,CAACiI,IAAI,CAACjI,cAAc;MAC9B,MAAMR,KAAK,CAAC2K,SAAS,CAAC,IAAI,CAAC3C,YAAY,CAACiB,KAAK,CAAC;IAClD;IACA,MAAM/H,IAAI,GAAG,IAAI,CAAC0J,WAAW,CAACvJ,OAAO,CAAC;IACtC,MAAM,IAAI,CAACwJ,oBAAoB,CAAC3J,IAAI,EAAEuJ,SAAS,EAAEN,gBAAgB,EAAEnF,OAAO,CAAC;IAC3E,IAAI0F,QAAQ,EAAE;MACV,IAAI;QACA,IAAI,CAAC1D,IAAI,CAAC0D,QAAQ,CAACxJ,IAAI,CAAC;MAC5B,CAAC,CACD,OAAOkC,EAAE,EAAE;QACP;QACA;MAAA;IAER;EACJ;EACA;EACAsH,QAAQA,CAACrJ,OAAO,EAAE;IACd,IAAIA,OAAO,KAAKZ,SAAS,IAAIY,OAAO,KAAK,IAAI,CAACoH,IAAI,CAACpH,OAAO,EAAE;MACxD,IAAI,CAAC2F,IAAI,CAAC0D,QAAQ,CAAC,CAAC;MACpB;IACJ;IACA,MAAMxJ,IAAI,GAAG,IAAI,CAAC0J,WAAW,CAACvJ,OAAO,CAAC;IACtC,IAAI,CAAC2F,IAAI,CAAC0D,QAAQ,CAACxJ,IAAI,CAAC;EAC5B;EACA;EACA4J,OAAOA,CAACzJ,OAAO,GAAG,IAAI,CAACoH,IAAI,CAACpH,OAAO,EAAE;IACjC,MAAM0J,QAAQ,GAAG,IAAI,CAACH,WAAW,CAACvJ,OAAO,CAAC;IAC1C,MAAMH,IAAI,GAAG,IAAI,CAAC8F,IAAI,CAAC8D,OAAO,CAACC,QAAQ,KAAK,IAAI,CAACtC,IAAI,GAAG,IAAI,GAAGsC,QAAQ,CAAC;IACxE,OAAO,IAAI,CAAC9I,UAAU,CAACX,GAAG,CAACJ,IAAI,CAAC;EACpC;EACA8J,QAAQA,CAAC3J,OAAO,EAAEoJ,SAAS,GAAG,KAAK,EAAE;IACjC,MAAMvJ,IAAI,GAAG,IAAI,CAAC0J,WAAW,CAACvJ,OAAO,CAAC;IACtC,OAAO,IAAI,CAAC2F,IAAI,CAACgE,QAAQ,CAAC9J,IAAI,KAAK,IAAI,CAACuH,IAAI,GAAG,IAAI,GAAGvH,IAAI,EAAEuJ,SAAS,CAAC;EAC1E;EACA,MAAMQ,MAAMA,CAAC5J,OAAO,EAAEoJ,SAAS,GAAG,KAAK,EAAE;IACrC,IAAI,OAAO,IAAI,CAAChC,IAAI,CAACpH,OAAO,KAAK,WAAW,EAAE;MAC1C,MAAM,IAAI/B,SAAS,CAAC,IAAI,CAACoI,IAAI,EAAE,oBAAoB,CAAC;IACxD;IACA,IAAI,IAAI,CAACe,IAAI,CAACjI,cAAc,EAAE;MAC1B,MAAM,IAAI,CAACiI,IAAI,CAACjI,cAAc;MAC9B,MAAMR,KAAK,CAAC2K,SAAS,CAAC,IAAI,CAAC3C,YAAY,CAACiB,KAAK,CAAC;IAClD;IACA,MAAM/H,IAAI,GAAG,IAAI,CAAC0J,WAAW,CAACvJ,OAAO,CAAC;IACtC,IAAI,IAAI,CAAC2F,IAAI,CAACkE,UAAU,CAAChK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC8F,IAAI,CAACmE,aAAa,CAACjK,IAAI,CAAC,EAAE;MAC9D,OAAO,KAAK;IAChB;IACA,IAAIA,IAAI,CAACV,cAAc,EAAE;MACrB,MAAM,IAAI,CAACiI,IAAI,CAACjI,cAAc;MAC9B,MAAMR,KAAK,CAAC2K,SAAS,CAAC,IAAI,CAAC3C,YAAY,CAACiB,KAAK,CAAC;IAClD;IACA,IAAI/H,IAAI,KAAK,IAAI,CAACuH,IAAI,IAAI,CAACvH,IAAI,CAACV,cAAc,IAAI,CAAC,IAAI,CAACwG,IAAI,CAACoE,WAAW,CAAClK,IAAI,CAAC,EAAE;MAC5E,OAAO,KAAK;IAChB;IACA,MAAMmK,MAAM,GAAG,IAAI,CAACrE,IAAI,CAACiE,MAAM,CAAC/J,IAAI,KAAK,IAAI,CAACuH,IAAI,GAAG,IAAI,GAAGvH,IAAI,EAAEuJ,SAAS,CAAC;IAC5E,IAAIvJ,IAAI,CAACV,cAAc,EAAE;MACrB,MAAM,IAAI,CAACiI,IAAI,CAACjI,cAAc;MAC9B,MAAMR,KAAK,CAAC2K,SAAS,CAAC,IAAI,CAAC3C,YAAY,CAACiB,KAAK,CAAC;IAClD;IACA,OAAOoC,MAAM;EACjB;EACAb,YAAYA,CAAC5G,QAAQ,EAAED,YAAY,EAAE;IACjC,MAAMW,KAAK,GAAGV,QAAQ,CAACtC,GAAG,CAACoC,CAAC,IAAI,IAAI,CAACkH,WAAW,CAAClH,CAAC,CAAC,CAAC;IACpD,IAAI,CAACsD,IAAI,CAACwD,YAAY,CAAClG,KAAK,EAAEX,YAAY,CAAC;EAC/C;EACA2H,YAAYA,CAAA,EAAG;IACX,MAAMhH,KAAK,GAAG,IAAI,CAAC0C,IAAI,CAACsE,YAAY,CAAC,CAAC;IACtC,OAAOhH,KAAK,CAAChD,GAAG,CAACiK,CAAC,IAAIA,CAAC,CAAClK,OAAO,CAAC;EACpC;EACAkJ,QAAQA,CAAC3G,QAAQ,EAAED,YAAY,EAAE;IAC7B,MAAMW,KAAK,GAAGV,QAAQ,CAACtC,GAAG,CAACoC,CAAC,IAAI,IAAI,CAACkH,WAAW,CAAClH,CAAC,CAAC,CAAC;IACpD,IAAI,CAACsD,IAAI,CAACuD,QAAQ,CAACjG,KAAK,EAAEX,YAAY,CAAC;EAC3C;EACA6H,QAAQA,CAAA,EAAG;IACP,MAAMlH,KAAK,GAAG,IAAI,CAAC0C,IAAI,CAACwE,QAAQ,CAAC,CAAC;IAClC,OAAOlH,KAAK,CAAChD,GAAG,CAACiK,CAAC,IAAIA,CAAC,CAAClK,OAAO,CAAC;EACpC;EACAoK,MAAMA,CAACpK,OAAO,EAAEqK,WAAW,EAAE;IACzB,IAAI,CAAC1E,IAAI,CAACyE,MAAM,CAAC,IAAI,CAACb,WAAW,CAACvJ,OAAO,CAAC,EAAEqK,WAAW,CAAC;EAC5D;EACA;EACAC,gBAAgBA,CAACtK,OAAO,EAAE;IACtB,MAAMH,IAAI,GAAG,IAAI,CAAC8F,IAAI,CAAC2E,gBAAgB,CAAC,IAAI,CAACf,WAAW,CAACvJ,OAAO,CAAC,CAAC;IAClE,OAAQH,IAAI,IAAIA,IAAI,CAACG,OAAO;EAChC;EACAuK,oBAAoBA,CAACvK,OAAO,GAAG,IAAI,CAACoH,IAAI,CAACpH,OAAO,EAAE;IAC9C,MAAM0J,QAAQ,GAAG,IAAI,CAACH,WAAW,CAACvJ,OAAO,CAAC;IAC1C,MAAMH,IAAI,GAAG,IAAI,CAAC8F,IAAI,CAAC4E,oBAAoB,CAACb,QAAQ,KAAK,IAAI,CAACtC,IAAI,GAAG,IAAI,GAAGsC,QAAQ,CAAC;IACrF,OAAQ7J,IAAI,IAAIA,IAAI,CAACG,OAAO;EAChC;EACA;EACAuJ,WAAWA,CAACvJ,OAAO,EAAE;IACjB,MAAMH,IAAI,GAAG,IAAI,CAACoD,KAAK,CAACuH,GAAG,CAAExK,OAAO,KAAK,IAAI,CAACoH,IAAI,CAACpH,OAAO,GAAG,IAAI,GAAGA,OAAQ,CAAC;IAC7E,IAAI,CAACH,IAAI,EAAE;MACP,MAAM,IAAI5B,SAAS,CAAC,IAAI,CAACoI,IAAI,EAAG,6BAA4BrG,OAAQ,EAAC,CAAC;IAC1E;IACA,OAAOH,IAAI;EACf;EACA,MAAM2J,oBAAoBA,CAAC3J,IAAI,EAAEuJ,SAAS,EAAEN,gBAAgB,EAAEnF,OAAO,EAAE;IACnE,MAAM,IAAI,CAAC8G,WAAW,CAAC5K,IAAI,EAAEuJ,SAAS,EAAEN,gBAAgB,CAAC;IACzD,IAAI,CAAC4B,MAAM,CAAC7K,IAAI,EAAEiJ,gBAAgB,EAAEnF,OAAO,CAAC;EAChD;EACA,MAAM8G,WAAWA,CAAC5K,IAAI,EAAEuJ,SAAS,EAAEN,gBAAgB,EAAE;IACjD,IAAIkB,MAAM;IACV,IAAI,CAACvD,sBAAsB,CAAClB,OAAO,CAAC,CAACpG,cAAc,EAAEsL,WAAW,KAAK;MACjE,IAAI,CAACT,MAAM,IAAIpK,UAAU,CAAC6K,WAAW,EAAE5K,IAAI,CAAC,EAAE;QAC1CmK,MAAM,GAAG7K,cAAc,CAACwL,IAAI,CAAC,MAAM,IAAI,CAACF,WAAW,CAAC5K,IAAI,EAAEuJ,SAAS,EAAEN,gBAAgB,CAAC,CAAC;MAC3F;IACJ,CAAC,CAAC;IACF,IAAIkB,MAAM,EAAE;MACR,OAAOA,MAAM;IACjB;IACA,IAAInK,IAAI,KAAK,IAAI,CAACuH,IAAI,EAAE;MACpB,MAAMwD,QAAQ,GAAG,IAAI,CAACjF,IAAI,CAAC8D,OAAO,CAAC5J,IAAI,CAAC;MACxC,IAAI+K,QAAQ,CAACtK,SAAS,EAAE;QACpBT,IAAI,CAACuF,WAAW,GAAG,CAAC,CAAC,IAAI,CAACoB,UAAU,CAACpB,WAAW,CAACvF,IAAI,CAACG,OAAO,CAAC;QAC9DH,IAAI,CAACR,KAAK,GAAG,IAAI;QACjB;MACJ;IACJ;IACA,OAAO,IAAI,CAACwL,gBAAgB,CAAChL,IAAI,EAAEuJ,SAAS,EAAEN,gBAAgB,CAAC;EACnE;EACA,MAAM+B,gBAAgBA,CAAChL,IAAI,EAAEuJ,SAAS,EAAEN,gBAAgB,EAAE;IACtD,IAAIgC,IAAI;IACRjL,IAAI,CAACV,cAAc,GAAG,IAAI4L,OAAO,CAACC,CAAC,IAAIF,IAAI,GAAGE,CAAC,CAAC;IAChD,IAAI,CAACvE,sBAAsB,CAACc,GAAG,CAAC1H,IAAI,EAAEA,IAAI,CAACV,cAAc,CAAC;IAC1DU,IAAI,CAACV,cAAc,CAAC8L,OAAO,CAAC,MAAM;MAC9BpL,IAAI,CAACV,cAAc,GAAGC,SAAS;MAC/B,IAAI,CAACqH,sBAAsB,CAACyE,MAAM,CAACrL,IAAI,CAAC;IAC5C,CAAC,CAAC;IACF,IAAI;MACA,MAAMsL,iBAAiB,GAAG,MAAM,IAAI,CAACC,aAAa,CAACvL,IAAI,EAAEuJ,SAAS,EAAEN,gBAAgB,CAAC;MACrFjJ,IAAI,CAACR,KAAK,GAAG,KAAK;MAClB,MAAMjB,QAAQ,CAACiN,OAAO,CAACF,iBAAiB,CAAClL,GAAG,CAACuF,KAAK,IAAI,IAAI,CAACqF,gBAAgB,CAACrF,KAAK,EAAE4D,SAAS,EAAEN,gBAAgB,CAAC,CAAC,CAAC;IACrH,CAAC,SACO;MACJgC,IAAI,CAAC,CAAC;IACV;EACJ;EACA,MAAMM,aAAaA,CAACvL,IAAI,EAAEuJ,SAAS,EAAEN,gBAAgB,EAAE;IACnDjJ,IAAI,CAACuF,WAAW,GAAG,CAAC,CAAC,IAAI,CAACoB,UAAU,CAACpB,WAAW,CAACvF,IAAI,CAACG,OAAO,CAAC;IAC9D,IAAIsL,eAAe;IACnB,IAAI,CAACzL,IAAI,CAACuF,WAAW,EAAE;MACnBkG,eAAe,GAAGP,OAAO,CAACQ,OAAO,CAAC3M,QAAQ,CAAC4M,KAAK,CAAC,CAAC,CAAC;IACvD,CAAC,MACI;MACD,MAAMtM,QAAQ,GAAG,IAAI,CAACuM,aAAa,CAAC5L,IAAI,CAAC;MACzC,IAAId,UAAU,CAACG,QAAQ,CAAC,EAAE;QACtBoM,eAAe,GAAGP,OAAO,CAACQ,OAAO,CAACrM,QAAQ,CAAC;MAC/C,CAAC,MACI;QACD,MAAMwM,WAAW,GAAGrN,OAAO,CAAC,GAAG,CAAC;QAChCqN,WAAW,CAACf,IAAI,CAAC,MAAM;UACnB9K,IAAI,CAACP,IAAI,GAAG,IAAI;UAChB,IAAI,CAACsH,yBAAyB,CAAC+E,IAAI,CAAC9L,IAAI,CAAC;QAC7C,CAAC,EAAE+L,CAAC,IAAI,IAAI,CAAC;QACbN,eAAe,GAAGpM,QAAQ,CAAC+L,OAAO,CAAC,MAAMS,WAAW,CAAC7C,MAAM,CAAC,CAAC,CAAC;MAClE;IACJ;IACA,IAAI;MACA,MAAM3J,QAAQ,GAAG,MAAMoM,eAAe;MACtC,OAAO,IAAI,CAACO,WAAW,CAAChM,IAAI,EAAEX,QAAQ,EAAEkK,SAAS,EAAEN,gBAAgB,CAAC;IACxE,CAAC,CACD,OAAOgD,GAAG,EAAE;MACR,IAAIjM,IAAI,KAAK,IAAI,CAACuH,IAAI,IAAI,IAAI,CAACzB,IAAI,CAACkE,UAAU,CAAChK,IAAI,CAAC,EAAE;QAClD,IAAI,CAAC8F,IAAI,CAACgE,QAAQ,CAAC9J,IAAI,CAAC;MAC5B;MACA,IAAIrB,mBAAmB,CAACsN,GAAG,CAAC,EAAE;QAC1B,OAAO,EAAE;MACb;MACA,MAAMA,GAAG;IACb,CAAC,SACO;MACJ,IAAIjM,IAAI,CAACP,IAAI,EAAE;QACXO,IAAI,CAACP,IAAI,GAAG,KAAK;QACjB,IAAI,CAACsH,yBAAyB,CAAC+E,IAAI,CAAC9L,IAAI,CAAC;MAC7C;IACJ;EACJ;EACA4L,aAAaA,CAAC5L,IAAI,EAAE;IAChB,IAAImK,MAAM,GAAG,IAAI,CAACtD,eAAe,CAAC8D,GAAG,CAAC3K,IAAI,CAAC;IAC3C,IAAImK,MAAM,EAAE;MACR,OAAOA,MAAM;IACjB;IACA,MAAM9K,QAAQ,GAAG,IAAI,CAACsH,UAAU,CAACuF,WAAW,CAAClM,IAAI,CAACG,OAAO,CAAC;IAC1D,IAAIjB,UAAU,CAACG,QAAQ,CAAC,EAAE;MACtB,OAAO,IAAI,CAAC8M,eAAe,CAAC9M,QAAQ,CAAC;IACzC,CAAC,MACI;MACD8K,MAAM,GAAG7L,uBAAuB,CAAC,YAAY,IAAI,CAAC6N,eAAe,CAAC,MAAM9M,QAAQ,CAAC,CAAC;MAClF,IAAI,CAACwH,eAAe,CAACa,GAAG,CAAC1H,IAAI,EAAEmK,MAAM,CAAC;MACtC,OAAOA,MAAM,CAACiB,OAAO,CAAC,MAAM;QAAE,IAAI,CAACvE,eAAe,CAACwE,MAAM,CAACrL,IAAI,CAAC;MAAE,CAAC,CAAC;IACvE;EACJ;EACA2H,yBAAyBA,CAAC;IAAE3H,IAAI;IAAEoM;EAAK,CAAC,EAAE;IACtC,IAAIpM,IAAI,CAACG,OAAO,KAAK,IAAI,EAAE;MACvB;IACJ;IACA,IAAI,CAACH,IAAI,CAACS,SAAS,IAAIT,IAAI,CAACG,OAAO,CAACX,KAAK,EAAE;MACvC,IAAI4M,IAAI,EAAE;QACN,IAAI,CAACtC,QAAQ,CAAC9J,IAAI,CAACG,OAAO,CAACA,OAAO,CAAC;MACvC,CAAC,MACI;QACD,IAAI,CAACwJ,oBAAoB,CAAC3J,IAAI,CAACG,OAAO,EAAE,KAAK,CAAC,CACzCkM,KAAK,CAACzN,iBAAiB,CAAC;MACjC;IACJ;EACJ;EACAoN,WAAWA,CAAChM,IAAI,EAAEsM,wBAAwB,EAAE/C,SAAS,EAAEN,gBAAgB,EAAE;IACrE,MAAMsD,gBAAgB,GAAG,CAAC,GAAGD,wBAAwB,CAAC;IACtD;IACA,IAAItM,IAAI,CAACX,QAAQ,CAACmN,MAAM,KAAK,CAAC,IAAID,gBAAgB,CAACC,MAAM,KAAK,CAAC,EAAE;MAC7D,OAAO,EAAE;IACb;IACA,MAAMC,aAAa,GAAG,IAAIvL,GAAG,CAAC,CAAC;IAC/B,MAAMwL,qBAAqB,GAAG,IAAIxL,GAAG,CAAC,CAAC;IACvC,KAAK,MAAMyE,KAAK,IAAI3F,IAAI,CAACX,QAAQ,EAAE;MAC/BoN,aAAa,CAAC/E,GAAG,CAAC/B,KAAK,CAACxF,OAAO,EAAEwF,KAAK,CAAC;MACvC,IAAI,IAAI,CAAC3B,gBAAgB,EAAE;QACvB0I,qBAAqB,CAAChF,GAAG,CAAC/B,KAAK,CAAC8B,EAAE,EAAE;UAAEzH,IAAI,EAAE2F,KAAK;UAAElF,SAAS,EAAE,IAAI,CAACqF,IAAI,CAACkE,UAAU,CAACrE,KAAK,CAAC,IAAI,IAAI,CAACG,IAAI,CAACoE,WAAW,CAACvE,KAAK;QAAE,CAAC,CAAC;MAChI;IACJ;IACA,MAAM2F,iBAAiB,GAAG,EAAE;IAC5B,MAAMjM,QAAQ,GAAGkN,gBAAgB,CAACnM,GAAG,CAACD,OAAO,IAAI;MAC7C,MAAMoF,WAAW,GAAG,CAAC,CAAC,IAAI,CAACoB,UAAU,CAACpB,WAAW,CAACpF,OAAO,CAAC;MAC1D,IAAI,CAAC,IAAI,CAAC6D,gBAAgB,EAAE;QACxB,MAAM2I,iBAAiB,GAAGxN,uBAAuB,CAAC;UAAEgB,OAAO;UAAEL,MAAM,EAAEE,IAAI;UAAEuF,WAAW;UAAEiC,oBAAoB,EAAE,IAAI,CAACN,uBAAuB,CAAC/G,OAAO;QAAE,CAAC,CAAC;QACtJ,IAAIoF,WAAW,IAAIoH,iBAAiB,CAACnF,oBAAoB,KAAKrJ,8BAA8B,CAACiJ,kBAAkB,EAAE;UAC7GkE,iBAAiB,CAACsB,IAAI,CAACD,iBAAiB,CAAC;QAC7C;QACA,OAAOA,iBAAiB;MAC5B;MACA,MAAMlF,EAAE,GAAG,IAAI,CAACzD,gBAAgB,CAACC,KAAK,CAAC9D,OAAO,CAAC,CAAC0M,QAAQ,CAAC,CAAC;MAC1D,MAAM1C,MAAM,GAAGuC,qBAAqB,CAAC/B,GAAG,CAAClD,EAAE,CAAC;MAC5C,IAAI0C,MAAM,EAAE;QACR,MAAMwC,iBAAiB,GAAGxC,MAAM,CAACnK,IAAI;QACrCyM,aAAa,CAACpB,MAAM,CAACsB,iBAAiB,CAACxM,OAAO,CAAC;QAC/C,IAAI,CAACiD,KAAK,CAACiI,MAAM,CAACsB,iBAAiB,CAACxM,OAAO,CAAC;QAC5C,IAAI,CAACiD,KAAK,CAACsE,GAAG,CAACvH,OAAO,EAAEwM,iBAAiB,CAAC;QAC1CA,iBAAiB,CAACxM,OAAO,GAAGA,OAAO;QACnCwM,iBAAiB,CAACpH,WAAW,GAAGA,WAAW;QAC3C,IAAIgE,SAAS,EAAE;UACX,IAAIY,MAAM,CAAC1J,SAAS,EAAE;YAClBkM,iBAAiB,CAACtN,QAAQ,CAACqG,OAAO,CAAC1F,IAAI,IAAIwF,GAAG,CAACxF,IAAI,EAAEA,IAAI,IAAI,IAAI,CAACoD,KAAK,CAACiI,MAAM,CAACrL,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC;YAC9FwM,iBAAiB,CAACtN,QAAQ,CAACyN,MAAM,CAAC,CAAC,EAAEH,iBAAiB,CAACtN,QAAQ,CAACmN,MAAM,CAAC;YACvEG,iBAAiB,CAACnN,KAAK,GAAG,IAAI;UAClC,CAAC,MACI;YACD8L,iBAAiB,CAACsB,IAAI,CAACD,iBAAiB,CAAC;UAC7C;QACJ,CAAC,MACI,IAAIpH,WAAW,IAAI,CAAC4E,MAAM,CAAC1J,SAAS,EAAE;UACvC6K,iBAAiB,CAACsB,IAAI,CAACD,iBAAiB,CAAC;QAC7C;QACA,OAAOA,iBAAiB;MAC5B;MACA,MAAMI,sBAAsB,GAAG5N,uBAAuB,CAAC;QAAEgB,OAAO;QAAEL,MAAM,EAAEE,IAAI;QAAEyH,EAAE;QAAElC,WAAW;QAAEiC,oBAAoB,EAAE,IAAI,CAACN,uBAAuB,CAAC/G,OAAO;MAAE,CAAC,CAAC;MAC/J,IAAI8I,gBAAgB,IAAIA,gBAAgB,CAACH,SAAS,CAACI,KAAK,IAAID,gBAAgB,CAACH,SAAS,CAACI,KAAK,CAAC8D,OAAO,CAACvF,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;QAC3GwB,gBAAgB,CAACC,KAAK,CAAC0D,IAAI,CAACG,sBAAsB,CAAC;MACvD;MACA,IAAI9D,gBAAgB,IAAIA,gBAAgB,CAACH,SAAS,CAACK,SAAS,IAAIF,gBAAgB,CAACH,SAAS,CAACK,SAAS,CAAC6D,OAAO,CAACvF,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;QACnHwB,gBAAgB,CAACE,SAAS,CAACyD,IAAI,CAACG,sBAAsB,CAAC;MAC3D;MACA,IAAI9D,gBAAgB,IAAIA,gBAAgB,CAACH,SAAS,CAACmE,QAAQ,IAAIhE,gBAAgB,CAACH,SAAS,CAACmE,QAAQ,CAACD,OAAO,CAACvF,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;QACjH6D,iBAAiB,CAACsB,IAAI,CAACG,sBAAsB,CAAC;MAClD,CAAC,MACI,IAAIxH,WAAW,IAAIwH,sBAAsB,CAACvF,oBAAoB,KAAKrJ,8BAA8B,CAACiJ,kBAAkB,EAAE;QACvHkE,iBAAiB,CAACsB,IAAI,CAACG,sBAAsB,CAAC;MAClD;MACA,OAAOA,sBAAsB;IACjC,CAAC,CAAC;IACF,KAAK,MAAM/M,IAAI,IAAIyM,aAAa,CAACS,MAAM,CAAC,CAAC,EAAE;MACvC1H,GAAG,CAACxF,IAAI,EAAEA,IAAI,IAAI,IAAI,CAACoD,KAAK,CAACiI,MAAM,CAACrL,IAAI,CAACG,OAAO,CAAC,CAAC;IACtD;IACA,KAAK,MAAMwF,KAAK,IAAItG,QAAQ,EAAE;MAC1B,IAAI,CAAC+D,KAAK,CAACsE,GAAG,CAAC/B,KAAK,CAACxF,OAAO,EAAEwF,KAAK,CAAC;IACxC;IACA3F,IAAI,CAACX,QAAQ,CAACyN,MAAM,CAAC,CAAC,EAAE9M,IAAI,CAACX,QAAQ,CAACmN,MAAM,EAAE,GAAGnN,QAAQ,CAAC;IAC1D;IACA,IAAIW,IAAI,KAAK,IAAI,CAACuH,IAAI,IAAI,IAAI,CAACN,wBAAwB,IAAI5H,QAAQ,CAACmN,MAAM,KAAK,CAAC,IAAIlB,iBAAiB,CAACkB,MAAM,KAAK,CAAC,EAAE;MAChHnN,QAAQ,CAAC,CAAC,CAAC,CAACK,aAAa,GAAG,IAAI;MAChC4L,iBAAiB,CAACsB,IAAI,CAACvN,QAAQ,CAAC,CAAC,CAAC,CAAC;IACvC;IACA,OAAOiM,iBAAiB;EAC5B;EACAT,MAAMA,CAAC7K,IAAI,EAAEiJ,gBAAgB,EAAEnF,OAAO,EAAE;IACpC,MAAMzE,QAAQ,GAAGW,IAAI,CAACX,QAAQ,CAACe,GAAG,CAACJ,IAAI,IAAI,IAAI,CAACmN,aAAa,CAACnN,IAAI,EAAEiJ,gBAAgB,CAAC,CAAC;IACtF,MAAMjB,iBAAiB,GAAGlE,OAAO,IAAI;MACjC,GAAGA,OAAO;MACVsJ,oBAAoB,EAAEtJ,OAAO,CAACsJ,oBAAoB,IAAI;QAClDnJ,KAAKA,CAACjE,IAAI,EAAE;UACR,OAAO8D,OAAO,CAACsJ,oBAAoB,CAACnJ,KAAK,CAACjE,IAAI,CAACG,OAAO,CAAC;QAC3D;MACJ;IACJ,CAAC;IACD,IAAI,CAAC2F,IAAI,CAACkG,WAAW,CAAChM,IAAI,KAAK,IAAI,CAACuH,IAAI,GAAG,IAAI,GAAGvH,IAAI,EAAEX,QAAQ,EAAE2I,iBAAiB,CAAC;IACpF,IAAIhI,IAAI,KAAK,IAAI,CAACuH,IAAI,EAAE;MACpB,IAAI,CAACzB,IAAI,CAACuH,cAAc,CAACrN,IAAI,EAAEA,IAAI,CAACuF,WAAW,CAAC;IACpD;IACA,IAAI,CAACuB,YAAY,CAACgF,IAAI,CAAC,CAAC;EAC5B;EACAqB,aAAaA,CAACnN,IAAI,EAAEiJ,gBAAgB,EAAE;IAClC,IAAIjJ,IAAI,CAACR,KAAK,EAAE;MACZ,OAAO;QACHW,OAAO,EAAEH,IAAI;QACbQ,WAAW,EAAER,IAAI,CAACuF,WAAW;QAC7B9E,SAAS,EAAE;MACf,CAAC;IACL;IACA,IAAIA,SAAS;IACb,IAAIwI,gBAAgB,IAAIA,gBAAgB,CAACH,SAAS,CAACmE,QAAQ,IAAIjN,IAAI,CAACyH,EAAE,IAAIwB,gBAAgB,CAACH,SAAS,CAACmE,QAAQ,CAACD,OAAO,CAAChN,IAAI,CAACyH,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;MACjIhH,SAAS,GAAG,KAAK;IACrB,CAAC,MACI,IAAIT,IAAI,CAACN,aAAa,EAAE;MACzBe,SAAS,GAAG,KAAK;MACjBT,IAAI,CAACN,aAAa,GAAG,KAAK;IAC9B,CAAC,MACI;MACDe,SAAS,GAAGT,IAAI,CAACwH,oBAAoB;IACzC;IACA,OAAO;MACHrH,OAAO,EAAEH,IAAI;MACbX,QAAQ,EAAEW,IAAI,CAACuF,WAAW,GAAGxG,QAAQ,CAACqB,GAAG,CAACJ,IAAI,CAACX,QAAQ,EAAEsG,KAAK,IAAI,IAAI,CAACwH,aAAa,CAACxH,KAAK,EAAEsD,gBAAgB,CAAC,CAAC,GAAG,EAAE;MACnHzI,WAAW,EAAER,IAAI,CAACuF,WAAW;MAC7B9E;IACJ,CAAC;EACL;EACA0L,eAAeA,CAAC9M,QAAQ,EAAE;IACtB,IAAI,IAAI,CAAC+F,MAAM,EAAE;MACb/F,QAAQ,GAAG,CAAC,GAAGA,QAAQ,CAAC,CAACiO,IAAI,CAAC,IAAI,CAAClI,MAAM,CAACmI,OAAO,CAACC,IAAI,CAAC,IAAI,CAACpI,MAAM,CAAC,CAAC;IACxE;IACA,OAAO/F,QAAQ;EACnB;EACAJ,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC+H,WAAW,CAAC/H,OAAO,CAAC,CAAC;IAC1B,IAAI,CAAC6G,IAAI,CAAC7G,OAAO,CAAC,CAAC;EACvB;AACJ;AACA,MAAMwO,oCAAoC,CAAC;EACvC,IAAItN,OAAOA,CAAA,EAAG;IACV,OAAO;MACHuC,QAAQ,EAAE,IAAI,CAAC1C,IAAI,CAACG,OAAO,CAACuC,QAAQ,CAACtC,GAAG,CAACoC,CAAC,IAAIA,CAAC,CAACrC,OAAO,CAAC;MACxDuN,cAAc,EAAE,IAAI,CAAC1N,IAAI,CAACG,OAAO,CAACuN;IACtC,CAAC;EACL;EACA,IAAIrO,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACW,IAAI,CAACX,QAAQ,CAACe,GAAG,CAACJ,IAAI,IAAI,IAAIyN,oCAAoC,CAACzN,IAAI,CAAC,CAAC;EAAE;EACxG,IAAIK,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACL,IAAI,CAACK,KAAK;EAAE;EACtC,IAAIC,oBAAoBA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACN,IAAI,CAACM,oBAAoB;EAAE;EACpE,IAAIC,iBAAiBA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACP,IAAI,CAACO,iBAAiB;EAAE;EAC9D,IAAIC,WAAWA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACR,IAAI,CAACQ,WAAW;EAAE;EAClD,IAAIC,SAASA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACT,IAAI,CAACS,SAAS;EAAE;EAC9C,IAAIC,OAAOA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACV,IAAI,CAACU,OAAO;EAAE;EAC1C,IAAIC,UAAUA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACX,IAAI,CAACW,UAAU;EAAE;EAChDC,WAAWA,CAACZ,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;AACJ;AACA,MAAM2N,iCAAiC,CAAC;EACpC/M,WAAWA,CAACE,QAAQ,EAAEC,UAAU,EAAE6M,8BAA8B,EAAE5M,uBAAuB,EAAE;IACvF,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAAC6M,8BAA8B,GAAGA,8BAA8B;IACpE,IAAI,CAAC5M,uBAAuB,GAAGA,uBAAuB;IACtD,IAAI,CAACC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC9B,IAAI,CAAC8F,WAAW,GAAG,EAAE;IACrB,IAAI,CAAC7F,UAAU,GAAGL,QAAQ,CAACK,UAAU;EACzC;EACAC,cAAcA,CAACC,SAAS,EAAE;IACtB,MAAMC,YAAY,GAAG,IAAI,CAACR,QAAQ,CAACM,cAAc,CAACC,SAAS,CAAC;IAC5D,OAAO;MAAEC;IAAa,CAAC;EAC3B;EACAC,aAAaA,CAACvB,IAAI,EAAEwB,KAAK,EAAEF,YAAY,EAAEG,MAAM,EAAE;IAC7C,IAAI,CAACX,QAAQ,CAACS,aAAa,CAAC,IAAI,CAACR,UAAU,CAACX,GAAG,CAACJ,IAAI,CAAC,EAAEwB,KAAK,EAAEF,YAAY,CAACA,YAAY,EAAEG,MAAM,CAAC;EACpG;EACAoM,wBAAwBA,CAAC7N,IAAI,EAAEwB,KAAK,EAAEF,YAAY,EAAEG,MAAM,EAAE;IACxD,IAAI,CAACX,QAAQ,CAAC+M,wBAAwB,CAAC,IAAI,CAACD,8BAA8B,CAAC,CAAC,CAACxN,GAAG,CAACJ,IAAI,CAAC,EAAEwB,KAAK,EAAEF,YAAY,CAACA,YAAY,EAAEG,MAAM,CAAC;EACrI;EACAC,aAAaA,CAACvB,OAAO,EAAEwB,cAAc,EAAE;IACnC,IAAIxB,OAAO,CAACV,IAAI,EAAE;MACdkC,cAAc,CAACC,SAAS,CAACC,GAAG,CAAC,GAAGnD,SAAS,CAACoD,gBAAgB,CAACrD,OAAO,CAACsD,eAAe,CAAC,CAAC;MACpF,OAAO,IAAI;IACf,CAAC,MACI;MACDJ,cAAc,CAACC,SAAS,CAACI,MAAM,CAAC,GAAGtD,SAAS,CAACoD,gBAAgB,CAACrD,OAAO,CAACsD,eAAe,CAAC,CAAC;MACvF,OAAO,KAAK;IAChB;EACJ;EACAE,cAAcA,CAACjC,IAAI,EAAEwB,KAAK,EAAEF,YAAY,EAAEG,MAAM,EAAE;IAC9C,IAAIS,EAAE,EAAEC,EAAE;IACV,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACpB,QAAQ,EAAEmB,cAAc,MAAM,IAAI,IAAIE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,IAAI,CAACF,EAAE,EAAE,IAAI,CAACnB,UAAU,CAACX,GAAG,CAACJ,IAAI,CAAC,EAAEwB,KAAK,EAAEF,YAAY,CAACA,YAAY,EAAEG,MAAM,CAAC;EACpK;EACAqM,yBAAyBA,CAAC9N,IAAI,EAAEwB,KAAK,EAAEF,YAAY,EAAEG,MAAM,EAAE;IACzD,IAAIS,EAAE,EAAEC,EAAE;IACV,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACpB,QAAQ,EAAEgN,yBAAyB,MAAM,IAAI,IAAI3L,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,IAAI,CAACF,EAAE,EAAE,IAAI,CAAC0L,8BAA8B,CAAC,CAAC,CAACxN,GAAG,CAACJ,IAAI,CAAC,EAAEwB,KAAK,EAAEF,YAAY,CAACA,YAAY,EAAEG,MAAM,CAAC;EACrM;EACAY,eAAeA,CAACf,YAAY,EAAE;IAC1B,IAAI,CAACR,QAAQ,CAACuB,eAAe,CAACf,YAAY,CAACA,YAAY,CAAC;EAC5D;EACArC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACgC,aAAa,CAACqB,KAAK,CAAC,CAAC;IAC1B,IAAI,CAAC0E,WAAW,GAAG/H,OAAO,CAAC,IAAI,CAAC+H,WAAW,CAAC;EAChD;AACJ;AACA,SAAS+G,+BAA+BA,CAACjK,OAAO,EAAE;EAC9C,MAAMkE,iBAAiB,GAAGlE,OAAO,IAAID,mBAAmB,CAACC,OAAO,CAAC;EACjE,OAAOkE,iBAAiB,IAAI;IACxB,GAAGA,iBAAiB;IACpB9C,+BAA+B,EAAE8C,iBAAiB,CAAC9C,+BAA+B,IAAI;MAClF,GAAG8C,iBAAiB,CAAC9C,+BAA+B;MACpD8I,wCAAwCA,CAACC,GAAG,EAAE;QAC1C,OAAOnK,OAAO,CAACoB,+BAA+B,CAAC8I,wCAAwC,CAACC,GAAG,CAAC7N,GAAG,CAACoC,CAAC,IAAIA,CAAC,CAACrC,OAAO,CAAC,CAAC;MACpH;IACJ;EACJ,CAAC;AACL;AACA,OAAO,MAAM+N,yBAAyB,SAAStI,aAAa,CAAC;EACzDhF,WAAWA,CAAC4F,IAAI,EAAEnF,SAAS,EAAE8M,eAAe,EAAEC,mBAAmB,EAAE1H,SAAS,EAAEC,UAAU,EAAE7C,OAAO,GAAG,CAAC,CAAC,EAAE;IACpG,KAAK,CAAC0C,IAAI,EAAEnF,SAAS,EAAE8M,eAAe,EAAEzH,SAAS,EAAEC,UAAU,EAAE7C,OAAO,CAAC;IACvE,IAAI,CAACsK,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,sBAAsB,GAAG,IAAIhQ,UAAU,CAAC2B,IAAI,IAAI,IAAIyN,oCAAoC,CAACzN,IAAI,CAAC,CAAC;IACpG,IAAI,CAACgF,MAAM,GAAGlB,OAAO,CAACkB,MAAM;EAChC;EACAqC,UAAUA,CAACb,IAAI,EAAEnF,SAAS,EAAEoF,QAAQ,EAAEC,SAAS,EAAE5C,OAAO,EAAE;IACtD,MAAM8D,kBAAkB,GAAG,IAAI9J,oBAAoB,CAAC2I,QAAQ,CAAC;IAC7D,MAAMoB,mBAAmB,GAAGnB,SAAS,CAACtG,GAAG,CAAC0H,CAAC,IAAI,IAAI6F,iCAAiC,CAAC7F,CAAC,EAAE,IAAI,CAAC/G,UAAU,EAAE,MAAM,IAAI,CAACsN,sBAAsB,EAAE,IAAI,CAACtH,yBAAyB,CAACgB,KAAK,CAAC,CAAC;IAClL,MAAMC,iBAAiB,GAAG+F,+BAA+B,CAACjK,OAAO,CAAC,IAAI,CAAC,CAAC;IACxE,OAAO,IAAI7F,sBAAsB,CAACuI,IAAI,EAAEnF,SAAS,EAAEuG,kBAAkB,EAAEC,mBAAmB,EAAEG,iBAAiB,CAAC;EAClH;EACAmF,aAAaA,CAACnN,IAAI,EAAEiJ,gBAAgB,EAAE;IAClC,OAAO;MACHyE,cAAc,EAAE,IAAI,CAACU,mBAAmB,CAACE,gBAAgB,CAACtO,IAAI,CAACG,OAAO,CAAC;MACvE,GAAG,KAAK,CAACgN,aAAa,CAACnN,IAAI,EAAEiJ,gBAAgB;IACjD,CAAC;EACL;EACAhB,aAAaA,CAACnE,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,IAAI,CAACgC,IAAI,CAACmC,aAAa,CAACnE,OAAO,CAAC;EACpC;EACA+G,MAAMA,CAAC7K,IAAI,EAAEiJ,gBAAgB,EAAE;IAC3B,IAAI,CAAC,IAAI,CAACjF,gBAAgB,EAAE;MACxB,OAAO,KAAK,CAAC6G,MAAM,CAAC7K,IAAI,EAAEiJ,gBAAgB,CAAC;IAC/C;IACA;IACA;IACA;IACA,MAAMhF,KAAK,GAAI9D,OAAO,IAAK,IAAI,CAAC6D,gBAAgB,CAACC,KAAK,CAAC9D,OAAO,CAAC,CAAC0M,QAAQ,CAAC,CAAC;IAC1E,MAAM0B,kBAAkB,GAAInL,KAAK,IAAK;MAClC,MAAM+G,MAAM,GAAG,IAAIqE,GAAG,CAAC,CAAC;MACxB,KAAK,MAAMxO,IAAI,IAAIoD,KAAK,EAAE;QACtB,MAAMqL,cAAc,GAAG,IAAI,CAAC3I,IAAI,CAAC4I,qBAAqB,CAAC1O,IAAI,KAAK,IAAI,CAACuH,IAAI,GAAG,IAAI,GAAGvH,IAAI,CAAC;QACxF,IAAI,CAACyO,cAAc,CAACtO,OAAO,EAAE;UACzB;QACJ;QACA,KAAK,MAAMH,IAAI,IAAIyO,cAAc,CAACtO,OAAO,CAACuC,QAAQ,EAAE;UAChDyH,MAAM,CAACtI,GAAG,CAACoC,KAAK,CAACjE,IAAI,CAACG,OAAO,CAAC,CAAC;QACnC;MACJ;MACA,OAAOgK,MAAM;IACjB,CAAC;IACD,MAAMwE,YAAY,GAAGJ,kBAAkB,CAAC,IAAI,CAACzI,IAAI,CAACsE,YAAY,CAAC,CAAC,CAAC;IACjE,MAAMwE,QAAQ,GAAGL,kBAAkB,CAAC,IAAI,CAACzI,IAAI,CAACwE,QAAQ,CAAC,CAAC,CAAC;IACzD,KAAK,CAACO,MAAM,CAAC7K,IAAI,EAAEiJ,gBAAgB,CAAC;IACpC,MAAME,SAAS,GAAG,IAAI,CAACiB,YAAY,CAAC,CAAC;IACrC,IAAIyE,kBAAkB,GAAG,KAAK;IAC9B,MAAM3F,KAAK,GAAG,IAAI,CAACoB,QAAQ,CAAC,CAAC;IAC7B,IAAIwE,cAAc,GAAG,KAAK;IAC1B,MAAMC,KAAK,GAAI/O,IAAI,IAAK;MACpB,MAAMyO,cAAc,GAAGzO,IAAI,CAACG,OAAO;MACnC,IAAIsO,cAAc,EAAE;QAChB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,cAAc,CAAC/L,QAAQ,CAAC8J,MAAM,EAAEwC,CAAC,EAAE,EAAE;UACrD,MAAMvH,EAAE,GAAGxD,KAAK,CAACwK,cAAc,CAAC/L,QAAQ,CAACsM,CAAC,CAAC,CAAC7O,OAAO,CAAC;UACpD,MAAMA,OAAO,GAAGsO,cAAc,CAAC/L,QAAQ,CAAC+L,cAAc,CAAC/L,QAAQ,CAAC8J,MAAM,GAAG,CAAC,CAAC,CAACrM,OAAO;UACnF;UACA,IAAIwO,YAAY,CAACM,GAAG,CAACxH,EAAE,CAAC,IAAI0B,SAAS,CAAC6D,OAAO,CAAC7M,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;YAC3DgJ,SAAS,CAACyD,IAAI,CAACzM,OAAO,CAAC;YACvB0O,kBAAkB,GAAG,IAAI;UAC7B;UACA,IAAID,QAAQ,CAACK,GAAG,CAACxH,EAAE,CAAC,IAAIyB,KAAK,CAAC8D,OAAO,CAAC7M,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;YACnD+I,KAAK,CAAC0D,IAAI,CAACzM,OAAO,CAAC;YACnB2O,cAAc,GAAG,IAAI;UACzB;QACJ;MACJ;MACA9O,IAAI,CAACX,QAAQ,CAACqG,OAAO,CAACqJ,KAAK,CAAC;IAChC,CAAC;IACDA,KAAK,CAAC,IAAI,CAACjJ,IAAI,CAAC4I,qBAAqB,CAAC1O,IAAI,KAAK,IAAI,CAACuH,IAAI,GAAG,IAAI,GAAGvH,IAAI,CAAC,CAAC;IACxE,IAAI6O,kBAAkB,EAAE;MACpB,IAAI,CAACvF,YAAY,CAACH,SAAS,CAAC;IAChC;IACA,IAAI2F,cAAc,EAAE;MAChB,IAAI,CAACzF,QAAQ,CAACH,KAAK,CAAC;IACxB;EACJ;EACA;EACA;EACA;EACAiD,eAAeA,CAAC9M,QAAQ,EAAE;IACtB,IAAI,IAAI,CAAC2F,MAAM,EAAE;MACb3F,QAAQ,GAAGN,QAAQ,CAACiG,MAAM,CAAC3F,QAAQ,EAAEmD,CAAC,IAAI;QACtC,MAAM2H,MAAM,GAAG,IAAI,CAACnF,MAAM,CAACA,MAAM,CAACxC,CAAC,EAAE,CAAC,CAAC,4BAA4B,CAAC;QACpE,MAAM0M,UAAU,GAAGC,aAAa,CAAChF,MAAM,CAAC;QACxC,IAAI+E,UAAU,KAAK,CAAC,CAAC,8BAA8B;UAC/C,MAAM,IAAIE,KAAK,CAAC,wEAAwE,CAAC;QAC7F;QACA,OAAOF,UAAU,KAAK,CAAC,CAAC;MAC5B,CAAC,CAAC;IACN;IACA,OAAO,KAAK,CAAC/C,eAAe,CAAC9M,QAAQ,CAAC;EAC1C;AACJ;AACA,SAAS8P,aAAaA,CAACE,YAAY,EAAE;EACjC,IAAI,OAAOA,YAAY,KAAK,SAAS,EAAE;IACnC,OAAOA,YAAY,GAAG,CAAC,CAAC,+BAA+B,CAAC,CAAC;EAC7D,CAAC,MACI,IAAIrR,cAAc,CAACqR,YAAY,CAAC,EAAE;IACnC,OAAOtR,eAAe,CAACsR,YAAY,CAACH,UAAU,CAAC;EACnD,CAAC,MACI;IACD,OAAOnR,eAAe,CAACsR,YAAY,CAAC;EACxC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}