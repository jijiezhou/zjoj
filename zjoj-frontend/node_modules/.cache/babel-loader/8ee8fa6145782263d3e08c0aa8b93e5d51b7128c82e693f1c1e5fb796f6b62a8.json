{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { BlockCommentCommand } from './blockCommentCommand.js';\nimport { LineCommentCommand } from './lineCommentCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nclass CommentLineAction extends EditorAction {\n  constructor(type, opts) {\n    super(opts);\n    this._type = type;\n  }\n  run(accessor, editor) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    if (!editor.hasModel()) {\n      return;\n    }\n    const model = editor.getModel();\n    const commands = [];\n    const modelOptions = model.getOptions();\n    const commentsOptions = editor.getOption(23 /* EditorOption.comments */);\n    const selections = editor.getSelections().map((selection, index) => ({\n      selection,\n      index,\n      ignoreFirstLine: false\n    }));\n    selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n    // Remove selections that would result in copying the same line\n    let prev = selections[0];\n    for (let i = 1; i < selections.length; i++) {\n      const curr = selections[i];\n      if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n        // these two selections would copy the same line\n        if (prev.index < curr.index) {\n          // prev wins\n          curr.ignoreFirstLine = true;\n        } else {\n          // curr wins\n          prev.ignoreFirstLine = true;\n          prev = curr;\n        }\n      }\n    }\n    for (const selection of selections) {\n      commands.push(new LineCommentCommand(languageConfigurationService, selection.selection, modelOptions.tabSize, this._type, commentsOptions.insertSpace, commentsOptions.ignoreEmptyLines, selection.ignoreFirstLine));\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nclass ToggleCommentLineAction extends CommentLineAction {\n  constructor() {\n    super(0 /* Type.Toggle */, {\n      id: 'editor.action.commentLine',\n      label: nls.localize('comment.line', \"Toggle Line Comment\"),\n      alias: 'Toggle Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 90 /* KeyCode.Slash */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarEditMenu,\n        group: '5_insert',\n        title: nls.localize({\n          key: 'miToggleLineComment',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Toggle Line Comment\"),\n        order: 1\n      }\n    });\n  }\n}\nclass AddLineCommentAction extends CommentLineAction {\n  constructor() {\n    super(1 /* Type.ForceAdd */, {\n      id: 'editor.action.addCommentLine',\n      label: nls.localize('comment.line.add', \"Add Line Comment\"),\n      alias: 'Add Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 33 /* KeyCode.KeyC */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n}\nclass RemoveLineCommentAction extends CommentLineAction {\n  constructor() {\n    super(2 /* Type.ForceRemove */, {\n      id: 'editor.action.removeCommentLine',\n      label: nls.localize('comment.line.remove', \"Remove Line Comment\"),\n      alias: 'Remove Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 51 /* KeyCode.KeyU */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n}\nclass BlockCommentAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.blockComment',\n      label: nls.localize('comment.block', \"Toggle Block Comment\"),\n      alias: 'Toggle Block Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 31 /* KeyCode.KeyA */,\n        linux: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 31 /* KeyCode.KeyA */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarEditMenu,\n        group: '5_insert',\n        title: nls.localize({\n          key: 'miToggleBlockComment',\n          comment: ['&& denotes a mnemonic']\n        }, \"Toggle &&Block Comment\"),\n        order: 2\n      }\n    });\n  }\n  run(accessor, editor) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    if (!editor.hasModel()) {\n      return;\n    }\n    const commentsOptions = editor.getOption(23 /* EditorOption.comments */);\n    const commands = [];\n    const selections = editor.getSelections();\n    for (const selection of selections) {\n      commands.push(new BlockCommentCommand(selection, commentsOptions.insertSpace, languageConfigurationService));\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nregisterEditorAction(ToggleCommentLineAction);\nregisterEditorAction(AddLineCommentAction);\nregisterEditorAction(RemoveLineCommentAction);\nregisterEditorAction(BlockCommentAction);","map":{"version":3,"names":["KeyChord","EditorAction","registerEditorAction","Range","EditorContextKeys","ILanguageConfigurationService","BlockCommentCommand","LineCommentCommand","nls","MenuId","CommentLineAction","constructor","type","opts","_type","run","accessor","editor","languageConfigurationService","get","hasModel","model","getModel","commands","modelOptions","getOptions","commentsOptions","getOption","selections","getSelections","map","selection","index","ignoreFirstLine","sort","a","b","compareRangesUsingStarts","prev","i","length","curr","endLineNumber","startLineNumber","push","tabSize","insertSpace","ignoreEmptyLines","pushUndoStop","executeCommands","id","ToggleCommentLineAction","label","localize","alias","precondition","writable","kbOpts","kbExpr","editorTextFocus","primary","weight","menuOpts","menuId","MenubarEditMenu","group","title","key","comment","order","AddLineCommentAction","RemoveLineCommentAction","BlockCommentAction","linux"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/comment/browser/comment.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { BlockCommentCommand } from './blockCommentCommand.js';\nimport { LineCommentCommand } from './lineCommentCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nclass CommentLineAction extends EditorAction {\n    constructor(type, opts) {\n        super(opts);\n        this._type = type;\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        if (!editor.hasModel()) {\n            return;\n        }\n        const model = editor.getModel();\n        const commands = [];\n        const modelOptions = model.getOptions();\n        const commentsOptions = editor.getOption(23 /* EditorOption.comments */);\n        const selections = editor.getSelections().map((selection, index) => ({ selection, index, ignoreFirstLine: false }));\n        selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n        // Remove selections that would result in copying the same line\n        let prev = selections[0];\n        for (let i = 1; i < selections.length; i++) {\n            const curr = selections[i];\n            if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n                // these two selections would copy the same line\n                if (prev.index < curr.index) {\n                    // prev wins\n                    curr.ignoreFirstLine = true;\n                }\n                else {\n                    // curr wins\n                    prev.ignoreFirstLine = true;\n                    prev = curr;\n                }\n            }\n        }\n        for (const selection of selections) {\n            commands.push(new LineCommentCommand(languageConfigurationService, selection.selection, modelOptions.tabSize, this._type, commentsOptions.insertSpace, commentsOptions.ignoreEmptyLines, selection.ignoreFirstLine));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass ToggleCommentLineAction extends CommentLineAction {\n    constructor() {\n        super(0 /* Type.Toggle */, {\n            id: 'editor.action.commentLine',\n            label: nls.localize('comment.line', \"Toggle Line Comment\"),\n            alias: 'Toggle Line Comment',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 90 /* KeyCode.Slash */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarEditMenu,\n                group: '5_insert',\n                title: nls.localize({ key: 'miToggleLineComment', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Line Comment\"),\n                order: 1\n            }\n        });\n    }\n}\nclass AddLineCommentAction extends CommentLineAction {\n    constructor() {\n        super(1 /* Type.ForceAdd */, {\n            id: 'editor.action.addCommentLine',\n            label: nls.localize('comment.line.add', \"Add Line Comment\"),\n            alias: 'Add Line Comment',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 33 /* KeyCode.KeyC */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n}\nclass RemoveLineCommentAction extends CommentLineAction {\n    constructor() {\n        super(2 /* Type.ForceRemove */, {\n            id: 'editor.action.removeCommentLine',\n            label: nls.localize('comment.line.remove', \"Remove Line Comment\"),\n            alias: 'Remove Line Comment',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 51 /* KeyCode.KeyU */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n}\nclass BlockCommentAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.blockComment',\n            label: nls.localize('comment.block', \"Toggle Block Comment\"),\n            alias: 'Toggle Block Comment',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 31 /* KeyCode.KeyA */,\n                linux: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 31 /* KeyCode.KeyA */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarEditMenu,\n                group: '5_insert',\n                title: nls.localize({ key: 'miToggleBlockComment', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Block Comment\"),\n                order: 2\n            }\n        });\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        if (!editor.hasModel()) {\n            return;\n        }\n        const commentsOptions = editor.getOption(23 /* EditorOption.comments */);\n        const commands = [];\n        const selections = editor.getSelections();\n        for (const selection of selections) {\n            commands.push(new BlockCommentCommand(selection, commentsOptions.insertSpace, languageConfigurationService));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nregisterEditorAction(ToggleCommentLineAction);\nregisterEditorAction(AddLineCommentAction);\nregisterEditorAction(RemoveLineCommentAction);\nregisterEditorAction(BlockCommentAction);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}