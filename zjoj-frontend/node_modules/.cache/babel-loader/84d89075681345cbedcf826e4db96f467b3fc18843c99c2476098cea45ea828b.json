{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @typedef CoreOptions\n * @property {Array<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g, basic);\n  if (options.subset || options.escapeOnly) {\n    return value;\n  }\n  return value\n  // Surrogate pairs.\n  .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n  // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n  // non-ASCII ones).\n  .replace(\n  // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n  /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g, basic);\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format((pair.charCodeAt(0) - 0xd800) * 0x400 + pair.charCodeAt(1) - 0xdc00 + 0x10000, all.charCodeAt(index + 2), options);\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(character.charCodeAt(0), all.charCodeAt(index + 1), options);\n  }\n}\n\n/**\n * @param {Array<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = [];\n  let index = -1;\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'));\n  }\n  return new RegExp('(?:' + groups.join('|') + ')', 'g');\n}","map":{"version":3,"names":["core","value","options","replace","subset","charactersToExpression","basic","escapeOnly","surrogate","pair","index","all","format","charCodeAt","character","groups","length","push","RegExp","join"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/stringify-entities/lib/core.js"],"sourcesContent":["/**\n * @typedef CoreOptions\n * @property {Array<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {Array<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,IAAIA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACnCD,KAAK,GAAGA,KAAK,CAACE,OAAO,CACnBD,OAAO,CAACE,MAAM,GAAGC,sBAAsB,CAACH,OAAO,CAACE,MAAM,CAAC,GAAG,WAAW,EACrEE,KACF,CAAC;EAED,IAAIJ,OAAO,CAACE,MAAM,IAAIF,OAAO,CAACK,UAAU,EAAE;IACxC,OAAON,KAAK;EACd;EAEA,OACEA;EACE;EAAA,CACCE,OAAO,CAAC,iCAAiC,EAAEK,SAAS;EACrD;EACA;EAAA,CACCL,OAAO;EACN;EACA,4DAA4D,EAC5DG,KACF,CAAC;;EAGL;AACF;AACA;AACA;AACA;EACE,SAASE,SAASA,CAACC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAE;IACnC,OAAOT,OAAO,CAACU,MAAM,CACnB,CAACH,IAAI,CAACI,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GACnCJ,IAAI,CAACI,UAAU,CAAC,CAAC,CAAC,GAClB,MAAM,GACN,OAAO,EACTF,GAAG,CAACE,UAAU,CAACH,KAAK,GAAG,CAAC,CAAC,EACzBR,OACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASI,KAAKA,CAACQ,SAAS,EAAEJ,KAAK,EAAEC,GAAG,EAAE;IACpC,OAAOT,OAAO,CAACU,MAAM,CACnBE,SAAS,CAACD,UAAU,CAAC,CAAC,CAAC,EACvBF,GAAG,CAACE,UAAU,CAACH,KAAK,GAAG,CAAC,CAAC,EACzBR,OACF,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA,SAASG,sBAAsBA,CAACD,MAAM,EAAE;EACtC;EACA,MAAMW,MAAM,GAAG,EAAE;EACjB,IAAIL,KAAK,GAAG,CAAC,CAAC;EAEd,OAAO,EAAEA,KAAK,GAAGN,MAAM,CAACY,MAAM,EAAE;IAC9BD,MAAM,CAACE,IAAI,CAACb,MAAM,CAACM,KAAK,CAAC,CAACP,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;EACnE;EAEA,OAAO,IAAIe,MAAM,CAAC,KAAK,GAAGH,MAAM,CAACI,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC;AACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}