{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { CoreEditingCommands } from '../../../browser/coreCommands.js';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection, ReplaceCommandThatSelectsText } from '../../../common/commands/replaceCommand.js';\nimport { TrimTrailingWhitespaceCommand } from '../../../common/commands/trimTrailingWhitespaceCommand.js';\nimport { TypeOperations } from '../../../common/cursor/cursorTypeOperations.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CopyLinesCommand } from './copyLinesCommand.js';\nimport { MoveLinesCommand } from './moveLinesCommand.js';\nimport { SortLinesCommand } from './sortLinesCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\n// copy lines\nclass AbstractCopyLinesAction extends EditorAction {\n  constructor(down, opts) {\n    super(opts);\n    this.down = down;\n  }\n  run(_accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const selections = editor.getSelections().map((selection, index) => ({\n      selection,\n      index,\n      ignore: false\n    }));\n    selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n    // Remove selections that would result in copying the same line\n    let prev = selections[0];\n    for (let i = 1; i < selections.length; i++) {\n      const curr = selections[i];\n      if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n        // these two selections would copy the same line\n        if (prev.index < curr.index) {\n          // prev wins\n          curr.ignore = true;\n        } else {\n          // curr wins\n          prev.ignore = true;\n          prev = curr;\n        }\n      }\n    }\n    const commands = [];\n    for (const selection of selections) {\n      commands.push(new CopyLinesCommand(selection.selection, this.down, selection.ignore));\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.copyLinesUpAction',\n      label: nls.localize('lines.copyUp', \"Copy Line Up\"),\n      alias: 'Copy Line Up',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n        linux: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miCopyLinesUp',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Copy Line Up\"),\n        order: 1\n      }\n    });\n  }\n}\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.copyLinesDownAction',\n      label: nls.localize('lines.copyDown', \"Copy Line Down\"),\n      alias: 'Copy Line Down',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n        linux: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miCopyLinesDown',\n          comment: ['&& denotes a mnemonic']\n        }, \"Co&&py Line Down\"),\n        order: 2\n      }\n    });\n  }\n}\nexport class DuplicateSelectionAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.duplicateSelection',\n      label: nls.localize('duplicateSelection', \"Duplicate Selection\"),\n      alias: 'Duplicate Selection',\n      precondition: EditorContextKeys.writable,\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miDuplicateSelection',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Duplicate Selection\"),\n        order: 5\n      }\n    });\n  }\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const commands = [];\n    const selections = editor.getSelections();\n    const model = editor.getModel();\n    for (const selection of selections) {\n      if (selection.isEmpty()) {\n        commands.push(new CopyLinesCommand(selection, true));\n      } else {\n        const insertSelection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);\n        commands.push(new ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));\n      }\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\n// move lines\nclass AbstractMoveLinesAction extends EditorAction {\n  constructor(down, opts) {\n    super(opts);\n    this.down = down;\n  }\n  run(accessor, editor) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    const commands = [];\n    const selections = editor.getSelections() || [];\n    const autoIndent = editor.getOption(12 /* EditorOption.autoIndent */);\n    for (const selection of selections) {\n      commands.push(new MoveLinesCommand(selection, this.down, autoIndent, languageConfigurationService));\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.moveLinesUpAction',\n      label: nls.localize('lines.moveUp', \"Move Line Up\"),\n      alias: 'Move Line Up',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n        linux: {\n          primary: 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miMoveLinesUp',\n          comment: ['&& denotes a mnemonic']\n        }, \"Mo&&ve Line Up\"),\n        order: 3\n      }\n    });\n  }\n}\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.moveLinesDownAction',\n      label: nls.localize('lines.moveDown', \"Move Line Down\"),\n      alias: 'Move Line Down',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n        linux: {\n          primary: 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miMoveLinesDown',\n          comment: ['&& denotes a mnemonic']\n        }, \"Move &&Line Down\"),\n        order: 4\n      }\n    });\n  }\n}\nexport class AbstractSortLinesAction extends EditorAction {\n  constructor(descending, opts) {\n    super(opts);\n    this.descending = descending;\n  }\n  run(_accessor, editor) {\n    const selections = editor.getSelections() || [];\n    for (const selection of selections) {\n      if (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n        return;\n      }\n    }\n    const commands = [];\n    for (let i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new SortLinesCommand(selections[i], this.descending);\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.sortLinesAscending',\n      label: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n      alias: 'Sort Lines Ascending',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.sortLinesDescending',\n      label: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n      alias: 'Sort Lines Descending',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nexport class DeleteDuplicateLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.removeDuplicateLines',\n      label: nls.localize('lines.deleteDuplicates', \"Delete Duplicate Lines\"),\n      alias: 'Delete Duplicate Lines',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  run(_accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const model = editor.getModel();\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n      return;\n    }\n    const edits = [];\n    const endCursorState = [];\n    let linesDeleted = 0;\n    for (const selection of editor.getSelections()) {\n      const uniqueLines = new Set();\n      const lines = [];\n      for (let i = selection.startLineNumber; i <= selection.endLineNumber; i++) {\n        const line = model.getLineContent(i);\n        if (uniqueLines.has(line)) {\n          continue;\n        }\n        lines.push(line);\n        uniqueLines.add(line);\n      }\n      const selectionToReplace = new Selection(selection.startLineNumber, 1, selection.endLineNumber, model.getLineMaxColumn(selection.endLineNumber));\n      const adjustedSelectionStart = selection.startLineNumber - linesDeleted;\n      const finalSelection = new Selection(adjustedSelectionStart, 1, adjustedSelectionStart + lines.length - 1, lines[lines.length - 1].length);\n      edits.push(EditOperation.replace(selectionToReplace, lines.join('\\n')));\n      endCursorState.push(finalSelection);\n      linesDeleted += selection.endLineNumber - selection.startLineNumber + 1 - lines.length;\n    }\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, edits, endCursorState);\n    editor.pushUndoStop();\n  }\n}\nexport class TrimTrailingWhitespaceAction extends EditorAction {\n  constructor() {\n    super({\n      id: TrimTrailingWhitespaceAction.ID,\n      label: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n      alias: 'Trim Trailing Whitespace',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  run(_accessor, editor, args) {\n    let cursors = [];\n    if (args.reason === 'auto-save') {\n      // See https://github.com/editorconfig/editorconfig-vscode/issues/47\n      // It is very convenient for the editor config extension to invoke this action.\n      // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n      cursors = (editor.getSelections() || []).map(s => new Position(s.positionLineNumber, s.positionColumn));\n    }\n    const selection = editor.getSelection();\n    if (selection === null) {\n      return;\n    }\n    const command = new TrimTrailingWhitespaceCommand(selection, cursors);\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, [command]);\n    editor.pushUndoStop();\n  }\n}\nTrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';\nexport class DeleteLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.deleteLines',\n      label: nls.localize('lines.delete', \"Delete Line\"),\n      alias: 'Delete Line',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 41 /* KeyCode.KeyK */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  run(_accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const ops = this._getLinesToRemove(editor);\n    const model = editor.getModel();\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n      // Model is empty\n      return;\n    }\n    let linesDeleted = 0;\n    const edits = [];\n    const cursorState = [];\n    for (let i = 0, len = ops.length; i < len; i++) {\n      const op = ops[i];\n      let startLineNumber = op.startLineNumber;\n      let endLineNumber = op.endLineNumber;\n      let startColumn = 1;\n      let endColumn = model.getLineMaxColumn(endLineNumber);\n      if (endLineNumber < model.getLineCount()) {\n        endLineNumber += 1;\n        endColumn = 1;\n      } else if (startLineNumber > 1) {\n        startLineNumber -= 1;\n        startColumn = model.getLineMaxColumn(startLineNumber);\n      }\n      edits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n      cursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n      linesDeleted += op.endLineNumber - op.startLineNumber + 1;\n    }\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, edits, cursorState);\n    editor.pushUndoStop();\n  }\n  _getLinesToRemove(editor) {\n    // Construct delete operations\n    const operations = editor.getSelections().map(s => {\n      let endLineNumber = s.endLineNumber;\n      if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n        endLineNumber -= 1;\n      }\n      return {\n        startLineNumber: s.startLineNumber,\n        selectionStartColumn: s.selectionStartColumn,\n        endLineNumber: endLineNumber,\n        positionColumn: s.positionColumn\n      };\n    });\n    // Sort delete operations\n    operations.sort((a, b) => {\n      if (a.startLineNumber === b.startLineNumber) {\n        return a.endLineNumber - b.endLineNumber;\n      }\n      return a.startLineNumber - b.startLineNumber;\n    });\n    // Merge delete operations which are adjacent or overlapping\n    const mergedOperations = [];\n    let previousOperation = operations[0];\n    for (let i = 1; i < operations.length; i++) {\n      if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n        // Merge current operations into the previous one\n        previousOperation.endLineNumber = operations[i].endLineNumber;\n      } else {\n        // Push previous operation\n        mergedOperations.push(previousOperation);\n        previousOperation = operations[i];\n      }\n    }\n    // Push the last operation\n    mergedOperations.push(previousOperation);\n    return mergedOperations;\n  }\n}\nexport class IndentLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.indentLines',\n      label: nls.localize('lines.indent', \"Indent Line\"),\n      alias: 'Indent Line',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 94 /* KeyCode.BracketRight */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  run(_accessor, editor) {\n    const viewModel = editor._getViewModel();\n    if (!viewModel) {\n      return;\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    editor.pushUndoStop();\n  }\n}\nclass OutdentLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.outdentLines',\n      label: nls.localize('lines.outdent', \"Outdent Line\"),\n      alias: 'Outdent Line',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 92 /* KeyCode.BracketLeft */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  run(_accessor, editor) {\n    CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n  }\n}\nexport class InsertLineBeforeAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertLineBefore',\n      label: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n      alias: 'Insert Line Above',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 3 /* KeyCode.Enter */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  run(_accessor, editor) {\n    const viewModel = editor._getViewModel();\n    if (!viewModel) {\n      return;\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, TypeOperations.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n  }\n}\nexport class InsertLineAfterAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertLineAfter',\n      label: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n      alias: 'Insert Line Below',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 3 /* KeyCode.Enter */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  run(_accessor, editor) {\n    const viewModel = editor._getViewModel();\n    if (!viewModel) {\n      return;\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, TypeOperations.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n  }\n}\nexport class AbstractDeleteAllToBoundaryAction extends EditorAction {\n  run(_accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const primaryCursor = editor.getSelection();\n    const rangesToDelete = this._getRangesToDelete(editor);\n    // merge overlapping selections\n    const effectiveRanges = [];\n    for (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n      const range = rangesToDelete[i];\n      const nextRange = rangesToDelete[i + 1];\n      if (Range.intersectRanges(range, nextRange) === null) {\n        effectiveRanges.push(range);\n      } else {\n        rangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n      }\n    }\n    effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n    const endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n    const edits = effectiveRanges.map(range => {\n      return EditOperation.replace(range, '');\n    });\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, edits, endCursorState);\n    editor.pushUndoStop();\n  }\n}\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\n  constructor() {\n    super({\n      id: 'deleteAllLeft',\n      label: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n      alias: 'Delete All Left',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 1 /* KeyCode.Backspace */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  _getEndCursorState(primaryCursor, rangesToDelete) {\n    let endPrimaryCursor = null;\n    const endCursorState = [];\n    let deletedLines = 0;\n    rangesToDelete.forEach(range => {\n      let endCursor;\n      if (range.endColumn === 1 && deletedLines > 0) {\n        const newStartLine = range.startLineNumber - deletedLines;\n        endCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n      } else {\n        endCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n      }\n      deletedLines += range.endLineNumber - range.startLineNumber;\n      if (range.intersectRanges(primaryCursor)) {\n        endPrimaryCursor = endCursor;\n      } else {\n        endCursorState.push(endCursor);\n      }\n    });\n    if (endPrimaryCursor) {\n      endCursorState.unshift(endPrimaryCursor);\n    }\n    return endCursorState;\n  }\n  _getRangesToDelete(editor) {\n    const selections = editor.getSelections();\n    if (selections === null) {\n      return [];\n    }\n    let rangesToDelete = selections;\n    const model = editor.getModel();\n    if (model === null) {\n      return [];\n    }\n    rangesToDelete.sort(Range.compareRangesUsingStarts);\n    rangesToDelete = rangesToDelete.map(selection => {\n      if (selection.isEmpty()) {\n        if (selection.startColumn === 1) {\n          const deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n          const deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineLength(deleteFromLine) + 1;\n          return new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n        } else {\n          return new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n        }\n      } else {\n        return new Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);\n      }\n    });\n    return rangesToDelete;\n  }\n}\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\n  constructor() {\n    super({\n      id: 'deleteAllRight',\n      label: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n      alias: 'Delete All Right',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 256 /* KeyMod.WinCtrl */ | 41 /* KeyCode.KeyK */,\n          secondary: [2048 /* KeyMod.CtrlCmd */ | 20 /* KeyCode.Delete */]\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  _getEndCursorState(primaryCursor, rangesToDelete) {\n    let endPrimaryCursor = null;\n    const endCursorState = [];\n    for (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n      const range = rangesToDelete[i];\n      const endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n      if (range.intersectRanges(primaryCursor)) {\n        endPrimaryCursor = endCursor;\n      } else {\n        endCursorState.push(endCursor);\n      }\n    }\n    if (endPrimaryCursor) {\n      endCursorState.unshift(endPrimaryCursor);\n    }\n    return endCursorState;\n  }\n  _getRangesToDelete(editor) {\n    const model = editor.getModel();\n    if (model === null) {\n      return [];\n    }\n    const selections = editor.getSelections();\n    if (selections === null) {\n      return [];\n    }\n    const rangesToDelete = selections.map(sel => {\n      if (sel.isEmpty()) {\n        const maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n        if (sel.startColumn === maxColumn) {\n          return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n        } else {\n          return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n        }\n      }\n      return sel;\n    });\n    rangesToDelete.sort(Range.compareRangesUsingStarts);\n    return rangesToDelete;\n  }\n}\nexport class JoinLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.joinLines',\n      label: nls.localize('lines.joinLines', \"Join Lines\"),\n      alias: 'Join Lines',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 0,\n        mac: {\n          primary: 256 /* KeyMod.WinCtrl */ | 40 /* KeyCode.KeyJ */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  run(_accessor, editor) {\n    const selections = editor.getSelections();\n    if (selections === null) {\n      return;\n    }\n    let primaryCursor = editor.getSelection();\n    if (primaryCursor === null) {\n      return;\n    }\n    selections.sort(Range.compareRangesUsingStarts);\n    const reducedSelections = [];\n    const lastSelection = selections.reduce((previousValue, currentValue) => {\n      if (previousValue.isEmpty()) {\n        if (previousValue.endLineNumber === currentValue.startLineNumber) {\n          if (primaryCursor.equalsSelection(previousValue)) {\n            primaryCursor = currentValue;\n          }\n          return currentValue;\n        }\n        if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n          reducedSelections.push(previousValue);\n          return currentValue;\n        } else {\n          return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n        }\n      } else {\n        if (currentValue.startLineNumber > previousValue.endLineNumber) {\n          reducedSelections.push(previousValue);\n          return currentValue;\n        } else {\n          return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n        }\n      }\n    });\n    reducedSelections.push(lastSelection);\n    const model = editor.getModel();\n    if (model === null) {\n      return;\n    }\n    const edits = [];\n    const endCursorState = [];\n    let endPrimaryCursor = primaryCursor;\n    let lineOffset = 0;\n    for (let i = 0, len = reducedSelections.length; i < len; i++) {\n      const selection = reducedSelections[i];\n      const startLineNumber = selection.startLineNumber;\n      const startColumn = 1;\n      let columnDeltaOffset = 0;\n      let endLineNumber, endColumn;\n      const selectionEndPositionOffset = model.getLineLength(selection.endLineNumber) - selection.endColumn;\n      if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n        const position = selection.getStartPosition();\n        if (position.lineNumber < model.getLineCount()) {\n          endLineNumber = startLineNumber + 1;\n          endColumn = model.getLineMaxColumn(endLineNumber);\n        } else {\n          endLineNumber = position.lineNumber;\n          endColumn = model.getLineMaxColumn(position.lineNumber);\n        }\n      } else {\n        endLineNumber = selection.endLineNumber;\n        endColumn = model.getLineMaxColumn(endLineNumber);\n      }\n      let trimmedLinesContent = model.getLineContent(startLineNumber);\n      for (let i = startLineNumber + 1; i <= endLineNumber; i++) {\n        const lineText = model.getLineContent(i);\n        const firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);\n        if (firstNonWhitespaceIdx >= 1) {\n          let insertSpace = true;\n          if (trimmedLinesContent === '') {\n            insertSpace = false;\n          }\n          if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' || trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n            insertSpace = false;\n            trimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n          }\n          const lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n          trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n          if (insertSpace) {\n            columnDeltaOffset = lineTextWithoutIndent.length + 1;\n          } else {\n            columnDeltaOffset = lineTextWithoutIndent.length;\n          }\n        } else {\n          columnDeltaOffset = 0;\n        }\n      }\n      const deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n      if (!deleteSelection.isEmpty()) {\n        let resultSelection;\n        if (selection.isEmpty()) {\n          edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n          resultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n        } else {\n          if (selection.startLineNumber === selection.endLineNumber) {\n            edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n            resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);\n          } else {\n            edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n            resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n          }\n        }\n        if (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n          endPrimaryCursor = resultSelection;\n        } else {\n          endCursorState.push(resultSelection);\n        }\n      }\n      lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n    }\n    endCursorState.unshift(endPrimaryCursor);\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, edits, endCursorState);\n    editor.pushUndoStop();\n  }\n}\nexport class TransposeAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.transpose',\n      label: nls.localize('editor.transpose', \"Transpose Characters around the Cursor\"),\n      alias: 'Transpose Characters around the Cursor',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  run(_accessor, editor) {\n    const selections = editor.getSelections();\n    if (selections === null) {\n      return;\n    }\n    const model = editor.getModel();\n    if (model === null) {\n      return;\n    }\n    const commands = [];\n    for (let i = 0, len = selections.length; i < len; i++) {\n      const selection = selections[i];\n      if (!selection.isEmpty()) {\n        continue;\n      }\n      const cursor = selection.getStartPosition();\n      const maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n      if (cursor.column >= maxColumn) {\n        if (cursor.lineNumber === model.getLineCount()) {\n          continue;\n        }\n        // The cursor is at the end of current line and current line is not empty\n        // then we transpose the character before the cursor and the line break if there is any following line.\n        const deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n        const chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n        commands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n      } else {\n        const deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n        const chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n        commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars, new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n      }\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nexport class AbstractCaseAction extends EditorAction {\n  run(_accessor, editor) {\n    const selections = editor.getSelections();\n    if (selections === null) {\n      return;\n    }\n    const model = editor.getModel();\n    if (model === null) {\n      return;\n    }\n    const wordSeparators = editor.getOption(129 /* EditorOption.wordSeparators */);\n    const textEdits = [];\n    for (const selection of selections) {\n      if (selection.isEmpty()) {\n        const cursor = selection.getStartPosition();\n        const word = editor.getConfiguredWordAtPosition(cursor);\n        if (!word) {\n          continue;\n        }\n        const wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n        const text = model.getValueInRange(wordRange);\n        textEdits.push(EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));\n      } else {\n        const text = model.getValueInRange(selection);\n        textEdits.push(EditOperation.replace(selection, this._modifyText(text, wordSeparators)));\n      }\n    }\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, textEdits);\n    editor.pushUndoStop();\n  }\n}\nexport class UpperCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToUppercase',\n      label: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n      alias: 'Transform to Uppercase',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  _modifyText(text, wordSeparators) {\n    return text.toLocaleUpperCase();\n  }\n}\nexport class LowerCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToLowercase',\n      label: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n      alias: 'Transform to Lowercase',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  _modifyText(text, wordSeparators) {\n    return text.toLocaleLowerCase();\n  }\n}\nclass BackwardsCompatibleRegExp {\n  constructor(_pattern, _flags) {\n    this._pattern = _pattern;\n    this._flags = _flags;\n    this._actual = null;\n    this._evaluated = false;\n  }\n  get() {\n    if (!this._evaluated) {\n      this._evaluated = true;\n      try {\n        this._actual = new RegExp(this._pattern, this._flags);\n      } catch (err) {\n        // this browser does not support this regular expression\n      }\n    }\n    return this._actual;\n  }\n  isSupported() {\n    return this.get() !== null;\n  }\n}\nexport class TitleCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToTitlecase',\n      label: nls.localize('editor.transformToTitlecase', \"Transform to Title Case\"),\n      alias: 'Transform to Title Case',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  _modifyText(text, wordSeparators) {\n    const titleBoundary = TitleCaseAction.titleBoundary.get();\n    if (!titleBoundary) {\n      // cannot support this\n      return text;\n    }\n    return text.toLocaleLowerCase().replace(titleBoundary, b => b.toLocaleUpperCase());\n  }\n}\nTitleCaseAction.titleBoundary = new BackwardsCompatibleRegExp('(^|[^\\\\p{L}\\\\p{N}\\']|((^|\\\\P{L})\\'))\\\\p{L}', 'gmu');\nexport class SnakeCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToSnakecase',\n      label: nls.localize('editor.transformToSnakecase', \"Transform to Snake Case\"),\n      alias: 'Transform to Snake Case',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  _modifyText(text, wordSeparators) {\n    const caseBoundary = SnakeCaseAction.caseBoundary.get();\n    const singleLetters = SnakeCaseAction.singleLetters.get();\n    if (!caseBoundary || !singleLetters) {\n      // cannot support this\n      return text;\n    }\n    return text.replace(caseBoundary, '$1_$2').replace(singleLetters, '$1_$2$3').toLocaleLowerCase();\n  }\n}\nSnakeCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\nSnakeCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu})(\\\\p{Ll})', 'gmu');\nexport class CamelCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToCamelcase',\n      label: nls.localize('editor.transformToCamelcase', \"Transform to Camel Case\"),\n      alias: 'Transform to Camel Case',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  _modifyText(text, wordSeparators) {\n    const wordBoundary = CamelCaseAction.wordBoundary.get();\n    if (!wordBoundary) {\n      // cannot support this\n      return text;\n    }\n    const words = text.split(wordBoundary);\n    const firstWord = words.shift();\n    return firstWord + words.map(word => word.substring(0, 1).toLocaleUpperCase() + word.substring(1)).join('');\n  }\n}\nCamelCaseAction.wordBoundary = new BackwardsCompatibleRegExp('[_\\\\s-]', 'gm');\nexport class KebabCaseAction extends AbstractCaseAction {\n  static isSupported() {\n    const areAllRegexpsSupported = [this.caseBoundary, this.singleLetters, this.underscoreBoundary].every(regexp => regexp.isSupported());\n    return areAllRegexpsSupported;\n  }\n  constructor() {\n    super({\n      id: 'editor.action.transformToKebabcase',\n      label: nls.localize('editor.transformToKebabcase', 'Transform to Kebab Case'),\n      alias: 'Transform to Kebab Case',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  _modifyText(text, _) {\n    const caseBoundary = KebabCaseAction.caseBoundary.get();\n    const singleLetters = KebabCaseAction.singleLetters.get();\n    const underscoreBoundary = KebabCaseAction.underscoreBoundary.get();\n    if (!caseBoundary || !singleLetters || !underscoreBoundary) {\n      // one or more regexps aren't supported\n      return text;\n    }\n    return text.replace(underscoreBoundary, '$1-$3').replace(caseBoundary, '$1-$2').replace(singleLetters, '$1-$2').toLocaleLowerCase();\n  }\n}\nKebabCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\nKebabCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu}\\\\p{Ll})', 'gmu');\nKebabCaseAction.underscoreBoundary = new BackwardsCompatibleRegExp('(\\\\S)(_)(\\\\S)', 'gm');\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(DuplicateSelectionAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(DeleteDuplicateLinesAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\nif (SnakeCaseAction.caseBoundary.isSupported() && SnakeCaseAction.singleLetters.isSupported()) {\n  registerEditorAction(SnakeCaseAction);\n}\nif (CamelCaseAction.wordBoundary.isSupported()) {\n  registerEditorAction(CamelCaseAction);\n}\nif (TitleCaseAction.titleBoundary.isSupported()) {\n  registerEditorAction(TitleCaseAction);\n}\nif (KebabCaseAction.isSupported()) {\n  registerEditorAction(KebabCaseAction);\n}","map":{"version":3,"names":["KeyChord","CoreEditingCommands","EditorAction","registerEditorAction","ReplaceCommand","ReplaceCommandThatPreservesSelection","ReplaceCommandThatSelectsText","TrimTrailingWhitespaceCommand","TypeOperations","EditOperation","Position","Range","Selection","EditorContextKeys","CopyLinesCommand","MoveLinesCommand","SortLinesCommand","nls","MenuId","ILanguageConfigurationService","AbstractCopyLinesAction","constructor","down","opts","run","_accessor","editor","hasModel","selections","getSelections","map","selection","index","ignore","sort","a","b","compareRangesUsingStarts","prev","i","length","curr","endLineNumber","startLineNumber","commands","push","pushUndoStop","executeCommands","id","CopyLinesUpAction","label","localize","alias","precondition","writable","kbOpts","kbExpr","editorTextFocus","primary","linux","weight","menuOpts","menuId","MenubarSelectionMenu","group","title","key","comment","order","CopyLinesDownAction","DuplicateSelectionAction","accessor","args","model","getModel","isEmpty","insertSelection","endColumn","getValueInRange","AbstractMoveLinesAction","languageConfigurationService","get","autoIndent","getOption","MoveLinesUpAction","MoveLinesDownAction","AbstractSortLinesAction","descending","canRun","len","SortLinesAscendingAction","SortLinesDescendingAction","DeleteDuplicateLinesAction","getLineCount","getLineMaxColumn","edits","endCursorState","linesDeleted","uniqueLines","Set","lines","line","getLineContent","has","add","selectionToReplace","adjustedSelectionStart","finalSelection","replace","join","executeEdits","TrimTrailingWhitespaceAction","ID","cursors","reason","s","positionLineNumber","positionColumn","getSelection","command","DeleteLinesAction","textInputFocus","ops","_getLinesToRemove","cursorState","op","startColumn","operations","selectionStartColumn","mergedOperations","previousOperation","IndentLinesAction","viewModel","_getViewModel","indent","cursorConfig","OutdentLinesAction","Outdent","runEditorCommand","InsertLineBeforeAction","lineInsertBefore","InsertLineAfterAction","lineInsertAfter","AbstractDeleteAllToBoundaryAction","primaryCursor","rangesToDelete","_getRangesToDelete","effectiveRanges","count","range","nextRange","intersectRanges","plusRange","_getEndCursorState","DeleteAllLeftAction","mac","endPrimaryCursor","deletedLines","forEach","endCursor","newStartLine","unshift","deleteFromLine","Math","max","deleteFromColumn","getLineLength","DeleteAllRightAction","secondary","offset","sel","maxColumn","JoinLinesAction","reducedSelections","lastSelection","reduce","previousValue","currentValue","equalsSelection","lineOffset","columnDeltaOffset","selectionEndPositionOffset","position","getStartPosition","lineNumber","trimmedLinesContent","lineText","firstNonWhitespaceIdx","getLineFirstNonWhitespaceColumn","insertSpace","charAt","lineTextWithoutIndent","substr","deleteSelection","resultSelection","TransposeAction","cursor","column","chars","split","reverse","AbstractCaseAction","wordSeparators","textEdits","word","getConfiguredWordAtPosition","wordRange","text","_modifyText","UpperCaseAction","toLocaleUpperCase","LowerCaseAction","toLocaleLowerCase","BackwardsCompatibleRegExp","_pattern","_flags","_actual","_evaluated","RegExp","err","isSupported","TitleCaseAction","titleBoundary","SnakeCaseAction","caseBoundary","singleLetters","CamelCaseAction","wordBoundary","words","firstWord","shift","substring","KebabCaseAction","areAllRegexpsSupported","underscoreBoundary","every","regexp","_"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/linesOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { CoreEditingCommands } from '../../../browser/coreCommands.js';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection, ReplaceCommandThatSelectsText } from '../../../common/commands/replaceCommand.js';\nimport { TrimTrailingWhitespaceCommand } from '../../../common/commands/trimTrailingWhitespaceCommand.js';\nimport { TypeOperations } from '../../../common/cursor/cursorTypeOperations.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CopyLinesCommand } from './copyLinesCommand.js';\nimport { MoveLinesCommand } from './moveLinesCommand.js';\nimport { SortLinesCommand } from './sortLinesCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\n// copy lines\nclass AbstractCopyLinesAction extends EditorAction {\n    constructor(down, opts) {\n        super(opts);\n        this.down = down;\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const selections = editor.getSelections().map((selection, index) => ({ selection, index, ignore: false }));\n        selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n        // Remove selections that would result in copying the same line\n        let prev = selections[0];\n        for (let i = 1; i < selections.length; i++) {\n            const curr = selections[i];\n            if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n                // these two selections would copy the same line\n                if (prev.index < curr.index) {\n                    // prev wins\n                    curr.ignore = true;\n                }\n                else {\n                    // curr wins\n                    prev.ignore = true;\n                    prev = curr;\n                }\n            }\n        }\n        const commands = [];\n        for (const selection of selections) {\n            commands.push(new CopyLinesCommand(selection.selection, this.down, selection.ignore));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.copyLinesUpAction',\n            label: nls.localize('lines.copyUp', \"Copy Line Up\"),\n            alias: 'Copy Line Up',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n                linux: { primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, \"&&Copy Line Up\"),\n                order: 1\n            }\n        });\n    }\n}\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.copyLinesDownAction',\n            label: nls.localize('lines.copyDown', \"Copy Line Down\"),\n            alias: 'Copy Line Down',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n                linux: { primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, \"Co&&py Line Down\"),\n                order: 2\n            }\n        });\n    }\n}\nexport class DuplicateSelectionAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.duplicateSelection',\n            label: nls.localize('duplicateSelection', \"Duplicate Selection\"),\n            alias: 'Duplicate Selection',\n            precondition: EditorContextKeys.writable,\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miDuplicateSelection', comment: ['&& denotes a mnemonic'] }, \"&&Duplicate Selection\"),\n                order: 5\n            }\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const commands = [];\n        const selections = editor.getSelections();\n        const model = editor.getModel();\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                commands.push(new CopyLinesCommand(selection, true));\n            }\n            else {\n                const insertSelection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);\n                commands.push(new ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\n// move lines\nclass AbstractMoveLinesAction extends EditorAction {\n    constructor(down, opts) {\n        super(opts);\n        this.down = down;\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const commands = [];\n        const selections = editor.getSelections() || [];\n        const autoIndent = editor.getOption(12 /* EditorOption.autoIndent */);\n        for (const selection of selections) {\n            commands.push(new MoveLinesCommand(selection, this.down, autoIndent, languageConfigurationService));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.moveLinesUpAction',\n            label: nls.localize('lines.moveUp', \"Move Line Up\"),\n            alias: 'Move Line Up',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n                linux: { primary: 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, \"Mo&&ve Line Up\"),\n                order: 3\n            }\n        });\n    }\n}\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.moveLinesDownAction',\n            label: nls.localize('lines.moveDown', \"Move Line Down\"),\n            alias: 'Move Line Down',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n                linux: { primary: 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, \"Move &&Line Down\"),\n                order: 4\n            }\n        });\n    }\n}\nexport class AbstractSortLinesAction extends EditorAction {\n    constructor(descending, opts) {\n        super(opts);\n        this.descending = descending;\n    }\n    run(_accessor, editor) {\n        const selections = editor.getSelections() || [];\n        for (const selection of selections) {\n            if (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n                return;\n            }\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new SortLinesCommand(selections[i], this.descending);\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.sortLinesAscending',\n            label: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n            alias: 'Sort Lines Ascending',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.sortLinesDescending',\n            label: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n            alias: 'Sort Lines Descending',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteDuplicateLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.removeDuplicateLines',\n            label: nls.localize('lines.deleteDuplicates', \"Delete Duplicate Lines\"),\n            alias: 'Delete Duplicate Lines',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n            return;\n        }\n        const edits = [];\n        const endCursorState = [];\n        let linesDeleted = 0;\n        for (const selection of editor.getSelections()) {\n            const uniqueLines = new Set();\n            const lines = [];\n            for (let i = selection.startLineNumber; i <= selection.endLineNumber; i++) {\n                const line = model.getLineContent(i);\n                if (uniqueLines.has(line)) {\n                    continue;\n                }\n                lines.push(line);\n                uniqueLines.add(line);\n            }\n            const selectionToReplace = new Selection(selection.startLineNumber, 1, selection.endLineNumber, model.getLineMaxColumn(selection.endLineNumber));\n            const adjustedSelectionStart = selection.startLineNumber - linesDeleted;\n            const finalSelection = new Selection(adjustedSelectionStart, 1, adjustedSelectionStart + lines.length - 1, lines[lines.length - 1].length);\n            edits.push(EditOperation.replace(selectionToReplace, lines.join('\\n')));\n            endCursorState.push(finalSelection);\n            linesDeleted += (selection.endLineNumber - selection.startLineNumber + 1) - lines.length;\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    }\n}\nexport class TrimTrailingWhitespaceAction extends EditorAction {\n    constructor() {\n        super({\n            id: TrimTrailingWhitespaceAction.ID,\n            label: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n            alias: 'Trim Trailing Whitespace',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor, args) {\n        let cursors = [];\n        if (args.reason === 'auto-save') {\n            // See https://github.com/editorconfig/editorconfig-vscode/issues/47\n            // It is very convenient for the editor config extension to invoke this action.\n            // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n            cursors = (editor.getSelections() || []).map(s => new Position(s.positionLineNumber, s.positionColumn));\n        }\n        const selection = editor.getSelection();\n        if (selection === null) {\n            return;\n        }\n        const command = new TrimTrailingWhitespaceCommand(selection, cursors);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n    }\n}\nTrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';\nexport class DeleteLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.deleteLines',\n            label: nls.localize('lines.delete', \"Delete Line\"),\n            alias: 'Delete Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 41 /* KeyCode.KeyK */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const ops = this._getLinesToRemove(editor);\n        const model = editor.getModel();\n        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n            // Model is empty\n            return;\n        }\n        let linesDeleted = 0;\n        const edits = [];\n        const cursorState = [];\n        for (let i = 0, len = ops.length; i < len; i++) {\n            const op = ops[i];\n            let startLineNumber = op.startLineNumber;\n            let endLineNumber = op.endLineNumber;\n            let startColumn = 1;\n            let endColumn = model.getLineMaxColumn(endLineNumber);\n            if (endLineNumber < model.getLineCount()) {\n                endLineNumber += 1;\n                endColumn = 1;\n            }\n            else if (startLineNumber > 1) {\n                startLineNumber -= 1;\n                startColumn = model.getLineMaxColumn(startLineNumber);\n            }\n            edits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n            cursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n            linesDeleted += (op.endLineNumber - op.startLineNumber + 1);\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, cursorState);\n        editor.pushUndoStop();\n    }\n    _getLinesToRemove(editor) {\n        // Construct delete operations\n        const operations = editor.getSelections().map((s) => {\n            let endLineNumber = s.endLineNumber;\n            if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n                endLineNumber -= 1;\n            }\n            return {\n                startLineNumber: s.startLineNumber,\n                selectionStartColumn: s.selectionStartColumn,\n                endLineNumber: endLineNumber,\n                positionColumn: s.positionColumn\n            };\n        });\n        // Sort delete operations\n        operations.sort((a, b) => {\n            if (a.startLineNumber === b.startLineNumber) {\n                return a.endLineNumber - b.endLineNumber;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        });\n        // Merge delete operations which are adjacent or overlapping\n        const mergedOperations = [];\n        let previousOperation = operations[0];\n        for (let i = 1; i < operations.length; i++) {\n            if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n                // Merge current operations into the previous one\n                previousOperation.endLineNumber = operations[i].endLineNumber;\n            }\n            else {\n                // Push previous operation\n                mergedOperations.push(previousOperation);\n                previousOperation = operations[i];\n            }\n        }\n        // Push the last operation\n        mergedOperations.push(previousOperation);\n        return mergedOperations;\n    }\n}\nexport class IndentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.indentLines',\n            label: nls.localize('lines.indent', \"Indent Line\"),\n            alias: 'Indent Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 94 /* KeyCode.BracketRight */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n        editor.pushUndoStop();\n    }\n}\nclass OutdentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.outdentLines',\n            label: nls.localize('lines.outdent', \"Outdent Line\"),\n            alias: 'Outdent Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 92 /* KeyCode.BracketLeft */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n    }\n}\nexport class InsertLineBeforeAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertLineBefore',\n            label: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n            alias: 'Insert Line Above',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 3 /* KeyCode.Enter */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    }\n}\nexport class InsertLineAfterAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertLineAfter',\n            label: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n            alias: 'Insert Line Below',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 3 /* KeyCode.Enter */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    }\n}\nexport class AbstractDeleteAllToBoundaryAction extends EditorAction {\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const primaryCursor = editor.getSelection();\n        const rangesToDelete = this._getRangesToDelete(editor);\n        // merge overlapping selections\n        const effectiveRanges = [];\n        for (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n            const range = rangesToDelete[i];\n            const nextRange = rangesToDelete[i + 1];\n            if (Range.intersectRanges(range, nextRange) === null) {\n                effectiveRanges.push(range);\n            }\n            else {\n                rangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n            }\n        }\n        effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n        const endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n        const edits = effectiveRanges.map(range => {\n            return EditOperation.replace(range, '');\n        });\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    }\n}\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\n    constructor() {\n        super({\n            id: 'deleteAllLeft',\n            label: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n            alias: 'Delete All Left',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1 /* KeyCode.Backspace */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    _getEndCursorState(primaryCursor, rangesToDelete) {\n        let endPrimaryCursor = null;\n        const endCursorState = [];\n        let deletedLines = 0;\n        rangesToDelete.forEach(range => {\n            let endCursor;\n            if (range.endColumn === 1 && deletedLines > 0) {\n                const newStartLine = range.startLineNumber - deletedLines;\n                endCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n            }\n            else {\n                endCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n            }\n            deletedLines += range.endLineNumber - range.startLineNumber;\n            if (range.intersectRanges(primaryCursor)) {\n                endPrimaryCursor = endCursor;\n            }\n            else {\n                endCursorState.push(endCursor);\n            }\n        });\n        if (endPrimaryCursor) {\n            endCursorState.unshift(endPrimaryCursor);\n        }\n        return endCursorState;\n    }\n    _getRangesToDelete(editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return [];\n        }\n        let rangesToDelete = selections;\n        const model = editor.getModel();\n        if (model === null) {\n            return [];\n        }\n        rangesToDelete.sort(Range.compareRangesUsingStarts);\n        rangesToDelete = rangesToDelete.map(selection => {\n            if (selection.isEmpty()) {\n                if (selection.startColumn === 1) {\n                    const deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n                    const deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineLength(deleteFromLine) + 1;\n                    return new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n                }\n                else {\n                    return new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n                }\n            }\n            else {\n                return new Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);\n            }\n        });\n        return rangesToDelete;\n    }\n}\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\n    constructor() {\n        super({\n            id: 'deleteAllRight',\n            label: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n            alias: 'Delete All Right',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: 256 /* KeyMod.WinCtrl */ | 41 /* KeyCode.KeyK */, secondary: [2048 /* KeyMod.CtrlCmd */ | 20 /* KeyCode.Delete */] },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    _getEndCursorState(primaryCursor, rangesToDelete) {\n        let endPrimaryCursor = null;\n        const endCursorState = [];\n        for (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n            const range = rangesToDelete[i];\n            const endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n            if (range.intersectRanges(primaryCursor)) {\n                endPrimaryCursor = endCursor;\n            }\n            else {\n                endCursorState.push(endCursor);\n            }\n        }\n        if (endPrimaryCursor) {\n            endCursorState.unshift(endPrimaryCursor);\n        }\n        return endCursorState;\n    }\n    _getRangesToDelete(editor) {\n        const model = editor.getModel();\n        if (model === null) {\n            return [];\n        }\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return [];\n        }\n        const rangesToDelete = selections.map((sel) => {\n            if (sel.isEmpty()) {\n                const maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n                if (sel.startColumn === maxColumn) {\n                    return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n                }\n                else {\n                    return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n                }\n            }\n            return sel;\n        });\n        rangesToDelete.sort(Range.compareRangesUsingStarts);\n        return rangesToDelete;\n    }\n}\nexport class JoinLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.joinLines',\n            label: nls.localize('lines.joinLines', \"Join Lines\"),\n            alias: 'Join Lines',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 0,\n                mac: { primary: 256 /* KeyMod.WinCtrl */ | 40 /* KeyCode.KeyJ */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        let primaryCursor = editor.getSelection();\n        if (primaryCursor === null) {\n            return;\n        }\n        selections.sort(Range.compareRangesUsingStarts);\n        const reducedSelections = [];\n        const lastSelection = selections.reduce((previousValue, currentValue) => {\n            if (previousValue.isEmpty()) {\n                if (previousValue.endLineNumber === currentValue.startLineNumber) {\n                    if (primaryCursor.equalsSelection(previousValue)) {\n                        primaryCursor = currentValue;\n                    }\n                    return currentValue;\n                }\n                if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n                    reducedSelections.push(previousValue);\n                    return currentValue;\n                }\n                else {\n                    return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n                }\n            }\n            else {\n                if (currentValue.startLineNumber > previousValue.endLineNumber) {\n                    reducedSelections.push(previousValue);\n                    return currentValue;\n                }\n                else {\n                    return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n                }\n            }\n        });\n        reducedSelections.push(lastSelection);\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const edits = [];\n        const endCursorState = [];\n        let endPrimaryCursor = primaryCursor;\n        let lineOffset = 0;\n        for (let i = 0, len = reducedSelections.length; i < len; i++) {\n            const selection = reducedSelections[i];\n            const startLineNumber = selection.startLineNumber;\n            const startColumn = 1;\n            let columnDeltaOffset = 0;\n            let endLineNumber, endColumn;\n            const selectionEndPositionOffset = model.getLineLength(selection.endLineNumber) - selection.endColumn;\n            if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n                const position = selection.getStartPosition();\n                if (position.lineNumber < model.getLineCount()) {\n                    endLineNumber = startLineNumber + 1;\n                    endColumn = model.getLineMaxColumn(endLineNumber);\n                }\n                else {\n                    endLineNumber = position.lineNumber;\n                    endColumn = model.getLineMaxColumn(position.lineNumber);\n                }\n            }\n            else {\n                endLineNumber = selection.endLineNumber;\n                endColumn = model.getLineMaxColumn(endLineNumber);\n            }\n            let trimmedLinesContent = model.getLineContent(startLineNumber);\n            for (let i = startLineNumber + 1; i <= endLineNumber; i++) {\n                const lineText = model.getLineContent(i);\n                const firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);\n                if (firstNonWhitespaceIdx >= 1) {\n                    let insertSpace = true;\n                    if (trimmedLinesContent === '') {\n                        insertSpace = false;\n                    }\n                    if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||\n                        trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n                        insertSpace = false;\n                        trimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n                    }\n                    const lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n                    trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n                    if (insertSpace) {\n                        columnDeltaOffset = lineTextWithoutIndent.length + 1;\n                    }\n                    else {\n                        columnDeltaOffset = lineTextWithoutIndent.length;\n                    }\n                }\n                else {\n                    columnDeltaOffset = 0;\n                }\n            }\n            const deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            if (!deleteSelection.isEmpty()) {\n                let resultSelection;\n                if (selection.isEmpty()) {\n                    edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                    resultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n                }\n                else {\n                    if (selection.startLineNumber === selection.endLineNumber) {\n                        edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                        resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);\n                    }\n                    else {\n                        edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                        resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n                    }\n                }\n                if (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n                    endPrimaryCursor = resultSelection;\n                }\n                else {\n                    endCursorState.push(resultSelection);\n                }\n            }\n            lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n        }\n        endCursorState.unshift(endPrimaryCursor);\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    }\n}\nexport class TransposeAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.transpose',\n            label: nls.localize('editor.transpose', \"Transpose Characters around the Cursor\"),\n            alias: 'Transpose Characters around the Cursor',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (!selection.isEmpty()) {\n                continue;\n            }\n            const cursor = selection.getStartPosition();\n            const maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n            if (cursor.column >= maxColumn) {\n                if (cursor.lineNumber === model.getLineCount()) {\n                    continue;\n                }\n                // The cursor is at the end of current line and current line is not empty\n                // then we transpose the character before the cursor and the line break if there is any following line.\n                const deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n                const chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n                commands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n            }\n            else {\n                const deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n                const chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n                commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars, new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class AbstractCaseAction extends EditorAction {\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const wordSeparators = editor.getOption(129 /* EditorOption.wordSeparators */);\n        const textEdits = [];\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                const cursor = selection.getStartPosition();\n                const word = editor.getConfiguredWordAtPosition(cursor);\n                if (!word) {\n                    continue;\n                }\n                const wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n                const text = model.getValueInRange(wordRange);\n                textEdits.push(EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));\n            }\n            else {\n                const text = model.getValueInRange(selection);\n                textEdits.push(EditOperation.replace(selection, this._modifyText(text, wordSeparators)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, textEdits);\n        editor.pushUndoStop();\n    }\n}\nexport class UpperCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToUppercase',\n            label: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n            alias: 'Transform to Uppercase',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        return text.toLocaleUpperCase();\n    }\n}\nexport class LowerCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToLowercase',\n            label: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n            alias: 'Transform to Lowercase',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        return text.toLocaleLowerCase();\n    }\n}\nclass BackwardsCompatibleRegExp {\n    constructor(_pattern, _flags) {\n        this._pattern = _pattern;\n        this._flags = _flags;\n        this._actual = null;\n        this._evaluated = false;\n    }\n    get() {\n        if (!this._evaluated) {\n            this._evaluated = true;\n            try {\n                this._actual = new RegExp(this._pattern, this._flags);\n            }\n            catch (err) {\n                // this browser does not support this regular expression\n            }\n        }\n        return this._actual;\n    }\n    isSupported() {\n        return (this.get() !== null);\n    }\n}\nexport class TitleCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToTitlecase',\n            label: nls.localize('editor.transformToTitlecase', \"Transform to Title Case\"),\n            alias: 'Transform to Title Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const titleBoundary = TitleCaseAction.titleBoundary.get();\n        if (!titleBoundary) {\n            // cannot support this\n            return text;\n        }\n        return text\n            .toLocaleLowerCase()\n            .replace(titleBoundary, (b) => b.toLocaleUpperCase());\n    }\n}\nTitleCaseAction.titleBoundary = new BackwardsCompatibleRegExp('(^|[^\\\\p{L}\\\\p{N}\\']|((^|\\\\P{L})\\'))\\\\p{L}', 'gmu');\nexport class SnakeCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToSnakecase',\n            label: nls.localize('editor.transformToSnakecase', \"Transform to Snake Case\"),\n            alias: 'Transform to Snake Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const caseBoundary = SnakeCaseAction.caseBoundary.get();\n        const singleLetters = SnakeCaseAction.singleLetters.get();\n        if (!caseBoundary || !singleLetters) {\n            // cannot support this\n            return text;\n        }\n        return (text\n            .replace(caseBoundary, '$1_$2')\n            .replace(singleLetters, '$1_$2$3')\n            .toLocaleLowerCase());\n    }\n}\nSnakeCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\nSnakeCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu})(\\\\p{Ll})', 'gmu');\nexport class CamelCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToCamelcase',\n            label: nls.localize('editor.transformToCamelcase', \"Transform to Camel Case\"),\n            alias: 'Transform to Camel Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const wordBoundary = CamelCaseAction.wordBoundary.get();\n        if (!wordBoundary) {\n            // cannot support this\n            return text;\n        }\n        const words = text.split(wordBoundary);\n        const firstWord = words.shift();\n        return firstWord + words.map((word) => word.substring(0, 1).toLocaleUpperCase() + word.substring(1))\n            .join('');\n    }\n}\nCamelCaseAction.wordBoundary = new BackwardsCompatibleRegExp('[_\\\\s-]', 'gm');\nexport class KebabCaseAction extends AbstractCaseAction {\n    static isSupported() {\n        const areAllRegexpsSupported = [\n            this.caseBoundary,\n            this.singleLetters,\n            this.underscoreBoundary,\n        ].every((regexp) => regexp.isSupported());\n        return areAllRegexpsSupported;\n    }\n    constructor() {\n        super({\n            id: 'editor.action.transformToKebabcase',\n            label: nls.localize('editor.transformToKebabcase', 'Transform to Kebab Case'),\n            alias: 'Transform to Kebab Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, _) {\n        const caseBoundary = KebabCaseAction.caseBoundary.get();\n        const singleLetters = KebabCaseAction.singleLetters.get();\n        const underscoreBoundary = KebabCaseAction.underscoreBoundary.get();\n        if (!caseBoundary || !singleLetters || !underscoreBoundary) {\n            // one or more regexps aren't supported\n            return text;\n        }\n        return text\n            .replace(underscoreBoundary, '$1-$3')\n            .replace(caseBoundary, '$1-$2')\n            .replace(singleLetters, '$1-$2')\n            .toLocaleLowerCase();\n    }\n}\nKebabCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\nKebabCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu}\\\\p{Ll})', 'gmu');\nKebabCaseAction.underscoreBoundary = new BackwardsCompatibleRegExp('(\\\\S)(_)(\\\\S)', 'gm');\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(DuplicateSelectionAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(DeleteDuplicateLinesAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\nif (SnakeCaseAction.caseBoundary.isSupported() && SnakeCaseAction.singleLetters.isSupported()) {\n    registerEditorAction(SnakeCaseAction);\n}\nif (CamelCaseAction.wordBoundary.isSupported()) {\n    registerEditorAction(CamelCaseAction);\n}\nif (TitleCaseAction.titleBoundary.isSupported()) {\n    registerEditorAction(TitleCaseAction);\n}\nif (KebabCaseAction.isSupported()) {\n    registerEditorAction(KebabCaseAction);\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,qCAAqC;AAC9D,SAASC,mBAAmB,QAAQ,kCAAkC;AACtE,SAASC,YAAY,EAAEC,oBAAoB,QAAQ,sCAAsC;AACzF,SAASC,cAAc,EAAEC,oCAAoC,EAAEC,6BAA6B,QAAQ,4CAA4C;AAChJ,SAASC,6BAA6B,QAAQ,2DAA2D;AACzG,SAASC,cAAc,QAAQ,gDAAgD;AAC/E,SAASC,aAAa,QAAQ,uCAAuC;AACrE,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAASC,SAAS,QAAQ,mCAAmC;AAC7D,SAASC,iBAAiB,QAAQ,sCAAsC;AACxE,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,OAAO,KAAKC,GAAG,MAAM,oBAAoB;AACzC,SAASC,MAAM,QAAQ,gDAAgD;AACvE,SAASC,6BAA6B,QAAQ,4DAA4D;AAC1G;AACA,MAAMC,uBAAuB,SAASlB,YAAY,CAAC;EAC/CmB,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAE;IACpB,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACD,IAAI,GAAGA,IAAI;EACpB;EACAE,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACnB,IAAI,CAACA,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE;MACpB;IACJ;IACA,MAAMC,UAAU,GAAGF,MAAM,CAACG,aAAa,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,SAAS,EAAEC,KAAK,MAAM;MAAED,SAAS;MAAEC,KAAK;MAAEC,MAAM,EAAE;IAAM,CAAC,CAAC,CAAC;IAC1GL,UAAU,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKzB,KAAK,CAAC0B,wBAAwB,CAACF,CAAC,CAACJ,SAAS,EAAEK,CAAC,CAACL,SAAS,CAAC,CAAC;IACnF;IACA,IAAIO,IAAI,GAAGV,UAAU,CAAC,CAAC,CAAC;IACxB,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,UAAU,CAACY,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,MAAME,IAAI,GAAGb,UAAU,CAACW,CAAC,CAAC;MAC1B,IAAID,IAAI,CAACP,SAAS,CAACW,aAAa,KAAKD,IAAI,CAACV,SAAS,CAACY,eAAe,EAAE;QACjE;QACA,IAAIL,IAAI,CAACN,KAAK,GAAGS,IAAI,CAACT,KAAK,EAAE;UACzB;UACAS,IAAI,CAACR,MAAM,GAAG,IAAI;QACtB,CAAC,MACI;UACD;UACAK,IAAI,CAACL,MAAM,GAAG,IAAI;UAClBK,IAAI,GAAGG,IAAI;QACf;MACJ;IACJ;IACA,MAAMG,QAAQ,GAAG,EAAE;IACnB,KAAK,MAAMb,SAAS,IAAIH,UAAU,EAAE;MAChCgB,QAAQ,CAACC,IAAI,CAAC,IAAI/B,gBAAgB,CAACiB,SAAS,CAACA,SAAS,EAAE,IAAI,CAACT,IAAI,EAAES,SAAS,CAACE,MAAM,CAAC,CAAC;IACzF;IACAP,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACqB,eAAe,CAAC,IAAI,CAACC,EAAE,EAAEJ,QAAQ,CAAC;IACzClB,MAAM,CAACoB,YAAY,CAAC,CAAC;EACzB;AACJ;AACA,MAAMG,iBAAiB,SAAS7B,uBAAuB,CAAC;EACpDC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,KAAK,EAAE;MACT2B,EAAE,EAAE,iCAAiC;MACrCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,cAAc,EAAE,cAAc,CAAC;MACnDC,KAAK,EAAE,cAAc;MACrBC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4C,eAAe;QACzCC,OAAO,EAAE,GAAG,CAAC,mBAAmB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7DC,KAAK,EAAE;UAAED,OAAO,EAAE,IAAI,CAAC,uBAAuB,GAAG,CAAC,mBAAmB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAAsB,CAAC;QACzHE,MAAM,EAAE,GAAG,CAAC;MAChB,CAAC;MACDC,QAAQ,EAAE;QACNC,MAAM,EAAE5C,MAAM,CAAC6C,oBAAoB;QACnCC,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAEhD,GAAG,CAACkC,QAAQ,CAAC;UAAEe,GAAG,EAAE,eAAe;UAAEC,OAAO,EAAE,CAAC,uBAAuB;QAAE,CAAC,EAAE,gBAAgB,CAAC;QACnGC,KAAK,EAAE;MACX;IACJ,CAAC,CAAC;EACN;AACJ;AACA,MAAMC,mBAAmB,SAASjD,uBAAuB,CAAC;EACtDC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,IAAI,EAAE;MACR2B,EAAE,EAAE,mCAAmC;MACvCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;MACvDC,KAAK,EAAE,gBAAgB;MACvBC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4C,eAAe;QACzCC,OAAO,EAAE,GAAG,CAAC,mBAAmB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7DC,KAAK,EAAE;UAAED,OAAO,EAAE,IAAI,CAAC,uBAAuB,GAAG,CAAC,mBAAmB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAAwB,CAAC;QAC3HE,MAAM,EAAE,GAAG,CAAC;MAChB,CAAC;MACDC,QAAQ,EAAE;QACNC,MAAM,EAAE5C,MAAM,CAAC6C,oBAAoB;QACnCC,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAEhD,GAAG,CAACkC,QAAQ,CAAC;UAAEe,GAAG,EAAE,iBAAiB;UAAEC,OAAO,EAAE,CAAC,uBAAuB;QAAE,CAAC,EAAE,kBAAkB,CAAC;QACvGC,KAAK,EAAE;MACX;IACJ,CAAC,CAAC;EACN;AACJ;AACA,OAAO,MAAME,wBAAwB,SAASpE,YAAY,CAAC;EACvDmB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,kCAAkC;MACtCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,oBAAoB,EAAE,qBAAqB,CAAC;MAChEC,KAAK,EAAE,qBAAqB;MAC5BC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCO,QAAQ,EAAE;QACNC,MAAM,EAAE5C,MAAM,CAAC6C,oBAAoB;QACnCC,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAEhD,GAAG,CAACkC,QAAQ,CAAC;UAAEe,GAAG,EAAE,sBAAsB;UAAEC,OAAO,EAAE,CAAC,uBAAuB;QAAE,CAAC,EAAE,uBAAuB,CAAC;QACjHC,KAAK,EAAE;MACX;IACJ,CAAC,CAAC;EACN;EACA5C,GAAGA,CAAC+C,QAAQ,EAAE7C,MAAM,EAAE8C,IAAI,EAAE;IACxB,IAAI,CAAC9C,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE;MACpB;IACJ;IACA,MAAMiB,QAAQ,GAAG,EAAE;IACnB,MAAMhB,UAAU,GAAGF,MAAM,CAACG,aAAa,CAAC,CAAC;IACzC,MAAM4C,KAAK,GAAG/C,MAAM,CAACgD,QAAQ,CAAC,CAAC;IAC/B,KAAK,MAAM3C,SAAS,IAAIH,UAAU,EAAE;MAChC,IAAIG,SAAS,CAAC4C,OAAO,CAAC,CAAC,EAAE;QACrB/B,QAAQ,CAACC,IAAI,CAAC,IAAI/B,gBAAgB,CAACiB,SAAS,EAAE,IAAI,CAAC,CAAC;MACxD,CAAC,MACI;QACD,MAAM6C,eAAe,GAAG,IAAIhE,SAAS,CAACmB,SAAS,CAACW,aAAa,EAAEX,SAAS,CAAC8C,SAAS,EAAE9C,SAAS,CAACW,aAAa,EAAEX,SAAS,CAAC8C,SAAS,CAAC;QACjIjC,QAAQ,CAACC,IAAI,CAAC,IAAIvC,6BAA6B,CAACsE,eAAe,EAAEH,KAAK,CAACK,eAAe,CAAC/C,SAAS,CAAC,CAAC,CAAC;MACvG;IACJ;IACAL,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACqB,eAAe,CAAC,IAAI,CAACC,EAAE,EAAEJ,QAAQ,CAAC;IACzClB,MAAM,CAACoB,YAAY,CAAC,CAAC;EACzB;AACJ;AACA;AACA,MAAMiC,uBAAuB,SAAS7E,YAAY,CAAC;EAC/CmB,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAE;IACpB,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACD,IAAI,GAAGA,IAAI;EACpB;EACAE,GAAGA,CAAC+C,QAAQ,EAAE7C,MAAM,EAAE;IAClB,MAAMsD,4BAA4B,GAAGT,QAAQ,CAACU,GAAG,CAAC9D,6BAA6B,CAAC;IAChF,MAAMyB,QAAQ,GAAG,EAAE;IACnB,MAAMhB,UAAU,GAAGF,MAAM,CAACG,aAAa,CAAC,CAAC,IAAI,EAAE;IAC/C,MAAMqD,UAAU,GAAGxD,MAAM,CAACyD,SAAS,CAAC,EAAE,CAAC,6BAA6B,CAAC;IACrE,KAAK,MAAMpD,SAAS,IAAIH,UAAU,EAAE;MAChCgB,QAAQ,CAACC,IAAI,CAAC,IAAI9B,gBAAgB,CAACgB,SAAS,EAAE,IAAI,CAACT,IAAI,EAAE4D,UAAU,EAAEF,4BAA4B,CAAC,CAAC;IACvG;IACAtD,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACqB,eAAe,CAAC,IAAI,CAACC,EAAE,EAAEJ,QAAQ,CAAC;IACzClB,MAAM,CAACoB,YAAY,CAAC,CAAC;EACzB;AACJ;AACA,MAAMsC,iBAAiB,SAASL,uBAAuB,CAAC;EACpD1D,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,KAAK,EAAE;MACT2B,EAAE,EAAE,iCAAiC;MACrCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,cAAc,EAAE,cAAc,CAAC;MACnDC,KAAK,EAAE,cAAc;MACrBC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4C,eAAe;QACzCC,OAAO,EAAE,GAAG,CAAC,mBAAmB,EAAE,CAAC;QACnCC,KAAK,EAAE;UAAED,OAAO,EAAE,GAAG,CAAC,mBAAmB,EAAE,CAAC;QAAsB,CAAC;QACnEE,MAAM,EAAE,GAAG,CAAC;MAChB,CAAC;MACDC,QAAQ,EAAE;QACNC,MAAM,EAAE5C,MAAM,CAAC6C,oBAAoB;QACnCC,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAEhD,GAAG,CAACkC,QAAQ,CAAC;UAAEe,GAAG,EAAE,eAAe;UAAEC,OAAO,EAAE,CAAC,uBAAuB;QAAE,CAAC,EAAE,gBAAgB,CAAC;QACnGC,KAAK,EAAE;MACX;IACJ,CAAC,CAAC;EACN;AACJ;AACA,MAAMiB,mBAAmB,SAASN,uBAAuB,CAAC;EACtD1D,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,IAAI,EAAE;MACR2B,EAAE,EAAE,mCAAmC;MACvCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;MACvDC,KAAK,EAAE,gBAAgB;MACvBC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4C,eAAe;QACzCC,OAAO,EAAE,GAAG,CAAC,mBAAmB,EAAE,CAAC;QACnCC,KAAK,EAAE;UAAED,OAAO,EAAE,GAAG,CAAC,mBAAmB,EAAE,CAAC;QAAwB,CAAC;QACrEE,MAAM,EAAE,GAAG,CAAC;MAChB,CAAC;MACDC,QAAQ,EAAE;QACNC,MAAM,EAAE5C,MAAM,CAAC6C,oBAAoB;QACnCC,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAEhD,GAAG,CAACkC,QAAQ,CAAC;UAAEe,GAAG,EAAE,iBAAiB;UAAEC,OAAO,EAAE,CAAC,uBAAuB;QAAE,CAAC,EAAE,kBAAkB,CAAC;QACvGC,KAAK,EAAE;MACX;IACJ,CAAC,CAAC;EACN;AACJ;AACA,OAAO,MAAMkB,uBAAuB,SAASpF,YAAY,CAAC;EACtDmB,WAAWA,CAACkE,UAAU,EAAEhE,IAAI,EAAE;IAC1B,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACgE,UAAU,GAAGA,UAAU;EAChC;EACA/D,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACnB,MAAME,UAAU,GAAGF,MAAM,CAACG,aAAa,CAAC,CAAC,IAAI,EAAE;IAC/C,KAAK,MAAME,SAAS,IAAIH,UAAU,EAAE;MAChC,IAAI,CAACZ,gBAAgB,CAACwE,MAAM,CAAC9D,MAAM,CAACgD,QAAQ,CAAC,CAAC,EAAE3C,SAAS,EAAE,IAAI,CAACwD,UAAU,CAAC,EAAE;QACzE;MACJ;IACJ;IACA,MAAM3C,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEkD,GAAG,GAAG7D,UAAU,CAACY,MAAM,EAAED,CAAC,GAAGkD,GAAG,EAAElD,CAAC,EAAE,EAAE;MACnDK,QAAQ,CAACL,CAAC,CAAC,GAAG,IAAIvB,gBAAgB,CAACY,UAAU,CAACW,CAAC,CAAC,EAAE,IAAI,CAACgD,UAAU,CAAC;IACtE;IACA7D,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACqB,eAAe,CAAC,IAAI,CAACC,EAAE,EAAEJ,QAAQ,CAAC;IACzClB,MAAM,CAACoB,YAAY,CAAC,CAAC;EACzB;AACJ;AACA,OAAO,MAAM4C,wBAAwB,SAASJ,uBAAuB,CAAC;EAClEjE,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,KAAK,EAAE;MACT2B,EAAE,EAAE,kCAAkC;MACtCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,qBAAqB,EAAE,sBAAsB,CAAC;MAClEC,KAAK,EAAE,sBAAsB;MAC7BC,YAAY,EAAExC,iBAAiB,CAACyC;IACpC,CAAC,CAAC;EACN;AACJ;AACA,OAAO,MAAMqC,yBAAyB,SAASL,uBAAuB,CAAC;EACnEjE,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,IAAI,EAAE;MACR2B,EAAE,EAAE,mCAAmC;MACvCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,sBAAsB,EAAE,uBAAuB,CAAC;MACpEC,KAAK,EAAE,uBAAuB;MAC9BC,YAAY,EAAExC,iBAAiB,CAACyC;IACpC,CAAC,CAAC;EACN;AACJ;AACA,OAAO,MAAMsC,0BAA0B,SAAS1F,YAAY,CAAC;EACzDmB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,oCAAoC;MACxCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,wBAAwB,EAAE,wBAAwB,CAAC;MACvEC,KAAK,EAAE,wBAAwB;MAC/BC,YAAY,EAAExC,iBAAiB,CAACyC;IACpC,CAAC,CAAC;EACN;EACA9B,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACnB,IAAI,CAACA,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE;MACpB;IACJ;IACA,MAAM8C,KAAK,GAAG/C,MAAM,CAACgD,QAAQ,CAAC,CAAC;IAC/B,IAAID,KAAK,CAACoB,YAAY,CAAC,CAAC,KAAK,CAAC,IAAIpB,KAAK,CAACqB,gBAAgB,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;MAC/D;IACJ;IACA,MAAMC,KAAK,GAAG,EAAE;IAChB,MAAMC,cAAc,GAAG,EAAE;IACzB,IAAIC,YAAY,GAAG,CAAC;IACpB,KAAK,MAAMlE,SAAS,IAAIL,MAAM,CAACG,aAAa,CAAC,CAAC,EAAE;MAC5C,MAAMqE,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC7B,MAAMC,KAAK,GAAG,EAAE;MAChB,KAAK,IAAI7D,CAAC,GAAGR,SAAS,CAACY,eAAe,EAAEJ,CAAC,IAAIR,SAAS,CAACW,aAAa,EAAEH,CAAC,EAAE,EAAE;QACvE,MAAM8D,IAAI,GAAG5B,KAAK,CAAC6B,cAAc,CAAC/D,CAAC,CAAC;QACpC,IAAI2D,WAAW,CAACK,GAAG,CAACF,IAAI,CAAC,EAAE;UACvB;QACJ;QACAD,KAAK,CAACvD,IAAI,CAACwD,IAAI,CAAC;QAChBH,WAAW,CAACM,GAAG,CAACH,IAAI,CAAC;MACzB;MACA,MAAMI,kBAAkB,GAAG,IAAI7F,SAAS,CAACmB,SAAS,CAACY,eAAe,EAAE,CAAC,EAAEZ,SAAS,CAACW,aAAa,EAAE+B,KAAK,CAACqB,gBAAgB,CAAC/D,SAAS,CAACW,aAAa,CAAC,CAAC;MAChJ,MAAMgE,sBAAsB,GAAG3E,SAAS,CAACY,eAAe,GAAGsD,YAAY;MACvE,MAAMU,cAAc,GAAG,IAAI/F,SAAS,CAAC8F,sBAAsB,EAAE,CAAC,EAAEA,sBAAsB,GAAGN,KAAK,CAAC5D,MAAM,GAAG,CAAC,EAAE4D,KAAK,CAACA,KAAK,CAAC5D,MAAM,GAAG,CAAC,CAAC,CAACA,MAAM,CAAC;MAC1IuD,KAAK,CAAClD,IAAI,CAACpC,aAAa,CAACmG,OAAO,CAACH,kBAAkB,EAAEL,KAAK,CAACS,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MACvEb,cAAc,CAACnD,IAAI,CAAC8D,cAAc,CAAC;MACnCV,YAAY,IAAKlE,SAAS,CAACW,aAAa,GAAGX,SAAS,CAACY,eAAe,GAAG,CAAC,GAAIyD,KAAK,CAAC5D,MAAM;IAC5F;IACAd,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACoF,YAAY,CAAC,IAAI,CAAC9D,EAAE,EAAE+C,KAAK,EAAEC,cAAc,CAAC;IACnDtE,MAAM,CAACoB,YAAY,CAAC,CAAC;EACzB;AACJ;AACA,OAAO,MAAMiE,4BAA4B,SAAS7G,YAAY,CAAC;EAC3DmB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE+D,4BAA4B,CAACC,EAAE;MACnC9D,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,8BAA8B,EAAE,0BAA0B,CAAC;MAC/EC,KAAK,EAAE,0BAA0B;MACjCC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4C,eAAe;QACzCC,OAAO,EAAE1D,QAAQ,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,oBAAoB,IAAI,CAAC,uBAAuB,EAAE,CAAC,kBAAkB,CAAC;QACvH4D,MAAM,EAAE,GAAG,CAAC;MAChB;IACJ,CAAC,CAAC;EACN;EACApC,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE8C,IAAI,EAAE;IACzB,IAAIyC,OAAO,GAAG,EAAE;IAChB,IAAIzC,IAAI,CAAC0C,MAAM,KAAK,WAAW,EAAE;MAC7B;MACA;MACA;MACAD,OAAO,GAAG,CAACvF,MAAM,CAACG,aAAa,CAAC,CAAC,IAAI,EAAE,EAAEC,GAAG,CAACqF,CAAC,IAAI,IAAIzG,QAAQ,CAACyG,CAAC,CAACC,kBAAkB,EAAED,CAAC,CAACE,cAAc,CAAC,CAAC;IAC3G;IACA,MAAMtF,SAAS,GAAGL,MAAM,CAAC4F,YAAY,CAAC,CAAC;IACvC,IAAIvF,SAAS,KAAK,IAAI,EAAE;MACpB;IACJ;IACA,MAAMwF,OAAO,GAAG,IAAIhH,6BAA6B,CAACwB,SAAS,EAAEkF,OAAO,CAAC;IACrEvF,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACqB,eAAe,CAAC,IAAI,CAACC,EAAE,EAAE,CAACuE,OAAO,CAAC,CAAC;IAC1C7F,MAAM,CAACoB,YAAY,CAAC,CAAC;EACzB;AACJ;AACAiE,4BAA4B,CAACC,EAAE,GAAG,sCAAsC;AACxE,OAAO,MAAMQ,iBAAiB,SAAStH,YAAY,CAAC;EAChDmB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,2BAA2B;MAC/BE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,cAAc,EAAE,aAAa,CAAC;MAClDC,KAAK,EAAE,aAAa;MACpBC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4G,cAAc;QACxC/D,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAClEE,MAAM,EAAE,GAAG,CAAC;MAChB;IACJ,CAAC,CAAC;EACN;EACApC,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACnB,IAAI,CAACA,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE;MACpB;IACJ;IACA,MAAM+F,GAAG,GAAG,IAAI,CAACC,iBAAiB,CAACjG,MAAM,CAAC;IAC1C,MAAM+C,KAAK,GAAG/C,MAAM,CAACgD,QAAQ,CAAC,CAAC;IAC/B,IAAID,KAAK,CAACoB,YAAY,CAAC,CAAC,KAAK,CAAC,IAAIpB,KAAK,CAACqB,gBAAgB,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;MAC/D;MACA;IACJ;IACA,IAAIG,YAAY,GAAG,CAAC;IACpB,MAAMF,KAAK,GAAG,EAAE;IAChB,MAAM6B,WAAW,GAAG,EAAE;IACtB,KAAK,IAAIrF,CAAC,GAAG,CAAC,EAAEkD,GAAG,GAAGiC,GAAG,CAAClF,MAAM,EAAED,CAAC,GAAGkD,GAAG,EAAElD,CAAC,EAAE,EAAE;MAC5C,MAAMsF,EAAE,GAAGH,GAAG,CAACnF,CAAC,CAAC;MACjB,IAAII,eAAe,GAAGkF,EAAE,CAAClF,eAAe;MACxC,IAAID,aAAa,GAAGmF,EAAE,CAACnF,aAAa;MACpC,IAAIoF,WAAW,GAAG,CAAC;MACnB,IAAIjD,SAAS,GAAGJ,KAAK,CAACqB,gBAAgB,CAACpD,aAAa,CAAC;MACrD,IAAIA,aAAa,GAAG+B,KAAK,CAACoB,YAAY,CAAC,CAAC,EAAE;QACtCnD,aAAa,IAAI,CAAC;QAClBmC,SAAS,GAAG,CAAC;MACjB,CAAC,MACI,IAAIlC,eAAe,GAAG,CAAC,EAAE;QAC1BA,eAAe,IAAI,CAAC;QACpBmF,WAAW,GAAGrD,KAAK,CAACqB,gBAAgB,CAACnD,eAAe,CAAC;MACzD;MACAoD,KAAK,CAAClD,IAAI,CAACpC,aAAa,CAACmG,OAAO,CAAC,IAAIhG,SAAS,CAAC+B,eAAe,EAAEmF,WAAW,EAAEpF,aAAa,EAAEmC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;MAC5G+C,WAAW,CAAC/E,IAAI,CAAC,IAAIjC,SAAS,CAAC+B,eAAe,GAAGsD,YAAY,EAAE4B,EAAE,CAACR,cAAc,EAAE1E,eAAe,GAAGsD,YAAY,EAAE4B,EAAE,CAACR,cAAc,CAAC,CAAC;MACrIpB,YAAY,IAAK4B,EAAE,CAACnF,aAAa,GAAGmF,EAAE,CAAClF,eAAe,GAAG,CAAE;IAC/D;IACAjB,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACoF,YAAY,CAAC,IAAI,CAAC9D,EAAE,EAAE+C,KAAK,EAAE6B,WAAW,CAAC;IAChDlG,MAAM,CAACoB,YAAY,CAAC,CAAC;EACzB;EACA6E,iBAAiBA,CAACjG,MAAM,EAAE;IACtB;IACA,MAAMqG,UAAU,GAAGrG,MAAM,CAACG,aAAa,CAAC,CAAC,CAACC,GAAG,CAAEqF,CAAC,IAAK;MACjD,IAAIzE,aAAa,GAAGyE,CAAC,CAACzE,aAAa;MACnC,IAAIyE,CAAC,CAACxE,eAAe,GAAGwE,CAAC,CAACzE,aAAa,IAAIyE,CAAC,CAACtC,SAAS,KAAK,CAAC,EAAE;QAC1DnC,aAAa,IAAI,CAAC;MACtB;MACA,OAAO;QACHC,eAAe,EAAEwE,CAAC,CAACxE,eAAe;QAClCqF,oBAAoB,EAAEb,CAAC,CAACa,oBAAoB;QAC5CtF,aAAa,EAAEA,aAAa;QAC5B2E,cAAc,EAAEF,CAAC,CAACE;MACtB,CAAC;IACL,CAAC,CAAC;IACF;IACAU,UAAU,CAAC7F,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACtB,IAAID,CAAC,CAACQ,eAAe,KAAKP,CAAC,CAACO,eAAe,EAAE;QACzC,OAAOR,CAAC,CAACO,aAAa,GAAGN,CAAC,CAACM,aAAa;MAC5C;MACA,OAAOP,CAAC,CAACQ,eAAe,GAAGP,CAAC,CAACO,eAAe;IAChD,CAAC,CAAC;IACF;IACA,MAAMsF,gBAAgB,GAAG,EAAE;IAC3B,IAAIC,iBAAiB,GAAGH,UAAU,CAAC,CAAC,CAAC;IACrC,KAAK,IAAIxF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwF,UAAU,CAACvF,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,IAAI2F,iBAAiB,CAACxF,aAAa,GAAG,CAAC,IAAIqF,UAAU,CAACxF,CAAC,CAAC,CAACI,eAAe,EAAE;QACtE;QACAuF,iBAAiB,CAACxF,aAAa,GAAGqF,UAAU,CAACxF,CAAC,CAAC,CAACG,aAAa;MACjE,CAAC,MACI;QACD;QACAuF,gBAAgB,CAACpF,IAAI,CAACqF,iBAAiB,CAAC;QACxCA,iBAAiB,GAAGH,UAAU,CAACxF,CAAC,CAAC;MACrC;IACJ;IACA;IACA0F,gBAAgB,CAACpF,IAAI,CAACqF,iBAAiB,CAAC;IACxC,OAAOD,gBAAgB;EAC3B;AACJ;AACA,OAAO,MAAME,iBAAiB,SAASjI,YAAY,CAAC;EAChDmB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,2BAA2B;MAC/BE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,cAAc,EAAE,aAAa,CAAC;MAClDC,KAAK,EAAE,aAAa;MACpBC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4C,eAAe;QACzCC,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACxCE,MAAM,EAAE,GAAG,CAAC;MAChB;IACJ,CAAC,CAAC;EACN;EACApC,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACnB,MAAM0G,SAAS,GAAG1G,MAAM,CAAC2G,aAAa,CAAC,CAAC;IACxC,IAAI,CAACD,SAAS,EAAE;MACZ;IACJ;IACA1G,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACqB,eAAe,CAAC,IAAI,CAACC,EAAE,EAAExC,cAAc,CAAC8H,MAAM,CAACF,SAAS,CAACG,YAAY,EAAE7G,MAAM,CAACgD,QAAQ,CAAC,CAAC,EAAEhD,MAAM,CAACG,aAAa,CAAC,CAAC,CAAC,CAAC;IACzHH,MAAM,CAACoB,YAAY,CAAC,CAAC;EACzB;AACJ;AACA,MAAM0F,kBAAkB,SAAStI,YAAY,CAAC;EAC1CmB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,4BAA4B;MAChCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,eAAe,EAAE,cAAc,CAAC;MACpDC,KAAK,EAAE,cAAc;MACrBC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4C,eAAe;QACzCC,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACxCE,MAAM,EAAE,GAAG,CAAC;MAChB;IACJ,CAAC,CAAC;EACN;EACApC,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACnBzB,mBAAmB,CAACwI,OAAO,CAACC,gBAAgB,CAACjH,SAAS,EAAEC,MAAM,EAAE,IAAI,CAAC;EACzE;AACJ;AACA,OAAO,MAAMiH,sBAAsB,SAASzI,YAAY,CAAC;EACrDmB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,gCAAgC;MACpCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,oBAAoB,EAAE,mBAAmB,CAAC;MAC9DC,KAAK,EAAE,mBAAmB;MAC1BC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4C,eAAe;QACzCC,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACjEE,MAAM,EAAE,GAAG,CAAC;MAChB;IACJ,CAAC,CAAC;EACN;EACApC,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACnB,MAAM0G,SAAS,GAAG1G,MAAM,CAAC2G,aAAa,CAAC,CAAC;IACxC,IAAI,CAACD,SAAS,EAAE;MACZ;IACJ;IACA1G,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACqB,eAAe,CAAC,IAAI,CAACC,EAAE,EAAExC,cAAc,CAACoI,gBAAgB,CAACR,SAAS,CAACG,YAAY,EAAE7G,MAAM,CAACgD,QAAQ,CAAC,CAAC,EAAEhD,MAAM,CAACG,aAAa,CAAC,CAAC,CAAC,CAAC;EACvI;AACJ;AACA,OAAO,MAAMgH,qBAAqB,SAAS3I,YAAY,CAAC;EACpDmB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,+BAA+B;MACnCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,mBAAmB,EAAE,mBAAmB,CAAC;MAC7DC,KAAK,EAAE,mBAAmB;MAC1BC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4C,eAAe;QACzCC,OAAO,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACvCE,MAAM,EAAE,GAAG,CAAC;MAChB;IACJ,CAAC,CAAC;EACN;EACApC,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACnB,MAAM0G,SAAS,GAAG1G,MAAM,CAAC2G,aAAa,CAAC,CAAC;IACxC,IAAI,CAACD,SAAS,EAAE;MACZ;IACJ;IACA1G,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACqB,eAAe,CAAC,IAAI,CAACC,EAAE,EAAExC,cAAc,CAACsI,eAAe,CAACV,SAAS,CAACG,YAAY,EAAE7G,MAAM,CAACgD,QAAQ,CAAC,CAAC,EAAEhD,MAAM,CAACG,aAAa,CAAC,CAAC,CAAC,CAAC;EACtI;AACJ;AACA,OAAO,MAAMkH,iCAAiC,SAAS7I,YAAY,CAAC;EAChEsB,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACnB,IAAI,CAACA,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE;MACpB;IACJ;IACA,MAAMqH,aAAa,GAAGtH,MAAM,CAAC4F,YAAY,CAAC,CAAC;IAC3C,MAAM2B,cAAc,GAAG,IAAI,CAACC,kBAAkB,CAACxH,MAAM,CAAC;IACtD;IACA,MAAMyH,eAAe,GAAG,EAAE;IAC1B,KAAK,IAAI5G,CAAC,GAAG,CAAC,EAAE6G,KAAK,GAAGH,cAAc,CAACzG,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG6G,KAAK,EAAE7G,CAAC,EAAE,EAAE;MAC/D,MAAM8G,KAAK,GAAGJ,cAAc,CAAC1G,CAAC,CAAC;MAC/B,MAAM+G,SAAS,GAAGL,cAAc,CAAC1G,CAAC,GAAG,CAAC,CAAC;MACvC,IAAI5B,KAAK,CAAC4I,eAAe,CAACF,KAAK,EAAEC,SAAS,CAAC,KAAK,IAAI,EAAE;QAClDH,eAAe,CAACtG,IAAI,CAACwG,KAAK,CAAC;MAC/B,CAAC,MACI;QACDJ,cAAc,CAAC1G,CAAC,GAAG,CAAC,CAAC,GAAG5B,KAAK,CAAC6I,SAAS,CAACH,KAAK,EAAEC,SAAS,CAAC;MAC7D;IACJ;IACAH,eAAe,CAACtG,IAAI,CAACoG,cAAc,CAACA,cAAc,CAACzG,MAAM,GAAG,CAAC,CAAC,CAAC;IAC/D,MAAMwD,cAAc,GAAG,IAAI,CAACyD,kBAAkB,CAACT,aAAa,EAAEG,eAAe,CAAC;IAC9E,MAAMpD,KAAK,GAAGoD,eAAe,CAACrH,GAAG,CAACuH,KAAK,IAAI;MACvC,OAAO5I,aAAa,CAACmG,OAAO,CAACyC,KAAK,EAAE,EAAE,CAAC;IAC3C,CAAC,CAAC;IACF3H,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACoF,YAAY,CAAC,IAAI,CAAC9D,EAAE,EAAE+C,KAAK,EAAEC,cAAc,CAAC;IACnDtE,MAAM,CAACoB,YAAY,CAAC,CAAC;EACzB;AACJ;AACA,OAAO,MAAM4G,mBAAmB,SAASX,iCAAiC,CAAC;EACvE1H,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,eAAe;MACnBE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,qBAAqB,EAAE,iBAAiB,CAAC;MAC7DC,KAAK,EAAE,iBAAiB;MACxBC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4G,cAAc;QACxC/D,OAAO,EAAE,CAAC;QACViG,GAAG,EAAE;UAAEjG,OAAO,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAAwB,CAAC;QACvEE,MAAM,EAAE,GAAG,CAAC;MAChB;IACJ,CAAC,CAAC;EACN;EACA6F,kBAAkBA,CAACT,aAAa,EAAEC,cAAc,EAAE;IAC9C,IAAIW,gBAAgB,GAAG,IAAI;IAC3B,MAAM5D,cAAc,GAAG,EAAE;IACzB,IAAI6D,YAAY,GAAG,CAAC;IACpBZ,cAAc,CAACa,OAAO,CAACT,KAAK,IAAI;MAC5B,IAAIU,SAAS;MACb,IAAIV,KAAK,CAACxE,SAAS,KAAK,CAAC,IAAIgF,YAAY,GAAG,CAAC,EAAE;QAC3C,MAAMG,YAAY,GAAGX,KAAK,CAAC1G,eAAe,GAAGkH,YAAY;QACzDE,SAAS,GAAG,IAAInJ,SAAS,CAACoJ,YAAY,EAAEX,KAAK,CAACvB,WAAW,EAAEkC,YAAY,EAAEX,KAAK,CAACvB,WAAW,CAAC;MAC/F,CAAC,MACI;QACDiC,SAAS,GAAG,IAAInJ,SAAS,CAACyI,KAAK,CAAC1G,eAAe,EAAE0G,KAAK,CAACvB,WAAW,EAAEuB,KAAK,CAAC1G,eAAe,EAAE0G,KAAK,CAACvB,WAAW,CAAC;MACjH;MACA+B,YAAY,IAAIR,KAAK,CAAC3G,aAAa,GAAG2G,KAAK,CAAC1G,eAAe;MAC3D,IAAI0G,KAAK,CAACE,eAAe,CAACP,aAAa,CAAC,EAAE;QACtCY,gBAAgB,GAAGG,SAAS;MAChC,CAAC,MACI;QACD/D,cAAc,CAACnD,IAAI,CAACkH,SAAS,CAAC;MAClC;IACJ,CAAC,CAAC;IACF,IAAIH,gBAAgB,EAAE;MAClB5D,cAAc,CAACiE,OAAO,CAACL,gBAAgB,CAAC;IAC5C;IACA,OAAO5D,cAAc;EACzB;EACAkD,kBAAkBA,CAACxH,MAAM,EAAE;IACvB,MAAME,UAAU,GAAGF,MAAM,CAACG,aAAa,CAAC,CAAC;IACzC,IAAID,UAAU,KAAK,IAAI,EAAE;MACrB,OAAO,EAAE;IACb;IACA,IAAIqH,cAAc,GAAGrH,UAAU;IAC/B,MAAM6C,KAAK,GAAG/C,MAAM,CAACgD,QAAQ,CAAC,CAAC;IAC/B,IAAID,KAAK,KAAK,IAAI,EAAE;MAChB,OAAO,EAAE;IACb;IACAwE,cAAc,CAAC/G,IAAI,CAACvB,KAAK,CAAC0B,wBAAwB,CAAC;IACnD4G,cAAc,GAAGA,cAAc,CAACnH,GAAG,CAACC,SAAS,IAAI;MAC7C,IAAIA,SAAS,CAAC4C,OAAO,CAAC,CAAC,EAAE;QACrB,IAAI5C,SAAS,CAAC+F,WAAW,KAAK,CAAC,EAAE;UAC7B,MAAMoC,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAErI,SAAS,CAACY,eAAe,GAAG,CAAC,CAAC;UACjE,MAAM0H,gBAAgB,GAAGtI,SAAS,CAACY,eAAe,KAAK,CAAC,GAAG,CAAC,GAAG8B,KAAK,CAAC6F,aAAa,CAACJ,cAAc,CAAC,GAAG,CAAC;UACtG,OAAO,IAAIvJ,KAAK,CAACuJ,cAAc,EAAEG,gBAAgB,EAAEtI,SAAS,CAACY,eAAe,EAAE,CAAC,CAAC;QACpF,CAAC,MACI;UACD,OAAO,IAAIhC,KAAK,CAACoB,SAAS,CAACY,eAAe,EAAE,CAAC,EAAEZ,SAAS,CAACY,eAAe,EAAEZ,SAAS,CAAC+F,WAAW,CAAC;QACpG;MACJ,CAAC,MACI;QACD,OAAO,IAAInH,KAAK,CAACoB,SAAS,CAACY,eAAe,EAAE,CAAC,EAAEZ,SAAS,CAACW,aAAa,EAAEX,SAAS,CAAC8C,SAAS,CAAC;MAChG;IACJ,CAAC,CAAC;IACF,OAAOoE,cAAc;EACzB;AACJ;AACA,OAAO,MAAMsB,oBAAoB,SAASxB,iCAAiC,CAAC;EACxE1H,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,gBAAgB;MACpBE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,sBAAsB,EAAE,kBAAkB,CAAC;MAC/DC,KAAK,EAAE,kBAAkB;MACzBC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4G,cAAc;QACxC/D,OAAO,EAAE,CAAC;QACViG,GAAG,EAAE;UAAEjG,OAAO,EAAE,GAAG,CAAC,uBAAuB,EAAE,CAAC;UAAoB8G,SAAS,EAAE,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAAsB,CAAC;QACpI5G,MAAM,EAAE,GAAG,CAAC;MAChB;IACJ,CAAC,CAAC;EACN;EACA6F,kBAAkBA,CAACT,aAAa,EAAEC,cAAc,EAAE;IAC9C,IAAIW,gBAAgB,GAAG,IAAI;IAC3B,MAAM5D,cAAc,GAAG,EAAE;IACzB,KAAK,IAAIzD,CAAC,GAAG,CAAC,EAAEkD,GAAG,GAAGwD,cAAc,CAACzG,MAAM,EAAEiI,MAAM,GAAG,CAAC,EAAElI,CAAC,GAAGkD,GAAG,EAAElD,CAAC,EAAE,EAAE;MACnE,MAAM8G,KAAK,GAAGJ,cAAc,CAAC1G,CAAC,CAAC;MAC/B,MAAMwH,SAAS,GAAG,IAAInJ,SAAS,CAACyI,KAAK,CAAC1G,eAAe,GAAG8H,MAAM,EAAEpB,KAAK,CAACvB,WAAW,EAAEuB,KAAK,CAAC1G,eAAe,GAAG8H,MAAM,EAAEpB,KAAK,CAACvB,WAAW,CAAC;MACrI,IAAIuB,KAAK,CAACE,eAAe,CAACP,aAAa,CAAC,EAAE;QACtCY,gBAAgB,GAAGG,SAAS;MAChC,CAAC,MACI;QACD/D,cAAc,CAACnD,IAAI,CAACkH,SAAS,CAAC;MAClC;IACJ;IACA,IAAIH,gBAAgB,EAAE;MAClB5D,cAAc,CAACiE,OAAO,CAACL,gBAAgB,CAAC;IAC5C;IACA,OAAO5D,cAAc;EACzB;EACAkD,kBAAkBA,CAACxH,MAAM,EAAE;IACvB,MAAM+C,KAAK,GAAG/C,MAAM,CAACgD,QAAQ,CAAC,CAAC;IAC/B,IAAID,KAAK,KAAK,IAAI,EAAE;MAChB,OAAO,EAAE;IACb;IACA,MAAM7C,UAAU,GAAGF,MAAM,CAACG,aAAa,CAAC,CAAC;IACzC,IAAID,UAAU,KAAK,IAAI,EAAE;MACrB,OAAO,EAAE;IACb;IACA,MAAMqH,cAAc,GAAGrH,UAAU,CAACE,GAAG,CAAE4I,GAAG,IAAK;MAC3C,IAAIA,GAAG,CAAC/F,OAAO,CAAC,CAAC,EAAE;QACf,MAAMgG,SAAS,GAAGlG,KAAK,CAACqB,gBAAgB,CAAC4E,GAAG,CAAC/H,eAAe,CAAC;QAC7D,IAAI+H,GAAG,CAAC5C,WAAW,KAAK6C,SAAS,EAAE;UAC/B,OAAO,IAAIhK,KAAK,CAAC+J,GAAG,CAAC/H,eAAe,EAAE+H,GAAG,CAAC5C,WAAW,EAAE4C,GAAG,CAAC/H,eAAe,GAAG,CAAC,EAAE,CAAC,CAAC;QACtF,CAAC,MACI;UACD,OAAO,IAAIhC,KAAK,CAAC+J,GAAG,CAAC/H,eAAe,EAAE+H,GAAG,CAAC5C,WAAW,EAAE4C,GAAG,CAAC/H,eAAe,EAAEgI,SAAS,CAAC;QAC1F;MACJ;MACA,OAAOD,GAAG;IACd,CAAC,CAAC;IACFzB,cAAc,CAAC/G,IAAI,CAACvB,KAAK,CAAC0B,wBAAwB,CAAC;IACnD,OAAO4G,cAAc;EACzB;AACJ;AACA,OAAO,MAAM2B,eAAe,SAAS1K,YAAY,CAAC;EAC9CmB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,yBAAyB;MAC7BE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,iBAAiB,EAAE,YAAY,CAAC;MACpDC,KAAK,EAAE,YAAY;MACnBC,YAAY,EAAExC,iBAAiB,CAACyC,QAAQ;MACxCC,MAAM,EAAE;QACJC,MAAM,EAAE3C,iBAAiB,CAAC4C,eAAe;QACzCC,OAAO,EAAE,CAAC;QACViG,GAAG,EAAE;UAAEjG,OAAO,EAAE,GAAG,CAAC,uBAAuB,EAAE,CAAC;QAAmB,CAAC;QAClEE,MAAM,EAAE,GAAG,CAAC;MAChB;IACJ,CAAC,CAAC;EACN;EACApC,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACnB,MAAME,UAAU,GAAGF,MAAM,CAACG,aAAa,CAAC,CAAC;IACzC,IAAID,UAAU,KAAK,IAAI,EAAE;MACrB;IACJ;IACA,IAAIoH,aAAa,GAAGtH,MAAM,CAAC4F,YAAY,CAAC,CAAC;IACzC,IAAI0B,aAAa,KAAK,IAAI,EAAE;MACxB;IACJ;IACApH,UAAU,CAACM,IAAI,CAACvB,KAAK,CAAC0B,wBAAwB,CAAC;IAC/C,MAAMwI,iBAAiB,GAAG,EAAE;IAC5B,MAAMC,aAAa,GAAGlJ,UAAU,CAACmJ,MAAM,CAAC,CAACC,aAAa,EAAEC,YAAY,KAAK;MACrE,IAAID,aAAa,CAACrG,OAAO,CAAC,CAAC,EAAE;QACzB,IAAIqG,aAAa,CAACtI,aAAa,KAAKuI,YAAY,CAACtI,eAAe,EAAE;UAC9D,IAAIqG,aAAa,CAACkC,eAAe,CAACF,aAAa,CAAC,EAAE;YAC9ChC,aAAa,GAAGiC,YAAY;UAChC;UACA,OAAOA,YAAY;QACvB;QACA,IAAIA,YAAY,CAACtI,eAAe,GAAGqI,aAAa,CAACtI,aAAa,GAAG,CAAC,EAAE;UAChEmI,iBAAiB,CAAChI,IAAI,CAACmI,aAAa,CAAC;UACrC,OAAOC,YAAY;QACvB,CAAC,MACI;UACD,OAAO,IAAIrK,SAAS,CAACoK,aAAa,CAACrI,eAAe,EAAEqI,aAAa,CAAClD,WAAW,EAAEmD,YAAY,CAACvI,aAAa,EAAEuI,YAAY,CAACpG,SAAS,CAAC;QACtI;MACJ,CAAC,MACI;QACD,IAAIoG,YAAY,CAACtI,eAAe,GAAGqI,aAAa,CAACtI,aAAa,EAAE;UAC5DmI,iBAAiB,CAAChI,IAAI,CAACmI,aAAa,CAAC;UACrC,OAAOC,YAAY;QACvB,CAAC,MACI;UACD,OAAO,IAAIrK,SAAS,CAACoK,aAAa,CAACrI,eAAe,EAAEqI,aAAa,CAAClD,WAAW,EAAEmD,YAAY,CAACvI,aAAa,EAAEuI,YAAY,CAACpG,SAAS,CAAC;QACtI;MACJ;IACJ,CAAC,CAAC;IACFgG,iBAAiB,CAAChI,IAAI,CAACiI,aAAa,CAAC;IACrC,MAAMrG,KAAK,GAAG/C,MAAM,CAACgD,QAAQ,CAAC,CAAC;IAC/B,IAAID,KAAK,KAAK,IAAI,EAAE;MAChB;IACJ;IACA,MAAMsB,KAAK,GAAG,EAAE;IAChB,MAAMC,cAAc,GAAG,EAAE;IACzB,IAAI4D,gBAAgB,GAAGZ,aAAa;IACpC,IAAImC,UAAU,GAAG,CAAC;IAClB,KAAK,IAAI5I,CAAC,GAAG,CAAC,EAAEkD,GAAG,GAAGoF,iBAAiB,CAACrI,MAAM,EAAED,CAAC,GAAGkD,GAAG,EAAElD,CAAC,EAAE,EAAE;MAC1D,MAAMR,SAAS,GAAG8I,iBAAiB,CAACtI,CAAC,CAAC;MACtC,MAAMI,eAAe,GAAGZ,SAAS,CAACY,eAAe;MACjD,MAAMmF,WAAW,GAAG,CAAC;MACrB,IAAIsD,iBAAiB,GAAG,CAAC;MACzB,IAAI1I,aAAa,EAAEmC,SAAS;MAC5B,MAAMwG,0BAA0B,GAAG5G,KAAK,CAAC6F,aAAa,CAACvI,SAAS,CAACW,aAAa,CAAC,GAAGX,SAAS,CAAC8C,SAAS;MACrG,IAAI9C,SAAS,CAAC4C,OAAO,CAAC,CAAC,IAAI5C,SAAS,CAACY,eAAe,KAAKZ,SAAS,CAACW,aAAa,EAAE;QAC9E,MAAM4I,QAAQ,GAAGvJ,SAAS,CAACwJ,gBAAgB,CAAC,CAAC;QAC7C,IAAID,QAAQ,CAACE,UAAU,GAAG/G,KAAK,CAACoB,YAAY,CAAC,CAAC,EAAE;UAC5CnD,aAAa,GAAGC,eAAe,GAAG,CAAC;UACnCkC,SAAS,GAAGJ,KAAK,CAACqB,gBAAgB,CAACpD,aAAa,CAAC;QACrD,CAAC,MACI;UACDA,aAAa,GAAG4I,QAAQ,CAACE,UAAU;UACnC3G,SAAS,GAAGJ,KAAK,CAACqB,gBAAgB,CAACwF,QAAQ,CAACE,UAAU,CAAC;QAC3D;MACJ,CAAC,MACI;QACD9I,aAAa,GAAGX,SAAS,CAACW,aAAa;QACvCmC,SAAS,GAAGJ,KAAK,CAACqB,gBAAgB,CAACpD,aAAa,CAAC;MACrD;MACA,IAAI+I,mBAAmB,GAAGhH,KAAK,CAAC6B,cAAc,CAAC3D,eAAe,CAAC;MAC/D,KAAK,IAAIJ,CAAC,GAAGI,eAAe,GAAG,CAAC,EAAEJ,CAAC,IAAIG,aAAa,EAAEH,CAAC,EAAE,EAAE;QACvD,MAAMmJ,QAAQ,GAAGjH,KAAK,CAAC6B,cAAc,CAAC/D,CAAC,CAAC;QACxC,MAAMoJ,qBAAqB,GAAGlH,KAAK,CAACmH,+BAA+B,CAACrJ,CAAC,CAAC;QACtE,IAAIoJ,qBAAqB,IAAI,CAAC,EAAE;UAC5B,IAAIE,WAAW,GAAG,IAAI;UACtB,IAAIJ,mBAAmB,KAAK,EAAE,EAAE;YAC5BI,WAAW,GAAG,KAAK;UACvB;UACA,IAAIA,WAAW,KAAKJ,mBAAmB,CAACK,MAAM,CAACL,mBAAmB,CAACjJ,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,IAClFiJ,mBAAmB,CAACK,MAAM,CAACL,mBAAmB,CAACjJ,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,EAAE;YACtEqJ,WAAW,GAAG,KAAK;YACnBJ,mBAAmB,GAAGA,mBAAmB,CAAC7E,OAAO,CAAC,mBAAmB,EAAE,GAAG,CAAC;UAC/E;UACA,MAAMmF,qBAAqB,GAAGL,QAAQ,CAACM,MAAM,CAACL,qBAAqB,GAAG,CAAC,CAAC;UACxEF,mBAAmB,IAAI,CAACI,WAAW,GAAG,GAAG,GAAG,EAAE,IAAIE,qBAAqB;UACvE,IAAIF,WAAW,EAAE;YACbT,iBAAiB,GAAGW,qBAAqB,CAACvJ,MAAM,GAAG,CAAC;UACxD,CAAC,MACI;YACD4I,iBAAiB,GAAGW,qBAAqB,CAACvJ,MAAM;UACpD;QACJ,CAAC,MACI;UACD4I,iBAAiB,GAAG,CAAC;QACzB;MACJ;MACA,MAAMa,eAAe,GAAG,IAAItL,KAAK,CAACgC,eAAe,EAAEmF,WAAW,EAAEpF,aAAa,EAAEmC,SAAS,CAAC;MACzF,IAAI,CAACoH,eAAe,CAACtH,OAAO,CAAC,CAAC,EAAE;QAC5B,IAAIuH,eAAe;QACnB,IAAInK,SAAS,CAAC4C,OAAO,CAAC,CAAC,EAAE;UACrBoB,KAAK,CAAClD,IAAI,CAACpC,aAAa,CAACmG,OAAO,CAACqF,eAAe,EAAER,mBAAmB,CAAC,CAAC;UACvES,eAAe,GAAG,IAAItL,SAAS,CAACqL,eAAe,CAACtJ,eAAe,GAAGwI,UAAU,EAAEM,mBAAmB,CAACjJ,MAAM,GAAG4I,iBAAiB,GAAG,CAAC,EAAEzI,eAAe,GAAGwI,UAAU,EAAEM,mBAAmB,CAACjJ,MAAM,GAAG4I,iBAAiB,GAAG,CAAC,CAAC;QACvN,CAAC,MACI;UACD,IAAIrJ,SAAS,CAACY,eAAe,KAAKZ,SAAS,CAACW,aAAa,EAAE;YACvDqD,KAAK,CAAClD,IAAI,CAACpC,aAAa,CAACmG,OAAO,CAACqF,eAAe,EAAER,mBAAmB,CAAC,CAAC;YACvES,eAAe,GAAG,IAAItL,SAAS,CAACmB,SAAS,CAACY,eAAe,GAAGwI,UAAU,EAAEpJ,SAAS,CAAC+F,WAAW,EAAE/F,SAAS,CAACW,aAAa,GAAGyI,UAAU,EAAEpJ,SAAS,CAAC8C,SAAS,CAAC;UAC7J,CAAC,MACI;YACDkB,KAAK,CAAClD,IAAI,CAACpC,aAAa,CAACmG,OAAO,CAACqF,eAAe,EAAER,mBAAmB,CAAC,CAAC;YACvES,eAAe,GAAG,IAAItL,SAAS,CAACmB,SAAS,CAACY,eAAe,GAAGwI,UAAU,EAAEpJ,SAAS,CAAC+F,WAAW,EAAE/F,SAAS,CAACY,eAAe,GAAGwI,UAAU,EAAEM,mBAAmB,CAACjJ,MAAM,GAAG6I,0BAA0B,CAAC;UACnM;QACJ;QACA,IAAI1K,KAAK,CAAC4I,eAAe,CAAC0C,eAAe,EAAEjD,aAAa,CAAC,KAAK,IAAI,EAAE;UAChEY,gBAAgB,GAAGsC,eAAe;QACtC,CAAC,MACI;UACDlG,cAAc,CAACnD,IAAI,CAACqJ,eAAe,CAAC;QACxC;MACJ;MACAf,UAAU,IAAIc,eAAe,CAACvJ,aAAa,GAAGuJ,eAAe,CAACtJ,eAAe;IACjF;IACAqD,cAAc,CAACiE,OAAO,CAACL,gBAAgB,CAAC;IACxClI,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACoF,YAAY,CAAC,IAAI,CAAC9D,EAAE,EAAE+C,KAAK,EAAEC,cAAc,CAAC;IACnDtE,MAAM,CAACoB,YAAY,CAAC,CAAC;EACzB;AACJ;AACA,OAAO,MAAMqJ,eAAe,SAASjM,YAAY,CAAC;EAC9CmB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,yBAAyB;MAC7BE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,kBAAkB,EAAE,wCAAwC,CAAC;MACjFC,KAAK,EAAE,wCAAwC;MAC/CC,YAAY,EAAExC,iBAAiB,CAACyC;IACpC,CAAC,CAAC;EACN;EACA9B,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACnB,MAAME,UAAU,GAAGF,MAAM,CAACG,aAAa,CAAC,CAAC;IACzC,IAAID,UAAU,KAAK,IAAI,EAAE;MACrB;IACJ;IACA,MAAM6C,KAAK,GAAG/C,MAAM,CAACgD,QAAQ,CAAC,CAAC;IAC/B,IAAID,KAAK,KAAK,IAAI,EAAE;MAChB;IACJ;IACA,MAAM7B,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEkD,GAAG,GAAG7D,UAAU,CAACY,MAAM,EAAED,CAAC,GAAGkD,GAAG,EAAElD,CAAC,EAAE,EAAE;MACnD,MAAMR,SAAS,GAAGH,UAAU,CAACW,CAAC,CAAC;MAC/B,IAAI,CAACR,SAAS,CAAC4C,OAAO,CAAC,CAAC,EAAE;QACtB;MACJ;MACA,MAAMyH,MAAM,GAAGrK,SAAS,CAACwJ,gBAAgB,CAAC,CAAC;MAC3C,MAAMZ,SAAS,GAAGlG,KAAK,CAACqB,gBAAgB,CAACsG,MAAM,CAACZ,UAAU,CAAC;MAC3D,IAAIY,MAAM,CAACC,MAAM,IAAI1B,SAAS,EAAE;QAC5B,IAAIyB,MAAM,CAACZ,UAAU,KAAK/G,KAAK,CAACoB,YAAY,CAAC,CAAC,EAAE;UAC5C;QACJ;QACA;QACA;QACA,MAAMoG,eAAe,GAAG,IAAItL,KAAK,CAACyL,MAAM,CAACZ,UAAU,EAAErB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEgC,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,EAAED,MAAM,CAACZ,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC;QAC9G,MAAMc,KAAK,GAAG7H,KAAK,CAACK,eAAe,CAACmH,eAAe,CAAC,CAACM,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC3F,IAAI,CAAC,EAAE,CAAC;QACjFjE,QAAQ,CAACC,IAAI,CAAC,IAAIzC,cAAc,CAAC,IAAIQ,SAAS,CAACwL,MAAM,CAACZ,UAAU,EAAErB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEgC,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,EAAED,MAAM,CAACZ,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC,EAAEc,KAAK,CAAC,CAAC;MACxI,CAAC,MACI;QACD,MAAML,eAAe,GAAG,IAAItL,KAAK,CAACyL,MAAM,CAACZ,UAAU,EAAErB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEgC,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,EAAED,MAAM,CAACZ,UAAU,EAAEY,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC;QAC1H,MAAMC,KAAK,GAAG7H,KAAK,CAACK,eAAe,CAACmH,eAAe,CAAC,CAACM,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC3F,IAAI,CAAC,EAAE,CAAC;QACjFjE,QAAQ,CAACC,IAAI,CAAC,IAAIxC,oCAAoC,CAAC4L,eAAe,EAAEK,KAAK,EAAE,IAAI1L,SAAS,CAACwL,MAAM,CAACZ,UAAU,EAAEY,MAAM,CAACC,MAAM,GAAG,CAAC,EAAED,MAAM,CAACZ,UAAU,EAAEY,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;MAC9K;IACJ;IACA3K,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACqB,eAAe,CAAC,IAAI,CAACC,EAAE,EAAEJ,QAAQ,CAAC;IACzClB,MAAM,CAACoB,YAAY,CAAC,CAAC;EACzB;AACJ;AACA,OAAO,MAAM2J,kBAAkB,SAASvM,YAAY,CAAC;EACjDsB,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACnB,MAAME,UAAU,GAAGF,MAAM,CAACG,aAAa,CAAC,CAAC;IACzC,IAAID,UAAU,KAAK,IAAI,EAAE;MACrB;IACJ;IACA,MAAM6C,KAAK,GAAG/C,MAAM,CAACgD,QAAQ,CAAC,CAAC;IAC/B,IAAID,KAAK,KAAK,IAAI,EAAE;MAChB;IACJ;IACA,MAAMiI,cAAc,GAAGhL,MAAM,CAACyD,SAAS,CAAC,GAAG,CAAC,iCAAiC,CAAC;IAC9E,MAAMwH,SAAS,GAAG,EAAE;IACpB,KAAK,MAAM5K,SAAS,IAAIH,UAAU,EAAE;MAChC,IAAIG,SAAS,CAAC4C,OAAO,CAAC,CAAC,EAAE;QACrB,MAAMyH,MAAM,GAAGrK,SAAS,CAACwJ,gBAAgB,CAAC,CAAC;QAC3C,MAAMqB,IAAI,GAAGlL,MAAM,CAACmL,2BAA2B,CAACT,MAAM,CAAC;QACvD,IAAI,CAACQ,IAAI,EAAE;UACP;QACJ;QACA,MAAME,SAAS,GAAG,IAAInM,KAAK,CAACyL,MAAM,CAACZ,UAAU,EAAEoB,IAAI,CAAC9E,WAAW,EAAEsE,MAAM,CAACZ,UAAU,EAAEoB,IAAI,CAAC/H,SAAS,CAAC;QACnG,MAAMkI,IAAI,GAAGtI,KAAK,CAACK,eAAe,CAACgI,SAAS,CAAC;QAC7CH,SAAS,CAAC9J,IAAI,CAACpC,aAAa,CAACmG,OAAO,CAACkG,SAAS,EAAE,IAAI,CAACE,WAAW,CAACD,IAAI,EAAEL,cAAc,CAAC,CAAC,CAAC;MAC5F,CAAC,MACI;QACD,MAAMK,IAAI,GAAGtI,KAAK,CAACK,eAAe,CAAC/C,SAAS,CAAC;QAC7C4K,SAAS,CAAC9J,IAAI,CAACpC,aAAa,CAACmG,OAAO,CAAC7E,SAAS,EAAE,IAAI,CAACiL,WAAW,CAACD,IAAI,EAAEL,cAAc,CAAC,CAAC,CAAC;MAC5F;IACJ;IACAhL,MAAM,CAACoB,YAAY,CAAC,CAAC;IACrBpB,MAAM,CAACoF,YAAY,CAAC,IAAI,CAAC9D,EAAE,EAAE2J,SAAS,CAAC;IACvCjL,MAAM,CAACoB,YAAY,CAAC,CAAC;EACzB;AACJ;AACA,OAAO,MAAMmK,eAAe,SAASR,kBAAkB,CAAC;EACpDpL,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,oCAAoC;MACxCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,6BAA6B,EAAE,wBAAwB,CAAC;MAC5EC,KAAK,EAAE,wBAAwB;MAC/BC,YAAY,EAAExC,iBAAiB,CAACyC;IACpC,CAAC,CAAC;EACN;EACA0J,WAAWA,CAACD,IAAI,EAAEL,cAAc,EAAE;IAC9B,OAAOK,IAAI,CAACG,iBAAiB,CAAC,CAAC;EACnC;AACJ;AACA,OAAO,MAAMC,eAAe,SAASV,kBAAkB,CAAC;EACpDpL,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,oCAAoC;MACxCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,6BAA6B,EAAE,wBAAwB,CAAC;MAC5EC,KAAK,EAAE,wBAAwB;MAC/BC,YAAY,EAAExC,iBAAiB,CAACyC;IACpC,CAAC,CAAC;EACN;EACA0J,WAAWA,CAACD,IAAI,EAAEL,cAAc,EAAE;IAC9B,OAAOK,IAAI,CAACK,iBAAiB,CAAC,CAAC;EACnC;AACJ;AACA,MAAMC,yBAAyB,CAAC;EAC5BhM,WAAWA,CAACiM,QAAQ,EAAEC,MAAM,EAAE;IAC1B,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,UAAU,GAAG,KAAK;EAC3B;EACAxI,GAAGA,CAAA,EAAG;IACF,IAAI,CAAC,IAAI,CAACwI,UAAU,EAAE;MAClB,IAAI,CAACA,UAAU,GAAG,IAAI;MACtB,IAAI;QACA,IAAI,CAACD,OAAO,GAAG,IAAIE,MAAM,CAAC,IAAI,CAACJ,QAAQ,EAAE,IAAI,CAACC,MAAM,CAAC;MACzD,CAAC,CACD,OAAOI,GAAG,EAAE;QACR;MAAA;IAER;IACA,OAAO,IAAI,CAACH,OAAO;EACvB;EACAI,WAAWA,CAAA,EAAG;IACV,OAAQ,IAAI,CAAC3I,GAAG,CAAC,CAAC,KAAK,IAAI;EAC/B;AACJ;AACA,OAAO,MAAM4I,eAAe,SAASpB,kBAAkB,CAAC;EACpDpL,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,oCAAoC;MACxCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,6BAA6B,EAAE,yBAAyB,CAAC;MAC7EC,KAAK,EAAE,yBAAyB;MAChCC,YAAY,EAAExC,iBAAiB,CAACyC;IACpC,CAAC,CAAC;EACN;EACA0J,WAAWA,CAACD,IAAI,EAAEL,cAAc,EAAE;IAC9B,MAAMoB,aAAa,GAAGD,eAAe,CAACC,aAAa,CAAC7I,GAAG,CAAC,CAAC;IACzD,IAAI,CAAC6I,aAAa,EAAE;MAChB;MACA,OAAOf,IAAI;IACf;IACA,OAAOA,IAAI,CACNK,iBAAiB,CAAC,CAAC,CACnBxG,OAAO,CAACkH,aAAa,EAAG1L,CAAC,IAAKA,CAAC,CAAC8K,iBAAiB,CAAC,CAAC,CAAC;EAC7D;AACJ;AACAW,eAAe,CAACC,aAAa,GAAG,IAAIT,yBAAyB,CAAC,4CAA4C,EAAE,KAAK,CAAC;AAClH,OAAO,MAAMU,eAAe,SAAStB,kBAAkB,CAAC;EACpDpL,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,oCAAoC;MACxCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,6BAA6B,EAAE,yBAAyB,CAAC;MAC7EC,KAAK,EAAE,yBAAyB;MAChCC,YAAY,EAAExC,iBAAiB,CAACyC;IACpC,CAAC,CAAC;EACN;EACA0J,WAAWA,CAACD,IAAI,EAAEL,cAAc,EAAE;IAC9B,MAAMsB,YAAY,GAAGD,eAAe,CAACC,YAAY,CAAC/I,GAAG,CAAC,CAAC;IACvD,MAAMgJ,aAAa,GAAGF,eAAe,CAACE,aAAa,CAAChJ,GAAG,CAAC,CAAC;IACzD,IAAI,CAAC+I,YAAY,IAAI,CAACC,aAAa,EAAE;MACjC;MACA,OAAOlB,IAAI;IACf;IACA,OAAQA,IAAI,CACPnG,OAAO,CAACoH,YAAY,EAAE,OAAO,CAAC,CAC9BpH,OAAO,CAACqH,aAAa,EAAE,SAAS,CAAC,CACjCb,iBAAiB,CAAC,CAAC;EAC5B;AACJ;AACAW,eAAe,CAACC,YAAY,GAAG,IAAIX,yBAAyB,CAAC,oBAAoB,EAAE,KAAK,CAAC;AACzFU,eAAe,CAACE,aAAa,GAAG,IAAIZ,yBAAyB,CAAC,oCAAoC,EAAE,KAAK,CAAC;AAC1G,OAAO,MAAMa,eAAe,SAASzB,kBAAkB,CAAC;EACpDpL,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,oCAAoC;MACxCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,6BAA6B,EAAE,yBAAyB,CAAC;MAC7EC,KAAK,EAAE,yBAAyB;MAChCC,YAAY,EAAExC,iBAAiB,CAACyC;IACpC,CAAC,CAAC;EACN;EACA0J,WAAWA,CAACD,IAAI,EAAEL,cAAc,EAAE;IAC9B,MAAMyB,YAAY,GAAGD,eAAe,CAACC,YAAY,CAAClJ,GAAG,CAAC,CAAC;IACvD,IAAI,CAACkJ,YAAY,EAAE;MACf;MACA,OAAOpB,IAAI;IACf;IACA,MAAMqB,KAAK,GAAGrB,IAAI,CAACR,KAAK,CAAC4B,YAAY,CAAC;IACtC,MAAME,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,CAAC;IAC/B,OAAOD,SAAS,GAAGD,KAAK,CAACtM,GAAG,CAAE8K,IAAI,IAAKA,IAAI,CAAC2B,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAACrB,iBAAiB,CAAC,CAAC,GAAGN,IAAI,CAAC2B,SAAS,CAAC,CAAC,CAAC,CAAC,CAC/F1H,IAAI,CAAC,EAAE,CAAC;EACjB;AACJ;AACAqH,eAAe,CAACC,YAAY,GAAG,IAAId,yBAAyB,CAAC,SAAS,EAAE,IAAI,CAAC;AAC7E,OAAO,MAAMmB,eAAe,SAAS/B,kBAAkB,CAAC;EACpD,OAAOmB,WAAWA,CAAA,EAAG;IACjB,MAAMa,sBAAsB,GAAG,CAC3B,IAAI,CAACT,YAAY,EACjB,IAAI,CAACC,aAAa,EAClB,IAAI,CAACS,kBAAkB,CAC1B,CAACC,KAAK,CAAEC,MAAM,IAAKA,MAAM,CAAChB,WAAW,CAAC,CAAC,CAAC;IACzC,OAAOa,sBAAsB;EACjC;EACApN,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF2B,EAAE,EAAE,oCAAoC;MACxCE,KAAK,EAAEjC,GAAG,CAACkC,QAAQ,CAAC,6BAA6B,EAAE,yBAAyB,CAAC;MAC7EC,KAAK,EAAE,yBAAyB;MAChCC,YAAY,EAAExC,iBAAiB,CAACyC;IACpC,CAAC,CAAC;EACN;EACA0J,WAAWA,CAACD,IAAI,EAAE8B,CAAC,EAAE;IACjB,MAAMb,YAAY,GAAGQ,eAAe,CAACR,YAAY,CAAC/I,GAAG,CAAC,CAAC;IACvD,MAAMgJ,aAAa,GAAGO,eAAe,CAACP,aAAa,CAAChJ,GAAG,CAAC,CAAC;IACzD,MAAMyJ,kBAAkB,GAAGF,eAAe,CAACE,kBAAkB,CAACzJ,GAAG,CAAC,CAAC;IACnE,IAAI,CAAC+I,YAAY,IAAI,CAACC,aAAa,IAAI,CAACS,kBAAkB,EAAE;MACxD;MACA,OAAO3B,IAAI;IACf;IACA,OAAOA,IAAI,CACNnG,OAAO,CAAC8H,kBAAkB,EAAE,OAAO,CAAC,CACpC9H,OAAO,CAACoH,YAAY,EAAE,OAAO,CAAC,CAC9BpH,OAAO,CAACqH,aAAa,EAAE,OAAO,CAAC,CAC/Bb,iBAAiB,CAAC,CAAC;EAC5B;AACJ;AACAoB,eAAe,CAACR,YAAY,GAAG,IAAIX,yBAAyB,CAAC,oBAAoB,EAAE,KAAK,CAAC;AACzFmB,eAAe,CAACP,aAAa,GAAG,IAAIZ,yBAAyB,CAAC,kCAAkC,EAAE,KAAK,CAAC;AACxGmB,eAAe,CAACE,kBAAkB,GAAG,IAAIrB,yBAAyB,CAAC,eAAe,EAAE,IAAI,CAAC;AACzFlN,oBAAoB,CAAC8C,iBAAiB,CAAC;AACvC9C,oBAAoB,CAACkE,mBAAmB,CAAC;AACzClE,oBAAoB,CAACmE,wBAAwB,CAAC;AAC9CnE,oBAAoB,CAACiF,iBAAiB,CAAC;AACvCjF,oBAAoB,CAACkF,mBAAmB,CAAC;AACzClF,oBAAoB,CAACuF,wBAAwB,CAAC;AAC9CvF,oBAAoB,CAACwF,yBAAyB,CAAC;AAC/CxF,oBAAoB,CAACyF,0BAA0B,CAAC;AAChDzF,oBAAoB,CAAC4G,4BAA4B,CAAC;AAClD5G,oBAAoB,CAACqH,iBAAiB,CAAC;AACvCrH,oBAAoB,CAACgI,iBAAiB,CAAC;AACvChI,oBAAoB,CAACqI,kBAAkB,CAAC;AACxCrI,oBAAoB,CAACwI,sBAAsB,CAAC;AAC5CxI,oBAAoB,CAAC0I,qBAAqB,CAAC;AAC3C1I,oBAAoB,CAACuJ,mBAAmB,CAAC;AACzCvJ,oBAAoB,CAACoK,oBAAoB,CAAC;AAC1CpK,oBAAoB,CAACyK,eAAe,CAAC;AACrCzK,oBAAoB,CAACgM,eAAe,CAAC;AACrChM,oBAAoB,CAAC8M,eAAe,CAAC;AACrC9M,oBAAoB,CAACgN,eAAe,CAAC;AACrC,IAAIY,eAAe,CAACC,YAAY,CAACJ,WAAW,CAAC,CAAC,IAAIG,eAAe,CAACE,aAAa,CAACL,WAAW,CAAC,CAAC,EAAE;EAC3FzN,oBAAoB,CAAC4N,eAAe,CAAC;AACzC;AACA,IAAIG,eAAe,CAACC,YAAY,CAACP,WAAW,CAAC,CAAC,EAAE;EAC5CzN,oBAAoB,CAAC+N,eAAe,CAAC;AACzC;AACA,IAAIL,eAAe,CAACC,aAAa,CAACF,WAAW,CAAC,CAAC,EAAE;EAC7CzN,oBAAoB,CAAC0N,eAAe,CAAC;AACzC;AACA,IAAIW,eAAe,CAACZ,WAAW,CAAC,CAAC,EAAE;EAC/BzN,oBAAoB,CAACqO,eAAe,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}