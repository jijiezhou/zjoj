{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\nregisterEditorCommand(new class extends EditorCommand {\n  constructor() {\n    super({\n      id: changePasteTypeCommandId,\n      precondition: pasteWidgetVisibleCtx,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */\n      }\n    });\n  }\n  runEditorCommand(_accessor, editor, _args) {\n    var _a;\n    return (_a = CopyPasteController.get(editor)) === null || _a === void 0 ? void 0 : _a.changePasteType();\n  }\n}());\nregisterEditorAction(class extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.pasteAs',\n      label: nls.localize('pasteAs', \"Paste As...\"),\n      alias: 'Paste As...',\n      precondition: undefined,\n      metadata: {\n        description: 'Paste as',\n        args: [{\n          name: 'args',\n          schema: {\n            type: 'object',\n            properties: {\n              'id': {\n                type: 'string',\n                description: nls.localize('pasteAs.id', \"The id of the paste edit to try applying. If not provided, the editor will show a picker.\")\n              }\n            }\n          }\n        }]\n      }\n    });\n  }\n  run(_accessor, editor, args) {\n    var _a;\n    const id = typeof (args === null || args === void 0 ? void 0 : args.id) === 'string' ? args.id : undefined;\n    return (_a = CopyPasteController.get(editor)) === null || _a === void 0 ? void 0 : _a.pasteAs(id);\n  }\n});","map":{"version":3,"names":["EditorAction","EditorCommand","registerEditorAction","registerEditorCommand","registerEditorContribution","registerEditorFeature","CopyPasteController","changePasteTypeCommandId","pasteWidgetVisibleCtx","DefaultPasteProvidersFeature","nls","ID","constructor","id","precondition","kbOpts","weight","primary","runEditorCommand","_accessor","editor","_args","_a","get","changePasteType","label","localize","alias","undefined","metadata","description","args","name","schema","type","properties","run","pasteAs"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: changePasteTypeCommandId,\n            precondition: pasteWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor, _args) {\n        var _a;\n        return (_a = CopyPasteController.get(editor)) === null || _a === void 0 ? void 0 : _a.changePasteType();\n    }\n});\nregisterEditorAction(class extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.pasteAs',\n            label: nls.localize('pasteAs', \"Paste As...\"),\n            alias: 'Paste As...',\n            precondition: undefined,\n            metadata: {\n                description: 'Paste as',\n                args: [{\n                        name: 'args',\n                        schema: {\n                            type: 'object',\n                            properties: {\n                                'id': {\n                                    type: 'string',\n                                    description: nls.localize('pasteAs.id', \"The id of the paste edit to try applying. If not provided, the editor will show a picker.\"),\n                                }\n                            },\n                        }\n                    }]\n            }\n        });\n    }\n    run(_accessor, editor, args) {\n        var _a;\n        const id = typeof (args === null || args === void 0 ? void 0 : args.id) === 'string' ? args.id : undefined;\n        return (_a = CopyPasteController.get(editor)) === null || _a === void 0 ? void 0 : _a.pasteAs(id);\n    }\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,YAAY,EAAEC,aAAa,EAAEC,oBAAoB,EAAEC,qBAAqB,EAAEC,0BAA0B,QAAQ,sCAAsC;AAC3J,SAASC,qBAAqB,QAAQ,mCAAmC;AACzE,SAASC,mBAAmB,EAAEC,wBAAwB,EAAEC,qBAAqB,QAAQ,0BAA0B;AAC/G,SAASC,4BAA4B,QAAQ,uBAAuB;AACpE,OAAO,KAAKC,GAAG,MAAM,oBAAoB;AACzCN,0BAA0B,CAACE,mBAAmB,CAACK,EAAE,EAAEL,mBAAmB,EAAE,CAAC,CAAC,2CAA2C,CAAC,CAAC,CAAC;AACxHD,qBAAqB,CAACI,4BAA4B,CAAC;AACnDN,qBAAqB,CAAC,IAAI,cAAcF,aAAa,CAAC;EAClDW,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACFC,EAAE,EAAEN,wBAAwB;MAC5BO,YAAY,EAAEN,qBAAqB;MACnCO,MAAM,EAAE;QACJC,MAAM,EAAE,GAAG,CAAC;QACZC,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;MAC5C;IACJ,CAAC,CAAC;EACN;EACAC,gBAAgBA,CAACC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAE;IACvC,IAAIC,EAAE;IACN,OAAO,CAACA,EAAE,GAAGhB,mBAAmB,CAACiB,GAAG,CAACH,MAAM,CAAC,MAAM,IAAI,IAAIE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,eAAe,CAAC,CAAC;EAC3G;AACJ,CAAC,CAAD,CAAC,CAAC;AACFtB,oBAAoB,CAAC,cAAcF,YAAY,CAAC;EAC5CY,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACFC,EAAE,EAAE,uBAAuB;MAC3BY,KAAK,EAAEf,GAAG,CAACgB,QAAQ,CAAC,SAAS,EAAE,aAAa,CAAC;MAC7CC,KAAK,EAAE,aAAa;MACpBb,YAAY,EAAEc,SAAS;MACvBC,QAAQ,EAAE;QACNC,WAAW,EAAE,UAAU;QACvBC,IAAI,EAAE,CAAC;UACCC,IAAI,EAAE,MAAM;UACZC,MAAM,EAAE;YACJC,IAAI,EAAE,QAAQ;YACdC,UAAU,EAAE;cACR,IAAI,EAAE;gBACFD,IAAI,EAAE,QAAQ;gBACdJ,WAAW,EAAEpB,GAAG,CAACgB,QAAQ,CAAC,YAAY,EAAE,2FAA2F;cACvI;YACJ;UACJ;QACJ,CAAC;MACT;IACJ,CAAC,CAAC;EACN;EACAU,GAAGA,CAACjB,SAAS,EAAEC,MAAM,EAAEW,IAAI,EAAE;IACzB,IAAIT,EAAE;IACN,MAAMT,EAAE,GAAG,QAAQkB,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAAClB,EAAE,CAAC,KAAK,QAAQ,GAAGkB,IAAI,CAAClB,EAAE,GAAGe,SAAS;IAC1G,OAAO,CAACN,EAAE,GAAGhB,mBAAmB,CAACiB,GAAG,CAACH,MAAM,CAAC,MAAM,IAAI,IAAIE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACe,OAAO,CAACxB,EAAE,CAAC;EACrG;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}