{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.45.0(5e5af013f8d295555a7210df0d5f2cea0bf5dd56)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/ruby/ruby.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\",\n    blockComment: [\"=begin\", \"=end\"]\n  },\n  brackets: [[\"(\", \")\"], [\"{\", \"}\"], [\"[\", \"]\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  indentationRules: {\n    increaseIndentPattern: new RegExp(`^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|'|/).*\\\\4)*(#.*)?$`),\n    decreaseIndentPattern: new RegExp(\"^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)\")\n  }\n};\nvar language = {\n  tokenPostfix: \".ruby\",\n  keywords: [\"__LINE__\", \"__ENCODING__\", \"__FILE__\", \"BEGIN\", \"END\", \"alias\", \"and\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\", \"elsif\", \"end\", \"ensure\", \"for\", \"false\", \"if\", \"in\", \"module\", \"next\", \"nil\", \"not\", \"or\", \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\", \"until\", \"when\", \"while\", \"yield\"],\n  keywordops: [\"::\", \"..\", \"...\", \"?\", \":\", \"=>\"],\n  builtins: [\"require\", \"public\", \"private\", \"include\", \"extend\", \"attr_reader\", \"protected\", \"private_class_method\", \"protected_class_method\", \"new\"],\n  declarations: [\"module\", \"class\", \"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\n  linedecls: [\"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\n  operators: [\"^\", \"&\", \"|\", \"<=>\", \"==\", \"===\", \"!~\", \"=~\", \">\", \">=\", \"<\", \"<=\", \"<<\", \">>\", \"+\", \"-\", \"*\", \"/\", \"%\", \"**\", \"~\", \"+@\", \"-@\", \"[]\", \"[]=\", \"`\", \"+=\", \"-=\", \"*=\", \"**=\", \"/=\", \"^=\", \"%=\", \"<<=\", \">>=\", \"&=\", \"&&=\", \"||=\", \"|=\"],\n  brackets: [{\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n  escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n  escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n  decpart: /\\d(_?\\d)*/,\n  decimal: /0|@decpart/,\n  delim: /[^a-zA-Z0-9\\s\\n\\r]/,\n  heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n  tokenizer: {\n    root: [[/^(\\s*)([a-z_]\\w*[!?=]?)/, [\"white\", {\n      cases: {\n        \"for|until|while\": {\n          token: \"keyword.$2\",\n          next: \"@dodecl.$2\"\n        },\n        \"@declarations\": {\n          token: \"keyword.$2\",\n          next: \"@root.$2\"\n        },\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }]], [/[a-z_]\\w*[!?=]?/, {\n      cases: {\n        \"if|unless|while|until\": {\n          token: \"keyword.$0x\",\n          next: \"@modifier.$0x\"\n        },\n        for: {\n          token: \"keyword.$2\",\n          next: \"@dodecl.$2\"\n        },\n        \"@linedecls\": {\n          token: \"keyword.$0\",\n          next: \"@root.$0\"\n        },\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }], [/[A-Z][\\w]*[!?=]?/, \"constructor.identifier\"], [/\\$[\\w]*/, \"global.constant\"], [/@[\\w]*/, \"namespace.instance.identifier\"], [/@@@[\\w]*/, \"namespace.class.identifier\"], [/<<[-~](@heredelim).*/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredoc.$1\"\n    }], [/[ \\t\\r\\n]+<<(@heredelim).*/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredoc.$1\"\n    }], [/^<<(@heredelim).*/, {\n      token: \"string.heredoc.delimiter\",\n      next: \"@heredoc.$1\"\n    }], {\n      include: \"@whitespace\"\n    }, [/\"/, {\n      token: \"string.d.delim\",\n      next: '@dstring.d.\"'\n    }], [/'/, {\n      token: \"string.sq.delim\",\n      next: \"@sstring.sq\"\n    }], [/%([rsqxwW]|Q?)/, {\n      token: \"@rematch\",\n      next: \"pstring\"\n    }], [/`/, {\n      token: \"string.x.delim\",\n      next: \"@dstring.x.`\"\n    }], [/:(\\w|[$@])\\w*[!?=]?/, \"string.s\"], [/:\"/, {\n      token: \"string.s.delim\",\n      next: '@dstring.s.\"'\n    }], [/:'/, {\n      token: \"string.s.delim\",\n      next: \"@sstring.s\"\n    }], [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, {\n      token: \"regexp.delim\",\n      next: \"@regexp\"\n    }], [/[{}()\\[\\]]/, \"@brackets\"], [/@symbols/, {\n      cases: {\n        \"@keywordops\": \"keyword\",\n        \"@operators\": \"operator\",\n        \"@default\": \"\"\n      }\n    }], [/[;,]/, \"delimiter\"], [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, \"number.hex\"], [/0[_oO][0-7](_?[0-7])*/, \"number.octal\"], [/0[bB][01](_?[01])*/, \"number.binary\"], [/0[dD]@decpart/, \"number\"], [/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/, {\n      cases: {\n        $1: \"number.float\",\n        \"@default\": \"number\"\n      }\n    }]],\n    dodecl: [[/^/, {\n      token: \"\",\n      switchTo: \"@root.$S2\"\n    }], [/[a-z_]\\w*[!?=]?/, {\n      cases: {\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        do: {\n          token: \"keyword\",\n          switchTo: \"@root.$S2\"\n        },\n        \"@linedecls\": {\n          token: \"@rematch\",\n          switchTo: \"@root.$S2\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@root\"\n    }],\n    modifier: [[/^/, \"\", \"@pop\"], [/[a-z_]\\w*[!?=]?/, {\n      cases: {\n        end: {\n          token: \"keyword.$S2\",\n          next: \"@pop\"\n        },\n        \"then|else|elsif|do\": {\n          token: \"keyword\",\n          switchTo: \"@root.$S2\"\n        },\n        \"@linedecls\": {\n          token: \"@rematch\",\n          switchTo: \"@root.$S2\"\n        },\n        \"@keywords\": \"keyword\",\n        \"@builtins\": \"predefined\",\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@root\"\n    }],\n    sstring: [[/[^\\\\']+/, \"string.$S2\"], [/\\\\\\\\|\\\\'|\\\\$/, \"string.$S2.escape\"], [/\\\\./, \"string.$S2.invalid\"], [/'/, {\n      token: \"string.$S2.delim\",\n      next: \"@pop\"\n    }]],\n    dstring: [[/[^\\\\`\"#]+/, \"string.$S2\"], [/#/, \"string.$S2.escape\", \"@interpolated\"], [/\\\\$/, \"string.$S2.escape\"], [/@escapes/, \"string.$S2.escape\"], [/\\\\./, \"string.$S2.escape.invalid\"], [/[`\"]/, {\n      cases: {\n        \"$#==$S3\": {\n          token: \"string.$S2.delim\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string.$S2\"\n      }\n    }]],\n    heredoc: [[/^(\\s*)(@heredelim)$/, {\n      cases: {\n        \"$2==$S2\": [\"string.heredoc\", {\n          token: \"string.heredoc.delimiter\",\n          next: \"@pop\"\n        }],\n        \"@default\": [\"string.heredoc\", \"string.heredoc\"]\n      }\n    }], [/.*/, \"string.heredoc\"]],\n    interpolated: [[/\\$\\w*/, \"global.constant\", \"@pop\"], [/@\\w*/, \"namespace.class.identifier\", \"@pop\"], [/@@@\\w*/, \"namespace.instance.identifier\", \"@pop\"], [/[{]/, {\n      token: \"string.escape.curly\",\n      switchTo: \"@interpolated_compound\"\n    }], [\"\", \"\", \"@pop\"]],\n    interpolated_compound: [[/[}]/, {\n      token: \"string.escape.curly\",\n      next: \"@pop\"\n    }], {\n      include: \"@root\"\n    }],\n    pregexp: [{\n      include: \"@whitespace\"\n    }, [/[^\\(\\{\\[\\\\]/, {\n      cases: {\n        \"$#==$S3\": {\n          token: \"regexp.delim\",\n          next: \"@pop\"\n        },\n        \"$#==$S2\": {\n          token: \"regexp.delim\",\n          next: \"@push\"\n        },\n        \"~[)}\\\\]]\": \"@brackets.regexp.escape.control\",\n        \"~@regexpctl\": \"regexp.escape.control\",\n        \"@default\": \"regexp\"\n      }\n    }], {\n      include: \"@regexcontrol\"\n    }],\n    regexp: [{\n      include: \"@regexcontrol\"\n    }, [/[^\\\\\\/]/, \"regexp\"], [\"/[ixmp]*\", {\n      token: \"regexp.delim\"\n    }, \"@pop\"]],\n    regexcontrol: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\", \"@brackets.regexp.escape.control\"]], [/(\\[)(\\^?)/, [\"@brackets.regexp.escape.control\", {\n      token: \"regexp.escape.control\",\n      next: \"@regexrange\"\n    }]], [/(\\()(\\?[:=!])/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\"]], [/\\(\\?#/, {\n      token: \"regexp.escape.control\",\n      next: \"@regexpcomment\"\n    }], [/[()]/, \"@brackets.regexp.escape.control\"], [/@regexpctl/, \"regexp.escape.control\"], [/\\\\$/, \"regexp.escape\"], [/@regexpesc/, \"regexp.escape\"], [/\\\\\\./, \"regexp.invalid\"], [/#/, \"regexp.escape\", \"@interpolated\"]],\n    regexrange: [[/-/, \"regexp.escape.control\"], [/\\^/, \"regexp.invalid\"], [/\\\\$/, \"regexp.escape\"], [/@regexpesc/, \"regexp.escape\"], [/[^\\]]/, \"regexp\"], [/\\]/, \"@brackets.regexp.escape.control\", \"@pop\"]],\n    regexpcomment: [[/[^)]+/, \"comment\"], [/\\)/, {\n      token: \"regexp.escape.control\",\n      next: \"@pop\"\n    }]],\n    pstring: [[/%([qws])\\(/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.(.)\"\n    }], [/%([qws])\\[/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.[.]\"\n    }], [/%([qws])\\{/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.{.}\"\n    }], [/%([qws])</, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.<.>\"\n    }], [/%([qws])(@delim)/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qstring.$1.$2.$2\"\n    }], [/%r\\(/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.(.)\"\n    }], [/%r\\[/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.[.]\"\n    }], [/%r\\{/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.{.}\"\n    }], [/%r</, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.<.>\"\n    }], [/%r(@delim)/, {\n      token: \"regexp.delim\",\n      switchTo: \"@pregexp.$1.$1\"\n    }], [/%(x|W|Q?)\\(/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.(.)\"\n    }], [/%(x|W|Q?)\\[/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.[.]\"\n    }], [/%(x|W|Q?)\\{/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.{.}\"\n    }], [/%(x|W|Q?)</, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.<.>\"\n    }], [/%(x|W|Q?)(@delim)/, {\n      token: \"string.$1.delim\",\n      switchTo: \"@qqstring.$1.$2.$2\"\n    }], [/%([rqwsxW]|Q?)./, {\n      token: \"invalid\",\n      next: \"@pop\"\n    }], [/./, {\n      token: \"invalid\",\n      next: \"@pop\"\n    }]],\n    qstring: [[/\\\\$/, \"string.$S2.escape\"], [/\\\\./, \"string.$S2.escape\"], [/./, {\n      cases: {\n        \"$#==$S4\": {\n          token: \"string.$S2.delim\",\n          next: \"@pop\"\n        },\n        \"$#==$S3\": {\n          token: \"string.$S2.delim\",\n          next: \"@push\"\n        },\n        \"@default\": \"string.$S2\"\n      }\n    }]],\n    qqstring: [[/#/, \"string.$S2.escape\", \"@interpolated\"], {\n      include: \"@qstring\"\n    }],\n    whitespace: [[/[ \\t\\r\\n]+/, \"\"], [/^\\s*=begin\\b/, \"comment\", \"@comment\"], [/#.*$/, \"comment\"]],\n    comment: [[/[^=]+/, \"comment\"], [/^\\s*=begin\\b/, \"comment.invalid\"], [/^\\s*=end\\b.*/, \"comment\", \"@pop\"], [/[=]/, \"comment\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","tokenPostfix","keywords","keywordops","builtins","declarations","linedecls","operators","token","symbols","escape","escapes","decpart","decimal","delim","heredelim","regexpctl","regexpesc","tokenizer","root","cases","next","end","for","include","$1","dodecl","switchTo","do","modifier","sstring","dstring","heredoc","interpolated","interpolated_compound","pregexp","regexp","regexcontrol","regexrange","regexpcomment","pstring","qstring","qqstring","whitespace","comment"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.45.0(5e5af013f8d295555a7210df0d5f2cea0bf5dd56)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/ruby/ruby.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\",\n    blockComment: [\"=begin\", \"=end\"]\n  },\n  brackets: [\n    [\"(\", \")\"],\n    [\"{\", \"}\"],\n    [\"[\", \"]\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  indentationRules: {\n    increaseIndentPattern: new RegExp(`^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|'|/).*\\\\4)*(#.*)?$`),\n    decreaseIndentPattern: new RegExp(\"^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)\")\n  }\n};\nvar language = {\n  tokenPostfix: \".ruby\",\n  keywords: [\n    \"__LINE__\",\n    \"__ENCODING__\",\n    \"__FILE__\",\n    \"BEGIN\",\n    \"END\",\n    \"alias\",\n    \"and\",\n    \"begin\",\n    \"break\",\n    \"case\",\n    \"class\",\n    \"def\",\n    \"defined?\",\n    \"do\",\n    \"else\",\n    \"elsif\",\n    \"end\",\n    \"ensure\",\n    \"for\",\n    \"false\",\n    \"if\",\n    \"in\",\n    \"module\",\n    \"next\",\n    \"nil\",\n    \"not\",\n    \"or\",\n    \"redo\",\n    \"rescue\",\n    \"retry\",\n    \"return\",\n    \"self\",\n    \"super\",\n    \"then\",\n    \"true\",\n    \"undef\",\n    \"unless\",\n    \"until\",\n    \"when\",\n    \"while\",\n    \"yield\"\n  ],\n  keywordops: [\"::\", \"..\", \"...\", \"?\", \":\", \"=>\"],\n  builtins: [\n    \"require\",\n    \"public\",\n    \"private\",\n    \"include\",\n    \"extend\",\n    \"attr_reader\",\n    \"protected\",\n    \"private_class_method\",\n    \"protected_class_method\",\n    \"new\"\n  ],\n  declarations: [\n    \"module\",\n    \"class\",\n    \"def\",\n    \"case\",\n    \"do\",\n    \"begin\",\n    \"for\",\n    \"if\",\n    \"while\",\n    \"until\",\n    \"unless\"\n  ],\n  linedecls: [\"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\n  operators: [\n    \"^\",\n    \"&\",\n    \"|\",\n    \"<=>\",\n    \"==\",\n    \"===\",\n    \"!~\",\n    \"=~\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"<<\",\n    \">>\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"**\",\n    \"~\",\n    \"+@\",\n    \"-@\",\n    \"[]\",\n    \"[]=\",\n    \"`\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"**=\",\n    \"/=\",\n    \"^=\",\n    \"%=\",\n    \"<<=\",\n    \">>=\",\n    \"&=\",\n    \"&&=\",\n    \"||=\",\n    \"|=\"\n  ],\n  brackets: [\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n  escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n  escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n  decpart: /\\d(_?\\d)*/,\n  decimal: /0|@decpart/,\n  delim: /[^a-zA-Z0-9\\s\\n\\r]/,\n  heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n  tokenizer: {\n    root: [\n      [\n        /^(\\s*)([a-z_]\\w*[!?=]?)/,\n        [\n          \"white\",\n          {\n            cases: {\n              \"for|until|while\": {\n                token: \"keyword.$2\",\n                next: \"@dodecl.$2\"\n              },\n              \"@declarations\": {\n                token: \"keyword.$2\",\n                next: \"@root.$2\"\n              },\n              end: { token: \"keyword.$S2\", next: \"@pop\" },\n              \"@keywords\": \"keyword\",\n              \"@builtins\": \"predefined\",\n              \"@default\": \"identifier\"\n            }\n          }\n        ]\n      ],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            \"if|unless|while|until\": {\n              token: \"keyword.$0x\",\n              next: \"@modifier.$0x\"\n            },\n            for: { token: \"keyword.$2\", next: \"@dodecl.$2\" },\n            \"@linedecls\": { token: \"keyword.$0\", next: \"@root.$0\" },\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\n            \"@keywords\": \"keyword\",\n            \"@builtins\": \"predefined\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/[A-Z][\\w]*[!?=]?/, \"constructor.identifier\"],\n      [/\\$[\\w]*/, \"global.constant\"],\n      [/@[\\w]*/, \"namespace.instance.identifier\"],\n      [/@@@[\\w]*/, \"namespace.class.identifier\"],\n      [/<<[-~](@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\n      [/[ \\t\\r\\n]+<<(@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\n      [/^<<(@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\n      { include: \"@whitespace\" },\n      [/\"/, { token: \"string.d.delim\", next: '@dstring.d.\"' }],\n      [/'/, { token: \"string.sq.delim\", next: \"@sstring.sq\" }],\n      [/%([rsqxwW]|Q?)/, { token: \"@rematch\", next: \"pstring\" }],\n      [/`/, { token: \"string.x.delim\", next: \"@dstring.x.`\" }],\n      [/:(\\w|[$@])\\w*[!?=]?/, \"string.s\"],\n      [/:\"/, { token: \"string.s.delim\", next: '@dstring.s.\"' }],\n      [/:'/, { token: \"string.s.delim\", next: \"@sstring.s\" }],\n      [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: \"regexp.delim\", next: \"@regexp\" }],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywordops\": \"keyword\",\n            \"@operators\": \"operator\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/[;,]/, \"delimiter\"],\n      [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, \"number.hex\"],\n      [/0[_oO][0-7](_?[0-7])*/, \"number.octal\"],\n      [/0[bB][01](_?[01])*/, \"number.binary\"],\n      [/0[dD]@decpart/, \"number\"],\n      [\n        /@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/,\n        {\n          cases: {\n            $1: \"number.float\",\n            \"@default\": \"number\"\n          }\n        }\n      ]\n    ],\n    dodecl: [\n      [/^/, { token: \"\", switchTo: \"@root.$S2\" }],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\n            do: { token: \"keyword\", switchTo: \"@root.$S2\" },\n            \"@linedecls\": {\n              token: \"@rematch\",\n              switchTo: \"@root.$S2\"\n            },\n            \"@keywords\": \"keyword\",\n            \"@builtins\": \"predefined\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@root\" }\n    ],\n    modifier: [\n      [/^/, \"\", \"@pop\"],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\n            \"then|else|elsif|do\": {\n              token: \"keyword\",\n              switchTo: \"@root.$S2\"\n            },\n            \"@linedecls\": {\n              token: \"@rematch\",\n              switchTo: \"@root.$S2\"\n            },\n            \"@keywords\": \"keyword\",\n            \"@builtins\": \"predefined\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@root\" }\n    ],\n    sstring: [\n      [/[^\\\\']+/, \"string.$S2\"],\n      [/\\\\\\\\|\\\\'|\\\\$/, \"string.$S2.escape\"],\n      [/\\\\./, \"string.$S2.invalid\"],\n      [/'/, { token: \"string.$S2.delim\", next: \"@pop\" }]\n    ],\n    dstring: [\n      [/[^\\\\`\"#]+/, \"string.$S2\"],\n      [/#/, \"string.$S2.escape\", \"@interpolated\"],\n      [/\\\\$/, \"string.$S2.escape\"],\n      [/@escapes/, \"string.$S2.escape\"],\n      [/\\\\./, \"string.$S2.escape.invalid\"],\n      [\n        /[`\"]/,\n        {\n          cases: {\n            \"$#==$S3\": { token: \"string.$S2.delim\", next: \"@pop\" },\n            \"@default\": \"string.$S2\"\n          }\n        }\n      ]\n    ],\n    heredoc: [\n      [\n        /^(\\s*)(@heredelim)$/,\n        {\n          cases: {\n            \"$2==$S2\": [\"string.heredoc\", { token: \"string.heredoc.delimiter\", next: \"@pop\" }],\n            \"@default\": [\"string.heredoc\", \"string.heredoc\"]\n          }\n        }\n      ],\n      [/.*/, \"string.heredoc\"]\n    ],\n    interpolated: [\n      [/\\$\\w*/, \"global.constant\", \"@pop\"],\n      [/@\\w*/, \"namespace.class.identifier\", \"@pop\"],\n      [/@@@\\w*/, \"namespace.instance.identifier\", \"@pop\"],\n      [\n        /[{]/,\n        {\n          token: \"string.escape.curly\",\n          switchTo: \"@interpolated_compound\"\n        }\n      ],\n      [\"\", \"\", \"@pop\"]\n    ],\n    interpolated_compound: [\n      [/[}]/, { token: \"string.escape.curly\", next: \"@pop\" }],\n      { include: \"@root\" }\n    ],\n    pregexp: [\n      { include: \"@whitespace\" },\n      [\n        /[^\\(\\{\\[\\\\]/,\n        {\n          cases: {\n            \"$#==$S3\": { token: \"regexp.delim\", next: \"@pop\" },\n            \"$#==$S2\": { token: \"regexp.delim\", next: \"@push\" },\n            \"~[)}\\\\]]\": \"@brackets.regexp.escape.control\",\n            \"~@regexpctl\": \"regexp.escape.control\",\n            \"@default\": \"regexp\"\n          }\n        }\n      ],\n      { include: \"@regexcontrol\" }\n    ],\n    regexp: [\n      { include: \"@regexcontrol\" },\n      [/[^\\\\\\/]/, \"regexp\"],\n      [\"/[ixmp]*\", { token: \"regexp.delim\" }, \"@pop\"]\n    ],\n    regexcontrol: [\n      [\n        /(\\{)(\\d+(?:,\\d*)?)(\\})/,\n        [\n          \"@brackets.regexp.escape.control\",\n          \"regexp.escape.control\",\n          \"@brackets.regexp.escape.control\"\n        ]\n      ],\n      [\n        /(\\[)(\\^?)/,\n        [\"@brackets.regexp.escape.control\", { token: \"regexp.escape.control\", next: \"@regexrange\" }]\n      ],\n      [/(\\()(\\?[:=!])/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\"]],\n      [/\\(\\?#/, { token: \"regexp.escape.control\", next: \"@regexpcomment\" }],\n      [/[()]/, \"@brackets.regexp.escape.control\"],\n      [/@regexpctl/, \"regexp.escape.control\"],\n      [/\\\\$/, \"regexp.escape\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/\\\\\\./, \"regexp.invalid\"],\n      [/#/, \"regexp.escape\", \"@interpolated\"]\n    ],\n    regexrange: [\n      [/-/, \"regexp.escape.control\"],\n      [/\\^/, \"regexp.invalid\"],\n      [/\\\\$/, \"regexp.escape\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/[^\\]]/, \"regexp\"],\n      [/\\]/, \"@brackets.regexp.escape.control\", \"@pop\"]\n    ],\n    regexpcomment: [\n      [/[^)]+/, \"comment\"],\n      [/\\)/, { token: \"regexp.escape.control\", next: \"@pop\" }]\n    ],\n    pstring: [\n      [/%([qws])\\(/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.(.)\" }],\n      [/%([qws])\\[/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.[.]\" }],\n      [/%([qws])\\{/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.{.}\" }],\n      [/%([qws])</, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.<.>\" }],\n      [/%([qws])(@delim)/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.$2.$2\" }],\n      [/%r\\(/, { token: \"regexp.delim\", switchTo: \"@pregexp.(.)\" }],\n      [/%r\\[/, { token: \"regexp.delim\", switchTo: \"@pregexp.[.]\" }],\n      [/%r\\{/, { token: \"regexp.delim\", switchTo: \"@pregexp.{.}\" }],\n      [/%r</, { token: \"regexp.delim\", switchTo: \"@pregexp.<.>\" }],\n      [/%r(@delim)/, { token: \"regexp.delim\", switchTo: \"@pregexp.$1.$1\" }],\n      [/%(x|W|Q?)\\(/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.(.)\" }],\n      [/%(x|W|Q?)\\[/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.[.]\" }],\n      [/%(x|W|Q?)\\{/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.{.}\" }],\n      [/%(x|W|Q?)</, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.<.>\" }],\n      [/%(x|W|Q?)(@delim)/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.$2.$2\" }],\n      [/%([rqwsxW]|Q?)./, { token: \"invalid\", next: \"@pop\" }],\n      [/./, { token: \"invalid\", next: \"@pop\" }]\n    ],\n    qstring: [\n      [/\\\\$/, \"string.$S2.escape\"],\n      [/\\\\./, \"string.$S2.escape\"],\n      [\n        /./,\n        {\n          cases: {\n            \"$#==$S4\": { token: \"string.$S2.delim\", next: \"@pop\" },\n            \"$#==$S3\": { token: \"string.$S2.delim\", next: \"@push\" },\n            \"@default\": \"string.$S2\"\n          }\n        }\n      ]\n    ],\n    qqstring: [[/#/, \"string.$S2.escape\", \"@interpolated\"], { include: \"@qstring\" }],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/^\\s*=begin\\b/, \"comment\", \"@comment\"],\n      [/#.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^=]+/, \"comment\"],\n      [/^\\s*=begin\\b/, \"comment.invalid\"],\n      [/^\\s*=end\\b.*/, \"comment\", \"@pop\"],\n      [/[=]/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}