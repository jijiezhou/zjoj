{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar SuggestModel_1;\nimport { TimeoutTimer } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { DisposableStore, dispose } from '../../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace, isHighSurrogate, isLowSurrogate } from '../../../../base/common/strings.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { CompletionModel } from './completionModel.js';\nimport { CompletionOptions, getSnippetSuggestSupport, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { FuzzyScoreOptions } from '../../../../base/common/filters.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { InlineCompletionContextKeys } from '../../inlineCompletions/browser/inlineCompletionContextKeys.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nexport class LineContext {\n  static shouldAutoTrigger(editor) {\n    if (!editor.hasModel()) {\n      return false;\n    }\n    const model = editor.getModel();\n    const pos = editor.getPosition();\n    model.tokenization.tokenizeIfCheap(pos.lineNumber);\n    const word = model.getWordAtPosition(pos);\n    if (!word) {\n      return false;\n    }\n    if (word.endColumn !== pos.column && word.startColumn + 1 !== pos.column /* after typing a single character before a word */) {\n      return false;\n    }\n    if (!isNaN(Number(word.word))) {\n      return false;\n    }\n    return true;\n  }\n  constructor(model, position, triggerOptions) {\n    this.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n    this.leadingWord = model.getWordUntilPosition(position);\n    this.lineNumber = position.lineNumber;\n    this.column = position.column;\n    this.triggerOptions = triggerOptions;\n  }\n}\nfunction canShowQuickSuggest(editor, contextKeyService, configurationService) {\n  if (!Boolean(contextKeyService.getContextKeyValue(InlineCompletionContextKeys.inlineSuggestionVisible.key))) {\n    // Allow if there is no inline suggestion.\n    return true;\n  }\n  const suppressSuggestions = contextKeyService.getContextKeyValue(InlineCompletionContextKeys.suppressSuggestions.key);\n  if (suppressSuggestions !== undefined) {\n    return !suppressSuggestions;\n  }\n  return !editor.getOption(62 /* EditorOption.inlineSuggest */).suppressSuggestions;\n}\nfunction canShowSuggestOnTriggerCharacters(editor, contextKeyService, configurationService) {\n  if (!Boolean(contextKeyService.getContextKeyValue('inlineSuggestionVisible'))) {\n    // Allow if there is no inline suggestion.\n    return true;\n  }\n  const suppressSuggestions = contextKeyService.getContextKeyValue(InlineCompletionContextKeys.suppressSuggestions.key);\n  if (suppressSuggestions !== undefined) {\n    return !suppressSuggestions;\n  }\n  return !editor.getOption(62 /* EditorOption.inlineSuggest */).suppressSuggestions;\n}\nlet SuggestModel = SuggestModel_1 = class SuggestModel {\n  constructor(_editor, _editorWorkerService, _clipboardService, _telemetryService, _logService, _contextKeyService, _configurationService, _languageFeaturesService, _envService) {\n    this._editor = _editor;\n    this._editorWorkerService = _editorWorkerService;\n    this._clipboardService = _clipboardService;\n    this._telemetryService = _telemetryService;\n    this._logService = _logService;\n    this._contextKeyService = _contextKeyService;\n    this._configurationService = _configurationService;\n    this._languageFeaturesService = _languageFeaturesService;\n    this._envService = _envService;\n    this._toDispose = new DisposableStore();\n    this._triggerCharacterListener = new DisposableStore();\n    this._triggerQuickSuggest = new TimeoutTimer();\n    this._triggerState = undefined;\n    this._completionDisposables = new DisposableStore();\n    this._onDidCancel = new Emitter();\n    this._onDidTrigger = new Emitter();\n    this._onDidSuggest = new Emitter();\n    this.onDidCancel = this._onDidCancel.event;\n    this.onDidTrigger = this._onDidTrigger.event;\n    this.onDidSuggest = this._onDidSuggest.event;\n    this._telemetryGate = 0;\n    this._currentSelection = this._editor.getSelection() || new Selection(1, 1, 1, 1);\n    // wire up various listeners\n    this._toDispose.add(this._editor.onDidChangeModel(() => {\n      this._updateTriggerCharacters();\n      this.cancel();\n    }));\n    this._toDispose.add(this._editor.onDidChangeModelLanguage(() => {\n      this._updateTriggerCharacters();\n      this.cancel();\n    }));\n    this._toDispose.add(this._editor.onDidChangeConfiguration(() => {\n      this._updateTriggerCharacters();\n    }));\n    this._toDispose.add(this._languageFeaturesService.completionProvider.onDidChange(() => {\n      this._updateTriggerCharacters();\n      this._updateActiveSuggestSession();\n    }));\n    let editorIsComposing = false;\n    this._toDispose.add(this._editor.onDidCompositionStart(() => {\n      editorIsComposing = true;\n    }));\n    this._toDispose.add(this._editor.onDidCompositionEnd(() => {\n      editorIsComposing = false;\n      this._onCompositionEnd();\n    }));\n    this._toDispose.add(this._editor.onDidChangeCursorSelection(e => {\n      // only trigger suggest when the editor isn't composing a character\n      if (!editorIsComposing) {\n        this._onCursorChange(e);\n      }\n    }));\n    this._toDispose.add(this._editor.onDidChangeModelContent(() => {\n      // only filter completions when the editor isn't composing a character\n      // allow-any-unicode-next-line\n      // e.g. ¨ + u makes ü but just ¨ cannot be used for filtering\n      if (!editorIsComposing && this._triggerState !== undefined) {\n        this._refilterCompletionItems();\n      }\n    }));\n    this._updateTriggerCharacters();\n  }\n  dispose() {\n    dispose(this._triggerCharacterListener);\n    dispose([this._onDidCancel, this._onDidSuggest, this._onDidTrigger, this._triggerQuickSuggest]);\n    this._toDispose.dispose();\n    this._completionDisposables.dispose();\n    this.cancel();\n  }\n  _updateTriggerCharacters() {\n    this._triggerCharacterListener.clear();\n    if (this._editor.getOption(90 /* EditorOption.readOnly */) || !this._editor.hasModel() || !this._editor.getOption(120 /* EditorOption.suggestOnTriggerCharacters */)) {\n      return;\n    }\n    const supportsByTriggerCharacter = new Map();\n    for (const support of this._languageFeaturesService.completionProvider.all(this._editor.getModel())) {\n      for (const ch of support.triggerCharacters || []) {\n        let set = supportsByTriggerCharacter.get(ch);\n        if (!set) {\n          set = new Set();\n          set.add(getSnippetSuggestSupport());\n          supportsByTriggerCharacter.set(ch, set);\n        }\n        set.add(support);\n      }\n    }\n    const checkTriggerCharacter = text => {\n      var _a;\n      if (!canShowSuggestOnTriggerCharacters(this._editor, this._contextKeyService, this._configurationService)) {\n        return;\n      }\n      if (LineContext.shouldAutoTrigger(this._editor)) {\n        // don't trigger by trigger characters when this is a case for quick suggest\n        return;\n      }\n      if (!text) {\n        // came here from the compositionEnd-event\n        const position = this._editor.getPosition();\n        const model = this._editor.getModel();\n        text = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n      }\n      let lastChar = '';\n      if (isLowSurrogate(text.charCodeAt(text.length - 1))) {\n        if (isHighSurrogate(text.charCodeAt(text.length - 2))) {\n          lastChar = text.substr(text.length - 2);\n        }\n      } else {\n        lastChar = text.charAt(text.length - 1);\n      }\n      const supports = supportsByTriggerCharacter.get(lastChar);\n      if (supports) {\n        // keep existing items that where not computed by the\n        // supports/providers that want to trigger now\n        const providerItemsToReuse = new Map();\n        if (this._completionModel) {\n          for (const [provider, items] of this._completionModel.getItemsByProvider()) {\n            if (!supports.has(provider)) {\n              providerItemsToReuse.set(provider, items);\n            }\n          }\n        }\n        this.trigger({\n          auto: true,\n          triggerKind: 1 /* CompletionTriggerKind.TriggerCharacter */,\n          triggerCharacter: lastChar,\n          retrigger: Boolean(this._completionModel),\n          clipboardText: (_a = this._completionModel) === null || _a === void 0 ? void 0 : _a.clipboardText,\n          completionOptions: {\n            providerFilter: supports,\n            providerItemsToReuse\n          }\n        });\n      }\n    };\n    this._triggerCharacterListener.add(this._editor.onDidType(checkTriggerCharacter));\n    this._triggerCharacterListener.add(this._editor.onDidCompositionEnd(() => checkTriggerCharacter()));\n  }\n  // --- trigger/retrigger/cancel suggest\n  get state() {\n    if (!this._triggerState) {\n      return 0 /* State.Idle */;\n    } else if (!this._triggerState.auto) {\n      return 1 /* State.Manual */;\n    } else {\n      return 2 /* State.Auto */;\n    }\n  }\n  cancel(retrigger = false) {\n    var _a;\n    if (this._triggerState !== undefined) {\n      this._triggerQuickSuggest.cancel();\n      (_a = this._requestToken) === null || _a === void 0 ? void 0 : _a.cancel();\n      this._requestToken = undefined;\n      this._triggerState = undefined;\n      this._completionModel = undefined;\n      this._context = undefined;\n      this._onDidCancel.fire({\n        retrigger\n      });\n    }\n  }\n  clear() {\n    this._completionDisposables.clear();\n  }\n  _updateActiveSuggestSession() {\n    if (this._triggerState !== undefined) {\n      if (!this._editor.hasModel() || !this._languageFeaturesService.completionProvider.has(this._editor.getModel())) {\n        this.cancel();\n      } else {\n        this.trigger({\n          auto: this._triggerState.auto,\n          retrigger: true\n        });\n      }\n    }\n  }\n  _onCursorChange(e) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    const prevSelection = this._currentSelection;\n    this._currentSelection = this._editor.getSelection();\n    if (!e.selection.isEmpty() || e.reason !== 0 /* CursorChangeReason.NotSet */ && e.reason !== 3 /* CursorChangeReason.Explicit */ || e.source !== 'keyboard' && e.source !== 'deleteLeft') {\n      // Early exit if nothing needs to be done!\n      // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n      this.cancel();\n      return;\n    }\n    if (this._triggerState === undefined && e.reason === 0 /* CursorChangeReason.NotSet */) {\n      if (prevSelection.containsRange(this._currentSelection) || prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) {\n        // cursor did move RIGHT due to typing -> trigger quick suggest\n        this._doTriggerQuickSuggest();\n      }\n    } else if (this._triggerState !== undefined && e.reason === 3 /* CursorChangeReason.Explicit */) {\n      // suggest is active and something like cursor keys are used to move\n      // the cursor. this means we can refilter at the new position\n      this._refilterCompletionItems();\n    }\n  }\n  _onCompositionEnd() {\n    // trigger or refilter when composition ends\n    if (this._triggerState === undefined) {\n      this._doTriggerQuickSuggest();\n    } else {\n      this._refilterCompletionItems();\n    }\n  }\n  _doTriggerQuickSuggest() {\n    var _a;\n    if (QuickSuggestionsOptions.isAllOff(this._editor.getOption(88 /* EditorOption.quickSuggestions */))) {\n      // not enabled\n      return;\n    }\n    if (this._editor.getOption(117 /* EditorOption.suggest */).snippetsPreventQuickSuggestions && ((_a = SnippetController2.get(this._editor)) === null || _a === void 0 ? void 0 : _a.isInSnippet())) {\n      // no quick suggestion when in snippet mode\n      return;\n    }\n    this.cancel();\n    this._triggerQuickSuggest.cancelAndSet(() => {\n      if (this._triggerState !== undefined) {\n        return;\n      }\n      if (!LineContext.shouldAutoTrigger(this._editor)) {\n        return;\n      }\n      if (!this._editor.hasModel() || !this._editor.hasWidgetFocus()) {\n        return;\n      }\n      const model = this._editor.getModel();\n      const pos = this._editor.getPosition();\n      // validate enabled now\n      const config = this._editor.getOption(88 /* EditorOption.quickSuggestions */);\n      if (QuickSuggestionsOptions.isAllOff(config)) {\n        return;\n      }\n      if (!QuickSuggestionsOptions.isAllOn(config)) {\n        // Check the type of the token that triggered this\n        model.tokenization.tokenizeIfCheap(pos.lineNumber);\n        const lineTokens = model.tokenization.getLineTokens(pos.lineNumber);\n        const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));\n        if (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'on') {\n          return;\n        }\n      }\n      if (!canShowQuickSuggest(this._editor, this._contextKeyService, this._configurationService)) {\n        // do not trigger quick suggestions if inline suggestions are shown\n        return;\n      }\n      if (!this._languageFeaturesService.completionProvider.has(model)) {\n        return;\n      }\n      // we made it till here -> trigger now\n      this.trigger({\n        auto: true\n      });\n    }, this._editor.getOption(89 /* EditorOption.quickSuggestionsDelay */));\n  }\n  _refilterCompletionItems() {\n    assertType(this._editor.hasModel());\n    assertType(this._triggerState !== undefined);\n    const model = this._editor.getModel();\n    const position = this._editor.getPosition();\n    const ctx = new LineContext(model, position, {\n      ...this._triggerState,\n      refilter: true\n    });\n    this._onNewContext(ctx);\n  }\n  trigger(options) {\n    var _a, _b, _c, _d, _e, _f;\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    const model = this._editor.getModel();\n    const ctx = new LineContext(model, this._editor.getPosition(), options);\n    // Cancel previous requests, change state & update UI\n    this.cancel(options.retrigger);\n    this._triggerState = options;\n    this._onDidTrigger.fire({\n      auto: options.auto,\n      shy: (_a = options.shy) !== null && _a !== void 0 ? _a : false,\n      position: this._editor.getPosition()\n    });\n    // Capture context when request was sent\n    this._context = ctx;\n    // Build context for request\n    let suggestCtx = {\n      triggerKind: (_b = options.triggerKind) !== null && _b !== void 0 ? _b : 0 /* CompletionTriggerKind.Invoke */\n    };\n    if (options.triggerCharacter) {\n      suggestCtx = {\n        triggerKind: 1 /* CompletionTriggerKind.TriggerCharacter */,\n        triggerCharacter: options.triggerCharacter\n      };\n    }\n    this._requestToken = new CancellationTokenSource();\n    // kind filter and snippet sort rules\n    const snippetSuggestions = this._editor.getOption(111 /* EditorOption.snippetSuggestions */);\n    let snippetSortOrder = 1 /* SnippetSortOrder.Inline */;\n    switch (snippetSuggestions) {\n      case 'top':\n        snippetSortOrder = 0 /* SnippetSortOrder.Top */;\n        break;\n      // \t↓ that's the default anyways...\n      // case 'inline':\n      // \tsnippetSortOrder = SnippetSortOrder.Inline;\n      // \tbreak;\n      case 'bottom':\n        snippetSortOrder = 2 /* SnippetSortOrder.Bottom */;\n        break;\n    }\n    const {\n      itemKind: itemKindFilter,\n      showDeprecated\n    } = SuggestModel_1._createSuggestFilter(this._editor);\n    const completionOptions = new CompletionOptions(snippetSortOrder, (_d = (_c = options.completionOptions) === null || _c === void 0 ? void 0 : _c.kindFilter) !== null && _d !== void 0 ? _d : itemKindFilter, (_e = options.completionOptions) === null || _e === void 0 ? void 0 : _e.providerFilter, (_f = options.completionOptions) === null || _f === void 0 ? void 0 : _f.providerItemsToReuse, showDeprecated);\n    const wordDistance = WordDistance.create(this._editorWorkerService, this._editor);\n    const completions = provideSuggestionItems(this._languageFeaturesService.completionProvider, model, this._editor.getPosition(), completionOptions, suggestCtx, this._requestToken.token);\n    Promise.all([completions, wordDistance]).then(async ([completions, wordDistance]) => {\n      var _a;\n      (_a = this._requestToken) === null || _a === void 0 ? void 0 : _a.dispose();\n      if (!this._editor.hasModel()) {\n        return;\n      }\n      let clipboardText = options === null || options === void 0 ? void 0 : options.clipboardText;\n      if (!clipboardText && completions.needsClipboard) {\n        clipboardText = await this._clipboardService.readText();\n      }\n      if (this._triggerState === undefined) {\n        return;\n      }\n      const model = this._editor.getModel();\n      // const items = completions.items;\n      // if (existing) {\n      // \tconst cmpFn = getSuggestionComparator(snippetSortOrder);\n      // \titems = items.concat(existing.items).sort(cmpFn);\n      // }\n      const ctx = new LineContext(model, this._editor.getPosition(), options);\n      const fuzzySearchOptions = {\n        ...FuzzyScoreOptions.default,\n        firstMatchCanBeWeak: !this._editor.getOption(117 /* EditorOption.suggest */).matchOnWordStartOnly\n      };\n      this._completionModel = new CompletionModel(completions.items, this._context.column, {\n        leadingLineContent: ctx.leadingLineContent,\n        characterCountDelta: ctx.column - this._context.column\n      }, wordDistance, this._editor.getOption(117 /* EditorOption.suggest */), this._editor.getOption(111 /* EditorOption.snippetSuggestions */), fuzzySearchOptions, clipboardText);\n      // store containers so that they can be disposed later\n      this._completionDisposables.add(completions.disposable);\n      this._onNewContext(ctx);\n      // finally report telemetry about durations\n      this._reportDurationsTelemetry(completions.durations);\n      // report invalid completions by source\n      if (!this._envService.isBuilt || this._envService.isExtensionDevelopment) {\n        for (const item of completions.items) {\n          if (item.isInvalid) {\n            this._logService.warn(`[suggest] did IGNORE invalid completion item from ${item.provider._debugDisplayName}`, item.completion);\n          }\n        }\n      }\n    }).catch(onUnexpectedError);\n  }\n  _reportDurationsTelemetry(durations) {\n    if (this._telemetryGate++ % 230 !== 0) {\n      return;\n    }\n    setTimeout(() => {\n      this._telemetryService.publicLog2('suggest.durations.json', {\n        data: JSON.stringify(durations)\n      });\n      this._logService.debug('suggest.durations.json', durations);\n    });\n  }\n  static _createSuggestFilter(editor) {\n    // kind filter and snippet sort rules\n    const result = new Set();\n    // snippet setting\n    const snippetSuggestions = editor.getOption(111 /* EditorOption.snippetSuggestions */);\n    if (snippetSuggestions === 'none') {\n      result.add(27 /* CompletionItemKind.Snippet */);\n    }\n    // type setting\n    const suggestOptions = editor.getOption(117 /* EditorOption.suggest */);\n    if (!suggestOptions.showMethods) {\n      result.add(0 /* CompletionItemKind.Method */);\n    }\n    if (!suggestOptions.showFunctions) {\n      result.add(1 /* CompletionItemKind.Function */);\n    }\n    if (!suggestOptions.showConstructors) {\n      result.add(2 /* CompletionItemKind.Constructor */);\n    }\n    if (!suggestOptions.showFields) {\n      result.add(3 /* CompletionItemKind.Field */);\n    }\n    if (!suggestOptions.showVariables) {\n      result.add(4 /* CompletionItemKind.Variable */);\n    }\n    if (!suggestOptions.showClasses) {\n      result.add(5 /* CompletionItemKind.Class */);\n    }\n    if (!suggestOptions.showStructs) {\n      result.add(6 /* CompletionItemKind.Struct */);\n    }\n    if (!suggestOptions.showInterfaces) {\n      result.add(7 /* CompletionItemKind.Interface */);\n    }\n    if (!suggestOptions.showModules) {\n      result.add(8 /* CompletionItemKind.Module */);\n    }\n    if (!suggestOptions.showProperties) {\n      result.add(9 /* CompletionItemKind.Property */);\n    }\n    if (!suggestOptions.showEvents) {\n      result.add(10 /* CompletionItemKind.Event */);\n    }\n    if (!suggestOptions.showOperators) {\n      result.add(11 /* CompletionItemKind.Operator */);\n    }\n    if (!suggestOptions.showUnits) {\n      result.add(12 /* CompletionItemKind.Unit */);\n    }\n    if (!suggestOptions.showValues) {\n      result.add(13 /* CompletionItemKind.Value */);\n    }\n    if (!suggestOptions.showConstants) {\n      result.add(14 /* CompletionItemKind.Constant */);\n    }\n    if (!suggestOptions.showEnums) {\n      result.add(15 /* CompletionItemKind.Enum */);\n    }\n    if (!suggestOptions.showEnumMembers) {\n      result.add(16 /* CompletionItemKind.EnumMember */);\n    }\n    if (!suggestOptions.showKeywords) {\n      result.add(17 /* CompletionItemKind.Keyword */);\n    }\n    if (!suggestOptions.showWords) {\n      result.add(18 /* CompletionItemKind.Text */);\n    }\n    if (!suggestOptions.showColors) {\n      result.add(19 /* CompletionItemKind.Color */);\n    }\n    if (!suggestOptions.showFiles) {\n      result.add(20 /* CompletionItemKind.File */);\n    }\n    if (!suggestOptions.showReferences) {\n      result.add(21 /* CompletionItemKind.Reference */);\n    }\n    if (!suggestOptions.showColors) {\n      result.add(22 /* CompletionItemKind.Customcolor */);\n    }\n    if (!suggestOptions.showFolders) {\n      result.add(23 /* CompletionItemKind.Folder */);\n    }\n    if (!suggestOptions.showTypeParameters) {\n      result.add(24 /* CompletionItemKind.TypeParameter */);\n    }\n    if (!suggestOptions.showSnippets) {\n      result.add(27 /* CompletionItemKind.Snippet */);\n    }\n    if (!suggestOptions.showUsers) {\n      result.add(25 /* CompletionItemKind.User */);\n    }\n    if (!suggestOptions.showIssues) {\n      result.add(26 /* CompletionItemKind.Issue */);\n    }\n    return {\n      itemKind: result,\n      showDeprecated: suggestOptions.showDeprecated\n    };\n  }\n  _onNewContext(ctx) {\n    if (!this._context) {\n      // happens when 24x7 IntelliSense is enabled and still in its delay\n      return;\n    }\n    if (ctx.lineNumber !== this._context.lineNumber) {\n      // e.g. happens when pressing Enter while IntelliSense is computed\n      this.cancel();\n      return;\n    }\n    if (getLeadingWhitespace(ctx.leadingLineContent) !== getLeadingWhitespace(this._context.leadingLineContent)) {\n      // cancel IntelliSense when line start changes\n      // happens when the current word gets outdented\n      this.cancel();\n      return;\n    }\n    if (ctx.column < this._context.column) {\n      // typed -> moved cursor LEFT -> retrigger if still on a word\n      if (ctx.leadingWord.word) {\n        this.trigger({\n          auto: this._context.triggerOptions.auto,\n          retrigger: true\n        });\n      } else {\n        this.cancel();\n      }\n      return;\n    }\n    if (!this._completionModel) {\n      // happens when IntelliSense is not yet computed\n      return;\n    }\n    if (ctx.leadingWord.word.length !== 0 && ctx.leadingWord.startColumn > this._context.leadingWord.startColumn) {\n      // started a new word while IntelliSense shows -> retrigger but reuse all items that we currently have\n      const shouldAutoTrigger = LineContext.shouldAutoTrigger(this._editor);\n      if (shouldAutoTrigger && this._context) {\n        // shouldAutoTrigger forces tokenization, which can cause pending cursor change events to be emitted, which can cause\n        // suggestions to be cancelled, which causes `this._context` to be undefined\n        const map = this._completionModel.getItemsByProvider();\n        this.trigger({\n          auto: this._context.triggerOptions.auto,\n          retrigger: true,\n          clipboardText: this._completionModel.clipboardText,\n          completionOptions: {\n            providerItemsToReuse: map\n          }\n        });\n      }\n      return;\n    }\n    if (ctx.column > this._context.column && this._completionModel.getIncompleteProvider().size > 0 && ctx.leadingWord.word.length !== 0) {\n      // typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger\n      const providerItemsToReuse = new Map();\n      const providerFilter = new Set();\n      for (const [provider, items] of this._completionModel.getItemsByProvider()) {\n        if (items.length > 0 && items[0].container.incomplete) {\n          providerFilter.add(provider);\n        } else {\n          providerItemsToReuse.set(provider, items);\n        }\n      }\n      this.trigger({\n        auto: this._context.triggerOptions.auto,\n        triggerKind: 2 /* CompletionTriggerKind.TriggerForIncompleteCompletions */,\n        retrigger: true,\n        clipboardText: this._completionModel.clipboardText,\n        completionOptions: {\n          providerFilter,\n          providerItemsToReuse\n        }\n      });\n    } else {\n      // typed -> moved cursor RIGHT -> update UI\n      const oldLineContext = this._completionModel.lineContext;\n      let isFrozen = false;\n      this._completionModel.lineContext = {\n        leadingLineContent: ctx.leadingLineContent,\n        characterCountDelta: ctx.column - this._context.column\n      };\n      if (this._completionModel.items.length === 0) {\n        const shouldAutoTrigger = LineContext.shouldAutoTrigger(this._editor);\n        if (!this._context) {\n          // shouldAutoTrigger forces tokenization, which can cause pending cursor change events to be emitted, which can cause\n          // suggestions to be cancelled, which causes `this._context` to be undefined\n          this.cancel();\n          return;\n        }\n        if (shouldAutoTrigger && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {\n          // retrigger when heading into a new word\n          this.trigger({\n            auto: this._context.triggerOptions.auto,\n            retrigger: true\n          });\n          return;\n        }\n        if (!this._context.triggerOptions.auto) {\n          // freeze when IntelliSense was manually requested\n          this._completionModel.lineContext = oldLineContext;\n          isFrozen = this._completionModel.items.length > 0;\n          if (isFrozen && ctx.leadingWord.word.length === 0) {\n            // there were results before but now there aren't\n            // and also we are not on a word anymore -> cancel\n            this.cancel();\n            return;\n          }\n        } else {\n          // nothing left\n          this.cancel();\n          return;\n        }\n      }\n      this._onDidSuggest.fire({\n        completionModel: this._completionModel,\n        triggerOptions: ctx.triggerOptions,\n        isFrozen\n      });\n    }\n  }\n};\nSuggestModel = SuggestModel_1 = __decorate([__param(1, IEditorWorkerService), __param(2, IClipboardService), __param(3, ITelemetryService), __param(4, ILogService), __param(5, IContextKeyService), __param(6, IConfigurationService), __param(7, ILanguageFeaturesService), __param(8, IEnvironmentService)], SuggestModel);\nexport { SuggestModel };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","SuggestModel_1","TimeoutTimer","CancellationTokenSource","onUnexpectedError","Emitter","DisposableStore","dispose","getLeadingWhitespace","isHighSurrogate","isLowSurrogate","Selection","IEditorWorkerService","WordDistance","IClipboardService","IConfigurationService","IContextKeyService","ILogService","ITelemetryService","CompletionModel","CompletionOptions","getSnippetSuggestSupport","provideSuggestionItems","QuickSuggestionsOptions","ILanguageFeaturesService","FuzzyScoreOptions","assertType","InlineCompletionContextKeys","SnippetController2","IEnvironmentService","LineContext","shouldAutoTrigger","editor","hasModel","model","getModel","pos","getPosition","tokenization","tokenizeIfCheap","lineNumber","word","getWordAtPosition","endColumn","column","startColumn","isNaN","Number","constructor","position","triggerOptions","leadingLineContent","getLineContent","substr","leadingWord","getWordUntilPosition","canShowQuickSuggest","contextKeyService","configurationService","Boolean","getContextKeyValue","inlineSuggestionVisible","suppressSuggestions","undefined","getOption","canShowSuggestOnTriggerCharacters","SuggestModel","_editor","_editorWorkerService","_clipboardService","_telemetryService","_logService","_contextKeyService","_configurationService","_languageFeaturesService","_envService","_toDispose","_triggerCharacterListener","_triggerQuickSuggest","_triggerState","_completionDisposables","_onDidCancel","_onDidTrigger","_onDidSuggest","onDidCancel","event","onDidTrigger","onDidSuggest","_telemetryGate","_currentSelection","getSelection","add","onDidChangeModel","_updateTriggerCharacters","cancel","onDidChangeModelLanguage","onDidChangeConfiguration","completionProvider","onDidChange","_updateActiveSuggestSession","editorIsComposing","onDidCompositionStart","onDidCompositionEnd","_onCompositionEnd","onDidChangeCursorSelection","e","_onCursorChange","onDidChangeModelContent","_refilterCompletionItems","clear","supportsByTriggerCharacter","Map","support","all","ch","triggerCharacters","set","get","Set","checkTriggerCharacter","text","_a","lastChar","charCodeAt","charAt","supports","providerItemsToReuse","_completionModel","provider","items","getItemsByProvider","has","trigger","auto","triggerKind","triggerCharacter","retrigger","clipboardText","completionOptions","providerFilter","onDidType","state","_requestToken","_context","fire","prevSelection","selection","isEmpty","reason","source","containsRange","getEndPosition","isBeforeOrEqual","_doTriggerQuickSuggest","isAllOff","snippetsPreventQuickSuggestions","isInSnippet","cancelAndSet","hasWidgetFocus","config","isAllOn","lineTokens","getLineTokens","tokenType","getStandardTokenType","findTokenIndexAtOffset","Math","max","valueFor","ctx","refilter","_onNewContext","options","_b","_c","_d","_e","_f","shy","suggestCtx","snippetSuggestions","snippetSortOrder","itemKind","itemKindFilter","showDeprecated","_createSuggestFilter","kindFilter","wordDistance","create","completions","token","Promise","then","needsClipboard","readText","fuzzySearchOptions","default","firstMatchCanBeWeak","matchOnWordStartOnly","characterCountDelta","disposable","_reportDurationsTelemetry","durations","isBuilt","isExtensionDevelopment","item","isInvalid","warn","_debugDisplayName","completion","catch","setTimeout","publicLog2","data","JSON","stringify","debug","result","suggestOptions","showMethods","showFunctions","showConstructors","showFields","showVariables","showClasses","showStructs","showInterfaces","showModules","showProperties","showEvents","showOperators","showUnits","showValues","showConstants","showEnums","showEnumMembers","showKeywords","showWords","showColors","showFiles","showReferences","showFolders","showTypeParameters","showSnippets","showUsers","showIssues","map","getIncompleteProvider","size","container","incomplete","oldLineContext","lineContext","isFrozen","completionModel"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar SuggestModel_1;\nimport { TimeoutTimer } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { DisposableStore, dispose } from '../../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace, isHighSurrogate, isLowSurrogate } from '../../../../base/common/strings.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { CompletionModel } from './completionModel.js';\nimport { CompletionOptions, getSnippetSuggestSupport, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { FuzzyScoreOptions } from '../../../../base/common/filters.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { InlineCompletionContextKeys } from '../../inlineCompletions/browser/inlineCompletionContextKeys.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nexport class LineContext {\n    static shouldAutoTrigger(editor) {\n        if (!editor.hasModel()) {\n            return false;\n        }\n        const model = editor.getModel();\n        const pos = editor.getPosition();\n        model.tokenization.tokenizeIfCheap(pos.lineNumber);\n        const word = model.getWordAtPosition(pos);\n        if (!word) {\n            return false;\n        }\n        if (word.endColumn !== pos.column &&\n            word.startColumn + 1 !== pos.column /* after typing a single character before a word */) {\n            return false;\n        }\n        if (!isNaN(Number(word.word))) {\n            return false;\n        }\n        return true;\n    }\n    constructor(model, position, triggerOptions) {\n        this.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n        this.leadingWord = model.getWordUntilPosition(position);\n        this.lineNumber = position.lineNumber;\n        this.column = position.column;\n        this.triggerOptions = triggerOptions;\n    }\n}\nfunction canShowQuickSuggest(editor, contextKeyService, configurationService) {\n    if (!Boolean(contextKeyService.getContextKeyValue(InlineCompletionContextKeys.inlineSuggestionVisible.key))) {\n        // Allow if there is no inline suggestion.\n        return true;\n    }\n    const suppressSuggestions = contextKeyService.getContextKeyValue(InlineCompletionContextKeys.suppressSuggestions.key);\n    if (suppressSuggestions !== undefined) {\n        return !suppressSuggestions;\n    }\n    return !editor.getOption(62 /* EditorOption.inlineSuggest */).suppressSuggestions;\n}\nfunction canShowSuggestOnTriggerCharacters(editor, contextKeyService, configurationService) {\n    if (!Boolean(contextKeyService.getContextKeyValue('inlineSuggestionVisible'))) {\n        // Allow if there is no inline suggestion.\n        return true;\n    }\n    const suppressSuggestions = contextKeyService.getContextKeyValue(InlineCompletionContextKeys.suppressSuggestions.key);\n    if (suppressSuggestions !== undefined) {\n        return !suppressSuggestions;\n    }\n    return !editor.getOption(62 /* EditorOption.inlineSuggest */).suppressSuggestions;\n}\nlet SuggestModel = SuggestModel_1 = class SuggestModel {\n    constructor(_editor, _editorWorkerService, _clipboardService, _telemetryService, _logService, _contextKeyService, _configurationService, _languageFeaturesService, _envService) {\n        this._editor = _editor;\n        this._editorWorkerService = _editorWorkerService;\n        this._clipboardService = _clipboardService;\n        this._telemetryService = _telemetryService;\n        this._logService = _logService;\n        this._contextKeyService = _contextKeyService;\n        this._configurationService = _configurationService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._envService = _envService;\n        this._toDispose = new DisposableStore();\n        this._triggerCharacterListener = new DisposableStore();\n        this._triggerQuickSuggest = new TimeoutTimer();\n        this._triggerState = undefined;\n        this._completionDisposables = new DisposableStore();\n        this._onDidCancel = new Emitter();\n        this._onDidTrigger = new Emitter();\n        this._onDidSuggest = new Emitter();\n        this.onDidCancel = this._onDidCancel.event;\n        this.onDidTrigger = this._onDidTrigger.event;\n        this.onDidSuggest = this._onDidSuggest.event;\n        this._telemetryGate = 0;\n        this._currentSelection = this._editor.getSelection() || new Selection(1, 1, 1, 1);\n        // wire up various listeners\n        this._toDispose.add(this._editor.onDidChangeModel(() => {\n            this._updateTriggerCharacters();\n            this.cancel();\n        }));\n        this._toDispose.add(this._editor.onDidChangeModelLanguage(() => {\n            this._updateTriggerCharacters();\n            this.cancel();\n        }));\n        this._toDispose.add(this._editor.onDidChangeConfiguration(() => {\n            this._updateTriggerCharacters();\n        }));\n        this._toDispose.add(this._languageFeaturesService.completionProvider.onDidChange(() => {\n            this._updateTriggerCharacters();\n            this._updateActiveSuggestSession();\n        }));\n        let editorIsComposing = false;\n        this._toDispose.add(this._editor.onDidCompositionStart(() => {\n            editorIsComposing = true;\n        }));\n        this._toDispose.add(this._editor.onDidCompositionEnd(() => {\n            editorIsComposing = false;\n            this._onCompositionEnd();\n        }));\n        this._toDispose.add(this._editor.onDidChangeCursorSelection(e => {\n            // only trigger suggest when the editor isn't composing a character\n            if (!editorIsComposing) {\n                this._onCursorChange(e);\n            }\n        }));\n        this._toDispose.add(this._editor.onDidChangeModelContent(() => {\n            // only filter completions when the editor isn't composing a character\n            // allow-any-unicode-next-line\n            // e.g. ¨ + u makes ü but just ¨ cannot be used for filtering\n            if (!editorIsComposing && this._triggerState !== undefined) {\n                this._refilterCompletionItems();\n            }\n        }));\n        this._updateTriggerCharacters();\n    }\n    dispose() {\n        dispose(this._triggerCharacterListener);\n        dispose([this._onDidCancel, this._onDidSuggest, this._onDidTrigger, this._triggerQuickSuggest]);\n        this._toDispose.dispose();\n        this._completionDisposables.dispose();\n        this.cancel();\n    }\n    _updateTriggerCharacters() {\n        this._triggerCharacterListener.clear();\n        if (this._editor.getOption(90 /* EditorOption.readOnly */)\n            || !this._editor.hasModel()\n            || !this._editor.getOption(120 /* EditorOption.suggestOnTriggerCharacters */)) {\n            return;\n        }\n        const supportsByTriggerCharacter = new Map();\n        for (const support of this._languageFeaturesService.completionProvider.all(this._editor.getModel())) {\n            for (const ch of support.triggerCharacters || []) {\n                let set = supportsByTriggerCharacter.get(ch);\n                if (!set) {\n                    set = new Set();\n                    set.add(getSnippetSuggestSupport());\n                    supportsByTriggerCharacter.set(ch, set);\n                }\n                set.add(support);\n            }\n        }\n        const checkTriggerCharacter = (text) => {\n            var _a;\n            if (!canShowSuggestOnTriggerCharacters(this._editor, this._contextKeyService, this._configurationService)) {\n                return;\n            }\n            if (LineContext.shouldAutoTrigger(this._editor)) {\n                // don't trigger by trigger characters when this is a case for quick suggest\n                return;\n            }\n            if (!text) {\n                // came here from the compositionEnd-event\n                const position = this._editor.getPosition();\n                const model = this._editor.getModel();\n                text = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n            }\n            let lastChar = '';\n            if (isLowSurrogate(text.charCodeAt(text.length - 1))) {\n                if (isHighSurrogate(text.charCodeAt(text.length - 2))) {\n                    lastChar = text.substr(text.length - 2);\n                }\n            }\n            else {\n                lastChar = text.charAt(text.length - 1);\n            }\n            const supports = supportsByTriggerCharacter.get(lastChar);\n            if (supports) {\n                // keep existing items that where not computed by the\n                // supports/providers that want to trigger now\n                const providerItemsToReuse = new Map();\n                if (this._completionModel) {\n                    for (const [provider, items] of this._completionModel.getItemsByProvider()) {\n                        if (!supports.has(provider)) {\n                            providerItemsToReuse.set(provider, items);\n                        }\n                    }\n                }\n                this.trigger({\n                    auto: true,\n                    triggerKind: 1 /* CompletionTriggerKind.TriggerCharacter */,\n                    triggerCharacter: lastChar,\n                    retrigger: Boolean(this._completionModel),\n                    clipboardText: (_a = this._completionModel) === null || _a === void 0 ? void 0 : _a.clipboardText,\n                    completionOptions: { providerFilter: supports, providerItemsToReuse }\n                });\n            }\n        };\n        this._triggerCharacterListener.add(this._editor.onDidType(checkTriggerCharacter));\n        this._triggerCharacterListener.add(this._editor.onDidCompositionEnd(() => checkTriggerCharacter()));\n    }\n    // --- trigger/retrigger/cancel suggest\n    get state() {\n        if (!this._triggerState) {\n            return 0 /* State.Idle */;\n        }\n        else if (!this._triggerState.auto) {\n            return 1 /* State.Manual */;\n        }\n        else {\n            return 2 /* State.Auto */;\n        }\n    }\n    cancel(retrigger = false) {\n        var _a;\n        if (this._triggerState !== undefined) {\n            this._triggerQuickSuggest.cancel();\n            (_a = this._requestToken) === null || _a === void 0 ? void 0 : _a.cancel();\n            this._requestToken = undefined;\n            this._triggerState = undefined;\n            this._completionModel = undefined;\n            this._context = undefined;\n            this._onDidCancel.fire({ retrigger });\n        }\n    }\n    clear() {\n        this._completionDisposables.clear();\n    }\n    _updateActiveSuggestSession() {\n        if (this._triggerState !== undefined) {\n            if (!this._editor.hasModel() || !this._languageFeaturesService.completionProvider.has(this._editor.getModel())) {\n                this.cancel();\n            }\n            else {\n                this.trigger({ auto: this._triggerState.auto, retrigger: true });\n            }\n        }\n    }\n    _onCursorChange(e) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        const prevSelection = this._currentSelection;\n        this._currentSelection = this._editor.getSelection();\n        if (!e.selection.isEmpty()\n            || (e.reason !== 0 /* CursorChangeReason.NotSet */ && e.reason !== 3 /* CursorChangeReason.Explicit */)\n            || (e.source !== 'keyboard' && e.source !== 'deleteLeft')) {\n            // Early exit if nothing needs to be done!\n            // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n            this.cancel();\n            return;\n        }\n        if (this._triggerState === undefined && e.reason === 0 /* CursorChangeReason.NotSet */) {\n            if (prevSelection.containsRange(this._currentSelection) || prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) {\n                // cursor did move RIGHT due to typing -> trigger quick suggest\n                this._doTriggerQuickSuggest();\n            }\n        }\n        else if (this._triggerState !== undefined && e.reason === 3 /* CursorChangeReason.Explicit */) {\n            // suggest is active and something like cursor keys are used to move\n            // the cursor. this means we can refilter at the new position\n            this._refilterCompletionItems();\n        }\n    }\n    _onCompositionEnd() {\n        // trigger or refilter when composition ends\n        if (this._triggerState === undefined) {\n            this._doTriggerQuickSuggest();\n        }\n        else {\n            this._refilterCompletionItems();\n        }\n    }\n    _doTriggerQuickSuggest() {\n        var _a;\n        if (QuickSuggestionsOptions.isAllOff(this._editor.getOption(88 /* EditorOption.quickSuggestions */))) {\n            // not enabled\n            return;\n        }\n        if (this._editor.getOption(117 /* EditorOption.suggest */).snippetsPreventQuickSuggestions && ((_a = SnippetController2.get(this._editor)) === null || _a === void 0 ? void 0 : _a.isInSnippet())) {\n            // no quick suggestion when in snippet mode\n            return;\n        }\n        this.cancel();\n        this._triggerQuickSuggest.cancelAndSet(() => {\n            if (this._triggerState !== undefined) {\n                return;\n            }\n            if (!LineContext.shouldAutoTrigger(this._editor)) {\n                return;\n            }\n            if (!this._editor.hasModel() || !this._editor.hasWidgetFocus()) {\n                return;\n            }\n            const model = this._editor.getModel();\n            const pos = this._editor.getPosition();\n            // validate enabled now\n            const config = this._editor.getOption(88 /* EditorOption.quickSuggestions */);\n            if (QuickSuggestionsOptions.isAllOff(config)) {\n                return;\n            }\n            if (!QuickSuggestionsOptions.isAllOn(config)) {\n                // Check the type of the token that triggered this\n                model.tokenization.tokenizeIfCheap(pos.lineNumber);\n                const lineTokens = model.tokenization.getLineTokens(pos.lineNumber);\n                const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));\n                if (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'on') {\n                    return;\n                }\n            }\n            if (!canShowQuickSuggest(this._editor, this._contextKeyService, this._configurationService)) {\n                // do not trigger quick suggestions if inline suggestions are shown\n                return;\n            }\n            if (!this._languageFeaturesService.completionProvider.has(model)) {\n                return;\n            }\n            // we made it till here -> trigger now\n            this.trigger({ auto: true });\n        }, this._editor.getOption(89 /* EditorOption.quickSuggestionsDelay */));\n    }\n    _refilterCompletionItems() {\n        assertType(this._editor.hasModel());\n        assertType(this._triggerState !== undefined);\n        const model = this._editor.getModel();\n        const position = this._editor.getPosition();\n        const ctx = new LineContext(model, position, { ...this._triggerState, refilter: true });\n        this._onNewContext(ctx);\n    }\n    trigger(options) {\n        var _a, _b, _c, _d, _e, _f;\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        const model = this._editor.getModel();\n        const ctx = new LineContext(model, this._editor.getPosition(), options);\n        // Cancel previous requests, change state & update UI\n        this.cancel(options.retrigger);\n        this._triggerState = options;\n        this._onDidTrigger.fire({ auto: options.auto, shy: (_a = options.shy) !== null && _a !== void 0 ? _a : false, position: this._editor.getPosition() });\n        // Capture context when request was sent\n        this._context = ctx;\n        // Build context for request\n        let suggestCtx = { triggerKind: (_b = options.triggerKind) !== null && _b !== void 0 ? _b : 0 /* CompletionTriggerKind.Invoke */ };\n        if (options.triggerCharacter) {\n            suggestCtx = {\n                triggerKind: 1 /* CompletionTriggerKind.TriggerCharacter */,\n                triggerCharacter: options.triggerCharacter\n            };\n        }\n        this._requestToken = new CancellationTokenSource();\n        // kind filter and snippet sort rules\n        const snippetSuggestions = this._editor.getOption(111 /* EditorOption.snippetSuggestions */);\n        let snippetSortOrder = 1 /* SnippetSortOrder.Inline */;\n        switch (snippetSuggestions) {\n            case 'top':\n                snippetSortOrder = 0 /* SnippetSortOrder.Top */;\n                break;\n            // \t↓ that's the default anyways...\n            // case 'inline':\n            // \tsnippetSortOrder = SnippetSortOrder.Inline;\n            // \tbreak;\n            case 'bottom':\n                snippetSortOrder = 2 /* SnippetSortOrder.Bottom */;\n                break;\n        }\n        const { itemKind: itemKindFilter, showDeprecated } = SuggestModel_1._createSuggestFilter(this._editor);\n        const completionOptions = new CompletionOptions(snippetSortOrder, (_d = (_c = options.completionOptions) === null || _c === void 0 ? void 0 : _c.kindFilter) !== null && _d !== void 0 ? _d : itemKindFilter, (_e = options.completionOptions) === null || _e === void 0 ? void 0 : _e.providerFilter, (_f = options.completionOptions) === null || _f === void 0 ? void 0 : _f.providerItemsToReuse, showDeprecated);\n        const wordDistance = WordDistance.create(this._editorWorkerService, this._editor);\n        const completions = provideSuggestionItems(this._languageFeaturesService.completionProvider, model, this._editor.getPosition(), completionOptions, suggestCtx, this._requestToken.token);\n        Promise.all([completions, wordDistance]).then(async ([completions, wordDistance]) => {\n            var _a;\n            (_a = this._requestToken) === null || _a === void 0 ? void 0 : _a.dispose();\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            let clipboardText = options === null || options === void 0 ? void 0 : options.clipboardText;\n            if (!clipboardText && completions.needsClipboard) {\n                clipboardText = await this._clipboardService.readText();\n            }\n            if (this._triggerState === undefined) {\n                return;\n            }\n            const model = this._editor.getModel();\n            // const items = completions.items;\n            // if (existing) {\n            // \tconst cmpFn = getSuggestionComparator(snippetSortOrder);\n            // \titems = items.concat(existing.items).sort(cmpFn);\n            // }\n            const ctx = new LineContext(model, this._editor.getPosition(), options);\n            const fuzzySearchOptions = {\n                ...FuzzyScoreOptions.default,\n                firstMatchCanBeWeak: !this._editor.getOption(117 /* EditorOption.suggest */).matchOnWordStartOnly\n            };\n            this._completionModel = new CompletionModel(completions.items, this._context.column, {\n                leadingLineContent: ctx.leadingLineContent,\n                characterCountDelta: ctx.column - this._context.column\n            }, wordDistance, this._editor.getOption(117 /* EditorOption.suggest */), this._editor.getOption(111 /* EditorOption.snippetSuggestions */), fuzzySearchOptions, clipboardText);\n            // store containers so that they can be disposed later\n            this._completionDisposables.add(completions.disposable);\n            this._onNewContext(ctx);\n            // finally report telemetry about durations\n            this._reportDurationsTelemetry(completions.durations);\n            // report invalid completions by source\n            if (!this._envService.isBuilt || this._envService.isExtensionDevelopment) {\n                for (const item of completions.items) {\n                    if (item.isInvalid) {\n                        this._logService.warn(`[suggest] did IGNORE invalid completion item from ${item.provider._debugDisplayName}`, item.completion);\n                    }\n                }\n            }\n        }).catch(onUnexpectedError);\n    }\n    _reportDurationsTelemetry(durations) {\n        if (this._telemetryGate++ % 230 !== 0) {\n            return;\n        }\n        setTimeout(() => {\n            this._telemetryService.publicLog2('suggest.durations.json', { data: JSON.stringify(durations) });\n            this._logService.debug('suggest.durations.json', durations);\n        });\n    }\n    static _createSuggestFilter(editor) {\n        // kind filter and snippet sort rules\n        const result = new Set();\n        // snippet setting\n        const snippetSuggestions = editor.getOption(111 /* EditorOption.snippetSuggestions */);\n        if (snippetSuggestions === 'none') {\n            result.add(27 /* CompletionItemKind.Snippet */);\n        }\n        // type setting\n        const suggestOptions = editor.getOption(117 /* EditorOption.suggest */);\n        if (!suggestOptions.showMethods) {\n            result.add(0 /* CompletionItemKind.Method */);\n        }\n        if (!suggestOptions.showFunctions) {\n            result.add(1 /* CompletionItemKind.Function */);\n        }\n        if (!suggestOptions.showConstructors) {\n            result.add(2 /* CompletionItemKind.Constructor */);\n        }\n        if (!suggestOptions.showFields) {\n            result.add(3 /* CompletionItemKind.Field */);\n        }\n        if (!suggestOptions.showVariables) {\n            result.add(4 /* CompletionItemKind.Variable */);\n        }\n        if (!suggestOptions.showClasses) {\n            result.add(5 /* CompletionItemKind.Class */);\n        }\n        if (!suggestOptions.showStructs) {\n            result.add(6 /* CompletionItemKind.Struct */);\n        }\n        if (!suggestOptions.showInterfaces) {\n            result.add(7 /* CompletionItemKind.Interface */);\n        }\n        if (!suggestOptions.showModules) {\n            result.add(8 /* CompletionItemKind.Module */);\n        }\n        if (!suggestOptions.showProperties) {\n            result.add(9 /* CompletionItemKind.Property */);\n        }\n        if (!suggestOptions.showEvents) {\n            result.add(10 /* CompletionItemKind.Event */);\n        }\n        if (!suggestOptions.showOperators) {\n            result.add(11 /* CompletionItemKind.Operator */);\n        }\n        if (!suggestOptions.showUnits) {\n            result.add(12 /* CompletionItemKind.Unit */);\n        }\n        if (!suggestOptions.showValues) {\n            result.add(13 /* CompletionItemKind.Value */);\n        }\n        if (!suggestOptions.showConstants) {\n            result.add(14 /* CompletionItemKind.Constant */);\n        }\n        if (!suggestOptions.showEnums) {\n            result.add(15 /* CompletionItemKind.Enum */);\n        }\n        if (!suggestOptions.showEnumMembers) {\n            result.add(16 /* CompletionItemKind.EnumMember */);\n        }\n        if (!suggestOptions.showKeywords) {\n            result.add(17 /* CompletionItemKind.Keyword */);\n        }\n        if (!suggestOptions.showWords) {\n            result.add(18 /* CompletionItemKind.Text */);\n        }\n        if (!suggestOptions.showColors) {\n            result.add(19 /* CompletionItemKind.Color */);\n        }\n        if (!suggestOptions.showFiles) {\n            result.add(20 /* CompletionItemKind.File */);\n        }\n        if (!suggestOptions.showReferences) {\n            result.add(21 /* CompletionItemKind.Reference */);\n        }\n        if (!suggestOptions.showColors) {\n            result.add(22 /* CompletionItemKind.Customcolor */);\n        }\n        if (!suggestOptions.showFolders) {\n            result.add(23 /* CompletionItemKind.Folder */);\n        }\n        if (!suggestOptions.showTypeParameters) {\n            result.add(24 /* CompletionItemKind.TypeParameter */);\n        }\n        if (!suggestOptions.showSnippets) {\n            result.add(27 /* CompletionItemKind.Snippet */);\n        }\n        if (!suggestOptions.showUsers) {\n            result.add(25 /* CompletionItemKind.User */);\n        }\n        if (!suggestOptions.showIssues) {\n            result.add(26 /* CompletionItemKind.Issue */);\n        }\n        return { itemKind: result, showDeprecated: suggestOptions.showDeprecated };\n    }\n    _onNewContext(ctx) {\n        if (!this._context) {\n            // happens when 24x7 IntelliSense is enabled and still in its delay\n            return;\n        }\n        if (ctx.lineNumber !== this._context.lineNumber) {\n            // e.g. happens when pressing Enter while IntelliSense is computed\n            this.cancel();\n            return;\n        }\n        if (getLeadingWhitespace(ctx.leadingLineContent) !== getLeadingWhitespace(this._context.leadingLineContent)) {\n            // cancel IntelliSense when line start changes\n            // happens when the current word gets outdented\n            this.cancel();\n            return;\n        }\n        if (ctx.column < this._context.column) {\n            // typed -> moved cursor LEFT -> retrigger if still on a word\n            if (ctx.leadingWord.word) {\n                this.trigger({ auto: this._context.triggerOptions.auto, retrigger: true });\n            }\n            else {\n                this.cancel();\n            }\n            return;\n        }\n        if (!this._completionModel) {\n            // happens when IntelliSense is not yet computed\n            return;\n        }\n        if (ctx.leadingWord.word.length !== 0 && ctx.leadingWord.startColumn > this._context.leadingWord.startColumn) {\n            // started a new word while IntelliSense shows -> retrigger but reuse all items that we currently have\n            const shouldAutoTrigger = LineContext.shouldAutoTrigger(this._editor);\n            if (shouldAutoTrigger && this._context) {\n                // shouldAutoTrigger forces tokenization, which can cause pending cursor change events to be emitted, which can cause\n                // suggestions to be cancelled, which causes `this._context` to be undefined\n                const map = this._completionModel.getItemsByProvider();\n                this.trigger({\n                    auto: this._context.triggerOptions.auto,\n                    retrigger: true,\n                    clipboardText: this._completionModel.clipboardText,\n                    completionOptions: { providerItemsToReuse: map }\n                });\n            }\n            return;\n        }\n        if (ctx.column > this._context.column && this._completionModel.getIncompleteProvider().size > 0 && ctx.leadingWord.word.length !== 0) {\n            // typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger\n            const providerItemsToReuse = new Map();\n            const providerFilter = new Set();\n            for (const [provider, items] of this._completionModel.getItemsByProvider()) {\n                if (items.length > 0 && items[0].container.incomplete) {\n                    providerFilter.add(provider);\n                }\n                else {\n                    providerItemsToReuse.set(provider, items);\n                }\n            }\n            this.trigger({\n                auto: this._context.triggerOptions.auto,\n                triggerKind: 2 /* CompletionTriggerKind.TriggerForIncompleteCompletions */,\n                retrigger: true,\n                clipboardText: this._completionModel.clipboardText,\n                completionOptions: { providerFilter, providerItemsToReuse }\n            });\n        }\n        else {\n            // typed -> moved cursor RIGHT -> update UI\n            const oldLineContext = this._completionModel.lineContext;\n            let isFrozen = false;\n            this._completionModel.lineContext = {\n                leadingLineContent: ctx.leadingLineContent,\n                characterCountDelta: ctx.column - this._context.column\n            };\n            if (this._completionModel.items.length === 0) {\n                const shouldAutoTrigger = LineContext.shouldAutoTrigger(this._editor);\n                if (!this._context) {\n                    // shouldAutoTrigger forces tokenization, which can cause pending cursor change events to be emitted, which can cause\n                    // suggestions to be cancelled, which causes `this._context` to be undefined\n                    this.cancel();\n                    return;\n                }\n                if (shouldAutoTrigger && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {\n                    // retrigger when heading into a new word\n                    this.trigger({ auto: this._context.triggerOptions.auto, retrigger: true });\n                    return;\n                }\n                if (!this._context.triggerOptions.auto) {\n                    // freeze when IntelliSense was manually requested\n                    this._completionModel.lineContext = oldLineContext;\n                    isFrozen = this._completionModel.items.length > 0;\n                    if (isFrozen && ctx.leadingWord.word.length === 0) {\n                        // there were results before but now there aren't\n                        // and also we are not on a word anymore -> cancel\n                        this.cancel();\n                        return;\n                    }\n                }\n                else {\n                    // nothing left\n                    this.cancel();\n                    return;\n                }\n            }\n            this._onDidSuggest.fire({\n                completionModel: this._completionModel,\n                triggerOptions: ctx.triggerOptions,\n                isFrozen,\n            });\n        }\n    }\n};\nSuggestModel = SuggestModel_1 = __decorate([\n    __param(1, IEditorWorkerService),\n    __param(2, IClipboardService),\n    __param(3, ITelemetryService),\n    __param(4, ILogService),\n    __param(5, IContextKeyService),\n    __param(6, IConfigurationService),\n    __param(7, ILanguageFeaturesService),\n    __param(8, IEnvironmentService)\n], SuggestModel);\nexport { SuggestModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}