{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { TreeError } from './tree.js';\nimport { splice, tail2 } from '../../../common/arrays.js';\nimport { Delayer } from '../../../common/async.js';\nimport { MicrotaskDelay } from '../../../common/symbols.js';\nimport { LcsDiff } from '../../../common/diff/diff.js';\nimport { Emitter, EventBufferer } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nexport function isFilterResult(obj) {\n  return typeof obj === 'object' && 'visibility' in obj && 'data' in obj;\n}\nexport function getVisibleState(visibility) {\n  switch (visibility) {\n    case true:\n      return 1 /* TreeVisibility.Visible */;\n    case false:\n      return 0 /* TreeVisibility.Hidden */;\n    default:\n      return visibility;\n  }\n}\nfunction isCollapsibleStateUpdate(update) {\n  return typeof update.collapsible === 'boolean';\n}\nexport class IndexTreeModel {\n  constructor(user, list, rootElement, options = {}) {\n    this.user = user;\n    this.list = list;\n    this.rootRef = [];\n    this.eventBufferer = new EventBufferer();\n    this._onDidChangeCollapseState = new Emitter();\n    this.onDidChangeCollapseState = this.eventBufferer.wrapEvent(this._onDidChangeCollapseState.event);\n    this._onDidChangeRenderNodeCount = new Emitter();\n    this.onDidChangeRenderNodeCount = this.eventBufferer.wrapEvent(this._onDidChangeRenderNodeCount.event);\n    this._onDidSplice = new Emitter();\n    this.onDidSplice = this._onDidSplice.event;\n    this.refilterDelayer = new Delayer(MicrotaskDelay);\n    this.collapseByDefault = typeof options.collapseByDefault === 'undefined' ? false : options.collapseByDefault;\n    this.filter = options.filter;\n    this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n    this.root = {\n      parent: undefined,\n      element: rootElement,\n      children: [],\n      depth: 0,\n      visibleChildrenCount: 0,\n      visibleChildIndex: -1,\n      collapsible: false,\n      collapsed: false,\n      renderNodeCount: 0,\n      visibility: 1 /* TreeVisibility.Visible */,\n      visible: true,\n      filterData: undefined\n    };\n  }\n  splice(location, deleteCount, toInsert = Iterable.empty(), options = {}) {\n    if (location.length === 0) {\n      throw new TreeError(this.user, 'Invalid tree location');\n    }\n    if (options.diffIdentityProvider) {\n      this.spliceSmart(options.diffIdentityProvider, location, deleteCount, toInsert, options);\n    } else {\n      this.spliceSimple(location, deleteCount, toInsert, options);\n    }\n  }\n  spliceSmart(identity, location, deleteCount, toInsertIterable, options, recurseLevels) {\n    var _a;\n    if (toInsertIterable === void 0) {\n      toInsertIterable = Iterable.empty();\n    }\n    if (recurseLevels === void 0) {\n      recurseLevels = (_a = options.diffDepth) !== null && _a !== void 0 ? _a : 0;\n    }\n    const {\n      parentNode\n    } = this.getParentNodeWithListIndex(location);\n    if (!parentNode.lastDiffIds) {\n      return this.spliceSimple(location, deleteCount, toInsertIterable, options);\n    }\n    const toInsert = [...toInsertIterable];\n    const index = location[location.length - 1];\n    const diff = new LcsDiff({\n      getElements: () => parentNode.lastDiffIds\n    }, {\n      getElements: () => [...parentNode.children.slice(0, index), ...toInsert, ...parentNode.children.slice(index + deleteCount)].map(e => identity.getId(e.element).toString())\n    }).ComputeDiff(false);\n    // if we were given a 'best effort' diff, use default behavior\n    if (diff.quitEarly) {\n      parentNode.lastDiffIds = undefined;\n      return this.spliceSimple(location, deleteCount, toInsert, options);\n    }\n    const locationPrefix = location.slice(0, -1);\n    const recurseSplice = (fromOriginal, fromModified, count) => {\n      if (recurseLevels > 0) {\n        for (let i = 0; i < count; i++) {\n          fromOriginal--;\n          fromModified--;\n          this.spliceSmart(identity, [...locationPrefix, fromOriginal, 0], Number.MAX_SAFE_INTEGER, toInsert[fromModified].children, options, recurseLevels - 1);\n        }\n      }\n    };\n    let lastStartO = Math.min(parentNode.children.length, index + deleteCount);\n    let lastStartM = toInsert.length;\n    for (const change of diff.changes.sort((a, b) => b.originalStart - a.originalStart)) {\n      recurseSplice(lastStartO, lastStartM, lastStartO - (change.originalStart + change.originalLength));\n      lastStartO = change.originalStart;\n      lastStartM = change.modifiedStart - index;\n      this.spliceSimple([...locationPrefix, lastStartO], change.originalLength, Iterable.slice(toInsert, lastStartM, lastStartM + change.modifiedLength), options);\n    }\n    // at this point, startO === startM === count since any remaining prefix should match\n    recurseSplice(lastStartO, lastStartM, lastStartO);\n  }\n  spliceSimple(location, deleteCount, toInsert = Iterable.empty(), {\n    onDidCreateNode,\n    onDidDeleteNode,\n    diffIdentityProvider\n  }) {\n    const {\n      parentNode,\n      listIndex,\n      revealed,\n      visible\n    } = this.getParentNodeWithListIndex(location);\n    const treeListElementsToInsert = [];\n    const nodesToInsertIterator = Iterable.map(toInsert, el => this.createTreeNode(el, parentNode, parentNode.visible ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */, revealed, treeListElementsToInsert, onDidCreateNode));\n    const lastIndex = location[location.length - 1];\n    const lastHadChildren = parentNode.children.length > 0;\n    // figure out what's the visible child start index right before the\n    // splice point\n    let visibleChildStartIndex = 0;\n    for (let i = lastIndex; i >= 0 && i < parentNode.children.length; i--) {\n      const child = parentNode.children[i];\n      if (child.visible) {\n        visibleChildStartIndex = child.visibleChildIndex;\n        break;\n      }\n    }\n    const nodesToInsert = [];\n    let insertedVisibleChildrenCount = 0;\n    let renderNodeCount = 0;\n    for (const child of nodesToInsertIterator) {\n      nodesToInsert.push(child);\n      renderNodeCount += child.renderNodeCount;\n      if (child.visible) {\n        child.visibleChildIndex = visibleChildStartIndex + insertedVisibleChildrenCount++;\n      }\n    }\n    const deletedNodes = splice(parentNode.children, lastIndex, deleteCount, nodesToInsert);\n    if (!diffIdentityProvider) {\n      parentNode.lastDiffIds = undefined;\n    } else if (parentNode.lastDiffIds) {\n      splice(parentNode.lastDiffIds, lastIndex, deleteCount, nodesToInsert.map(n => diffIdentityProvider.getId(n.element).toString()));\n    } else {\n      parentNode.lastDiffIds = parentNode.children.map(n => diffIdentityProvider.getId(n.element).toString());\n    }\n    // figure out what is the count of deleted visible children\n    let deletedVisibleChildrenCount = 0;\n    for (const child of deletedNodes) {\n      if (child.visible) {\n        deletedVisibleChildrenCount++;\n      }\n    }\n    // and adjust for all visible children after the splice point\n    if (deletedVisibleChildrenCount !== 0) {\n      for (let i = lastIndex + nodesToInsert.length; i < parentNode.children.length; i++) {\n        const child = parentNode.children[i];\n        if (child.visible) {\n          child.visibleChildIndex -= deletedVisibleChildrenCount;\n        }\n      }\n    }\n    // update parent's visible children count\n    parentNode.visibleChildrenCount += insertedVisibleChildrenCount - deletedVisibleChildrenCount;\n    if (revealed && visible) {\n      const visibleDeleteCount = deletedNodes.reduce((r, node) => r + (node.visible ? node.renderNodeCount : 0), 0);\n      this._updateAncestorsRenderNodeCount(parentNode, renderNodeCount - visibleDeleteCount);\n      this.list.splice(listIndex, visibleDeleteCount, treeListElementsToInsert);\n    }\n    if (deletedNodes.length > 0 && onDidDeleteNode) {\n      const visit = node => {\n        onDidDeleteNode(node);\n        node.children.forEach(visit);\n      };\n      deletedNodes.forEach(visit);\n    }\n    this._onDidSplice.fire({\n      insertedNodes: nodesToInsert,\n      deletedNodes\n    });\n    const currentlyHasChildren = parentNode.children.length > 0;\n    if (lastHadChildren !== currentlyHasChildren) {\n      this.setCollapsible(location.slice(0, -1), currentlyHasChildren);\n    }\n    let node = parentNode;\n    while (node) {\n      if (node.visibility === 2 /* TreeVisibility.Recurse */) {\n        // delayed to avoid excessive refiltering, see #135941\n        this.refilterDelayer.trigger(() => this.refilter());\n        break;\n      }\n      node = node.parent;\n    }\n  }\n  rerender(location) {\n    if (location.length === 0) {\n      throw new TreeError(this.user, 'Invalid tree location');\n    }\n    const {\n      node,\n      listIndex,\n      revealed\n    } = this.getTreeNodeWithListIndex(location);\n    if (node.visible && revealed) {\n      this.list.splice(listIndex, 1, [node]);\n    }\n  }\n  has(location) {\n    return this.hasTreeNode(location);\n  }\n  getListIndex(location) {\n    const {\n      listIndex,\n      visible,\n      revealed\n    } = this.getTreeNodeWithListIndex(location);\n    return visible && revealed ? listIndex : -1;\n  }\n  getListRenderCount(location) {\n    return this.getTreeNode(location).renderNodeCount;\n  }\n  isCollapsible(location) {\n    return this.getTreeNode(location).collapsible;\n  }\n  setCollapsible(location, collapsible) {\n    const node = this.getTreeNode(location);\n    if (typeof collapsible === 'undefined') {\n      collapsible = !node.collapsible;\n    }\n    const update = {\n      collapsible\n    };\n    return this.eventBufferer.bufferEvents(() => this._setCollapseState(location, update));\n  }\n  isCollapsed(location) {\n    return this.getTreeNode(location).collapsed;\n  }\n  setCollapsed(location, collapsed, recursive) {\n    const node = this.getTreeNode(location);\n    if (typeof collapsed === 'undefined') {\n      collapsed = !node.collapsed;\n    }\n    const update = {\n      collapsed,\n      recursive: recursive || false\n    };\n    return this.eventBufferer.bufferEvents(() => this._setCollapseState(location, update));\n  }\n  _setCollapseState(location, update) {\n    const {\n      node,\n      listIndex,\n      revealed\n    } = this.getTreeNodeWithListIndex(location);\n    const result = this._setListNodeCollapseState(node, listIndex, revealed, update);\n    if (node !== this.root && this.autoExpandSingleChildren && result && !isCollapsibleStateUpdate(update) && node.collapsible && !node.collapsed && !update.recursive) {\n      let onlyVisibleChildIndex = -1;\n      for (let i = 0; i < node.children.length; i++) {\n        const child = node.children[i];\n        if (child.visible) {\n          if (onlyVisibleChildIndex > -1) {\n            onlyVisibleChildIndex = -1;\n            break;\n          } else {\n            onlyVisibleChildIndex = i;\n          }\n        }\n      }\n      if (onlyVisibleChildIndex > -1) {\n        this._setCollapseState([...location, onlyVisibleChildIndex], update);\n      }\n    }\n    return result;\n  }\n  _setListNodeCollapseState(node, listIndex, revealed, update) {\n    const result = this._setNodeCollapseState(node, update, false);\n    if (!revealed || !node.visible || !result) {\n      return result;\n    }\n    const previousRenderNodeCount = node.renderNodeCount;\n    const toInsert = this.updateNodeAfterCollapseChange(node);\n    const deleteCount = previousRenderNodeCount - (listIndex === -1 ? 0 : 1);\n    this.list.splice(listIndex + 1, deleteCount, toInsert.slice(1));\n    return result;\n  }\n  _setNodeCollapseState(node, update, deep) {\n    let result;\n    if (node === this.root) {\n      result = false;\n    } else {\n      if (isCollapsibleStateUpdate(update)) {\n        result = node.collapsible !== update.collapsible;\n        node.collapsible = update.collapsible;\n      } else if (!node.collapsible) {\n        result = false;\n      } else {\n        result = node.collapsed !== update.collapsed;\n        node.collapsed = update.collapsed;\n      }\n      if (result) {\n        this._onDidChangeCollapseState.fire({\n          node,\n          deep\n        });\n      }\n    }\n    if (!isCollapsibleStateUpdate(update) && update.recursive) {\n      for (const child of node.children) {\n        result = this._setNodeCollapseState(child, update, true) || result;\n      }\n    }\n    return result;\n  }\n  expandTo(location) {\n    this.eventBufferer.bufferEvents(() => {\n      let node = this.getTreeNode(location);\n      while (node.parent) {\n        node = node.parent;\n        location = location.slice(0, location.length - 1);\n        if (node.collapsed) {\n          this._setCollapseState(location, {\n            collapsed: false,\n            recursive: false\n          });\n        }\n      }\n    });\n  }\n  refilter() {\n    const previousRenderNodeCount = this.root.renderNodeCount;\n    const toInsert = this.updateNodeAfterFilterChange(this.root);\n    this.list.splice(0, previousRenderNodeCount, toInsert);\n    this.refilterDelayer.cancel();\n  }\n  createTreeNode(treeElement, parent, parentVisibility, revealed, treeListElements, onDidCreateNode) {\n    const node = {\n      parent,\n      element: treeElement.element,\n      children: [],\n      depth: parent.depth + 1,\n      visibleChildrenCount: 0,\n      visibleChildIndex: -1,\n      collapsible: typeof treeElement.collapsible === 'boolean' ? treeElement.collapsible : typeof treeElement.collapsed !== 'undefined',\n      collapsed: typeof treeElement.collapsed === 'undefined' ? this.collapseByDefault : treeElement.collapsed,\n      renderNodeCount: 1,\n      visibility: 1 /* TreeVisibility.Visible */,\n      visible: true,\n      filterData: undefined\n    };\n    const visibility = this._filterNode(node, parentVisibility);\n    node.visibility = visibility;\n    if (revealed) {\n      treeListElements.push(node);\n    }\n    const childElements = treeElement.children || Iterable.empty();\n    const childRevealed = revealed && visibility !== 0 /* TreeVisibility.Hidden */ && !node.collapsed;\n    let visibleChildrenCount = 0;\n    let renderNodeCount = 1;\n    for (const el of childElements) {\n      const child = this.createTreeNode(el, node, visibility, childRevealed, treeListElements, onDidCreateNode);\n      node.children.push(child);\n      renderNodeCount += child.renderNodeCount;\n      if (child.visible) {\n        child.visibleChildIndex = visibleChildrenCount++;\n      }\n    }\n    node.collapsible = node.collapsible || node.children.length > 0;\n    node.visibleChildrenCount = visibleChildrenCount;\n    node.visible = visibility === 2 /* TreeVisibility.Recurse */ ? visibleChildrenCount > 0 : visibility === 1 /* TreeVisibility.Visible */;\n    if (!node.visible) {\n      node.renderNodeCount = 0;\n      if (revealed) {\n        treeListElements.pop();\n      }\n    } else if (!node.collapsed) {\n      node.renderNodeCount = renderNodeCount;\n    }\n    onDidCreateNode === null || onDidCreateNode === void 0 ? void 0 : onDidCreateNode(node);\n    return node;\n  }\n  updateNodeAfterCollapseChange(node) {\n    const previousRenderNodeCount = node.renderNodeCount;\n    const result = [];\n    this._updateNodeAfterCollapseChange(node, result);\n    this._updateAncestorsRenderNodeCount(node.parent, result.length - previousRenderNodeCount);\n    return result;\n  }\n  _updateNodeAfterCollapseChange(node, result) {\n    if (node.visible === false) {\n      return 0;\n    }\n    result.push(node);\n    node.renderNodeCount = 1;\n    if (!node.collapsed) {\n      for (const child of node.children) {\n        node.renderNodeCount += this._updateNodeAfterCollapseChange(child, result);\n      }\n    }\n    this._onDidChangeRenderNodeCount.fire(node);\n    return node.renderNodeCount;\n  }\n  updateNodeAfterFilterChange(node) {\n    const previousRenderNodeCount = node.renderNodeCount;\n    const result = [];\n    this._updateNodeAfterFilterChange(node, node.visible ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */, result);\n    this._updateAncestorsRenderNodeCount(node.parent, result.length - previousRenderNodeCount);\n    return result;\n  }\n  _updateNodeAfterFilterChange(node, parentVisibility, result, revealed = true) {\n    let visibility;\n    if (node !== this.root) {\n      visibility = this._filterNode(node, parentVisibility);\n      if (visibility === 0 /* TreeVisibility.Hidden */) {\n        node.visible = false;\n        node.renderNodeCount = 0;\n        return false;\n      }\n      if (revealed) {\n        result.push(node);\n      }\n    }\n    const resultStartLength = result.length;\n    node.renderNodeCount = node === this.root ? 0 : 1;\n    let hasVisibleDescendants = false;\n    if (!node.collapsed || visibility !== 0 /* TreeVisibility.Hidden */) {\n      let visibleChildIndex = 0;\n      for (const child of node.children) {\n        hasVisibleDescendants = this._updateNodeAfterFilterChange(child, visibility, result, revealed && !node.collapsed) || hasVisibleDescendants;\n        if (child.visible) {\n          child.visibleChildIndex = visibleChildIndex++;\n        }\n      }\n      node.visibleChildrenCount = visibleChildIndex;\n    } else {\n      node.visibleChildrenCount = 0;\n    }\n    if (node !== this.root) {\n      node.visible = visibility === 2 /* TreeVisibility.Recurse */ ? hasVisibleDescendants : visibility === 1 /* TreeVisibility.Visible */;\n      node.visibility = visibility;\n    }\n    if (!node.visible) {\n      node.renderNodeCount = 0;\n      if (revealed) {\n        result.pop();\n      }\n    } else if (!node.collapsed) {\n      node.renderNodeCount += result.length - resultStartLength;\n    }\n    this._onDidChangeRenderNodeCount.fire(node);\n    return node.visible;\n  }\n  _updateAncestorsRenderNodeCount(node, diff) {\n    if (diff === 0) {\n      return;\n    }\n    while (node) {\n      node.renderNodeCount += diff;\n      this._onDidChangeRenderNodeCount.fire(node);\n      node = node.parent;\n    }\n  }\n  _filterNode(node, parentVisibility) {\n    const result = this.filter ? this.filter.filter(node.element, parentVisibility) : 1 /* TreeVisibility.Visible */;\n    if (typeof result === 'boolean') {\n      node.filterData = undefined;\n      return result ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n    } else if (isFilterResult(result)) {\n      node.filterData = result.data;\n      return getVisibleState(result.visibility);\n    } else {\n      node.filterData = undefined;\n      return getVisibleState(result);\n    }\n  }\n  // cheap\n  hasTreeNode(location, node = this.root) {\n    if (!location || location.length === 0) {\n      return true;\n    }\n    const [index, ...rest] = location;\n    if (index < 0 || index > node.children.length) {\n      return false;\n    }\n    return this.hasTreeNode(rest, node.children[index]);\n  }\n  // cheap\n  getTreeNode(location, node = this.root) {\n    if (!location || location.length === 0) {\n      return node;\n    }\n    const [index, ...rest] = location;\n    if (index < 0 || index > node.children.length) {\n      throw new TreeError(this.user, 'Invalid tree location');\n    }\n    return this.getTreeNode(rest, node.children[index]);\n  }\n  // expensive\n  getTreeNodeWithListIndex(location) {\n    if (location.length === 0) {\n      return {\n        node: this.root,\n        listIndex: -1,\n        revealed: true,\n        visible: false\n      };\n    }\n    const {\n      parentNode,\n      listIndex,\n      revealed,\n      visible\n    } = this.getParentNodeWithListIndex(location);\n    const index = location[location.length - 1];\n    if (index < 0 || index > parentNode.children.length) {\n      throw new TreeError(this.user, 'Invalid tree location');\n    }\n    const node = parentNode.children[index];\n    return {\n      node,\n      listIndex,\n      revealed,\n      visible: visible && node.visible\n    };\n  }\n  getParentNodeWithListIndex(location, node = this.root, listIndex = 0, revealed = true, visible = true) {\n    const [index, ...rest] = location;\n    if (index < 0 || index > node.children.length) {\n      throw new TreeError(this.user, 'Invalid tree location');\n    }\n    // TODO@joao perf!\n    for (let i = 0; i < index; i++) {\n      listIndex += node.children[i].renderNodeCount;\n    }\n    revealed = revealed && !node.collapsed;\n    visible = visible && node.visible;\n    if (rest.length === 0) {\n      return {\n        parentNode: node,\n        listIndex,\n        revealed,\n        visible\n      };\n    }\n    return this.getParentNodeWithListIndex(rest, node.children[index], listIndex + 1, revealed, visible);\n  }\n  getNode(location = []) {\n    return this.getTreeNode(location);\n  }\n  // TODO@joao perf!\n  getNodeLocation(node) {\n    const location = [];\n    let indexTreeNode = node; // typing woes\n    while (indexTreeNode.parent) {\n      location.push(indexTreeNode.parent.children.indexOf(indexTreeNode));\n      indexTreeNode = indexTreeNode.parent;\n    }\n    return location.reverse();\n  }\n  getParentNodeLocation(location) {\n    if (location.length === 0) {\n      return undefined;\n    } else if (location.length === 1) {\n      return [];\n    } else {\n      return tail2(location)[0];\n    }\n  }\n  getFirstElementChild(location) {\n    const node = this.getTreeNode(location);\n    if (node.children.length === 0) {\n      return undefined;\n    }\n    return node.children[0].element;\n  }\n}","map":{"version":3,"names":["TreeError","splice","tail2","Delayer","MicrotaskDelay","LcsDiff","Emitter","EventBufferer","Iterable","isFilterResult","obj","getVisibleState","visibility","isCollapsibleStateUpdate","update","collapsible","IndexTreeModel","constructor","user","list","rootElement","options","rootRef","eventBufferer","_onDidChangeCollapseState","onDidChangeCollapseState","wrapEvent","event","_onDidChangeRenderNodeCount","onDidChangeRenderNodeCount","_onDidSplice","onDidSplice","refilterDelayer","collapseByDefault","filter","autoExpandSingleChildren","root","parent","undefined","element","children","depth","visibleChildrenCount","visibleChildIndex","collapsed","renderNodeCount","visible","filterData","location","deleteCount","toInsert","empty","length","diffIdentityProvider","spliceSmart","spliceSimple","identity","toInsertIterable","recurseLevels","_a","diffDepth","parentNode","getParentNodeWithListIndex","lastDiffIds","index","diff","getElements","slice","map","e","getId","toString","ComputeDiff","quitEarly","locationPrefix","recurseSplice","fromOriginal","fromModified","count","i","Number","MAX_SAFE_INTEGER","lastStartO","Math","min","lastStartM","change","changes","sort","a","b","originalStart","originalLength","modifiedStart","modifiedLength","onDidCreateNode","onDidDeleteNode","listIndex","revealed","treeListElementsToInsert","nodesToInsertIterator","el","createTreeNode","lastIndex","lastHadChildren","visibleChildStartIndex","child","nodesToInsert","insertedVisibleChildrenCount","push","deletedNodes","n","deletedVisibleChildrenCount","visibleDeleteCount","reduce","r","node","_updateAncestorsRenderNodeCount","visit","forEach","fire","insertedNodes","currentlyHasChildren","setCollapsible","trigger","refilter","rerender","getTreeNodeWithListIndex","has","hasTreeNode","getListIndex","getListRenderCount","getTreeNode","isCollapsible","bufferEvents","_setCollapseState","isCollapsed","setCollapsed","recursive","result","_setListNodeCollapseState","onlyVisibleChildIndex","_setNodeCollapseState","previousRenderNodeCount","updateNodeAfterCollapseChange","deep","expandTo","updateNodeAfterFilterChange","cancel","treeElement","parentVisibility","treeListElements","_filterNode","childElements","childRevealed","pop","_updateNodeAfterCollapseChange","_updateNodeAfterFilterChange","resultStartLength","hasVisibleDescendants","data","rest","getNode","getNodeLocation","indexTreeNode","indexOf","reverse","getParentNodeLocation","getFirstElementChild"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/indexTreeModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { TreeError } from './tree.js';\nimport { splice, tail2 } from '../../../common/arrays.js';\nimport { Delayer } from '../../../common/async.js';\nimport { MicrotaskDelay } from '../../../common/symbols.js';\nimport { LcsDiff } from '../../../common/diff/diff.js';\nimport { Emitter, EventBufferer } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nexport function isFilterResult(obj) {\n    return typeof obj === 'object' && 'visibility' in obj && 'data' in obj;\n}\nexport function getVisibleState(visibility) {\n    switch (visibility) {\n        case true: return 1 /* TreeVisibility.Visible */;\n        case false: return 0 /* TreeVisibility.Hidden */;\n        default: return visibility;\n    }\n}\nfunction isCollapsibleStateUpdate(update) {\n    return typeof update.collapsible === 'boolean';\n}\nexport class IndexTreeModel {\n    constructor(user, list, rootElement, options = {}) {\n        this.user = user;\n        this.list = list;\n        this.rootRef = [];\n        this.eventBufferer = new EventBufferer();\n        this._onDidChangeCollapseState = new Emitter();\n        this.onDidChangeCollapseState = this.eventBufferer.wrapEvent(this._onDidChangeCollapseState.event);\n        this._onDidChangeRenderNodeCount = new Emitter();\n        this.onDidChangeRenderNodeCount = this.eventBufferer.wrapEvent(this._onDidChangeRenderNodeCount.event);\n        this._onDidSplice = new Emitter();\n        this.onDidSplice = this._onDidSplice.event;\n        this.refilterDelayer = new Delayer(MicrotaskDelay);\n        this.collapseByDefault = typeof options.collapseByDefault === 'undefined' ? false : options.collapseByDefault;\n        this.filter = options.filter;\n        this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n        this.root = {\n            parent: undefined,\n            element: rootElement,\n            children: [],\n            depth: 0,\n            visibleChildrenCount: 0,\n            visibleChildIndex: -1,\n            collapsible: false,\n            collapsed: false,\n            renderNodeCount: 0,\n            visibility: 1 /* TreeVisibility.Visible */,\n            visible: true,\n            filterData: undefined\n        };\n    }\n    splice(location, deleteCount, toInsert = Iterable.empty(), options = {}) {\n        if (location.length === 0) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        if (options.diffIdentityProvider) {\n            this.spliceSmart(options.diffIdentityProvider, location, deleteCount, toInsert, options);\n        }\n        else {\n            this.spliceSimple(location, deleteCount, toInsert, options);\n        }\n    }\n    spliceSmart(identity, location, deleteCount, toInsertIterable, options, recurseLevels) {\n        var _a;\n        if (toInsertIterable === void 0) { toInsertIterable = Iterable.empty(); }\n        if (recurseLevels === void 0) { recurseLevels = (_a = options.diffDepth) !== null && _a !== void 0 ? _a : 0; }\n        const { parentNode } = this.getParentNodeWithListIndex(location);\n        if (!parentNode.lastDiffIds) {\n            return this.spliceSimple(location, deleteCount, toInsertIterable, options);\n        }\n        const toInsert = [...toInsertIterable];\n        const index = location[location.length - 1];\n        const diff = new LcsDiff({ getElements: () => parentNode.lastDiffIds }, {\n            getElements: () => [\n                ...parentNode.children.slice(0, index),\n                ...toInsert,\n                ...parentNode.children.slice(index + deleteCount),\n            ].map(e => identity.getId(e.element).toString())\n        }).ComputeDiff(false);\n        // if we were given a 'best effort' diff, use default behavior\n        if (diff.quitEarly) {\n            parentNode.lastDiffIds = undefined;\n            return this.spliceSimple(location, deleteCount, toInsert, options);\n        }\n        const locationPrefix = location.slice(0, -1);\n        const recurseSplice = (fromOriginal, fromModified, count) => {\n            if (recurseLevels > 0) {\n                for (let i = 0; i < count; i++) {\n                    fromOriginal--;\n                    fromModified--;\n                    this.spliceSmart(identity, [...locationPrefix, fromOriginal, 0], Number.MAX_SAFE_INTEGER, toInsert[fromModified].children, options, recurseLevels - 1);\n                }\n            }\n        };\n        let lastStartO = Math.min(parentNode.children.length, index + deleteCount);\n        let lastStartM = toInsert.length;\n        for (const change of diff.changes.sort((a, b) => b.originalStart - a.originalStart)) {\n            recurseSplice(lastStartO, lastStartM, lastStartO - (change.originalStart + change.originalLength));\n            lastStartO = change.originalStart;\n            lastStartM = change.modifiedStart - index;\n            this.spliceSimple([...locationPrefix, lastStartO], change.originalLength, Iterable.slice(toInsert, lastStartM, lastStartM + change.modifiedLength), options);\n        }\n        // at this point, startO === startM === count since any remaining prefix should match\n        recurseSplice(lastStartO, lastStartM, lastStartO);\n    }\n    spliceSimple(location, deleteCount, toInsert = Iterable.empty(), { onDidCreateNode, onDidDeleteNode, diffIdentityProvider }) {\n        const { parentNode, listIndex, revealed, visible } = this.getParentNodeWithListIndex(location);\n        const treeListElementsToInsert = [];\n        const nodesToInsertIterator = Iterable.map(toInsert, el => this.createTreeNode(el, parentNode, parentNode.visible ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */, revealed, treeListElementsToInsert, onDidCreateNode));\n        const lastIndex = location[location.length - 1];\n        const lastHadChildren = parentNode.children.length > 0;\n        // figure out what's the visible child start index right before the\n        // splice point\n        let visibleChildStartIndex = 0;\n        for (let i = lastIndex; i >= 0 && i < parentNode.children.length; i--) {\n            const child = parentNode.children[i];\n            if (child.visible) {\n                visibleChildStartIndex = child.visibleChildIndex;\n                break;\n            }\n        }\n        const nodesToInsert = [];\n        let insertedVisibleChildrenCount = 0;\n        let renderNodeCount = 0;\n        for (const child of nodesToInsertIterator) {\n            nodesToInsert.push(child);\n            renderNodeCount += child.renderNodeCount;\n            if (child.visible) {\n                child.visibleChildIndex = visibleChildStartIndex + insertedVisibleChildrenCount++;\n            }\n        }\n        const deletedNodes = splice(parentNode.children, lastIndex, deleteCount, nodesToInsert);\n        if (!diffIdentityProvider) {\n            parentNode.lastDiffIds = undefined;\n        }\n        else if (parentNode.lastDiffIds) {\n            splice(parentNode.lastDiffIds, lastIndex, deleteCount, nodesToInsert.map(n => diffIdentityProvider.getId(n.element).toString()));\n        }\n        else {\n            parentNode.lastDiffIds = parentNode.children.map(n => diffIdentityProvider.getId(n.element).toString());\n        }\n        // figure out what is the count of deleted visible children\n        let deletedVisibleChildrenCount = 0;\n        for (const child of deletedNodes) {\n            if (child.visible) {\n                deletedVisibleChildrenCount++;\n            }\n        }\n        // and adjust for all visible children after the splice point\n        if (deletedVisibleChildrenCount !== 0) {\n            for (let i = lastIndex + nodesToInsert.length; i < parentNode.children.length; i++) {\n                const child = parentNode.children[i];\n                if (child.visible) {\n                    child.visibleChildIndex -= deletedVisibleChildrenCount;\n                }\n            }\n        }\n        // update parent's visible children count\n        parentNode.visibleChildrenCount += insertedVisibleChildrenCount - deletedVisibleChildrenCount;\n        if (revealed && visible) {\n            const visibleDeleteCount = deletedNodes.reduce((r, node) => r + (node.visible ? node.renderNodeCount : 0), 0);\n            this._updateAncestorsRenderNodeCount(parentNode, renderNodeCount - visibleDeleteCount);\n            this.list.splice(listIndex, visibleDeleteCount, treeListElementsToInsert);\n        }\n        if (deletedNodes.length > 0 && onDidDeleteNode) {\n            const visit = (node) => {\n                onDidDeleteNode(node);\n                node.children.forEach(visit);\n            };\n            deletedNodes.forEach(visit);\n        }\n        this._onDidSplice.fire({ insertedNodes: nodesToInsert, deletedNodes });\n        const currentlyHasChildren = parentNode.children.length > 0;\n        if (lastHadChildren !== currentlyHasChildren) {\n            this.setCollapsible(location.slice(0, -1), currentlyHasChildren);\n        }\n        let node = parentNode;\n        while (node) {\n            if (node.visibility === 2 /* TreeVisibility.Recurse */) {\n                // delayed to avoid excessive refiltering, see #135941\n                this.refilterDelayer.trigger(() => this.refilter());\n                break;\n            }\n            node = node.parent;\n        }\n    }\n    rerender(location) {\n        if (location.length === 0) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        const { node, listIndex, revealed } = this.getTreeNodeWithListIndex(location);\n        if (node.visible && revealed) {\n            this.list.splice(listIndex, 1, [node]);\n        }\n    }\n    has(location) {\n        return this.hasTreeNode(location);\n    }\n    getListIndex(location) {\n        const { listIndex, visible, revealed } = this.getTreeNodeWithListIndex(location);\n        return visible && revealed ? listIndex : -1;\n    }\n    getListRenderCount(location) {\n        return this.getTreeNode(location).renderNodeCount;\n    }\n    isCollapsible(location) {\n        return this.getTreeNode(location).collapsible;\n    }\n    setCollapsible(location, collapsible) {\n        const node = this.getTreeNode(location);\n        if (typeof collapsible === 'undefined') {\n            collapsible = !node.collapsible;\n        }\n        const update = { collapsible };\n        return this.eventBufferer.bufferEvents(() => this._setCollapseState(location, update));\n    }\n    isCollapsed(location) {\n        return this.getTreeNode(location).collapsed;\n    }\n    setCollapsed(location, collapsed, recursive) {\n        const node = this.getTreeNode(location);\n        if (typeof collapsed === 'undefined') {\n            collapsed = !node.collapsed;\n        }\n        const update = { collapsed, recursive: recursive || false };\n        return this.eventBufferer.bufferEvents(() => this._setCollapseState(location, update));\n    }\n    _setCollapseState(location, update) {\n        const { node, listIndex, revealed } = this.getTreeNodeWithListIndex(location);\n        const result = this._setListNodeCollapseState(node, listIndex, revealed, update);\n        if (node !== this.root && this.autoExpandSingleChildren && result && !isCollapsibleStateUpdate(update) && node.collapsible && !node.collapsed && !update.recursive) {\n            let onlyVisibleChildIndex = -1;\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                if (child.visible) {\n                    if (onlyVisibleChildIndex > -1) {\n                        onlyVisibleChildIndex = -1;\n                        break;\n                    }\n                    else {\n                        onlyVisibleChildIndex = i;\n                    }\n                }\n            }\n            if (onlyVisibleChildIndex > -1) {\n                this._setCollapseState([...location, onlyVisibleChildIndex], update);\n            }\n        }\n        return result;\n    }\n    _setListNodeCollapseState(node, listIndex, revealed, update) {\n        const result = this._setNodeCollapseState(node, update, false);\n        if (!revealed || !node.visible || !result) {\n            return result;\n        }\n        const previousRenderNodeCount = node.renderNodeCount;\n        const toInsert = this.updateNodeAfterCollapseChange(node);\n        const deleteCount = previousRenderNodeCount - (listIndex === -1 ? 0 : 1);\n        this.list.splice(listIndex + 1, deleteCount, toInsert.slice(1));\n        return result;\n    }\n    _setNodeCollapseState(node, update, deep) {\n        let result;\n        if (node === this.root) {\n            result = false;\n        }\n        else {\n            if (isCollapsibleStateUpdate(update)) {\n                result = node.collapsible !== update.collapsible;\n                node.collapsible = update.collapsible;\n            }\n            else if (!node.collapsible) {\n                result = false;\n            }\n            else {\n                result = node.collapsed !== update.collapsed;\n                node.collapsed = update.collapsed;\n            }\n            if (result) {\n                this._onDidChangeCollapseState.fire({ node, deep });\n            }\n        }\n        if (!isCollapsibleStateUpdate(update) && update.recursive) {\n            for (const child of node.children) {\n                result = this._setNodeCollapseState(child, update, true) || result;\n            }\n        }\n        return result;\n    }\n    expandTo(location) {\n        this.eventBufferer.bufferEvents(() => {\n            let node = this.getTreeNode(location);\n            while (node.parent) {\n                node = node.parent;\n                location = location.slice(0, location.length - 1);\n                if (node.collapsed) {\n                    this._setCollapseState(location, { collapsed: false, recursive: false });\n                }\n            }\n        });\n    }\n    refilter() {\n        const previousRenderNodeCount = this.root.renderNodeCount;\n        const toInsert = this.updateNodeAfterFilterChange(this.root);\n        this.list.splice(0, previousRenderNodeCount, toInsert);\n        this.refilterDelayer.cancel();\n    }\n    createTreeNode(treeElement, parent, parentVisibility, revealed, treeListElements, onDidCreateNode) {\n        const node = {\n            parent,\n            element: treeElement.element,\n            children: [],\n            depth: parent.depth + 1,\n            visibleChildrenCount: 0,\n            visibleChildIndex: -1,\n            collapsible: typeof treeElement.collapsible === 'boolean' ? treeElement.collapsible : (typeof treeElement.collapsed !== 'undefined'),\n            collapsed: typeof treeElement.collapsed === 'undefined' ? this.collapseByDefault : treeElement.collapsed,\n            renderNodeCount: 1,\n            visibility: 1 /* TreeVisibility.Visible */,\n            visible: true,\n            filterData: undefined\n        };\n        const visibility = this._filterNode(node, parentVisibility);\n        node.visibility = visibility;\n        if (revealed) {\n            treeListElements.push(node);\n        }\n        const childElements = treeElement.children || Iterable.empty();\n        const childRevealed = revealed && visibility !== 0 /* TreeVisibility.Hidden */ && !node.collapsed;\n        let visibleChildrenCount = 0;\n        let renderNodeCount = 1;\n        for (const el of childElements) {\n            const child = this.createTreeNode(el, node, visibility, childRevealed, treeListElements, onDidCreateNode);\n            node.children.push(child);\n            renderNodeCount += child.renderNodeCount;\n            if (child.visible) {\n                child.visibleChildIndex = visibleChildrenCount++;\n            }\n        }\n        node.collapsible = node.collapsible || node.children.length > 0;\n        node.visibleChildrenCount = visibleChildrenCount;\n        node.visible = visibility === 2 /* TreeVisibility.Recurse */ ? visibleChildrenCount > 0 : (visibility === 1 /* TreeVisibility.Visible */);\n        if (!node.visible) {\n            node.renderNodeCount = 0;\n            if (revealed) {\n                treeListElements.pop();\n            }\n        }\n        else if (!node.collapsed) {\n            node.renderNodeCount = renderNodeCount;\n        }\n        onDidCreateNode === null || onDidCreateNode === void 0 ? void 0 : onDidCreateNode(node);\n        return node;\n    }\n    updateNodeAfterCollapseChange(node) {\n        const previousRenderNodeCount = node.renderNodeCount;\n        const result = [];\n        this._updateNodeAfterCollapseChange(node, result);\n        this._updateAncestorsRenderNodeCount(node.parent, result.length - previousRenderNodeCount);\n        return result;\n    }\n    _updateNodeAfterCollapseChange(node, result) {\n        if (node.visible === false) {\n            return 0;\n        }\n        result.push(node);\n        node.renderNodeCount = 1;\n        if (!node.collapsed) {\n            for (const child of node.children) {\n                node.renderNodeCount += this._updateNodeAfterCollapseChange(child, result);\n            }\n        }\n        this._onDidChangeRenderNodeCount.fire(node);\n        return node.renderNodeCount;\n    }\n    updateNodeAfterFilterChange(node) {\n        const previousRenderNodeCount = node.renderNodeCount;\n        const result = [];\n        this._updateNodeAfterFilterChange(node, node.visible ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */, result);\n        this._updateAncestorsRenderNodeCount(node.parent, result.length - previousRenderNodeCount);\n        return result;\n    }\n    _updateNodeAfterFilterChange(node, parentVisibility, result, revealed = true) {\n        let visibility;\n        if (node !== this.root) {\n            visibility = this._filterNode(node, parentVisibility);\n            if (visibility === 0 /* TreeVisibility.Hidden */) {\n                node.visible = false;\n                node.renderNodeCount = 0;\n                return false;\n            }\n            if (revealed) {\n                result.push(node);\n            }\n        }\n        const resultStartLength = result.length;\n        node.renderNodeCount = node === this.root ? 0 : 1;\n        let hasVisibleDescendants = false;\n        if (!node.collapsed || visibility !== 0 /* TreeVisibility.Hidden */) {\n            let visibleChildIndex = 0;\n            for (const child of node.children) {\n                hasVisibleDescendants = this._updateNodeAfterFilterChange(child, visibility, result, revealed && !node.collapsed) || hasVisibleDescendants;\n                if (child.visible) {\n                    child.visibleChildIndex = visibleChildIndex++;\n                }\n            }\n            node.visibleChildrenCount = visibleChildIndex;\n        }\n        else {\n            node.visibleChildrenCount = 0;\n        }\n        if (node !== this.root) {\n            node.visible = visibility === 2 /* TreeVisibility.Recurse */ ? hasVisibleDescendants : (visibility === 1 /* TreeVisibility.Visible */);\n            node.visibility = visibility;\n        }\n        if (!node.visible) {\n            node.renderNodeCount = 0;\n            if (revealed) {\n                result.pop();\n            }\n        }\n        else if (!node.collapsed) {\n            node.renderNodeCount += result.length - resultStartLength;\n        }\n        this._onDidChangeRenderNodeCount.fire(node);\n        return node.visible;\n    }\n    _updateAncestorsRenderNodeCount(node, diff) {\n        if (diff === 0) {\n            return;\n        }\n        while (node) {\n            node.renderNodeCount += diff;\n            this._onDidChangeRenderNodeCount.fire(node);\n            node = node.parent;\n        }\n    }\n    _filterNode(node, parentVisibility) {\n        const result = this.filter ? this.filter.filter(node.element, parentVisibility) : 1 /* TreeVisibility.Visible */;\n        if (typeof result === 'boolean') {\n            node.filterData = undefined;\n            return result ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n        }\n        else if (isFilterResult(result)) {\n            node.filterData = result.data;\n            return getVisibleState(result.visibility);\n        }\n        else {\n            node.filterData = undefined;\n            return getVisibleState(result);\n        }\n    }\n    // cheap\n    hasTreeNode(location, node = this.root) {\n        if (!location || location.length === 0) {\n            return true;\n        }\n        const [index, ...rest] = location;\n        if (index < 0 || index > node.children.length) {\n            return false;\n        }\n        return this.hasTreeNode(rest, node.children[index]);\n    }\n    // cheap\n    getTreeNode(location, node = this.root) {\n        if (!location || location.length === 0) {\n            return node;\n        }\n        const [index, ...rest] = location;\n        if (index < 0 || index > node.children.length) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        return this.getTreeNode(rest, node.children[index]);\n    }\n    // expensive\n    getTreeNodeWithListIndex(location) {\n        if (location.length === 0) {\n            return { node: this.root, listIndex: -1, revealed: true, visible: false };\n        }\n        const { parentNode, listIndex, revealed, visible } = this.getParentNodeWithListIndex(location);\n        const index = location[location.length - 1];\n        if (index < 0 || index > parentNode.children.length) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        const node = parentNode.children[index];\n        return { node, listIndex, revealed, visible: visible && node.visible };\n    }\n    getParentNodeWithListIndex(location, node = this.root, listIndex = 0, revealed = true, visible = true) {\n        const [index, ...rest] = location;\n        if (index < 0 || index > node.children.length) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        // TODO@joao perf!\n        for (let i = 0; i < index; i++) {\n            listIndex += node.children[i].renderNodeCount;\n        }\n        revealed = revealed && !node.collapsed;\n        visible = visible && node.visible;\n        if (rest.length === 0) {\n            return { parentNode: node, listIndex, revealed, visible };\n        }\n        return this.getParentNodeWithListIndex(rest, node.children[index], listIndex + 1, revealed, visible);\n    }\n    getNode(location = []) {\n        return this.getTreeNode(location);\n    }\n    // TODO@joao perf!\n    getNodeLocation(node) {\n        const location = [];\n        let indexTreeNode = node; // typing woes\n        while (indexTreeNode.parent) {\n            location.push(indexTreeNode.parent.children.indexOf(indexTreeNode));\n            indexTreeNode = indexTreeNode.parent;\n        }\n        return location.reverse();\n    }\n    getParentNodeLocation(location) {\n        if (location.length === 0) {\n            return undefined;\n        }\n        else if (location.length === 1) {\n            return [];\n        }\n        else {\n            return tail2(location)[0];\n        }\n    }\n    getFirstElementChild(location) {\n        const node = this.getTreeNode(location);\n        if (node.children.length === 0) {\n            return undefined;\n        }\n        return node.children[0].element;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}