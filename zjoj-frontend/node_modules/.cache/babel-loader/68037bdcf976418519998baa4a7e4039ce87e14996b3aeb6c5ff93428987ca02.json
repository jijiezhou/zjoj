{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport './viewLines.css';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { HorizontalPosition, HorizontalRange, LineVisibleRanges } from '../../view/renderingContext.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { DomReadingContext } from './domReadingContext.js';\nimport { ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nclass LastRenderedData {\n  constructor() {\n    this._currentVisibleRange = new Range(1, 1, 1, 1);\n  }\n  getCurrentVisibleRange() {\n    return this._currentVisibleRange;\n  }\n  setCurrentVisibleRange(currentVisibleRange) {\n    this._currentVisibleRange = currentVisibleRange;\n  }\n}\nclass HorizontalRevealRangeRequest {\n  constructor(minimalReveal, lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n    this.minimalReveal = minimalReveal;\n    this.lineNumber = lineNumber;\n    this.startColumn = startColumn;\n    this.endColumn = endColumn;\n    this.startScrollTop = startScrollTop;\n    this.stopScrollTop = stopScrollTop;\n    this.scrollType = scrollType;\n    this.type = 'range';\n    this.minLineNumber = lineNumber;\n    this.maxLineNumber = lineNumber;\n  }\n}\nclass HorizontalRevealSelectionsRequest {\n  constructor(minimalReveal, selections, startScrollTop, stopScrollTop, scrollType) {\n    this.minimalReveal = minimalReveal;\n    this.selections = selections;\n    this.startScrollTop = startScrollTop;\n    this.stopScrollTop = stopScrollTop;\n    this.scrollType = scrollType;\n    this.type = 'selections';\n    let minLineNumber = selections[0].startLineNumber;\n    let maxLineNumber = selections[0].endLineNumber;\n    for (let i = 1, len = selections.length; i < len; i++) {\n      const selection = selections[i];\n      minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n      maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n    }\n    this.minLineNumber = minLineNumber;\n    this.maxLineNumber = maxLineNumber;\n  }\n}\nexport class ViewLines extends ViewPart {\n  constructor(context, linesContent) {\n    super(context);\n    this._linesContent = linesContent;\n    this._textRangeRestingSpot = document.createElement('div');\n    this._visibleLines = new VisibleLinesCollection(this);\n    this.domNode = this._visibleLines.domNode;\n    const conf = this._context.configuration;\n    const options = this._context.configuration.options;\n    const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n    const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n    this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n    this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n    this._revealHorizontalRightPadding = options.get(99 /* EditorOption.revealHorizontalRightPadding */);\n    this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n    this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n    this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n    this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n    PartFingerprints.write(this.domNode, 7 /* PartFingerprint.ViewLines */);\n    this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n    applyFontInfo(this.domNode, fontInfo);\n    // --- width & height\n    this._maxLineWidth = 0;\n    this._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n      this._updateLineWidthsSlow();\n    }, 200);\n    this._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n      this._checkMonospaceFontAssumptions();\n    }, 2000);\n    this._lastRenderedData = new LastRenderedData();\n    this._horizontalRevealRequest = null;\n    // sticky scroll widget\n    this._stickyScrollEnabled = options.get(114 /* EditorOption.stickyScroll */).enabled;\n    this._maxNumberStickyLines = options.get(114 /* EditorOption.stickyScroll */).maxLineCount;\n  }\n  dispose() {\n    this._asyncUpdateLineWidths.dispose();\n    this._asyncCheckMonospaceFontAssumptions.dispose();\n    super.dispose();\n  }\n  getDomNode() {\n    return this.domNode;\n  }\n  // ---- begin IVisibleLinesHost\n  createVisibleLine() {\n    return new ViewLine(this._viewLineOptions);\n  }\n  // ---- end IVisibleLinesHost\n  // ---- begin view event handlers\n  onConfigurationChanged(e) {\n    this._visibleLines.onConfigurationChanged(e);\n    if (e.hasChanged(144 /* EditorOption.wrappingInfo */)) {\n      this._maxLineWidth = 0;\n    }\n    const options = this._context.configuration.options;\n    const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n    const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n    this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n    this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n    this._revealHorizontalRightPadding = options.get(99 /* EditorOption.revealHorizontalRightPadding */);\n    this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n    this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n    this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n    // sticky scroll\n    this._stickyScrollEnabled = options.get(114 /* EditorOption.stickyScroll */).enabled;\n    this._maxNumberStickyLines = options.get(114 /* EditorOption.stickyScroll */).maxLineCount;\n    applyFontInfo(this.domNode, fontInfo);\n    this._onOptionsMaybeChanged();\n    if (e.hasChanged(143 /* EditorOption.layoutInfo */)) {\n      this._maxLineWidth = 0;\n    }\n    return true;\n  }\n  _onOptionsMaybeChanged() {\n    const conf = this._context.configuration;\n    const newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n    if (!this._viewLineOptions.equals(newViewLineOptions)) {\n      this._viewLineOptions = newViewLineOptions;\n      const startLineNumber = this._visibleLines.getStartLineNumber();\n      const endLineNumber = this._visibleLines.getEndLineNumber();\n      for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        const line = this._visibleLines.getVisibleLine(lineNumber);\n        line.onOptionsChanged(this._viewLineOptions);\n      }\n      return true;\n    }\n    return false;\n  }\n  onCursorStateChanged(e) {\n    const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n    const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n    let r = false;\n    for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n      r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n    }\n    return r;\n  }\n  onDecorationsChanged(e) {\n    if (true /*e.inlineDecorationsChanged*/) {\n      const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n      const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n      for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n        this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n      }\n    }\n    return true;\n  }\n  onFlushed(e) {\n    const shouldRender = this._visibleLines.onFlushed(e);\n    this._maxLineWidth = 0;\n    return shouldRender;\n  }\n  onLinesChanged(e) {\n    return this._visibleLines.onLinesChanged(e);\n  }\n  onLinesDeleted(e) {\n    return this._visibleLines.onLinesDeleted(e);\n  }\n  onLinesInserted(e) {\n    return this._visibleLines.onLinesInserted(e);\n  }\n  onRevealRangeRequest(e) {\n    // Using the future viewport here in order to handle multiple\n    // incoming reveal range requests that might all desire to be animated\n    const desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n    if (desiredScrollTop === -1) {\n      // marker to abort the reveal range request\n      return false;\n    }\n    // validate the new desired scroll top\n    let newScrollPosition = this._context.viewLayout.validateScrollPosition({\n      scrollTop: desiredScrollTop\n    });\n    if (e.revealHorizontal) {\n      if (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n        // Two or more lines? => scroll to base (That's how you see most of the two lines)\n        newScrollPosition = {\n          scrollTop: newScrollPosition.scrollTop,\n          scrollLeft: 0\n        };\n      } else if (e.range) {\n        // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n        this._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n      } else if (e.selections && e.selections.length > 0) {\n        this._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n      }\n    } else {\n      this._horizontalRevealRequest = null;\n    }\n    const scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n    const scrollType = scrollTopDelta <= this._lineHeight ? 1 /* ScrollType.Immediate */ : e.scrollType;\n    this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, scrollType);\n    return true;\n  }\n  onScrollChanged(e) {\n    if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n      // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n      this._horizontalRevealRequest = null;\n    }\n    if (this._horizontalRevealRequest && e.scrollTopChanged) {\n      const min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n      const max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n      if (e.scrollTop < min || e.scrollTop > max) {\n        // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n        this._horizontalRevealRequest = null;\n      }\n    }\n    this.domNode.setWidth(e.scrollWidth);\n    return this._visibleLines.onScrollChanged(e) || true;\n  }\n  onTokensChanged(e) {\n    return this._visibleLines.onTokensChanged(e);\n  }\n  onZonesChanged(e) {\n    this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n    return this._visibleLines.onZonesChanged(e);\n  }\n  onThemeChanged(e) {\n    return this._onOptionsMaybeChanged();\n  }\n  // ---- end view event handlers\n  // ----------- HELPERS FOR OTHERS\n  getPositionFromDOMInfo(spanNode, offset) {\n    const viewLineDomNode = this._getViewLineDomNode(spanNode);\n    if (viewLineDomNode === null) {\n      // Couldn't find view line node\n      return null;\n    }\n    const lineNumber = this._getLineNumberFor(viewLineDomNode);\n    if (lineNumber === -1) {\n      // Couldn't find view line node\n      return null;\n    }\n    if (lineNumber < 1 || lineNumber > this._context.viewModel.getLineCount()) {\n      // lineNumber is outside range\n      return null;\n    }\n    if (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n      // Line is empty\n      return new Position(lineNumber, 1);\n    }\n    const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n    const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n    if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n      // Couldn't find line\n      return null;\n    }\n    let column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(spanNode, offset);\n    const minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n    if (column < minColumn) {\n      column = minColumn;\n    }\n    return new Position(lineNumber, column);\n  }\n  _getViewLineDomNode(node) {\n    while (node && node.nodeType === 1) {\n      if (node.className === ViewLine.CLASS_NAME) {\n        return node;\n      }\n      node = node.parentElement;\n    }\n    return null;\n  }\n  /**\n   * @returns the line number of this view line dom node.\n   */\n  _getLineNumberFor(domNode) {\n    const startLineNumber = this._visibleLines.getStartLineNumber();\n    const endLineNumber = this._visibleLines.getEndLineNumber();\n    for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      const line = this._visibleLines.getVisibleLine(lineNumber);\n      if (domNode === line.getDomNode()) {\n        return lineNumber;\n      }\n    }\n    return -1;\n  }\n  getLineWidth(lineNumber) {\n    const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n    const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n    if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n      // Couldn't find line\n      return -1;\n    }\n    const context = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n    const result = this._visibleLines.getVisibleLine(lineNumber).getWidth(context);\n    this._updateLineWidthsSlowIfDomDidLayout(context);\n    return result;\n  }\n  linesVisibleRangesForRange(_range, includeNewLines) {\n    if (this.shouldRender()) {\n      // Cannot read from the DOM because it is dirty\n      // i.e. the model & the dom are out of sync, so I'd be reading something stale\n      return null;\n    }\n    const originalEndLineNumber = _range.endLineNumber;\n    const range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n    if (!range) {\n      return null;\n    }\n    const visibleRanges = [];\n    let visibleRangesLen = 0;\n    const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n    let nextLineModelLineNumber = 0;\n    if (includeNewLines) {\n      nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n    }\n    const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n    const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n    for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n      if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n        continue;\n      }\n      const startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n      const continuesInNextLine = lineNumber !== range.endLineNumber;\n      const endColumn = continuesInNextLine ? this._context.viewModel.getLineMaxColumn(lineNumber) : range.endColumn;\n      const visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n      if (!visibleRangesForLine) {\n        continue;\n      }\n      if (includeNewLines && lineNumber < originalEndLineNumber) {\n        const currentLineModelLineNumber = nextLineModelLineNumber;\n        nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n        if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n          visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n        }\n      }\n      visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges), continuesInNextLine);\n    }\n    this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n    if (visibleRangesLen === 0) {\n      return null;\n    }\n    return visibleRanges;\n  }\n  _visibleRangesForLineRange(lineNumber, startColumn, endColumn) {\n    if (this.shouldRender()) {\n      // Cannot read from the DOM because it is dirty\n      // i.e. the model & the dom are out of sync, so I'd be reading something stale\n      return null;\n    }\n    if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n      return null;\n    }\n    const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n    const result = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n    this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n    return result;\n  }\n  visibleRangeForPosition(position) {\n    const visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n    if (!visibleRanges) {\n      return null;\n    }\n    return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n  }\n  /**\n   * Updates the max line width if it is fast to compute.\n   * Returns true if all lines were taken into account.\n   * Returns false if some lines need to be reevaluated (in a slow fashion).\n   */\n  _updateLineWidthsFast() {\n    return this._updateLineWidths(true);\n  }\n  _updateLineWidthsSlow() {\n    this._updateLineWidths(false);\n  }\n  /**\n   * Update the line widths using DOM layout information after someone else\n   * has caused a synchronous layout.\n   */\n  _updateLineWidthsSlowIfDomDidLayout(domReadingContext) {\n    if (!domReadingContext.didDomLayout) {\n      // only proceed if we just did a layout\n      return;\n    }\n    if (this._asyncUpdateLineWidths.isScheduled()) {\n      // reading widths is not scheduled => widths are up-to-date\n      return;\n    }\n    this._asyncUpdateLineWidths.cancel();\n    this._updateLineWidthsSlow();\n  }\n  _updateLineWidths(fast) {\n    const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n    const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n    let localMaxLineWidth = 1;\n    let allWidthsComputed = true;\n    for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n      const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n      if (fast && !visibleLine.getWidthIsFast()) {\n        // Cannot compute width in a fast way for this line\n        allWidthsComputed = false;\n        continue;\n      }\n      localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth(null));\n    }\n    if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.viewModel.getLineCount()) {\n      // we know the max line width for all the lines\n      this._maxLineWidth = 0;\n    }\n    this._ensureMaxLineWidth(localMaxLineWidth);\n    return allWidthsComputed;\n  }\n  _checkMonospaceFontAssumptions() {\n    // Problems with monospace assumptions are more apparent for longer lines,\n    // as small rounding errors start to sum up, so we will select the longest\n    // line for a closer inspection\n    let longestLineNumber = -1;\n    let longestWidth = -1;\n    const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n    const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n    for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n      const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n      if (visibleLine.needsMonospaceFontCheck()) {\n        const lineWidth = visibleLine.getWidth(null);\n        if (lineWidth > longestWidth) {\n          longestWidth = lineWidth;\n          longestLineNumber = lineNumber;\n        }\n      }\n    }\n    if (longestLineNumber === -1) {\n      return;\n    }\n    if (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n      for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n        const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n        visibleLine.onMonospaceAssumptionsInvalidated();\n      }\n    }\n  }\n  prepareRender() {\n    throw new Error('Not supported');\n  }\n  render() {\n    throw new Error('Not supported');\n  }\n  renderText(viewportData) {\n    // (1) render lines - ensures lines are in the DOM\n    this._visibleLines.renderLines(viewportData);\n    this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n    this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n    this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n    // (2) compute horizontal scroll position:\n    //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n    //  - it might change `scrollWidth` and `scrollLeft`\n    if (this._horizontalRevealRequest) {\n      const horizontalRevealRequest = this._horizontalRevealRequest;\n      // Check that we have the line that contains the horizontal range in the viewport\n      if (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n        this._horizontalRevealRequest = null;\n        // allow `visibleRangesForRange2` to work\n        this.onDidRender();\n        // compute new scroll position\n        const newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n        if (newScrollLeft) {\n          if (!this._isViewportWrapping) {\n            // ensure `scrollWidth` is large enough\n            this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n          }\n          // set `scrollLeft`\n          this._context.viewModel.viewLayout.setScrollPosition({\n            scrollLeft: newScrollLeft.scrollLeft\n          }, horizontalRevealRequest.scrollType);\n        }\n      }\n    }\n    // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n    if (!this._updateLineWidthsFast()) {\n      // Computing the width of some lines would be slow => delay it\n      this._asyncUpdateLineWidths.schedule();\n    } else {\n      this._asyncUpdateLineWidths.cancel();\n    }\n    if (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n      const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n      const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n      for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n        const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n        if (visibleLine.needsMonospaceFontCheck()) {\n          this._asyncCheckMonospaceFontAssumptions.schedule();\n          break;\n        }\n      }\n    }\n    // (3) handle scrolling\n    this._linesContent.setLayerHinting(this._canUseLayerHinting);\n    this._linesContent.setContain('strict');\n    const adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n    this._linesContent.setTop(-adjustedScrollTop);\n    this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n  }\n  // --- width\n  _ensureMaxLineWidth(lineWidth) {\n    const iLineWidth = Math.ceil(lineWidth);\n    if (this._maxLineWidth < iLineWidth) {\n      this._maxLineWidth = iLineWidth;\n      this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n    }\n  }\n  _computeScrollTopToRevealRange(viewport, source, minimalReveal, range, selections, verticalType) {\n    const viewportStartY = viewport.top;\n    const viewportHeight = viewport.height;\n    const viewportEndY = viewportStartY + viewportHeight;\n    let boxIsSingleRange;\n    let boxStartY;\n    let boxEndY;\n    if (selections && selections.length > 0) {\n      let minLineNumber = selections[0].startLineNumber;\n      let maxLineNumber = selections[0].endLineNumber;\n      for (let i = 1, len = selections.length; i < len; i++) {\n        const selection = selections[i];\n        minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n        maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n      }\n      boxIsSingleRange = false;\n      boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n      boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n    } else if (range) {\n      boxIsSingleRange = true;\n      boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n      boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n    } else {\n      return -1;\n    }\n    const shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n    let paddingTop = 0;\n    let paddingBottom = 0;\n    if (!shouldIgnoreScrollOff) {\n      const context = Math.min(viewportHeight / this._lineHeight / 2, this._cursorSurroundingLines);\n      if (this._stickyScrollEnabled) {\n        paddingTop = Math.max(context, this._maxNumberStickyLines) * this._lineHeight;\n      } else {\n        paddingTop = context * this._lineHeight;\n      }\n      paddingBottom = Math.max(0, context - 1) * this._lineHeight;\n    } else {\n      if (!minimalReveal) {\n        // Reveal one more line above (this case is hit when dragging)\n        paddingTop = this._lineHeight;\n      }\n    }\n    if (!minimalReveal) {\n      if (verticalType === 0 /* viewEvents.VerticalRevealType.Simple */ || verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */) {\n        // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n        paddingBottom += this._lineHeight;\n      }\n    }\n    boxStartY -= paddingTop;\n    boxEndY += paddingBottom;\n    let newScrollTop;\n    if (boxEndY - boxStartY > viewportHeight) {\n      // the box is larger than the viewport ... scroll to its top\n      if (!boxIsSingleRange) {\n        // do not reveal multiple cursors if there are more than fit the viewport\n        return -1;\n      }\n      newScrollTop = boxStartY;\n    } else if (verticalType === 5 /* viewEvents.VerticalRevealType.NearTop */ || verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */) {\n      if (verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n        // Box is already in the viewport... do nothing\n        newScrollTop = viewportStartY;\n      } else {\n        // We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n        const desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n        // Try to scroll just above the box with the desired gap\n        const desiredScrollTop = boxStartY - desiredGapAbove;\n        // But ensure that the box is not pushed out of viewport\n        const minScrollTop = boxEndY - viewportHeight;\n        newScrollTop = Math.max(minScrollTop, desiredScrollTop);\n      }\n    } else if (verticalType === 1 /* viewEvents.VerticalRevealType.Center */ || verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */) {\n      if (verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n        // Box is already in the viewport... do nothing\n        newScrollTop = viewportStartY;\n      } else {\n        // Box is outside the viewport... center it\n        const boxMiddleY = (boxStartY + boxEndY) / 2;\n        newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n      }\n    } else {\n      newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* viewEvents.VerticalRevealType.Top */, verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */);\n    }\n    return newScrollTop;\n  }\n  _computeScrollLeftToReveal(horizontalRevealRequest) {\n    const viewport = this._context.viewLayout.getCurrentViewport();\n    const layoutInfo = this._context.configuration.options.get(143 /* EditorOption.layoutInfo */);\n    const viewportStartX = viewport.left;\n    const viewportEndX = viewportStartX + viewport.width - layoutInfo.verticalScrollbarWidth;\n    let boxStartX = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n    let boxEndX = 0;\n    if (horizontalRevealRequest.type === 'range') {\n      const visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n      if (!visibleRanges) {\n        return null;\n      }\n      for (const visibleRange of visibleRanges.ranges) {\n        boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n        boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n      }\n    } else {\n      for (const selection of horizontalRevealRequest.selections) {\n        if (selection.startLineNumber !== selection.endLineNumber) {\n          return null;\n        }\n        const visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n        if (!visibleRanges) {\n          return null;\n        }\n        for (const visibleRange of visibleRanges.ranges) {\n          boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n          boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n        }\n      }\n    }\n    if (!horizontalRevealRequest.minimalReveal) {\n      boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n      boxEndX += this._revealHorizontalRightPadding;\n    }\n    if (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n      return null;\n    }\n    const newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n    return {\n      scrollLeft: newScrollLeft,\n      maxHorizontalOffset: boxEndX\n    };\n  }\n  _computeMinimumScrolling(viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n    viewportStart = viewportStart | 0;\n    viewportEnd = viewportEnd | 0;\n    boxStart = boxStart | 0;\n    boxEnd = boxEnd | 0;\n    revealAtStart = !!revealAtStart;\n    revealAtEnd = !!revealAtEnd;\n    const viewportLength = viewportEnd - viewportStart;\n    const boxLength = boxEnd - boxStart;\n    if (boxLength < viewportLength) {\n      // The box would fit in the viewport\n      if (revealAtStart) {\n        return boxStart;\n      }\n      if (revealAtEnd) {\n        return Math.max(0, boxEnd - viewportLength);\n      }\n      if (boxStart < viewportStart) {\n        // The box is above the viewport\n        return boxStart;\n      } else if (boxEnd > viewportEnd) {\n        // The box is below the viewport\n        return Math.max(0, boxEnd - viewportLength);\n      }\n    } else {\n      // The box would not fit in the viewport\n      // Reveal the beginning of the box\n      return boxStart;\n    }\n    return viewportStart;\n  }\n}\n/**\n * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n */\nViewLines.HORIZONTAL_EXTRA_PX = 30;","map":{"version":3,"names":["MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","RunOnceScheduler","platform","applyFontInfo","HorizontalPosition","HorizontalRange","LineVisibleRanges","VisibleLinesCollection","PartFingerprints","ViewPart","DomReadingContext","ViewLine","ViewLineOptions","Position","Range","LastRenderedData","constructor","_currentVisibleRange","getCurrentVisibleRange","setCurrentVisibleRange","currentVisibleRange","HorizontalRevealRangeRequest","minimalReveal","lineNumber","startColumn","endColumn","startScrollTop","stopScrollTop","scrollType","type","minLineNumber","maxLineNumber","HorizontalRevealSelectionsRequest","selections","startLineNumber","endLineNumber","i","len","length","selection","Math","min","max","ViewLines","context","linesContent","_linesContent","_textRangeRestingSpot","document","createElement","_visibleLines","domNode","conf","_context","configuration","options","fontInfo","get","wrappingInfo","_lineHeight","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_isViewportWrapping","isViewportWrapping","_revealHorizontalRightPadding","_cursorSurroundingLines","_cursorSurroundingLinesStyle","_canUseLayerHinting","_viewLineOptions","theme","write","setClassName","_maxLineWidth","_asyncUpdateLineWidths","_updateLineWidthsSlow","_asyncCheckMonospaceFontAssumptions","_checkMonospaceFontAssumptions","_lastRenderedData","_horizontalRevealRequest","_stickyScrollEnabled","enabled","_maxNumberStickyLines","maxLineCount","dispose","getDomNode","createVisibleLine","onConfigurationChanged","e","hasChanged","_onOptionsMaybeChanged","newViewLineOptions","equals","getStartLineNumber","getEndLineNumber","line","getVisibleLine","onOptionsChanged","onCursorStateChanged","rendStartLineNumber","rendEndLineNumber","r","onSelectionChanged","onDecorationsChanged","onFlushed","shouldRender","onLinesChanged","onLinesDeleted","onLinesInserted","onRevealRangeRequest","desiredScrollTop","_computeScrollTopToRevealRange","viewLayout","getFutureViewport","source","range","verticalType","newScrollPosition","validateScrollPosition","scrollTop","revealHorizontal","scrollLeft","getCurrentScrollTop","scrollTopDelta","abs","viewModel","setScrollPosition","onScrollChanged","scrollLeftChanged","scrollTopChanged","setWidth","scrollWidth","onTokensChanged","onZonesChanged","setMaxLineWidth","onThemeChanged","getPositionFromDOMInfo","spanNode","offset","viewLineDomNode","_getViewLineDomNode","_getLineNumberFor","getLineCount","getLineMaxColumn","column","getColumnOfNodeOffset","minColumn","getLineMinColumn","node","nodeType","className","CLASS_NAME","parentElement","getLineWidth","result","getWidth","_updateLineWidthsSlowIfDomDidLayout","linesVisibleRangesForRange","_range","includeNewLines","originalEndLineNumber","intersectRanges","visibleRanges","visibleRangesLen","domReadingContext","nextLineModelLineNumber","coordinatesConverter","convertViewPositionToModelPosition","continuesInNextLine","visibleRangesForLine","getVisibleRangesForRange","currentLineModelLineNumber","ranges","width","outsideRenderedLine","from","_visibleRangesForLineRange","visibleRangeForPosition","position","left","_updateLineWidthsFast","_updateLineWidths","didDomLayout","isScheduled","cancel","fast","localMaxLineWidth","allWidthsComputed","visibleLine","getWidthIsFast","_ensureMaxLineWidth","longestLineNumber","longestWidth","needsMonospaceFontCheck","lineWidth","monospaceAssumptionsAreValid","onMonospaceAssumptionsInvalidated","prepareRender","Error","render","renderText","viewportData","renderLines","visibleRange","getScrollWidth","setHeight","getScrollHeight","horizontalRevealRequest","onDidRender","newScrollLeft","_computeScrollLeftToReveal","maxHorizontalOffset","schedule","isLinux","setLayerHinting","setContain","adjustedScrollTop","bigNumbersDelta","setTop","setLeft","getCurrentScrollLeft","iLineWidth","ceil","viewport","viewportStartY","top","viewportHeight","height","viewportEndY","boxIsSingleRange","boxStartY","boxEndY","getVerticalOffsetForLineNumber","shouldIgnoreScrollOff","paddingTop","paddingBottom","newScrollTop","desiredGapAbove","minScrollTop","boxMiddleY","_computeMinimumScrolling","getCurrentViewport","layoutInfo","viewportStartX","viewportEndX","verticalScrollbarWidth","boxStartX","boxEndX","round","HORIZONTAL_EXTRA_PX","viewportStart","viewportEnd","boxStart","boxEnd","revealAtStart","revealAtEnd","viewportLength","boxLength"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLines.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport './viewLines.css';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { HorizontalPosition, HorizontalRange, LineVisibleRanges } from '../../view/renderingContext.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { DomReadingContext } from './domReadingContext.js';\nimport { ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nclass LastRenderedData {\n    constructor() {\n        this._currentVisibleRange = new Range(1, 1, 1, 1);\n    }\n    getCurrentVisibleRange() {\n        return this._currentVisibleRange;\n    }\n    setCurrentVisibleRange(currentVisibleRange) {\n        this._currentVisibleRange = currentVisibleRange;\n    }\n}\nclass HorizontalRevealRangeRequest {\n    constructor(minimalReveal, lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.lineNumber = lineNumber;\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'range';\n        this.minLineNumber = lineNumber;\n        this.maxLineNumber = lineNumber;\n    }\n}\nclass HorizontalRevealSelectionsRequest {\n    constructor(minimalReveal, selections, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.selections = selections;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'selections';\n        let minLineNumber = selections[0].startLineNumber;\n        let maxLineNumber = selections[0].endLineNumber;\n        for (let i = 1, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n            maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n        }\n        this.minLineNumber = minLineNumber;\n        this.maxLineNumber = maxLineNumber;\n    }\n}\nexport class ViewLines extends ViewPart {\n    constructor(context, linesContent) {\n        super(context);\n        this._linesContent = linesContent;\n        this._textRangeRestingSpot = document.createElement('div');\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        const conf = this._context.configuration;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(99 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        PartFingerprints.write(this.domNode, 7 /* PartFingerprint.ViewLines */);\n        this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        applyFontInfo(this.domNode, fontInfo);\n        // --- width & height\n        this._maxLineWidth = 0;\n        this._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n            this._updateLineWidthsSlow();\n        }, 200);\n        this._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n            this._checkMonospaceFontAssumptions();\n        }, 2000);\n        this._lastRenderedData = new LastRenderedData();\n        this._horizontalRevealRequest = null;\n        // sticky scroll widget\n        this._stickyScrollEnabled = options.get(114 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(114 /* EditorOption.stickyScroll */).maxLineCount;\n    }\n    dispose() {\n        this._asyncUpdateLineWidths.dispose();\n        this._asyncCheckMonospaceFontAssumptions.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewLine(this._viewLineOptions);\n    }\n    // ---- end IVisibleLinesHost\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        if (e.hasChanged(144 /* EditorOption.wrappingInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(99 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        // sticky scroll\n        this._stickyScrollEnabled = options.get(114 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(114 /* EditorOption.stickyScroll */).maxLineCount;\n        applyFontInfo(this.domNode, fontInfo);\n        this._onOptionsMaybeChanged();\n        if (e.hasChanged(143 /* EditorOption.layoutInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        return true;\n    }\n    _onOptionsMaybeChanged() {\n        const conf = this._context.configuration;\n        const newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        if (!this._viewLineOptions.equals(newViewLineOptions)) {\n            this._viewLineOptions = newViewLineOptions;\n            const startLineNumber = this._visibleLines.getStartLineNumber();\n            const endLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const line = this._visibleLines.getVisibleLine(lineNumber);\n                line.onOptionsChanged(this._viewLineOptions);\n            }\n            return true;\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let r = false;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n        }\n        return r;\n    }\n    onDecorationsChanged(e) {\n        if (true /*e.inlineDecorationsChanged*/) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n            }\n        }\n        return true;\n    }\n    onFlushed(e) {\n        const shouldRender = this._visibleLines.onFlushed(e);\n        this._maxLineWidth = 0;\n        return shouldRender;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onRevealRangeRequest(e) {\n        // Using the future viewport here in order to handle multiple\n        // incoming reveal range requests that might all desire to be animated\n        const desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n        if (desiredScrollTop === -1) {\n            // marker to abort the reveal range request\n            return false;\n        }\n        // validate the new desired scroll top\n        let newScrollPosition = this._context.viewLayout.validateScrollPosition({ scrollTop: desiredScrollTop });\n        if (e.revealHorizontal) {\n            if (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n                // Two or more lines? => scroll to base (That's how you see most of the two lines)\n                newScrollPosition = {\n                    scrollTop: newScrollPosition.scrollTop,\n                    scrollLeft: 0\n                };\n            }\n            else if (e.range) {\n                // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n                this._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n            else if (e.selections && e.selections.length > 0) {\n                this._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n        }\n        else {\n            this._horizontalRevealRequest = null;\n        }\n        const scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n        const scrollType = (scrollTopDelta <= this._lineHeight ? 1 /* ScrollType.Immediate */ : e.scrollType);\n        this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, scrollType);\n        return true;\n    }\n    onScrollChanged(e) {\n        if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n            // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n            this._horizontalRevealRequest = null;\n        }\n        if (this._horizontalRevealRequest && e.scrollTopChanged) {\n            const min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            const max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            if (e.scrollTop < min || e.scrollTop > max) {\n                // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n                this._horizontalRevealRequest = null;\n            }\n        }\n        this.domNode.setWidth(e.scrollWidth);\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        return this._visibleLines.onZonesChanged(e);\n    }\n    onThemeChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    // ---- end view event handlers\n    // ----------- HELPERS FOR OTHERS\n    getPositionFromDOMInfo(spanNode, offset) {\n        const viewLineDomNode = this._getViewLineDomNode(spanNode);\n        if (viewLineDomNode === null) {\n            // Couldn't find view line node\n            return null;\n        }\n        const lineNumber = this._getLineNumberFor(viewLineDomNode);\n        if (lineNumber === -1) {\n            // Couldn't find view line node\n            return null;\n        }\n        if (lineNumber < 1 || lineNumber > this._context.viewModel.getLineCount()) {\n            // lineNumber is outside range\n            return null;\n        }\n        if (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n            // Line is empty\n            return new Position(lineNumber, 1);\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return null;\n        }\n        let column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(spanNode, offset);\n        const minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n        if (column < minColumn) {\n            column = minColumn;\n        }\n        return new Position(lineNumber, column);\n    }\n    _getViewLineDomNode(node) {\n        while (node && node.nodeType === 1) {\n            if (node.className === ViewLine.CLASS_NAME) {\n                return node;\n            }\n            node = node.parentElement;\n        }\n        return null;\n    }\n    /**\n     * @returns the line number of this view line dom node.\n     */\n    _getLineNumberFor(domNode) {\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            if (domNode === line.getDomNode()) {\n                return lineNumber;\n            }\n        }\n        return -1;\n    }\n    getLineWidth(lineNumber) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return -1;\n        }\n        const context = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getWidth(context);\n        this._updateLineWidthsSlowIfDomDidLayout(context);\n        return result;\n    }\n    linesVisibleRangesForRange(_range, includeNewLines) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        const originalEndLineNumber = _range.endLineNumber;\n        const range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n        if (!range) {\n            return null;\n        }\n        const visibleRanges = [];\n        let visibleRangesLen = 0;\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        let nextLineModelLineNumber = 0;\n        if (includeNewLines) {\n            nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n            if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n                continue;\n            }\n            const startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n            const continuesInNextLine = lineNumber !== range.endLineNumber;\n            const endColumn = continuesInNextLine ? this._context.viewModel.getLineMaxColumn(lineNumber) : range.endColumn;\n            const visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n            if (!visibleRangesForLine) {\n                continue;\n            }\n            if (includeNewLines && lineNumber < originalEndLineNumber) {\n                const currentLineModelLineNumber = nextLineModelLineNumber;\n                nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n                if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n                    visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n                }\n            }\n            visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges), continuesInNextLine);\n        }\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        if (visibleRangesLen === 0) {\n            return null;\n        }\n        return visibleRanges;\n    }\n    _visibleRangesForLineRange(lineNumber, startColumn, endColumn) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n            return null;\n        }\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        return result;\n    }\n    visibleRangeForPosition(position) {\n        const visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n        if (!visibleRanges) {\n            return null;\n        }\n        return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n    }\n    /**\n     * Updates the max line width if it is fast to compute.\n     * Returns true if all lines were taken into account.\n     * Returns false if some lines need to be reevaluated (in a slow fashion).\n     */\n    _updateLineWidthsFast() {\n        return this._updateLineWidths(true);\n    }\n    _updateLineWidthsSlow() {\n        this._updateLineWidths(false);\n    }\n    /**\n     * Update the line widths using DOM layout information after someone else\n     * has caused a synchronous layout.\n     */\n    _updateLineWidthsSlowIfDomDidLayout(domReadingContext) {\n        if (!domReadingContext.didDomLayout) {\n            // only proceed if we just did a layout\n            return;\n        }\n        if (this._asyncUpdateLineWidths.isScheduled()) {\n            // reading widths is not scheduled => widths are up-to-date\n            return;\n        }\n        this._asyncUpdateLineWidths.cancel();\n        this._updateLineWidthsSlow();\n    }\n    _updateLineWidths(fast) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let localMaxLineWidth = 1;\n        let allWidthsComputed = true;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (fast && !visibleLine.getWidthIsFast()) {\n                // Cannot compute width in a fast way for this line\n                allWidthsComputed = false;\n                continue;\n            }\n            localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth(null));\n        }\n        if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.viewModel.getLineCount()) {\n            // we know the max line width for all the lines\n            this._maxLineWidth = 0;\n        }\n        this._ensureMaxLineWidth(localMaxLineWidth);\n        return allWidthsComputed;\n    }\n    _checkMonospaceFontAssumptions() {\n        // Problems with monospace assumptions are more apparent for longer lines,\n        // as small rounding errors start to sum up, so we will select the longest\n        // line for a closer inspection\n        let longestLineNumber = -1;\n        let longestWidth = -1;\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (visibleLine.needsMonospaceFontCheck()) {\n                const lineWidth = visibleLine.getWidth(null);\n                if (lineWidth > longestWidth) {\n                    longestWidth = lineWidth;\n                    longestLineNumber = lineNumber;\n                }\n            }\n        }\n        if (longestLineNumber === -1) {\n            return;\n        }\n        if (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                visibleLine.onMonospaceAssumptionsInvalidated();\n            }\n        }\n    }\n    prepareRender() {\n        throw new Error('Not supported');\n    }\n    render() {\n        throw new Error('Not supported');\n    }\n    renderText(viewportData) {\n        // (1) render lines - ensures lines are in the DOM\n        this._visibleLines.renderLines(viewportData);\n        this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n        this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n        this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n        // (2) compute horizontal scroll position:\n        //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n        //  - it might change `scrollWidth` and `scrollLeft`\n        if (this._horizontalRevealRequest) {\n            const horizontalRevealRequest = this._horizontalRevealRequest;\n            // Check that we have the line that contains the horizontal range in the viewport\n            if (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n                this._horizontalRevealRequest = null;\n                // allow `visibleRangesForRange2` to work\n                this.onDidRender();\n                // compute new scroll position\n                const newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n                if (newScrollLeft) {\n                    if (!this._isViewportWrapping) {\n                        // ensure `scrollWidth` is large enough\n                        this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n                    }\n                    // set `scrollLeft`\n                    this._context.viewModel.viewLayout.setScrollPosition({\n                        scrollLeft: newScrollLeft.scrollLeft\n                    }, horizontalRevealRequest.scrollType);\n                }\n            }\n        }\n        // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n        if (!this._updateLineWidthsFast()) {\n            // Computing the width of some lines would be slow => delay it\n            this._asyncUpdateLineWidths.schedule();\n        }\n        else {\n            this._asyncUpdateLineWidths.cancel();\n        }\n        if (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                if (visibleLine.needsMonospaceFontCheck()) {\n                    this._asyncCheckMonospaceFontAssumptions.schedule();\n                    break;\n                }\n            }\n        }\n        // (3) handle scrolling\n        this._linesContent.setLayerHinting(this._canUseLayerHinting);\n        this._linesContent.setContain('strict');\n        const adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n        this._linesContent.setTop(-adjustedScrollTop);\n        this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n    }\n    // --- width\n    _ensureMaxLineWidth(lineWidth) {\n        const iLineWidth = Math.ceil(lineWidth);\n        if (this._maxLineWidth < iLineWidth) {\n            this._maxLineWidth = iLineWidth;\n            this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        }\n    }\n    _computeScrollTopToRevealRange(viewport, source, minimalReveal, range, selections, verticalType) {\n        const viewportStartY = viewport.top;\n        const viewportHeight = viewport.height;\n        const viewportEndY = viewportStartY + viewportHeight;\n        let boxIsSingleRange;\n        let boxStartY;\n        let boxEndY;\n        if (selections && selections.length > 0) {\n            let minLineNumber = selections[0].startLineNumber;\n            let maxLineNumber = selections[0].endLineNumber;\n            for (let i = 1, len = selections.length; i < len; i++) {\n                const selection = selections[i];\n                minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n                maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n            }\n            boxIsSingleRange = false;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n        }\n        else if (range) {\n            boxIsSingleRange = true;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n        }\n        else {\n            return -1;\n        }\n        const shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n        let paddingTop = 0;\n        let paddingBottom = 0;\n        if (!shouldIgnoreScrollOff) {\n            const context = Math.min((viewportHeight / this._lineHeight) / 2, this._cursorSurroundingLines);\n            if (this._stickyScrollEnabled) {\n                paddingTop = Math.max(context, this._maxNumberStickyLines) * this._lineHeight;\n            }\n            else {\n                paddingTop = context * this._lineHeight;\n            }\n            paddingBottom = Math.max(0, (context - 1)) * this._lineHeight;\n        }\n        else {\n            if (!minimalReveal) {\n                // Reveal one more line above (this case is hit when dragging)\n                paddingTop = this._lineHeight;\n            }\n        }\n        if (!minimalReveal) {\n            if (verticalType === 0 /* viewEvents.VerticalRevealType.Simple */ || verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */) {\n                // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n                paddingBottom += this._lineHeight;\n            }\n        }\n        boxStartY -= paddingTop;\n        boxEndY += paddingBottom;\n        let newScrollTop;\n        if (boxEndY - boxStartY > viewportHeight) {\n            // the box is larger than the viewport ... scroll to its top\n            if (!boxIsSingleRange) {\n                // do not reveal multiple cursors if there are more than fit the viewport\n                return -1;\n            }\n            newScrollTop = boxStartY;\n        }\n        else if (verticalType === 5 /* viewEvents.VerticalRevealType.NearTop */ || verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */) {\n            if (verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n                const desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n                // Try to scroll just above the box with the desired gap\n                const desiredScrollTop = boxStartY - desiredGapAbove;\n                // But ensure that the box is not pushed out of viewport\n                const minScrollTop = boxEndY - viewportHeight;\n                newScrollTop = Math.max(minScrollTop, desiredScrollTop);\n            }\n        }\n        else if (verticalType === 1 /* viewEvents.VerticalRevealType.Center */ || verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */) {\n            if (verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // Box is outside the viewport... center it\n                const boxMiddleY = (boxStartY + boxEndY) / 2;\n                newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n            }\n        }\n        else {\n            newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* viewEvents.VerticalRevealType.Top */, verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */);\n        }\n        return newScrollTop;\n    }\n    _computeScrollLeftToReveal(horizontalRevealRequest) {\n        const viewport = this._context.viewLayout.getCurrentViewport();\n        const layoutInfo = this._context.configuration.options.get(143 /* EditorOption.layoutInfo */);\n        const viewportStartX = viewport.left;\n        const viewportEndX = viewportStartX + viewport.width - layoutInfo.verticalScrollbarWidth;\n        let boxStartX = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        let boxEndX = 0;\n        if (horizontalRevealRequest.type === 'range') {\n            const visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n            if (!visibleRanges) {\n                return null;\n            }\n            for (const visibleRange of visibleRanges.ranges) {\n                boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n            }\n        }\n        else {\n            for (const selection of horizontalRevealRequest.selections) {\n                if (selection.startLineNumber !== selection.endLineNumber) {\n                    return null;\n                }\n                const visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n                if (!visibleRanges) {\n                    return null;\n                }\n                for (const visibleRange of visibleRanges.ranges) {\n                    boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                    boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n                }\n            }\n        }\n        if (!horizontalRevealRequest.minimalReveal) {\n            boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n            boxEndX += this._revealHorizontalRightPadding;\n        }\n        if (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n            return null;\n        }\n        const newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n        return {\n            scrollLeft: newScrollLeft,\n            maxHorizontalOffset: boxEndX\n        };\n    }\n    _computeMinimumScrolling(viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n        viewportStart = viewportStart | 0;\n        viewportEnd = viewportEnd | 0;\n        boxStart = boxStart | 0;\n        boxEnd = boxEnd | 0;\n        revealAtStart = !!revealAtStart;\n        revealAtEnd = !!revealAtEnd;\n        const viewportLength = viewportEnd - viewportStart;\n        const boxLength = boxEnd - boxStart;\n        if (boxLength < viewportLength) {\n            // The box would fit in the viewport\n            if (revealAtStart) {\n                return boxStart;\n            }\n            if (revealAtEnd) {\n                return Math.max(0, boxEnd - viewportLength);\n            }\n            if (boxStart < viewportStart) {\n                // The box is above the viewport\n                return boxStart;\n            }\n            else if (boxEnd > viewportEnd) {\n                // The box is below the viewport\n                return Math.max(0, boxEnd - viewportLength);\n            }\n        }\n        else {\n            // The box would not fit in the viewport\n            // Reveal the beginning of the box\n            return boxStart;\n        }\n        return viewportStart;\n    }\n}\n/**\n * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n */\nViewLines.HORIZONTAL_EXTRA_PX = 30;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}