{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.45.0(5e5af013f8d295555a7210df0d5f2cea0bf5dd56)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/sparql/sparql.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\"\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }, {\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".rq\",\n  brackets: [{\n    token: \"delimiter.curly\",\n    open: \"{\",\n    close: \"}\"\n  }, {\n    token: \"delimiter.parenthesis\",\n    open: \"(\",\n    close: \")\"\n  }, {\n    token: \"delimiter.square\",\n    open: \"[\",\n    close: \"]\"\n  }, {\n    token: \"delimiter.angle\",\n    open: \"<\",\n    close: \">\"\n  }],\n  keywords: [\"add\", \"as\", \"asc\", \"ask\", \"base\", \"by\", \"clear\", \"construct\", \"copy\", \"create\", \"data\", \"delete\", \"desc\", \"describe\", \"distinct\", \"drop\", \"false\", \"filter\", \"from\", \"graph\", \"group\", \"having\", \"in\", \"insert\", \"limit\", \"load\", \"minus\", \"move\", \"named\", \"not\", \"offset\", \"optional\", \"order\", \"prefix\", \"reduced\", \"select\", \"service\", \"silent\", \"to\", \"true\", \"undef\", \"union\", \"using\", \"values\", \"where\", \"with\"],\n  builtinFunctions: [\"a\", \"abs\", \"avg\", \"bind\", \"bnode\", \"bound\", \"ceil\", \"coalesce\", \"concat\", \"contains\", \"count\", \"datatype\", \"day\", \"encode_for_uri\", \"exists\", \"floor\", \"group_concat\", \"hours\", \"if\", \"iri\", \"isblank\", \"isiri\", \"isliteral\", \"isnumeric\", \"isuri\", \"lang\", \"langmatches\", \"lcase\", \"max\", \"md5\", \"min\", \"minutes\", \"month\", \"now\", \"rand\", \"regex\", \"replace\", \"round\", \"sameterm\", \"sample\", \"seconds\", \"sha1\", \"sha256\", \"sha384\", \"sha512\", \"str\", \"strafter\", \"strbefore\", \"strdt\", \"strends\", \"strlang\", \"strlen\", \"strstarts\", \"struuid\", \"substr\", \"sum\", \"timezone\", \"tz\", \"ucase\", \"uri\", \"uuid\", \"year\"],\n  ignoreCase: true,\n  tokenizer: {\n    root: [[/<[^\\s\\u00a0>]*>?/, \"tag\"], {\n      include: \"@strings\"\n    }, [/#.*/, \"comment\"], [/[{}()\\[\\]]/, \"@brackets\"], [/[;,.]/, \"delimiter\"], [/[_\\w\\d]+:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])*/, \"tag\"], [/:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/, \"tag\"], [/[$?]?[_\\w\\d]+/, {\n      cases: {\n        \"@keywords\": {\n          token: \"keyword\"\n        },\n        \"@builtinFunctions\": {\n          token: \"predefined.sql\"\n        },\n        \"@default\": \"identifier\"\n      }\n    }], [/\\^\\^/, \"operator.sql\"], [/\\^[*+\\-<>=&|^\\/!?]*/, \"operator.sql\"], [/[*+\\-<>=&|\\/!?]/, \"operator.sql\"], [/@[a-z\\d\\-]*/, \"metatag.html\"], [/\\s+/, \"white\"]],\n    strings: [[/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"], [/'$/, \"string.sql\", \"@pop\"], [/'/, \"string.sql\", \"@stringBody\"], [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], [/\"$/, \"string.sql\", \"@pop\"], [/\"/, \"string.sql\", \"@dblStringBody\"]],\n    stringBody: [[/[^\\\\']+/, \"string.sql\"], [/\\\\./, \"string.escape\"], [/'/, \"string.sql\", \"@pop\"]],\n    dblStringBody: [[/[^\\\\\"]+/, \"string.sql\"], [/\\\\./, \"string.escape\"], [/\"/, \"string.sql\", \"@pop\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","language","defaultToken","tokenPostfix","token","keywords","builtinFunctions","ignoreCase","tokenizer","root","include","cases","strings","stringBody","dblStringBody"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/basic-languages/sparql/sparql.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.45.0(5e5af013f8d295555a7210df0d5f2cea0bf5dd56)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/sparql/sparql.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"'\", close: \"'\", notIn: [\"string\"] },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".rq\",\n  brackets: [\n    { token: \"delimiter.curly\", open: \"{\", close: \"}\" },\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\n    { token: \"delimiter.square\", open: \"[\", close: \"]\" },\n    { token: \"delimiter.angle\", open: \"<\", close: \">\" }\n  ],\n  keywords: [\n    \"add\",\n    \"as\",\n    \"asc\",\n    \"ask\",\n    \"base\",\n    \"by\",\n    \"clear\",\n    \"construct\",\n    \"copy\",\n    \"create\",\n    \"data\",\n    \"delete\",\n    \"desc\",\n    \"describe\",\n    \"distinct\",\n    \"drop\",\n    \"false\",\n    \"filter\",\n    \"from\",\n    \"graph\",\n    \"group\",\n    \"having\",\n    \"in\",\n    \"insert\",\n    \"limit\",\n    \"load\",\n    \"minus\",\n    \"move\",\n    \"named\",\n    \"not\",\n    \"offset\",\n    \"optional\",\n    \"order\",\n    \"prefix\",\n    \"reduced\",\n    \"select\",\n    \"service\",\n    \"silent\",\n    \"to\",\n    \"true\",\n    \"undef\",\n    \"union\",\n    \"using\",\n    \"values\",\n    \"where\",\n    \"with\"\n  ],\n  builtinFunctions: [\n    \"a\",\n    \"abs\",\n    \"avg\",\n    \"bind\",\n    \"bnode\",\n    \"bound\",\n    \"ceil\",\n    \"coalesce\",\n    \"concat\",\n    \"contains\",\n    \"count\",\n    \"datatype\",\n    \"day\",\n    \"encode_for_uri\",\n    \"exists\",\n    \"floor\",\n    \"group_concat\",\n    \"hours\",\n    \"if\",\n    \"iri\",\n    \"isblank\",\n    \"isiri\",\n    \"isliteral\",\n    \"isnumeric\",\n    \"isuri\",\n    \"lang\",\n    \"langmatches\",\n    \"lcase\",\n    \"max\",\n    \"md5\",\n    \"min\",\n    \"minutes\",\n    \"month\",\n    \"now\",\n    \"rand\",\n    \"regex\",\n    \"replace\",\n    \"round\",\n    \"sameterm\",\n    \"sample\",\n    \"seconds\",\n    \"sha1\",\n    \"sha256\",\n    \"sha384\",\n    \"sha512\",\n    \"str\",\n    \"strafter\",\n    \"strbefore\",\n    \"strdt\",\n    \"strends\",\n    \"strlang\",\n    \"strlen\",\n    \"strstarts\",\n    \"struuid\",\n    \"substr\",\n    \"sum\",\n    \"timezone\",\n    \"tz\",\n    \"ucase\",\n    \"uri\",\n    \"uuid\",\n    \"year\"\n  ],\n  ignoreCase: true,\n  tokenizer: {\n    root: [\n      [/<[^\\s\\u00a0>]*>?/, \"tag\"],\n      { include: \"@strings\" },\n      [/#.*/, \"comment\"],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[;,.]/, \"delimiter\"],\n      [/[_\\w\\d]+:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])*/, \"tag\"],\n      [/:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/, \"tag\"],\n      [\n        /[$?]?[_\\w\\d]+/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@builtinFunctions\": { token: \"predefined.sql\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/\\^\\^/, \"operator.sql\"],\n      [/\\^[*+\\-<>=&|^\\/!?]*/, \"operator.sql\"],\n      [/[*+\\-<>=&|\\/!?]/, \"operator.sql\"],\n      [/@[a-z\\d\\-]*/, \"metatag.html\"],\n      [/\\s+/, \"white\"]\n    ],\n    strings: [\n      [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/'$/, \"string.sql\", \"@pop\"],\n      [/'/, \"string.sql\", \"@stringBody\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"$/, \"string.sql\", \"@pop\"],\n      [/\"/, \"string.sql\", \"@dblStringBody\"]\n    ],\n    stringBody: [\n      [/[^\\\\']+/, \"string.sql\"],\n      [/\\\\./, \"string.escape\"],\n      [/'/, \"string.sql\", \"@pop\"]\n    ],\n    dblStringBody: [\n      [/[^\\\\\"]+/, \"string.sql\"],\n      [/\\\\./, \"string.escape\"],\n      [/\"/, \"string.sql\", \"@pop\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}