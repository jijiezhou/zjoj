{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE } from '../../../base/common/keyCodes.js';\nimport { KeyCodeChord } from '../../../base/common/keybindings.js';\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\nimport { toEmptyArrayIfContainsNull } from './resolvedKeybindingItem.js';\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding {\n  constructor(chords, os) {\n    super(os, chords);\n  }\n  _keyCodeToUILabel(keyCode) {\n    if (this._os === 2 /* OperatingSystem.Macintosh */) {\n      switch (keyCode) {\n        case 15 /* KeyCode.LeftArrow */:\n          return '←';\n        case 16 /* KeyCode.UpArrow */:\n          return '↑';\n        case 17 /* KeyCode.RightArrow */:\n          return '→';\n        case 18 /* KeyCode.DownArrow */:\n          return '↓';\n      }\n    }\n    return KeyCodeUtils.toString(keyCode);\n  }\n  _getLabel(chord) {\n    if (chord.isDuplicateModifierCase()) {\n      return '';\n    }\n    return this._keyCodeToUILabel(chord.keyCode);\n  }\n  _getAriaLabel(chord) {\n    if (chord.isDuplicateModifierCase()) {\n      return '';\n    }\n    return KeyCodeUtils.toString(chord.keyCode);\n  }\n  _getElectronAccelerator(chord) {\n    return KeyCodeUtils.toElectronAccelerator(chord.keyCode);\n  }\n  _getUserSettingsLabel(chord) {\n    if (chord.isDuplicateModifierCase()) {\n      return '';\n    }\n    const result = KeyCodeUtils.toUserSettingsUS(chord.keyCode);\n    return result ? result.toLowerCase() : result;\n  }\n  _getChordDispatch(chord) {\n    return USLayoutResolvedKeybinding.getDispatchStr(chord);\n  }\n  static getDispatchStr(chord) {\n    if (chord.isModifierKey()) {\n      return null;\n    }\n    let result = '';\n    if (chord.ctrlKey) {\n      result += 'ctrl+';\n    }\n    if (chord.shiftKey) {\n      result += 'shift+';\n    }\n    if (chord.altKey) {\n      result += 'alt+';\n    }\n    if (chord.metaKey) {\n      result += 'meta+';\n    }\n    result += KeyCodeUtils.toString(chord.keyCode);\n    return result;\n  }\n  _getSingleModifierChordDispatch(keybinding) {\n    if (keybinding.keyCode === 5 /* KeyCode.Ctrl */ && !keybinding.shiftKey && !keybinding.altKey && !keybinding.metaKey) {\n      return 'ctrl';\n    }\n    if (keybinding.keyCode === 4 /* KeyCode.Shift */ && !keybinding.ctrlKey && !keybinding.altKey && !keybinding.metaKey) {\n      return 'shift';\n    }\n    if (keybinding.keyCode === 6 /* KeyCode.Alt */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.metaKey) {\n      return 'alt';\n    }\n    if (keybinding.keyCode === 57 /* KeyCode.Meta */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.altKey) {\n      return 'meta';\n    }\n    return null;\n  }\n  /**\n   * *NOTE*: Check return value for `KeyCode.Unknown`.\n   */\n  static _scanCodeToKeyCode(scanCode) {\n    const immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n    if (immutableKeyCode !== -1 /* KeyCode.DependsOnKbLayout */) {\n      return immutableKeyCode;\n    }\n    switch (scanCode) {\n      case 10 /* ScanCode.KeyA */:\n        return 31 /* KeyCode.KeyA */;\n      case 11 /* ScanCode.KeyB */:\n        return 32 /* KeyCode.KeyB */;\n      case 12 /* ScanCode.KeyC */:\n        return 33 /* KeyCode.KeyC */;\n      case 13 /* ScanCode.KeyD */:\n        return 34 /* KeyCode.KeyD */;\n      case 14 /* ScanCode.KeyE */:\n        return 35 /* KeyCode.KeyE */;\n      case 15 /* ScanCode.KeyF */:\n        return 36 /* KeyCode.KeyF */;\n      case 16 /* ScanCode.KeyG */:\n        return 37 /* KeyCode.KeyG */;\n      case 17 /* ScanCode.KeyH */:\n        return 38 /* KeyCode.KeyH */;\n      case 18 /* ScanCode.KeyI */:\n        return 39 /* KeyCode.KeyI */;\n      case 19 /* ScanCode.KeyJ */:\n        return 40 /* KeyCode.KeyJ */;\n      case 20 /* ScanCode.KeyK */:\n        return 41 /* KeyCode.KeyK */;\n      case 21 /* ScanCode.KeyL */:\n        return 42 /* KeyCode.KeyL */;\n      case 22 /* ScanCode.KeyM */:\n        return 43 /* KeyCode.KeyM */;\n      case 23 /* ScanCode.KeyN */:\n        return 44 /* KeyCode.KeyN */;\n      case 24 /* ScanCode.KeyO */:\n        return 45 /* KeyCode.KeyO */;\n      case 25 /* ScanCode.KeyP */:\n        return 46 /* KeyCode.KeyP */;\n      case 26 /* ScanCode.KeyQ */:\n        return 47 /* KeyCode.KeyQ */;\n      case 27 /* ScanCode.KeyR */:\n        return 48 /* KeyCode.KeyR */;\n      case 28 /* ScanCode.KeyS */:\n        return 49 /* KeyCode.KeyS */;\n      case 29 /* ScanCode.KeyT */:\n        return 50 /* KeyCode.KeyT */;\n      case 30 /* ScanCode.KeyU */:\n        return 51 /* KeyCode.KeyU */;\n      case 31 /* ScanCode.KeyV */:\n        return 52 /* KeyCode.KeyV */;\n      case 32 /* ScanCode.KeyW */:\n        return 53 /* KeyCode.KeyW */;\n      case 33 /* ScanCode.KeyX */:\n        return 54 /* KeyCode.KeyX */;\n      case 34 /* ScanCode.KeyY */:\n        return 55 /* KeyCode.KeyY */;\n      case 35 /* ScanCode.KeyZ */:\n        return 56 /* KeyCode.KeyZ */;\n      case 36 /* ScanCode.Digit1 */:\n        return 22 /* KeyCode.Digit1 */;\n      case 37 /* ScanCode.Digit2 */:\n        return 23 /* KeyCode.Digit2 */;\n      case 38 /* ScanCode.Digit3 */:\n        return 24 /* KeyCode.Digit3 */;\n      case 39 /* ScanCode.Digit4 */:\n        return 25 /* KeyCode.Digit4 */;\n      case 40 /* ScanCode.Digit5 */:\n        return 26 /* KeyCode.Digit5 */;\n      case 41 /* ScanCode.Digit6 */:\n        return 27 /* KeyCode.Digit6 */;\n      case 42 /* ScanCode.Digit7 */:\n        return 28 /* KeyCode.Digit7 */;\n      case 43 /* ScanCode.Digit8 */:\n        return 29 /* KeyCode.Digit8 */;\n      case 44 /* ScanCode.Digit9 */:\n        return 30 /* KeyCode.Digit9 */;\n      case 45 /* ScanCode.Digit0 */:\n        return 21 /* KeyCode.Digit0 */;\n      case 51 /* ScanCode.Minus */:\n        return 88 /* KeyCode.Minus */;\n      case 52 /* ScanCode.Equal */:\n        return 86 /* KeyCode.Equal */;\n      case 53 /* ScanCode.BracketLeft */:\n        return 92 /* KeyCode.BracketLeft */;\n      case 54 /* ScanCode.BracketRight */:\n        return 94 /* KeyCode.BracketRight */;\n      case 55 /* ScanCode.Backslash */:\n        return 93 /* KeyCode.Backslash */;\n      case 56 /* ScanCode.IntlHash */:\n        return 0 /* KeyCode.Unknown */;\n      // missing\n      case 57 /* ScanCode.Semicolon */:\n        return 85 /* KeyCode.Semicolon */;\n      case 58 /* ScanCode.Quote */:\n        return 95 /* KeyCode.Quote */;\n      case 59 /* ScanCode.Backquote */:\n        return 91 /* KeyCode.Backquote */;\n      case 60 /* ScanCode.Comma */:\n        return 87 /* KeyCode.Comma */;\n      case 61 /* ScanCode.Period */:\n        return 89 /* KeyCode.Period */;\n      case 62 /* ScanCode.Slash */:\n        return 90 /* KeyCode.Slash */;\n      case 106 /* ScanCode.IntlBackslash */:\n        return 97 /* KeyCode.IntlBackslash */;\n    }\n    return 0 /* KeyCode.Unknown */;\n  }\n  static _toKeyCodeChord(chord) {\n    if (!chord) {\n      return null;\n    }\n    if (chord instanceof KeyCodeChord) {\n      return chord;\n    }\n    const keyCode = this._scanCodeToKeyCode(chord.scanCode);\n    if (keyCode === 0 /* KeyCode.Unknown */) {\n      return null;\n    }\n    return new KeyCodeChord(chord.ctrlKey, chord.shiftKey, chord.altKey, chord.metaKey, keyCode);\n  }\n  static resolveKeybinding(keybinding, os) {\n    const chords = toEmptyArrayIfContainsNull(keybinding.chords.map(chord => this._toKeyCodeChord(chord)));\n    if (chords.length > 0) {\n      return [new USLayoutResolvedKeybinding(chords, os)];\n    }\n    return [];\n  }\n}","map":{"version":3,"names":["KeyCodeUtils","IMMUTABLE_CODE_TO_KEY_CODE","KeyCodeChord","BaseResolvedKeybinding","toEmptyArrayIfContainsNull","USLayoutResolvedKeybinding","constructor","chords","os","_keyCodeToUILabel","keyCode","_os","toString","_getLabel","chord","isDuplicateModifierCase","_getAriaLabel","_getElectronAccelerator","toElectronAccelerator","_getUserSettingsLabel","result","toUserSettingsUS","toLowerCase","_getChordDispatch","getDispatchStr","isModifierKey","ctrlKey","shiftKey","altKey","metaKey","_getSingleModifierChordDispatch","keybinding","_scanCodeToKeyCode","scanCode","immutableKeyCode","_toKeyCodeChord","resolveKeybinding","map","length"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/platform/keybinding/common/usLayoutResolvedKeybinding.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE } from '../../../base/common/keyCodes.js';\nimport { KeyCodeChord } from '../../../base/common/keybindings.js';\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\nimport { toEmptyArrayIfContainsNull } from './resolvedKeybindingItem.js';\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding {\n    constructor(chords, os) {\n        super(os, chords);\n    }\n    _keyCodeToUILabel(keyCode) {\n        if (this._os === 2 /* OperatingSystem.Macintosh */) {\n            switch (keyCode) {\n                case 15 /* KeyCode.LeftArrow */:\n                    return '←';\n                case 16 /* KeyCode.UpArrow */:\n                    return '↑';\n                case 17 /* KeyCode.RightArrow */:\n                    return '→';\n                case 18 /* KeyCode.DownArrow */:\n                    return '↓';\n            }\n        }\n        return KeyCodeUtils.toString(keyCode);\n    }\n    _getLabel(chord) {\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        return this._keyCodeToUILabel(chord.keyCode);\n    }\n    _getAriaLabel(chord) {\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        return KeyCodeUtils.toString(chord.keyCode);\n    }\n    _getElectronAccelerator(chord) {\n        return KeyCodeUtils.toElectronAccelerator(chord.keyCode);\n    }\n    _getUserSettingsLabel(chord) {\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        const result = KeyCodeUtils.toUserSettingsUS(chord.keyCode);\n        return (result ? result.toLowerCase() : result);\n    }\n    _getChordDispatch(chord) {\n        return USLayoutResolvedKeybinding.getDispatchStr(chord);\n    }\n    static getDispatchStr(chord) {\n        if (chord.isModifierKey()) {\n            return null;\n        }\n        let result = '';\n        if (chord.ctrlKey) {\n            result += 'ctrl+';\n        }\n        if (chord.shiftKey) {\n            result += 'shift+';\n        }\n        if (chord.altKey) {\n            result += 'alt+';\n        }\n        if (chord.metaKey) {\n            result += 'meta+';\n        }\n        result += KeyCodeUtils.toString(chord.keyCode);\n        return result;\n    }\n    _getSingleModifierChordDispatch(keybinding) {\n        if (keybinding.keyCode === 5 /* KeyCode.Ctrl */ && !keybinding.shiftKey && !keybinding.altKey && !keybinding.metaKey) {\n            return 'ctrl';\n        }\n        if (keybinding.keyCode === 4 /* KeyCode.Shift */ && !keybinding.ctrlKey && !keybinding.altKey && !keybinding.metaKey) {\n            return 'shift';\n        }\n        if (keybinding.keyCode === 6 /* KeyCode.Alt */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.metaKey) {\n            return 'alt';\n        }\n        if (keybinding.keyCode === 57 /* KeyCode.Meta */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.altKey) {\n            return 'meta';\n        }\n        return null;\n    }\n    /**\n     * *NOTE*: Check return value for `KeyCode.Unknown`.\n     */\n    static _scanCodeToKeyCode(scanCode) {\n        const immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n        if (immutableKeyCode !== -1 /* KeyCode.DependsOnKbLayout */) {\n            return immutableKeyCode;\n        }\n        switch (scanCode) {\n            case 10 /* ScanCode.KeyA */: return 31 /* KeyCode.KeyA */;\n            case 11 /* ScanCode.KeyB */: return 32 /* KeyCode.KeyB */;\n            case 12 /* ScanCode.KeyC */: return 33 /* KeyCode.KeyC */;\n            case 13 /* ScanCode.KeyD */: return 34 /* KeyCode.KeyD */;\n            case 14 /* ScanCode.KeyE */: return 35 /* KeyCode.KeyE */;\n            case 15 /* ScanCode.KeyF */: return 36 /* KeyCode.KeyF */;\n            case 16 /* ScanCode.KeyG */: return 37 /* KeyCode.KeyG */;\n            case 17 /* ScanCode.KeyH */: return 38 /* KeyCode.KeyH */;\n            case 18 /* ScanCode.KeyI */: return 39 /* KeyCode.KeyI */;\n            case 19 /* ScanCode.KeyJ */: return 40 /* KeyCode.KeyJ */;\n            case 20 /* ScanCode.KeyK */: return 41 /* KeyCode.KeyK */;\n            case 21 /* ScanCode.KeyL */: return 42 /* KeyCode.KeyL */;\n            case 22 /* ScanCode.KeyM */: return 43 /* KeyCode.KeyM */;\n            case 23 /* ScanCode.KeyN */: return 44 /* KeyCode.KeyN */;\n            case 24 /* ScanCode.KeyO */: return 45 /* KeyCode.KeyO */;\n            case 25 /* ScanCode.KeyP */: return 46 /* KeyCode.KeyP */;\n            case 26 /* ScanCode.KeyQ */: return 47 /* KeyCode.KeyQ */;\n            case 27 /* ScanCode.KeyR */: return 48 /* KeyCode.KeyR */;\n            case 28 /* ScanCode.KeyS */: return 49 /* KeyCode.KeyS */;\n            case 29 /* ScanCode.KeyT */: return 50 /* KeyCode.KeyT */;\n            case 30 /* ScanCode.KeyU */: return 51 /* KeyCode.KeyU */;\n            case 31 /* ScanCode.KeyV */: return 52 /* KeyCode.KeyV */;\n            case 32 /* ScanCode.KeyW */: return 53 /* KeyCode.KeyW */;\n            case 33 /* ScanCode.KeyX */: return 54 /* KeyCode.KeyX */;\n            case 34 /* ScanCode.KeyY */: return 55 /* KeyCode.KeyY */;\n            case 35 /* ScanCode.KeyZ */: return 56 /* KeyCode.KeyZ */;\n            case 36 /* ScanCode.Digit1 */: return 22 /* KeyCode.Digit1 */;\n            case 37 /* ScanCode.Digit2 */: return 23 /* KeyCode.Digit2 */;\n            case 38 /* ScanCode.Digit3 */: return 24 /* KeyCode.Digit3 */;\n            case 39 /* ScanCode.Digit4 */: return 25 /* KeyCode.Digit4 */;\n            case 40 /* ScanCode.Digit5 */: return 26 /* KeyCode.Digit5 */;\n            case 41 /* ScanCode.Digit6 */: return 27 /* KeyCode.Digit6 */;\n            case 42 /* ScanCode.Digit7 */: return 28 /* KeyCode.Digit7 */;\n            case 43 /* ScanCode.Digit8 */: return 29 /* KeyCode.Digit8 */;\n            case 44 /* ScanCode.Digit9 */: return 30 /* KeyCode.Digit9 */;\n            case 45 /* ScanCode.Digit0 */: return 21 /* KeyCode.Digit0 */;\n            case 51 /* ScanCode.Minus */: return 88 /* KeyCode.Minus */;\n            case 52 /* ScanCode.Equal */: return 86 /* KeyCode.Equal */;\n            case 53 /* ScanCode.BracketLeft */: return 92 /* KeyCode.BracketLeft */;\n            case 54 /* ScanCode.BracketRight */: return 94 /* KeyCode.BracketRight */;\n            case 55 /* ScanCode.Backslash */: return 93 /* KeyCode.Backslash */;\n            case 56 /* ScanCode.IntlHash */: return 0 /* KeyCode.Unknown */; // missing\n            case 57 /* ScanCode.Semicolon */: return 85 /* KeyCode.Semicolon */;\n            case 58 /* ScanCode.Quote */: return 95 /* KeyCode.Quote */;\n            case 59 /* ScanCode.Backquote */: return 91 /* KeyCode.Backquote */;\n            case 60 /* ScanCode.Comma */: return 87 /* KeyCode.Comma */;\n            case 61 /* ScanCode.Period */: return 89 /* KeyCode.Period */;\n            case 62 /* ScanCode.Slash */: return 90 /* KeyCode.Slash */;\n            case 106 /* ScanCode.IntlBackslash */: return 97 /* KeyCode.IntlBackslash */;\n        }\n        return 0 /* KeyCode.Unknown */;\n    }\n    static _toKeyCodeChord(chord) {\n        if (!chord) {\n            return null;\n        }\n        if (chord instanceof KeyCodeChord) {\n            return chord;\n        }\n        const keyCode = this._scanCodeToKeyCode(chord.scanCode);\n        if (keyCode === 0 /* KeyCode.Unknown */) {\n            return null;\n        }\n        return new KeyCodeChord(chord.ctrlKey, chord.shiftKey, chord.altKey, chord.metaKey, keyCode);\n    }\n    static resolveKeybinding(keybinding, os) {\n        const chords = toEmptyArrayIfContainsNull(keybinding.chords.map(chord => this._toKeyCodeChord(chord)));\n        if (chords.length > 0) {\n            return [new USLayoutResolvedKeybinding(chords, os)];\n        }\n        return [];\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,YAAY,EAAEC,0BAA0B,QAAQ,kCAAkC;AAC3F,SAASC,YAAY,QAAQ,qCAAqC;AAClE,SAASC,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,0BAA0B,QAAQ,6BAA6B;AACxE;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,SAASF,sBAAsB,CAAC;EACnEG,WAAWA,CAACC,MAAM,EAAEC,EAAE,EAAE;IACpB,KAAK,CAACA,EAAE,EAAED,MAAM,CAAC;EACrB;EACAE,iBAAiBA,CAACC,OAAO,EAAE;IACvB,IAAI,IAAI,CAACC,GAAG,KAAK,CAAC,CAAC,iCAAiC;MAChD,QAAQD,OAAO;QACX,KAAK,EAAE,CAAC;UACJ,OAAO,GAAG;QACd,KAAK,EAAE,CAAC;UACJ,OAAO,GAAG;QACd,KAAK,EAAE,CAAC;UACJ,OAAO,GAAG;QACd,KAAK,EAAE,CAAC;UACJ,OAAO,GAAG;MAClB;IACJ;IACA,OAAOV,YAAY,CAACY,QAAQ,CAACF,OAAO,CAAC;EACzC;EACAG,SAASA,CAACC,KAAK,EAAE;IACb,IAAIA,KAAK,CAACC,uBAAuB,CAAC,CAAC,EAAE;MACjC,OAAO,EAAE;IACb;IACA,OAAO,IAAI,CAACN,iBAAiB,CAACK,KAAK,CAACJ,OAAO,CAAC;EAChD;EACAM,aAAaA,CAACF,KAAK,EAAE;IACjB,IAAIA,KAAK,CAACC,uBAAuB,CAAC,CAAC,EAAE;MACjC,OAAO,EAAE;IACb;IACA,OAAOf,YAAY,CAACY,QAAQ,CAACE,KAAK,CAACJ,OAAO,CAAC;EAC/C;EACAO,uBAAuBA,CAACH,KAAK,EAAE;IAC3B,OAAOd,YAAY,CAACkB,qBAAqB,CAACJ,KAAK,CAACJ,OAAO,CAAC;EAC5D;EACAS,qBAAqBA,CAACL,KAAK,EAAE;IACzB,IAAIA,KAAK,CAACC,uBAAuB,CAAC,CAAC,EAAE;MACjC,OAAO,EAAE;IACb;IACA,MAAMK,MAAM,GAAGpB,YAAY,CAACqB,gBAAgB,CAACP,KAAK,CAACJ,OAAO,CAAC;IAC3D,OAAQU,MAAM,GAAGA,MAAM,CAACE,WAAW,CAAC,CAAC,GAAGF,MAAM;EAClD;EACAG,iBAAiBA,CAACT,KAAK,EAAE;IACrB,OAAOT,0BAA0B,CAACmB,cAAc,CAACV,KAAK,CAAC;EAC3D;EACA,OAAOU,cAAcA,CAACV,KAAK,EAAE;IACzB,IAAIA,KAAK,CAACW,aAAa,CAAC,CAAC,EAAE;MACvB,OAAO,IAAI;IACf;IACA,IAAIL,MAAM,GAAG,EAAE;IACf,IAAIN,KAAK,CAACY,OAAO,EAAE;MACfN,MAAM,IAAI,OAAO;IACrB;IACA,IAAIN,KAAK,CAACa,QAAQ,EAAE;MAChBP,MAAM,IAAI,QAAQ;IACtB;IACA,IAAIN,KAAK,CAACc,MAAM,EAAE;MACdR,MAAM,IAAI,MAAM;IACpB;IACA,IAAIN,KAAK,CAACe,OAAO,EAAE;MACfT,MAAM,IAAI,OAAO;IACrB;IACAA,MAAM,IAAIpB,YAAY,CAACY,QAAQ,CAACE,KAAK,CAACJ,OAAO,CAAC;IAC9C,OAAOU,MAAM;EACjB;EACAU,+BAA+BA,CAACC,UAAU,EAAE;IACxC,IAAIA,UAAU,CAACrB,OAAO,KAAK,CAAC,CAAC,sBAAsB,CAACqB,UAAU,CAACJ,QAAQ,IAAI,CAACI,UAAU,CAACH,MAAM,IAAI,CAACG,UAAU,CAACF,OAAO,EAAE;MAClH,OAAO,MAAM;IACjB;IACA,IAAIE,UAAU,CAACrB,OAAO,KAAK,CAAC,CAAC,uBAAuB,CAACqB,UAAU,CAACL,OAAO,IAAI,CAACK,UAAU,CAACH,MAAM,IAAI,CAACG,UAAU,CAACF,OAAO,EAAE;MAClH,OAAO,OAAO;IAClB;IACA,IAAIE,UAAU,CAACrB,OAAO,KAAK,CAAC,CAAC,qBAAqB,CAACqB,UAAU,CAACL,OAAO,IAAI,CAACK,UAAU,CAACJ,QAAQ,IAAI,CAACI,UAAU,CAACF,OAAO,EAAE;MAClH,OAAO,KAAK;IAChB;IACA,IAAIE,UAAU,CAACrB,OAAO,KAAK,EAAE,CAAC,sBAAsB,CAACqB,UAAU,CAACL,OAAO,IAAI,CAACK,UAAU,CAACJ,QAAQ,IAAI,CAACI,UAAU,CAACH,MAAM,EAAE;MACnH,OAAO,MAAM;IACjB;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;EACI,OAAOI,kBAAkBA,CAACC,QAAQ,EAAE;IAChC,MAAMC,gBAAgB,GAAGjC,0BAA0B,CAACgC,QAAQ,CAAC;IAC7D,IAAIC,gBAAgB,KAAK,CAAC,CAAC,CAAC,iCAAiC;MACzD,OAAOA,gBAAgB;IAC3B;IACA,QAAQD,QAAQ;MACZ,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAqB,OAAO,EAAE,CAAC;MACvC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAsB,OAAO,EAAE,CAAC;MACxC,KAAK,EAAE,CAAC;QAAsB,OAAO,EAAE,CAAC;MACxC,KAAK,EAAE,CAAC;QAA4B,OAAO,EAAE,CAAC;MAC9C,KAAK,EAAE,CAAC;QAA6B,OAAO,EAAE,CAAC;MAC/C,KAAK,EAAE,CAAC;QAA0B,OAAO,EAAE,CAAC;MAC5C,KAAK,EAAE,CAAC;QAAyB,OAAO,CAAC,CAAC;MAAuB;MACjE,KAAK,EAAE,CAAC;QAA0B,OAAO,EAAE,CAAC;MAC5C,KAAK,EAAE,CAAC;QAAsB,OAAO,EAAE,CAAC;MACxC,KAAK,EAAE,CAAC;QAA0B,OAAO,EAAE,CAAC;MAC5C,KAAK,EAAE,CAAC;QAAsB,OAAO,EAAE,CAAC;MACxC,KAAK,EAAE,CAAC;QAAuB,OAAO,EAAE,CAAC;MACzC,KAAK,EAAE,CAAC;QAAsB,OAAO,EAAE,CAAC;MACxC,KAAK,GAAG,CAAC;QAA8B,OAAO,EAAE,CAAC;IACrD;IACA,OAAO,CAAC,CAAC;EACb;EACA,OAAOE,eAAeA,CAACrB,KAAK,EAAE;IAC1B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO,IAAI;IACf;IACA,IAAIA,KAAK,YAAYZ,YAAY,EAAE;MAC/B,OAAOY,KAAK;IAChB;IACA,MAAMJ,OAAO,GAAG,IAAI,CAACsB,kBAAkB,CAAClB,KAAK,CAACmB,QAAQ,CAAC;IACvD,IAAIvB,OAAO,KAAK,CAAC,CAAC,uBAAuB;MACrC,OAAO,IAAI;IACf;IACA,OAAO,IAAIR,YAAY,CAACY,KAAK,CAACY,OAAO,EAAEZ,KAAK,CAACa,QAAQ,EAAEb,KAAK,CAACc,MAAM,EAAEd,KAAK,CAACe,OAAO,EAAEnB,OAAO,CAAC;EAChG;EACA,OAAO0B,iBAAiBA,CAACL,UAAU,EAAEvB,EAAE,EAAE;IACrC,MAAMD,MAAM,GAAGH,0BAA0B,CAAC2B,UAAU,CAACxB,MAAM,CAAC8B,GAAG,CAACvB,KAAK,IAAI,IAAI,CAACqB,eAAe,CAACrB,KAAK,CAAC,CAAC,CAAC;IACtG,IAAIP,MAAM,CAAC+B,MAAM,GAAG,CAAC,EAAE;MACnB,OAAO,CAAC,IAAIjC,0BAA0B,CAACE,MAAM,EAAEC,EAAE,CAAC,CAAC;IACvD;IACA,OAAO,EAAE;EACb;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}