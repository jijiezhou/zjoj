{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport * as indentUtils from './indentUtils.js';\nimport * as nls from '../../../../nls.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { normalizeIndentation } from '../../../common/core/indentation.js';\nimport { getGoodIndentForLine, getIndentMetadata } from '../../../common/languages/autoIndent.js';\nexport function getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber, inheritedIndent) {\n  if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n    // Model is empty\n    return [];\n  }\n  const indentationRules = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentationRules;\n  if (!indentationRules) {\n    return [];\n  }\n  endLineNumber = Math.min(endLineNumber, model.getLineCount());\n  // Skip `unIndentedLinePattern` lines\n  while (startLineNumber <= endLineNumber) {\n    if (!indentationRules.unIndentedLinePattern) {\n      break;\n    }\n    const text = model.getLineContent(startLineNumber);\n    if (!indentationRules.unIndentedLinePattern.test(text)) {\n      break;\n    }\n    startLineNumber++;\n  }\n  if (startLineNumber > endLineNumber - 1) {\n    return [];\n  }\n  const {\n    tabSize,\n    indentSize,\n    insertSpaces\n  } = model.getOptions();\n  const shiftIndent = (indentation, count) => {\n    count = count || 1;\n    return ShiftCommand.shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n  };\n  const unshiftIndent = (indentation, count) => {\n    count = count || 1;\n    return ShiftCommand.unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n  };\n  const indentEdits = [];\n  // indentation being passed to lines below\n  let globalIndent;\n  // Calculate indentation for the first line\n  // If there is no passed-in indentation, we use the indentation of the first line as base.\n  const currentLineText = model.getLineContent(startLineNumber);\n  let adjustedLineContent = currentLineText;\n  if (inheritedIndent !== undefined && inheritedIndent !== null) {\n    globalIndent = inheritedIndent;\n    const oldIndentation = strings.getLeadingWhitespace(currentLineText);\n    adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n    if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {\n      globalIndent = unshiftIndent(globalIndent);\n      adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n    }\n    if (currentLineText !== adjustedLineContent) {\n      indentEdits.push(EditOperation.replaceMove(new Selection(startLineNumber, 1, startLineNumber, oldIndentation.length + 1), normalizeIndentation(globalIndent, indentSize, insertSpaces)));\n    }\n  } else {\n    globalIndent = strings.getLeadingWhitespace(currentLineText);\n  }\n  // idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.\n  let idealIndentForNextLine = globalIndent;\n  if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {\n    idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n    globalIndent = shiftIndent(globalIndent);\n  } else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) {\n    idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n  }\n  startLineNumber++;\n  // Calculate indentation adjustment for all following lines\n  for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n    const text = model.getLineContent(lineNumber);\n    const oldIndentation = strings.getLeadingWhitespace(text);\n    const adjustedLineContent = idealIndentForNextLine + text.substring(oldIndentation.length);\n    if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {\n      idealIndentForNextLine = unshiftIndent(idealIndentForNextLine);\n      globalIndent = unshiftIndent(globalIndent);\n    }\n    if (oldIndentation !== idealIndentForNextLine) {\n      indentEdits.push(EditOperation.replaceMove(new Selection(lineNumber, 1, lineNumber, oldIndentation.length + 1), normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));\n    }\n    // calculate idealIndentForNextLine\n    if (indentationRules.unIndentedLinePattern && indentationRules.unIndentedLinePattern.test(text)) {\n      // In reindent phase, if the line matches `unIndentedLinePattern` we inherit indentation from above lines\n      // but don't change globalIndent and idealIndentForNextLine.\n      continue;\n    } else if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {\n      globalIndent = shiftIndent(globalIndent);\n      idealIndentForNextLine = globalIndent;\n    } else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) {\n      idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n    } else {\n      idealIndentForNextLine = globalIndent;\n    }\n  }\n  return indentEdits;\n}\nexport class IndentationToSpacesAction extends EditorAction {\n  constructor() {\n    super({\n      id: IndentationToSpacesAction.ID,\n      label: nls.localize('indentationToSpaces', \"Convert Indentation to Spaces\"),\n      alias: 'Convert Indentation to Spaces',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  run(accessor, editor) {\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const modelOpts = model.getOptions();\n    const selection = editor.getSelection();\n    if (!selection) {\n      return;\n    }\n    const command = new IndentationToSpacesCommand(selection, modelOpts.tabSize);\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, [command]);\n    editor.pushUndoStop();\n    model.updateOptions({\n      insertSpaces: true\n    });\n  }\n}\nIndentationToSpacesAction.ID = 'editor.action.indentationToSpaces';\nexport class IndentationToTabsAction extends EditorAction {\n  constructor() {\n    super({\n      id: IndentationToTabsAction.ID,\n      label: nls.localize('indentationToTabs', \"Convert Indentation to Tabs\"),\n      alias: 'Convert Indentation to Tabs',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  run(accessor, editor) {\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const modelOpts = model.getOptions();\n    const selection = editor.getSelection();\n    if (!selection) {\n      return;\n    }\n    const command = new IndentationToTabsCommand(selection, modelOpts.tabSize);\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, [command]);\n    editor.pushUndoStop();\n    model.updateOptions({\n      insertSpaces: false\n    });\n  }\n}\nIndentationToTabsAction.ID = 'editor.action.indentationToTabs';\nexport class ChangeIndentationSizeAction extends EditorAction {\n  constructor(insertSpaces, displaySizeOnly, opts) {\n    super(opts);\n    this.insertSpaces = insertSpaces;\n    this.displaySizeOnly = displaySizeOnly;\n  }\n  run(accessor, editor) {\n    const quickInputService = accessor.get(IQuickInputService);\n    const modelService = accessor.get(IModelService);\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n    const modelOpts = model.getOptions();\n    const picks = [1, 2, 3, 4, 5, 6, 7, 8].map(n => ({\n      id: n.toString(),\n      label: n.toString(),\n      // add description for tabSize value set in the configuration\n      description: n === creationOpts.tabSize && n === modelOpts.tabSize ? nls.localize('configuredTabSize', \"Configured Tab Size\") : n === creationOpts.tabSize ? nls.localize('defaultTabSize', \"Default Tab Size\") : n === modelOpts.tabSize ? nls.localize('currentTabSize', \"Current Tab Size\") : undefined\n    }));\n    // auto focus the tabSize set for the current editor\n    const autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);\n    setTimeout(() => {\n      quickInputService.pick(picks, {\n        placeHolder: nls.localize({\n          key: 'selectTabWidth',\n          comment: ['Tab corresponds to the tab key']\n        }, \"Select Tab Size for Current File\"),\n        activeItem: picks[autoFocusIndex]\n      }).then(pick => {\n        if (pick) {\n          if (model && !model.isDisposed()) {\n            const pickedVal = parseInt(pick.label, 10);\n            if (this.displaySizeOnly) {\n              model.updateOptions({\n                tabSize: pickedVal\n              });\n            } else {\n              model.updateOptions({\n                tabSize: pickedVal,\n                indentSize: pickedVal,\n                insertSpaces: this.insertSpaces\n              });\n            }\n          }\n        }\n      });\n    }, 50 /* quick input is sensitive to being opened so soon after another */);\n  }\n}\nexport class IndentUsingTabs extends ChangeIndentationSizeAction {\n  constructor() {\n    super(false, false, {\n      id: IndentUsingTabs.ID,\n      label: nls.localize('indentUsingTabs', \"Indent Using Tabs\"),\n      alias: 'Indent Using Tabs',\n      precondition: undefined\n    });\n  }\n}\nIndentUsingTabs.ID = 'editor.action.indentUsingTabs';\nexport class IndentUsingSpaces extends ChangeIndentationSizeAction {\n  constructor() {\n    super(true, false, {\n      id: IndentUsingSpaces.ID,\n      label: nls.localize('indentUsingSpaces', \"Indent Using Spaces\"),\n      alias: 'Indent Using Spaces',\n      precondition: undefined\n    });\n  }\n}\nIndentUsingSpaces.ID = 'editor.action.indentUsingSpaces';\nexport class ChangeTabDisplaySize extends ChangeIndentationSizeAction {\n  constructor() {\n    super(true, true, {\n      id: ChangeTabDisplaySize.ID,\n      label: nls.localize('changeTabDisplaySize', \"Change Tab Display Size\"),\n      alias: 'Change Tab Display Size',\n      precondition: undefined\n    });\n  }\n}\nChangeTabDisplaySize.ID = 'editor.action.changeTabDisplaySize';\nexport class DetectIndentation extends EditorAction {\n  constructor() {\n    super({\n      id: DetectIndentation.ID,\n      label: nls.localize('detectIndentation', \"Detect Indentation from Content\"),\n      alias: 'Detect Indentation from Content',\n      precondition: undefined\n    });\n  }\n  run(accessor, editor) {\n    const modelService = accessor.get(IModelService);\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n    model.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);\n  }\n}\nDetectIndentation.ID = 'editor.action.detectIndentation';\nexport class ReindentLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.reindentlines',\n      label: nls.localize('editor.reindentlines', \"Reindent Lines\"),\n      alias: 'Reindent Lines',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  run(accessor, editor) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const edits = getReindentEditOperations(model, languageConfigurationService, 1, model.getLineCount());\n    if (edits.length > 0) {\n      editor.pushUndoStop();\n      editor.executeEdits(this.id, edits);\n      editor.pushUndoStop();\n    }\n  }\n}\nexport class ReindentSelectedLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.reindentselectedlines',\n      label: nls.localize('editor.reindentselectedlines', \"Reindent Selected Lines\"),\n      alias: 'Reindent Selected Lines',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  run(accessor, editor) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const selections = editor.getSelections();\n    if (selections === null) {\n      return;\n    }\n    const edits = [];\n    for (const selection of selections) {\n      let startLineNumber = selection.startLineNumber;\n      let endLineNumber = selection.endLineNumber;\n      if (startLineNumber !== endLineNumber && selection.endColumn === 1) {\n        endLineNumber--;\n      }\n      if (startLineNumber === 1) {\n        if (startLineNumber === endLineNumber) {\n          continue;\n        }\n      } else {\n        startLineNumber--;\n      }\n      const editOperations = getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber);\n      edits.push(...editOperations);\n    }\n    if (edits.length > 0) {\n      editor.pushUndoStop();\n      editor.executeEdits(this.id, edits);\n      editor.pushUndoStop();\n    }\n  }\n}\nexport class AutoIndentOnPasteCommand {\n  constructor(edits, initialSelection) {\n    this._initialSelection = initialSelection;\n    this._edits = [];\n    this._selectionId = null;\n    for (const edit of edits) {\n      if (edit.range && typeof edit.text === 'string') {\n        this._edits.push(edit);\n      }\n    }\n  }\n  getEditOperations(model, builder) {\n    for (const edit of this._edits) {\n      builder.addEditOperation(Range.lift(edit.range), edit.text);\n    }\n    let selectionIsSet = false;\n    if (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {\n      if (this._edits[0].range.startColumn === this._initialSelection.endColumn && this._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {\n        selectionIsSet = true;\n        this._selectionId = builder.trackSelection(this._initialSelection, true);\n      } else if (this._edits[0].range.endColumn === this._initialSelection.startColumn && this._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {\n        selectionIsSet = true;\n        this._selectionId = builder.trackSelection(this._initialSelection, false);\n      }\n    }\n    if (!selectionIsSet) {\n      this._selectionId = builder.trackSelection(this._initialSelection);\n    }\n  }\n  computeCursorState(model, helper) {\n    return helper.getTrackedSelection(this._selectionId);\n  }\n}\nlet AutoIndentOnPaste = class AutoIndentOnPaste {\n  constructor(editor, _languageConfigurationService) {\n    this.editor = editor;\n    this._languageConfigurationService = _languageConfigurationService;\n    this.callOnDispose = new DisposableStore();\n    this.callOnModel = new DisposableStore();\n    this.callOnDispose.add(editor.onDidChangeConfiguration(() => this.update()));\n    this.callOnDispose.add(editor.onDidChangeModel(() => this.update()));\n    this.callOnDispose.add(editor.onDidChangeModelLanguage(() => this.update()));\n  }\n  update() {\n    // clean up\n    this.callOnModel.clear();\n    // we are disabled\n    if (this.editor.getOption(12 /* EditorOption.autoIndent */) < 4 /* EditorAutoIndentStrategy.Full */ || this.editor.getOption(55 /* EditorOption.formatOnPaste */)) {\n      return;\n    }\n    // no model\n    if (!this.editor.hasModel()) {\n      return;\n    }\n    this.callOnModel.add(this.editor.onDidPaste(({\n      range\n    }) => {\n      this.trigger(range);\n    }));\n  }\n  trigger(range) {\n    const selections = this.editor.getSelections();\n    if (selections === null || selections.length > 1) {\n      return;\n    }\n    const model = this.editor.getModel();\n    if (!model) {\n      return;\n    }\n    if (!model.tokenization.isCheapToTokenize(range.getStartPosition().lineNumber)) {\n      return;\n    }\n    const autoIndent = this.editor.getOption(12 /* EditorOption.autoIndent */);\n    const {\n      tabSize,\n      indentSize,\n      insertSpaces\n    } = model.getOptions();\n    const textEdits = [];\n    const indentConverter = {\n      shiftIndent: indentation => {\n        return ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n      },\n      unshiftIndent: indentation => {\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n      }\n    };\n    let startLineNumber = range.startLineNumber;\n    while (startLineNumber <= range.endLineNumber) {\n      if (this.shouldIgnoreLine(model, startLineNumber)) {\n        startLineNumber++;\n        continue;\n      }\n      break;\n    }\n    if (startLineNumber > range.endLineNumber) {\n      return;\n    }\n    let firstLineText = model.getLineContent(startLineNumber);\n    if (!/\\S/.test(firstLineText.substring(0, range.startColumn - 1))) {\n      const indentOfFirstLine = getGoodIndentForLine(autoIndent, model, model.getLanguageId(), startLineNumber, indentConverter, this._languageConfigurationService);\n      if (indentOfFirstLine !== null) {\n        const oldIndentation = strings.getLeadingWhitespace(firstLineText);\n        const newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n        const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n        if (newSpaceCnt !== oldSpaceCnt) {\n          const newIndent = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n          textEdits.push({\n            range: new Range(startLineNumber, 1, startLineNumber, oldIndentation.length + 1),\n            text: newIndent\n          });\n          firstLineText = newIndent + firstLineText.substr(oldIndentation.length);\n        } else {\n          const indentMetadata = getIndentMetadata(model, startLineNumber, this._languageConfigurationService);\n          if (indentMetadata === 0 || indentMetadata === 8 /* IndentConsts.UNINDENT_MASK */) {\n            // we paste content into a line where only contains whitespaces\n            // after pasting, the indentation of the first line is already correct\n            // the first line doesn't match any indentation rule\n            // then no-op.\n            return;\n          }\n        }\n      }\n    }\n    const firstLineNumber = startLineNumber;\n    // ignore empty or ignored lines\n    while (startLineNumber < range.endLineNumber) {\n      if (!/\\S/.test(model.getLineContent(startLineNumber + 1))) {\n        startLineNumber++;\n        continue;\n      }\n      break;\n    }\n    if (startLineNumber !== range.endLineNumber) {\n      const virtualModel = {\n        tokenization: {\n          getLineTokens: lineNumber => {\n            return model.tokenization.getLineTokens(lineNumber);\n          },\n          getLanguageId: () => {\n            return model.getLanguageId();\n          },\n          getLanguageIdAtPosition: (lineNumber, column) => {\n            return model.getLanguageIdAtPosition(lineNumber, column);\n          }\n        },\n        getLineContent: lineNumber => {\n          if (lineNumber === firstLineNumber) {\n            return firstLineText;\n          } else {\n            return model.getLineContent(lineNumber);\n          }\n        }\n      };\n      const indentOfSecondLine = getGoodIndentForLine(autoIndent, virtualModel, model.getLanguageId(), startLineNumber + 1, indentConverter, this._languageConfigurationService);\n      if (indentOfSecondLine !== null) {\n        const newSpaceCntOfSecondLine = indentUtils.getSpaceCnt(indentOfSecondLine, tabSize);\n        const oldSpaceCntOfSecondLine = indentUtils.getSpaceCnt(strings.getLeadingWhitespace(model.getLineContent(startLineNumber + 1)), tabSize);\n        if (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {\n          const spaceCntOffset = newSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;\n          for (let i = startLineNumber + 1; i <= range.endLineNumber; i++) {\n            const lineContent = model.getLineContent(i);\n            const originalIndent = strings.getLeadingWhitespace(lineContent);\n            const originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n            const newSpacesCnt = originalSpacesCnt + spaceCntOffset;\n            const newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n            if (newIndent !== originalIndent) {\n              textEdits.push({\n                range: new Range(i, 1, i, originalIndent.length + 1),\n                text: newIndent\n              });\n            }\n          }\n        }\n      }\n    }\n    if (textEdits.length > 0) {\n      this.editor.pushUndoStop();\n      const cmd = new AutoIndentOnPasteCommand(textEdits, this.editor.getSelection());\n      this.editor.executeCommand('autoIndentOnPaste', cmd);\n      this.editor.pushUndoStop();\n    }\n  }\n  shouldIgnoreLine(model, lineNumber) {\n    model.tokenization.forceTokenization(lineNumber);\n    const nonWhitespaceColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n    if (nonWhitespaceColumn === 0) {\n      return true;\n    }\n    const tokens = model.tokenization.getLineTokens(lineNumber);\n    if (tokens.getCount() > 0) {\n      const firstNonWhitespaceTokenIndex = tokens.findTokenIndexAtOffset(nonWhitespaceColumn);\n      if (firstNonWhitespaceTokenIndex >= 0 && tokens.getStandardTokenType(firstNonWhitespaceTokenIndex) === 1 /* StandardTokenType.Comment */) {\n        return true;\n      }\n    }\n    return false;\n  }\n  dispose() {\n    this.callOnDispose.dispose();\n    this.callOnModel.dispose();\n  }\n};\nAutoIndentOnPaste.ID = 'editor.contrib.autoIndentOnPaste';\nAutoIndentOnPaste = __decorate([__param(1, ILanguageConfigurationService)], AutoIndentOnPaste);\nexport { AutoIndentOnPaste };\nfunction getIndentationEditOperations(model, builder, tabSize, tabsToSpaces) {\n  if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n    // Model is empty\n    return;\n  }\n  let spaces = '';\n  for (let i = 0; i < tabSize; i++) {\n    spaces += ' ';\n  }\n  const spacesRegExp = new RegExp(spaces, 'gi');\n  for (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n    let lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n    if (lastIndentationColumn === 0) {\n      lastIndentationColumn = model.getLineMaxColumn(lineNumber);\n    }\n    if (lastIndentationColumn === 1) {\n      continue;\n    }\n    const originalIndentationRange = new Range(lineNumber, 1, lineNumber, lastIndentationColumn);\n    const originalIndentation = model.getValueInRange(originalIndentationRange);\n    const newIndentation = tabsToSpaces ? originalIndentation.replace(/\\t/ig, spaces) : originalIndentation.replace(spacesRegExp, '\\t');\n    builder.addEditOperation(originalIndentationRange, newIndentation);\n  }\n}\nexport class IndentationToSpacesCommand {\n  constructor(selection, tabSize) {\n    this.selection = selection;\n    this.tabSize = tabSize;\n    this.selectionId = null;\n  }\n  getEditOperations(model, builder) {\n    this.selectionId = builder.trackSelection(this.selection);\n    getIndentationEditOperations(model, builder, this.tabSize, true);\n  }\n  computeCursorState(model, helper) {\n    return helper.getTrackedSelection(this.selectionId);\n  }\n}\nexport class IndentationToTabsCommand {\n  constructor(selection, tabSize) {\n    this.selection = selection;\n    this.tabSize = tabSize;\n    this.selectionId = null;\n  }\n  getEditOperations(model, builder) {\n    this.selectionId = builder.trackSelection(this.selection);\n    getIndentationEditOperations(model, builder, this.tabSize, false);\n  }\n  computeCursorState(model, helper) {\n    return helper.getTrackedSelection(this.selectionId);\n  }\n}\nregisterEditorContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\nregisterEditorAction(IndentationToSpacesAction);\nregisterEditorAction(IndentationToTabsAction);\nregisterEditorAction(IndentUsingTabs);\nregisterEditorAction(IndentUsingSpaces);\nregisterEditorAction(ChangeTabDisplaySize);\nregisterEditorAction(DetectIndentation);\nregisterEditorAction(ReindentLinesAction);\nregisterEditorAction(ReindentSelectedLinesAction);","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","DisposableStore","strings","EditorAction","registerEditorAction","registerEditorContribution","ShiftCommand","EditOperation","Range","Selection","EditorContextKeys","ILanguageConfigurationService","IModelService","indentUtils","nls","IQuickInputService","normalizeIndentation","getGoodIndentForLine","getIndentMetadata","getReindentEditOperations","model","languageConfigurationService","startLineNumber","endLineNumber","inheritedIndent","getLineCount","getLineMaxColumn","indentationRules","getLanguageConfiguration","getLanguageId","Math","min","unIndentedLinePattern","text","getLineContent","test","tabSize","indentSize","insertSpaces","getOptions","shiftIndent","indentation","count","unshiftIndent","indentEdits","globalIndent","currentLineText","adjustedLineContent","undefined","oldIndentation","getLeadingWhitespace","substring","decreaseIndentPattern","push","replaceMove","idealIndentForNextLine","increaseIndentPattern","indentNextLinePattern","lineNumber","IndentationToSpacesAction","constructor","id","ID","label","localize","alias","precondition","writable","run","accessor","editor","getModel","modelOpts","selection","getSelection","command","IndentationToSpacesCommand","pushUndoStop","executeCommands","updateOptions","IndentationToTabsAction","IndentationToTabsCommand","ChangeIndentationSizeAction","displaySizeOnly","opts","quickInputService","get","modelService","creationOpts","getCreationOptions","uri","isForSimpleWidget","picks","map","n","toString","description","autoFocusIndex","setTimeout","pick","placeHolder","comment","activeItem","then","isDisposed","pickedVal","parseInt","IndentUsingTabs","IndentUsingSpaces","ChangeTabDisplaySize","DetectIndentation","detectIndentation","ReindentLinesAction","edits","executeEdits","ReindentSelectedLinesAction","selections","getSelections","endColumn","editOperations","AutoIndentOnPasteCommand","initialSelection","_initialSelection","_edits","_selectionId","edit","range","getEditOperations","builder","addEditOperation","lift","selectionIsSet","Array","isArray","isEmpty","startColumn","trackSelection","computeCursorState","helper","getTrackedSelection","AutoIndentOnPaste","_languageConfigurationService","callOnDispose","callOnModel","add","onDidChangeConfiguration","update","onDidChangeModel","onDidChangeModelLanguage","clear","getOption","hasModel","onDidPaste","trigger","tokenization","isCheapToTokenize","getStartPosition","autoIndent","textEdits","indentConverter","shouldIgnoreLine","firstLineText","indentOfFirstLine","newSpaceCnt","getSpaceCnt","oldSpaceCnt","newIndent","generateIndent","substr","indentMetadata","firstLineNumber","virtualModel","getLineTokens","getLanguageIdAtPosition","column","indentOfSecondLine","newSpaceCntOfSecondLine","oldSpaceCntOfSecondLine","spaceCntOffset","lineContent","originalIndent","originalSpacesCnt","newSpacesCnt","cmd","executeCommand","forceTokenization","nonWhitespaceColumn","getLineFirstNonWhitespaceColumn","tokens","getCount","firstNonWhitespaceTokenIndex","findTokenIndexAtOffset","getStandardTokenType","dispose","getIndentationEditOperations","tabsToSpaces","spaces","spacesRegExp","RegExp","lineCount","lastIndentationColumn","originalIndentationRange","originalIndentation","getValueInRange","newIndentation","replace","selectionId"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/indentation/browser/indentation.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport * as indentUtils from './indentUtils.js';\nimport * as nls from '../../../../nls.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { normalizeIndentation } from '../../../common/core/indentation.js';\nimport { getGoodIndentForLine, getIndentMetadata } from '../../../common/languages/autoIndent.js';\nexport function getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber, inheritedIndent) {\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n        // Model is empty\n        return [];\n    }\n    const indentationRules = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentationRules;\n    if (!indentationRules) {\n        return [];\n    }\n    endLineNumber = Math.min(endLineNumber, model.getLineCount());\n    // Skip `unIndentedLinePattern` lines\n    while (startLineNumber <= endLineNumber) {\n        if (!indentationRules.unIndentedLinePattern) {\n            break;\n        }\n        const text = model.getLineContent(startLineNumber);\n        if (!indentationRules.unIndentedLinePattern.test(text)) {\n            break;\n        }\n        startLineNumber++;\n    }\n    if (startLineNumber > endLineNumber - 1) {\n        return [];\n    }\n    const { tabSize, indentSize, insertSpaces } = model.getOptions();\n    const shiftIndent = (indentation, count) => {\n        count = count || 1;\n        return ShiftCommand.shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n    };\n    const unshiftIndent = (indentation, count) => {\n        count = count || 1;\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n    };\n    const indentEdits = [];\n    // indentation being passed to lines below\n    let globalIndent;\n    // Calculate indentation for the first line\n    // If there is no passed-in indentation, we use the indentation of the first line as base.\n    const currentLineText = model.getLineContent(startLineNumber);\n    let adjustedLineContent = currentLineText;\n    if (inheritedIndent !== undefined && inheritedIndent !== null) {\n        globalIndent = inheritedIndent;\n        const oldIndentation = strings.getLeadingWhitespace(currentLineText);\n        adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n        if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {\n            globalIndent = unshiftIndent(globalIndent);\n            adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n        }\n        if (currentLineText !== adjustedLineContent) {\n            indentEdits.push(EditOperation.replaceMove(new Selection(startLineNumber, 1, startLineNumber, oldIndentation.length + 1), normalizeIndentation(globalIndent, indentSize, insertSpaces)));\n        }\n    }\n    else {\n        globalIndent = strings.getLeadingWhitespace(currentLineText);\n    }\n    // idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.\n    let idealIndentForNextLine = globalIndent;\n    if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {\n        idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n        globalIndent = shiftIndent(globalIndent);\n    }\n    else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) {\n        idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n    }\n    startLineNumber++;\n    // Calculate indentation adjustment for all following lines\n    for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        const text = model.getLineContent(lineNumber);\n        const oldIndentation = strings.getLeadingWhitespace(text);\n        const adjustedLineContent = idealIndentForNextLine + text.substring(oldIndentation.length);\n        if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {\n            idealIndentForNextLine = unshiftIndent(idealIndentForNextLine);\n            globalIndent = unshiftIndent(globalIndent);\n        }\n        if (oldIndentation !== idealIndentForNextLine) {\n            indentEdits.push(EditOperation.replaceMove(new Selection(lineNumber, 1, lineNumber, oldIndentation.length + 1), normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));\n        }\n        // calculate idealIndentForNextLine\n        if (indentationRules.unIndentedLinePattern && indentationRules.unIndentedLinePattern.test(text)) {\n            // In reindent phase, if the line matches `unIndentedLinePattern` we inherit indentation from above lines\n            // but don't change globalIndent and idealIndentForNextLine.\n            continue;\n        }\n        else if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {\n            globalIndent = shiftIndent(globalIndent);\n            idealIndentForNextLine = globalIndent;\n        }\n        else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) {\n            idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n        }\n        else {\n            idealIndentForNextLine = globalIndent;\n        }\n    }\n    return indentEdits;\n}\nexport class IndentationToSpacesAction extends EditorAction {\n    constructor() {\n        super({\n            id: IndentationToSpacesAction.ID,\n            label: nls.localize('indentationToSpaces', \"Convert Indentation to Spaces\"),\n            alias: 'Convert Indentation to Spaces',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(accessor, editor) {\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const modelOpts = model.getOptions();\n        const selection = editor.getSelection();\n        if (!selection) {\n            return;\n        }\n        const command = new IndentationToSpacesCommand(selection, modelOpts.tabSize);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n        model.updateOptions({\n            insertSpaces: true\n        });\n    }\n}\nIndentationToSpacesAction.ID = 'editor.action.indentationToSpaces';\nexport class IndentationToTabsAction extends EditorAction {\n    constructor() {\n        super({\n            id: IndentationToTabsAction.ID,\n            label: nls.localize('indentationToTabs', \"Convert Indentation to Tabs\"),\n            alias: 'Convert Indentation to Tabs',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(accessor, editor) {\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const modelOpts = model.getOptions();\n        const selection = editor.getSelection();\n        if (!selection) {\n            return;\n        }\n        const command = new IndentationToTabsCommand(selection, modelOpts.tabSize);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n        model.updateOptions({\n            insertSpaces: false\n        });\n    }\n}\nIndentationToTabsAction.ID = 'editor.action.indentationToTabs';\nexport class ChangeIndentationSizeAction extends EditorAction {\n    constructor(insertSpaces, displaySizeOnly, opts) {\n        super(opts);\n        this.insertSpaces = insertSpaces;\n        this.displaySizeOnly = displaySizeOnly;\n    }\n    run(accessor, editor) {\n        const quickInputService = accessor.get(IQuickInputService);\n        const modelService = accessor.get(IModelService);\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n        const modelOpts = model.getOptions();\n        const picks = [1, 2, 3, 4, 5, 6, 7, 8].map(n => ({\n            id: n.toString(),\n            label: n.toString(),\n            // add description for tabSize value set in the configuration\n            description: (n === creationOpts.tabSize && n === modelOpts.tabSize\n                ? nls.localize('configuredTabSize', \"Configured Tab Size\")\n                : n === creationOpts.tabSize\n                    ? nls.localize('defaultTabSize', \"Default Tab Size\")\n                    : n === modelOpts.tabSize\n                        ? nls.localize('currentTabSize', \"Current Tab Size\")\n                        : undefined)\n        }));\n        // auto focus the tabSize set for the current editor\n        const autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);\n        setTimeout(() => {\n            quickInputService.pick(picks, { placeHolder: nls.localize({ key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, \"Select Tab Size for Current File\"), activeItem: picks[autoFocusIndex] }).then(pick => {\n                if (pick) {\n                    if (model && !model.isDisposed()) {\n                        const pickedVal = parseInt(pick.label, 10);\n                        if (this.displaySizeOnly) {\n                            model.updateOptions({\n                                tabSize: pickedVal\n                            });\n                        }\n                        else {\n                            model.updateOptions({\n                                tabSize: pickedVal,\n                                indentSize: pickedVal,\n                                insertSpaces: this.insertSpaces\n                            });\n                        }\n                    }\n                }\n            });\n        }, 50 /* quick input is sensitive to being opened so soon after another */);\n    }\n}\nexport class IndentUsingTabs extends ChangeIndentationSizeAction {\n    constructor() {\n        super(false, false, {\n            id: IndentUsingTabs.ID,\n            label: nls.localize('indentUsingTabs', \"Indent Using Tabs\"),\n            alias: 'Indent Using Tabs',\n            precondition: undefined\n        });\n    }\n}\nIndentUsingTabs.ID = 'editor.action.indentUsingTabs';\nexport class IndentUsingSpaces extends ChangeIndentationSizeAction {\n    constructor() {\n        super(true, false, {\n            id: IndentUsingSpaces.ID,\n            label: nls.localize('indentUsingSpaces', \"Indent Using Spaces\"),\n            alias: 'Indent Using Spaces',\n            precondition: undefined\n        });\n    }\n}\nIndentUsingSpaces.ID = 'editor.action.indentUsingSpaces';\nexport class ChangeTabDisplaySize extends ChangeIndentationSizeAction {\n    constructor() {\n        super(true, true, {\n            id: ChangeTabDisplaySize.ID,\n            label: nls.localize('changeTabDisplaySize', \"Change Tab Display Size\"),\n            alias: 'Change Tab Display Size',\n            precondition: undefined\n        });\n    }\n}\nChangeTabDisplaySize.ID = 'editor.action.changeTabDisplaySize';\nexport class DetectIndentation extends EditorAction {\n    constructor() {\n        super({\n            id: DetectIndentation.ID,\n            label: nls.localize('detectIndentation', \"Detect Indentation from Content\"),\n            alias: 'Detect Indentation from Content',\n            precondition: undefined\n        });\n    }\n    run(accessor, editor) {\n        const modelService = accessor.get(IModelService);\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n        model.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);\n    }\n}\nDetectIndentation.ID = 'editor.action.detectIndentation';\nexport class ReindentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.reindentlines',\n            label: nls.localize('editor.reindentlines', \"Reindent Lines\"),\n            alias: 'Reindent Lines',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const edits = getReindentEditOperations(model, languageConfigurationService, 1, model.getLineCount());\n        if (edits.length > 0) {\n            editor.pushUndoStop();\n            editor.executeEdits(this.id, edits);\n            editor.pushUndoStop();\n        }\n    }\n}\nexport class ReindentSelectedLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.reindentselectedlines',\n            label: nls.localize('editor.reindentselectedlines', \"Reindent Selected Lines\"),\n            alias: 'Reindent Selected Lines',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        const edits = [];\n        for (const selection of selections) {\n            let startLineNumber = selection.startLineNumber;\n            let endLineNumber = selection.endLineNumber;\n            if (startLineNumber !== endLineNumber && selection.endColumn === 1) {\n                endLineNumber--;\n            }\n            if (startLineNumber === 1) {\n                if (startLineNumber === endLineNumber) {\n                    continue;\n                }\n            }\n            else {\n                startLineNumber--;\n            }\n            const editOperations = getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber);\n            edits.push(...editOperations);\n        }\n        if (edits.length > 0) {\n            editor.pushUndoStop();\n            editor.executeEdits(this.id, edits);\n            editor.pushUndoStop();\n        }\n    }\n}\nexport class AutoIndentOnPasteCommand {\n    constructor(edits, initialSelection) {\n        this._initialSelection = initialSelection;\n        this._edits = [];\n        this._selectionId = null;\n        for (const edit of edits) {\n            if (edit.range && typeof edit.text === 'string') {\n                this._edits.push(edit);\n            }\n        }\n    }\n    getEditOperations(model, builder) {\n        for (const edit of this._edits) {\n            builder.addEditOperation(Range.lift(edit.range), edit.text);\n        }\n        let selectionIsSet = false;\n        if (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {\n            if (this._edits[0].range.startColumn === this._initialSelection.endColumn &&\n                this._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {\n                selectionIsSet = true;\n                this._selectionId = builder.trackSelection(this._initialSelection, true);\n            }\n            else if (this._edits[0].range.endColumn === this._initialSelection.startColumn &&\n                this._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {\n                selectionIsSet = true;\n                this._selectionId = builder.trackSelection(this._initialSelection, false);\n            }\n        }\n        if (!selectionIsSet) {\n            this._selectionId = builder.trackSelection(this._initialSelection);\n        }\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this._selectionId);\n    }\n}\nlet AutoIndentOnPaste = class AutoIndentOnPaste {\n    constructor(editor, _languageConfigurationService) {\n        this.editor = editor;\n        this._languageConfigurationService = _languageConfigurationService;\n        this.callOnDispose = new DisposableStore();\n        this.callOnModel = new DisposableStore();\n        this.callOnDispose.add(editor.onDidChangeConfiguration(() => this.update()));\n        this.callOnDispose.add(editor.onDidChangeModel(() => this.update()));\n        this.callOnDispose.add(editor.onDidChangeModelLanguage(() => this.update()));\n    }\n    update() {\n        // clean up\n        this.callOnModel.clear();\n        // we are disabled\n        if (this.editor.getOption(12 /* EditorOption.autoIndent */) < 4 /* EditorAutoIndentStrategy.Full */ || this.editor.getOption(55 /* EditorOption.formatOnPaste */)) {\n            return;\n        }\n        // no model\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        this.callOnModel.add(this.editor.onDidPaste(({ range }) => {\n            this.trigger(range);\n        }));\n    }\n    trigger(range) {\n        const selections = this.editor.getSelections();\n        if (selections === null || selections.length > 1) {\n            return;\n        }\n        const model = this.editor.getModel();\n        if (!model) {\n            return;\n        }\n        if (!model.tokenization.isCheapToTokenize(range.getStartPosition().lineNumber)) {\n            return;\n        }\n        const autoIndent = this.editor.getOption(12 /* EditorOption.autoIndent */);\n        const { tabSize, indentSize, insertSpaces } = model.getOptions();\n        const textEdits = [];\n        const indentConverter = {\n            shiftIndent: (indentation) => {\n                return ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            },\n            unshiftIndent: (indentation) => {\n                return ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            }\n        };\n        let startLineNumber = range.startLineNumber;\n        while (startLineNumber <= range.endLineNumber) {\n            if (this.shouldIgnoreLine(model, startLineNumber)) {\n                startLineNumber++;\n                continue;\n            }\n            break;\n        }\n        if (startLineNumber > range.endLineNumber) {\n            return;\n        }\n        let firstLineText = model.getLineContent(startLineNumber);\n        if (!/\\S/.test(firstLineText.substring(0, range.startColumn - 1))) {\n            const indentOfFirstLine = getGoodIndentForLine(autoIndent, model, model.getLanguageId(), startLineNumber, indentConverter, this._languageConfigurationService);\n            if (indentOfFirstLine !== null) {\n                const oldIndentation = strings.getLeadingWhitespace(firstLineText);\n                const newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n                const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                if (newSpaceCnt !== oldSpaceCnt) {\n                    const newIndent = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n                    textEdits.push({\n                        range: new Range(startLineNumber, 1, startLineNumber, oldIndentation.length + 1),\n                        text: newIndent\n                    });\n                    firstLineText = newIndent + firstLineText.substr(oldIndentation.length);\n                }\n                else {\n                    const indentMetadata = getIndentMetadata(model, startLineNumber, this._languageConfigurationService);\n                    if (indentMetadata === 0 || indentMetadata === 8 /* IndentConsts.UNINDENT_MASK */) {\n                        // we paste content into a line where only contains whitespaces\n                        // after pasting, the indentation of the first line is already correct\n                        // the first line doesn't match any indentation rule\n                        // then no-op.\n                        return;\n                    }\n                }\n            }\n        }\n        const firstLineNumber = startLineNumber;\n        // ignore empty or ignored lines\n        while (startLineNumber < range.endLineNumber) {\n            if (!/\\S/.test(model.getLineContent(startLineNumber + 1))) {\n                startLineNumber++;\n                continue;\n            }\n            break;\n        }\n        if (startLineNumber !== range.endLineNumber) {\n            const virtualModel = {\n                tokenization: {\n                    getLineTokens: (lineNumber) => {\n                        return model.tokenization.getLineTokens(lineNumber);\n                    },\n                    getLanguageId: () => {\n                        return model.getLanguageId();\n                    },\n                    getLanguageIdAtPosition: (lineNumber, column) => {\n                        return model.getLanguageIdAtPosition(lineNumber, column);\n                    },\n                },\n                getLineContent: (lineNumber) => {\n                    if (lineNumber === firstLineNumber) {\n                        return firstLineText;\n                    }\n                    else {\n                        return model.getLineContent(lineNumber);\n                    }\n                }\n            };\n            const indentOfSecondLine = getGoodIndentForLine(autoIndent, virtualModel, model.getLanguageId(), startLineNumber + 1, indentConverter, this._languageConfigurationService);\n            if (indentOfSecondLine !== null) {\n                const newSpaceCntOfSecondLine = indentUtils.getSpaceCnt(indentOfSecondLine, tabSize);\n                const oldSpaceCntOfSecondLine = indentUtils.getSpaceCnt(strings.getLeadingWhitespace(model.getLineContent(startLineNumber + 1)), tabSize);\n                if (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {\n                    const spaceCntOffset = newSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;\n                    for (let i = startLineNumber + 1; i <= range.endLineNumber; i++) {\n                        const lineContent = model.getLineContent(i);\n                        const originalIndent = strings.getLeadingWhitespace(lineContent);\n                        const originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n                        const newSpacesCnt = originalSpacesCnt + spaceCntOffset;\n                        const newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n                        if (newIndent !== originalIndent) {\n                            textEdits.push({\n                                range: new Range(i, 1, i, originalIndent.length + 1),\n                                text: newIndent\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        if (textEdits.length > 0) {\n            this.editor.pushUndoStop();\n            const cmd = new AutoIndentOnPasteCommand(textEdits, this.editor.getSelection());\n            this.editor.executeCommand('autoIndentOnPaste', cmd);\n            this.editor.pushUndoStop();\n        }\n    }\n    shouldIgnoreLine(model, lineNumber) {\n        model.tokenization.forceTokenization(lineNumber);\n        const nonWhitespaceColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n        if (nonWhitespaceColumn === 0) {\n            return true;\n        }\n        const tokens = model.tokenization.getLineTokens(lineNumber);\n        if (tokens.getCount() > 0) {\n            const firstNonWhitespaceTokenIndex = tokens.findTokenIndexAtOffset(nonWhitespaceColumn);\n            if (firstNonWhitespaceTokenIndex >= 0 && tokens.getStandardTokenType(firstNonWhitespaceTokenIndex) === 1 /* StandardTokenType.Comment */) {\n                return true;\n            }\n        }\n        return false;\n    }\n    dispose() {\n        this.callOnDispose.dispose();\n        this.callOnModel.dispose();\n    }\n};\nAutoIndentOnPaste.ID = 'editor.contrib.autoIndentOnPaste';\nAutoIndentOnPaste = __decorate([\n    __param(1, ILanguageConfigurationService)\n], AutoIndentOnPaste);\nexport { AutoIndentOnPaste };\nfunction getIndentationEditOperations(model, builder, tabSize, tabsToSpaces) {\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n        // Model is empty\n        return;\n    }\n    let spaces = '';\n    for (let i = 0; i < tabSize; i++) {\n        spaces += ' ';\n    }\n    const spacesRegExp = new RegExp(spaces, 'gi');\n    for (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n        let lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n        if (lastIndentationColumn === 0) {\n            lastIndentationColumn = model.getLineMaxColumn(lineNumber);\n        }\n        if (lastIndentationColumn === 1) {\n            continue;\n        }\n        const originalIndentationRange = new Range(lineNumber, 1, lineNumber, lastIndentationColumn);\n        const originalIndentation = model.getValueInRange(originalIndentationRange);\n        const newIndentation = (tabsToSpaces\n            ? originalIndentation.replace(/\\t/ig, spaces)\n            : originalIndentation.replace(spacesRegExp, '\\t'));\n        builder.addEditOperation(originalIndentationRange, newIndentation);\n    }\n}\nexport class IndentationToSpacesCommand {\n    constructor(selection, tabSize) {\n        this.selection = selection;\n        this.tabSize = tabSize;\n        this.selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        this.selectionId = builder.trackSelection(this.selection);\n        getIndentationEditOperations(model, builder, this.tabSize, true);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this.selectionId);\n    }\n}\nexport class IndentationToTabsCommand {\n    constructor(selection, tabSize) {\n        this.selection = selection;\n        this.tabSize = tabSize;\n        this.selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        this.selectionId = builder.trackSelection(this.selection);\n        getIndentationEditOperations(model, builder, this.tabSize, false);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this.selectionId);\n    }\n}\nregisterEditorContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\nregisterEditorAction(IndentationToSpacesAction);\nregisterEditorAction(IndentationToTabsAction);\nregisterEditorAction(IndentUsingTabs);\nregisterEditorAction(IndentUsingSpaces);\nregisterEditorAction(ChangeTabDisplaySize);\nregisterEditorAction(DetectIndentation);\nregisterEditorAction(ReindentLinesAction);\nregisterEditorAction(ReindentSelectedLinesAction);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}