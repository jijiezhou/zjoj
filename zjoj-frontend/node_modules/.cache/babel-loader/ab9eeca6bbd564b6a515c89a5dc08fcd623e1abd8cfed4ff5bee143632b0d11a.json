{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { BugIndicatingError, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableMap, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { Position } from '../core/position.js';\nimport { getWordAtText } from '../core/wordHelper.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { TextModelPart } from './textModelPart.js';\nimport { DefaultBackgroundTokenizer, TokenizerWithStateStoreAndTextModel, TrackingTokenizationStateStore } from './textModelTokens.js';\nimport { ContiguousMultilineTokensBuilder } from '../tokens/contiguousMultilineTokensBuilder.js';\nimport { ContiguousTokensStore } from '../tokens/contiguousTokensStore.js';\nimport { SparseTokensStore } from '../tokens/sparseTokensStore.js';\n/* hot-reload:patch-prototype-methods */\nexport class TokenizationTextModelPart extends TextModelPart {\n  constructor(_languageService, _languageConfigurationService, _textModel, _bracketPairsTextModelPart, _languageId, _attachedViews) {\n    super();\n    this._languageService = _languageService;\n    this._languageConfigurationService = _languageConfigurationService;\n    this._textModel = _textModel;\n    this._bracketPairsTextModelPart = _bracketPairsTextModelPart;\n    this._languageId = _languageId;\n    this._attachedViews = _attachedViews;\n    this._semanticTokens = new SparseTokensStore(this._languageService.languageIdCodec);\n    this._onDidChangeLanguage = this._register(new Emitter());\n    this.onDidChangeLanguage = this._onDidChangeLanguage.event;\n    this._onDidChangeLanguageConfiguration = this._register(new Emitter());\n    this.onDidChangeLanguageConfiguration = this._onDidChangeLanguageConfiguration.event;\n    this._onDidChangeTokens = this._register(new Emitter());\n    this.onDidChangeTokens = this._onDidChangeTokens.event;\n    this.grammarTokens = this._register(new GrammarTokens(this._languageService.languageIdCodec, this._textModel, () => this._languageId, this._attachedViews));\n    this._register(this._languageConfigurationService.onDidChange(e => {\n      if (e.affects(this._languageId)) {\n        this._onDidChangeLanguageConfiguration.fire({});\n      }\n    }));\n    this._register(this.grammarTokens.onDidChangeTokens(e => {\n      this._emitModelTokensChangedEvent(e);\n    }));\n    this._register(this.grammarTokens.onDidChangeBackgroundTokenizationState(e => {\n      this._bracketPairsTextModelPart.handleDidChangeBackgroundTokenizationState();\n    }));\n  }\n  handleDidChangeContent(e) {\n    if (e.isFlush) {\n      this._semanticTokens.flush();\n    } else if (!e.isEolChange) {\n      // We don't have to do anything on an EOL change\n      for (const c of e.changes) {\n        const [eolCount, firstLineLength, lastLineLength] = countEOL(c.text);\n        this._semanticTokens.acceptEdit(c.range, eolCount, firstLineLength, lastLineLength, c.text.length > 0 ? c.text.charCodeAt(0) : 0 /* CharCode.Null */);\n      }\n    }\n    this.grammarTokens.handleDidChangeContent(e);\n  }\n  handleDidChangeAttached() {\n    this.grammarTokens.handleDidChangeAttached();\n  }\n  /**\n   * Includes grammar and semantic tokens.\n   */\n  getLineTokens(lineNumber) {\n    this.validateLineNumber(lineNumber);\n    const syntacticTokens = this.grammarTokens.getLineTokens(lineNumber);\n    return this._semanticTokens.addSparseTokens(lineNumber, syntacticTokens);\n  }\n  _emitModelTokensChangedEvent(e) {\n    if (!this._textModel._isDisposing()) {\n      this._bracketPairsTextModelPart.handleDidChangeTokens(e);\n      this._onDidChangeTokens.fire(e);\n    }\n  }\n  // #region Grammar Tokens\n  validateLineNumber(lineNumber) {\n    if (lineNumber < 1 || lineNumber > this._textModel.getLineCount()) {\n      throw new BugIndicatingError('Illegal value for lineNumber');\n    }\n  }\n  get hasTokens() {\n    return this.grammarTokens.hasTokens;\n  }\n  resetTokenization() {\n    this.grammarTokens.resetTokenization();\n  }\n  get backgroundTokenizationState() {\n    return this.grammarTokens.backgroundTokenizationState;\n  }\n  forceTokenization(lineNumber) {\n    this.validateLineNumber(lineNumber);\n    this.grammarTokens.forceTokenization(lineNumber);\n  }\n  isCheapToTokenize(lineNumber) {\n    this.validateLineNumber(lineNumber);\n    return this.grammarTokens.isCheapToTokenize(lineNumber);\n  }\n  tokenizeIfCheap(lineNumber) {\n    this.validateLineNumber(lineNumber);\n    this.grammarTokens.tokenizeIfCheap(lineNumber);\n  }\n  getTokenTypeIfInsertingCharacter(lineNumber, column, character) {\n    return this.grammarTokens.getTokenTypeIfInsertingCharacter(lineNumber, column, character);\n  }\n  tokenizeLineWithEdit(position, length, newText) {\n    return this.grammarTokens.tokenizeLineWithEdit(position, length, newText);\n  }\n  // #endregion\n  // #region Semantic Tokens\n  setSemanticTokens(tokens, isComplete) {\n    this._semanticTokens.set(tokens, isComplete);\n    this._emitModelTokensChangedEvent({\n      semanticTokensApplied: tokens !== null,\n      ranges: [{\n        fromLineNumber: 1,\n        toLineNumber: this._textModel.getLineCount()\n      }]\n    });\n  }\n  hasCompleteSemanticTokens() {\n    return this._semanticTokens.isComplete();\n  }\n  hasSomeSemanticTokens() {\n    return !this._semanticTokens.isEmpty();\n  }\n  setPartialSemanticTokens(range, tokens) {\n    if (this.hasCompleteSemanticTokens()) {\n      return;\n    }\n    const changedRange = this._textModel.validateRange(this._semanticTokens.setPartial(range, tokens));\n    this._emitModelTokensChangedEvent({\n      semanticTokensApplied: true,\n      ranges: [{\n        fromLineNumber: changedRange.startLineNumber,\n        toLineNumber: changedRange.endLineNumber\n      }]\n    });\n  }\n  // #endregion\n  // #region Utility Methods\n  getWordAtPosition(_position) {\n    this.assertNotDisposed();\n    const position = this._textModel.validatePosition(_position);\n    const lineContent = this._textModel.getLineContent(position.lineNumber);\n    const lineTokens = this.getLineTokens(position.lineNumber);\n    const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n    // (1). First try checking right biased word\n    const [rbStartOffset, rbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(lineTokens, tokenIndex);\n    const rightBiasedWord = getWordAtText(position.column, this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).getWordDefinition(), lineContent.substring(rbStartOffset, rbEndOffset), rbStartOffset);\n    // Make sure the result touches the original passed in position\n    if (rightBiasedWord && rightBiasedWord.startColumn <= _position.column && _position.column <= rightBiasedWord.endColumn) {\n      return rightBiasedWord;\n    }\n    // (2). Else, if we were at a language boundary, check the left biased word\n    if (tokenIndex > 0 && rbStartOffset === position.column - 1) {\n      // edge case, where `position` sits between two tokens belonging to two different languages\n      const [lbStartOffset, lbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(lineTokens, tokenIndex - 1);\n      const leftBiasedWord = getWordAtText(position.column, this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex - 1)).getWordDefinition(), lineContent.substring(lbStartOffset, lbEndOffset), lbStartOffset);\n      // Make sure the result touches the original passed in position\n      if (leftBiasedWord && leftBiasedWord.startColumn <= _position.column && _position.column <= leftBiasedWord.endColumn) {\n        return leftBiasedWord;\n      }\n    }\n    return null;\n  }\n  getLanguageConfiguration(languageId) {\n    return this._languageConfigurationService.getLanguageConfiguration(languageId);\n  }\n  static _findLanguageBoundaries(lineTokens, tokenIndex) {\n    const languageId = lineTokens.getLanguageId(tokenIndex);\n    // go left until a different language is hit\n    let startOffset = 0;\n    for (let i = tokenIndex; i >= 0 && lineTokens.getLanguageId(i) === languageId; i--) {\n      startOffset = lineTokens.getStartOffset(i);\n    }\n    // go right until a different language is hit\n    let endOffset = lineTokens.getLineContent().length;\n    for (let i = tokenIndex, tokenCount = lineTokens.getCount(); i < tokenCount && lineTokens.getLanguageId(i) === languageId; i++) {\n      endOffset = lineTokens.getEndOffset(i);\n    }\n    return [startOffset, endOffset];\n  }\n  getWordUntilPosition(position) {\n    const wordAtPosition = this.getWordAtPosition(position);\n    if (!wordAtPosition) {\n      return {\n        word: '',\n        startColumn: position.column,\n        endColumn: position.column\n      };\n    }\n    return {\n      word: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\n      startColumn: wordAtPosition.startColumn,\n      endColumn: position.column\n    };\n  }\n  // #endregion\n  // #region Language Id handling\n  getLanguageId() {\n    return this._languageId;\n  }\n  getLanguageIdAtPosition(lineNumber, column) {\n    const position = this._textModel.validatePosition(new Position(lineNumber, column));\n    const lineTokens = this.getLineTokens(position.lineNumber);\n    return lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\n  }\n  setLanguageId(languageId, source = 'api') {\n    if (this._languageId === languageId) {\n      // There's nothing to do\n      return;\n    }\n    const e = {\n      oldLanguage: this._languageId,\n      newLanguage: languageId,\n      source\n    };\n    this._languageId = languageId;\n    this._bracketPairsTextModelPart.handleDidChangeLanguage(e);\n    this.grammarTokens.resetTokenization();\n    this._onDidChangeLanguage.fire(e);\n    this._onDidChangeLanguageConfiguration.fire({});\n  }\n}\nclass GrammarTokens extends Disposable {\n  get backgroundTokenizationState() {\n    return this._backgroundTokenizationState;\n  }\n  constructor(_languageIdCodec, _textModel, getLanguageId, attachedViews) {\n    super();\n    this._languageIdCodec = _languageIdCodec;\n    this._textModel = _textModel;\n    this.getLanguageId = getLanguageId;\n    this._tokenizer = null;\n    this._defaultBackgroundTokenizer = null;\n    this._backgroundTokenizer = this._register(new MutableDisposable());\n    this._tokens = new ContiguousTokensStore(this._languageIdCodec);\n    this._debugBackgroundTokenizer = this._register(new MutableDisposable());\n    this._backgroundTokenizationState = 1 /* BackgroundTokenizationState.InProgress */;\n    this._onDidChangeBackgroundTokenizationState = this._register(new Emitter());\n    /** @internal, should not be exposed by the text model! */\n    this.onDidChangeBackgroundTokenizationState = this._onDidChangeBackgroundTokenizationState.event;\n    this._onDidChangeTokens = this._register(new Emitter());\n    /** @internal, should not be exposed by the text model! */\n    this.onDidChangeTokens = this._onDidChangeTokens.event;\n    this._attachedViewStates = this._register(new DisposableMap());\n    this._register(TokenizationRegistry.onDidChange(e => {\n      const languageId = this.getLanguageId();\n      if (e.changedLanguages.indexOf(languageId) === -1) {\n        return;\n      }\n      this.resetTokenization();\n    }));\n    this.resetTokenization();\n    this._register(attachedViews.onDidChangeVisibleRanges(({\n      view,\n      state\n    }) => {\n      if (state) {\n        let existing = this._attachedViewStates.get(view);\n        if (!existing) {\n          existing = new AttachedViewHandler(() => this.refreshRanges(existing.lineRanges));\n          this._attachedViewStates.set(view, existing);\n        }\n        existing.handleStateChange(state);\n      } else {\n        this._attachedViewStates.deleteAndDispose(view);\n      }\n    }));\n  }\n  resetTokenization(fireTokenChangeEvent = true) {\n    var _a;\n    this._tokens.flush();\n    (_a = this._debugBackgroundTokens) === null || _a === void 0 ? void 0 : _a.flush();\n    if (this._debugBackgroundStates) {\n      this._debugBackgroundStates = new TrackingTokenizationStateStore(this._textModel.getLineCount());\n    }\n    if (fireTokenChangeEvent) {\n      this._onDidChangeTokens.fire({\n        semanticTokensApplied: false,\n        ranges: [{\n          fromLineNumber: 1,\n          toLineNumber: this._textModel.getLineCount()\n        }]\n      });\n    }\n    const initializeTokenization = () => {\n      if (this._textModel.isTooLargeForTokenization()) {\n        return [null, null];\n      }\n      const tokenizationSupport = TokenizationRegistry.get(this.getLanguageId());\n      if (!tokenizationSupport) {\n        return [null, null];\n      }\n      let initialState;\n      try {\n        initialState = tokenizationSupport.getInitialState();\n      } catch (e) {\n        onUnexpectedError(e);\n        return [null, null];\n      }\n      return [tokenizationSupport, initialState];\n    };\n    const [tokenizationSupport, initialState] = initializeTokenization();\n    if (tokenizationSupport && initialState) {\n      this._tokenizer = new TokenizerWithStateStoreAndTextModel(this._textModel.getLineCount(), tokenizationSupport, this._textModel, this._languageIdCodec);\n    } else {\n      this._tokenizer = null;\n    }\n    this._backgroundTokenizer.clear();\n    this._defaultBackgroundTokenizer = null;\n    if (this._tokenizer) {\n      const b = {\n        setTokens: tokens => {\n          this.setTokens(tokens);\n        },\n        backgroundTokenizationFinished: () => {\n          if (this._backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) {\n            // We already did a full tokenization and don't go back to progressing.\n            return;\n          }\n          const newState = 2 /* BackgroundTokenizationState.Completed */;\n          this._backgroundTokenizationState = newState;\n          this._onDidChangeBackgroundTokenizationState.fire();\n        },\n        setEndState: (lineNumber, state) => {\n          var _a;\n          if (!this._tokenizer) {\n            return;\n          }\n          const firstInvalidEndStateLineNumber = this._tokenizer.store.getFirstInvalidEndStateLineNumber();\n          // Don't accept states for definitely valid states, the renderer is ahead of the worker!\n          if (firstInvalidEndStateLineNumber !== null && lineNumber >= firstInvalidEndStateLineNumber) {\n            (_a = this._tokenizer) === null || _a === void 0 ? void 0 : _a.store.setEndState(lineNumber, state);\n          }\n        }\n      };\n      if (tokenizationSupport && tokenizationSupport.createBackgroundTokenizer && !tokenizationSupport.backgroundTokenizerShouldOnlyVerifyTokens) {\n        this._backgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, b);\n      }\n      if (!this._backgroundTokenizer.value) {\n        this._backgroundTokenizer.value = this._defaultBackgroundTokenizer = new DefaultBackgroundTokenizer(this._tokenizer, b);\n        this._defaultBackgroundTokenizer.handleChanges();\n      }\n      if ((tokenizationSupport === null || tokenizationSupport === void 0 ? void 0 : tokenizationSupport.backgroundTokenizerShouldOnlyVerifyTokens) && tokenizationSupport.createBackgroundTokenizer) {\n        this._debugBackgroundTokens = new ContiguousTokensStore(this._languageIdCodec);\n        this._debugBackgroundStates = new TrackingTokenizationStateStore(this._textModel.getLineCount());\n        this._debugBackgroundTokenizer.clear();\n        this._debugBackgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, {\n          setTokens: tokens => {\n            var _a;\n            (_a = this._debugBackgroundTokens) === null || _a === void 0 ? void 0 : _a.setMultilineTokens(tokens, this._textModel);\n          },\n          backgroundTokenizationFinished() {\n            // NO OP\n          },\n          setEndState: (lineNumber, state) => {\n            var _a;\n            (_a = this._debugBackgroundStates) === null || _a === void 0 ? void 0 : _a.setEndState(lineNumber, state);\n          }\n        });\n      } else {\n        this._debugBackgroundTokens = undefined;\n        this._debugBackgroundStates = undefined;\n        this._debugBackgroundTokenizer.value = undefined;\n      }\n    }\n    this.refreshAllVisibleLineTokens();\n  }\n  handleDidChangeAttached() {\n    var _a;\n    (_a = this._defaultBackgroundTokenizer) === null || _a === void 0 ? void 0 : _a.handleChanges();\n  }\n  handleDidChangeContent(e) {\n    var _a, _b, _c;\n    if (e.isFlush) {\n      // Don't fire the event, as the view might not have got the text change event yet\n      this.resetTokenization(false);\n    } else if (!e.isEolChange) {\n      // We don't have to do anything on an EOL change\n      for (const c of e.changes) {\n        const [eolCount, firstLineLength] = countEOL(c.text);\n        this._tokens.acceptEdit(c.range, eolCount, firstLineLength);\n        (_a = this._debugBackgroundTokens) === null || _a === void 0 ? void 0 : _a.acceptEdit(c.range, eolCount, firstLineLength);\n      }\n      (_b = this._debugBackgroundStates) === null || _b === void 0 ? void 0 : _b.acceptChanges(e.changes);\n      if (this._tokenizer) {\n        this._tokenizer.store.acceptChanges(e.changes);\n      }\n      (_c = this._defaultBackgroundTokenizer) === null || _c === void 0 ? void 0 : _c.handleChanges();\n    }\n  }\n  setTokens(tokens) {\n    const {\n      changes\n    } = this._tokens.setMultilineTokens(tokens, this._textModel);\n    if (changes.length > 0) {\n      this._onDidChangeTokens.fire({\n        semanticTokensApplied: false,\n        ranges: changes\n      });\n    }\n    return {\n      changes: changes\n    };\n  }\n  refreshAllVisibleLineTokens() {\n    const ranges = LineRange.joinMany([...this._attachedViewStates].map(([_, s]) => s.lineRanges));\n    this.refreshRanges(ranges);\n  }\n  refreshRanges(ranges) {\n    for (const range of ranges) {\n      this.refreshRange(range.startLineNumber, range.endLineNumberExclusive - 1);\n    }\n  }\n  refreshRange(startLineNumber, endLineNumber) {\n    var _a, _b;\n    if (!this._tokenizer) {\n      return;\n    }\n    startLineNumber = Math.max(1, Math.min(this._textModel.getLineCount(), startLineNumber));\n    endLineNumber = Math.min(this._textModel.getLineCount(), endLineNumber);\n    const builder = new ContiguousMultilineTokensBuilder();\n    const {\n      heuristicTokens\n    } = this._tokenizer.tokenizeHeuristically(builder, startLineNumber, endLineNumber);\n    const changedTokens = this.setTokens(builder.finalize());\n    if (heuristicTokens) {\n      // We overrode tokens with heuristically computed ones.\n      // Because old states might get reused (thus stopping invalidation),\n      // we have to explicitly request the tokens for the changed ranges again.\n      for (const c of changedTokens.changes) {\n        (_a = this._backgroundTokenizer.value) === null || _a === void 0 ? void 0 : _a.requestTokens(c.fromLineNumber, c.toLineNumber + 1);\n      }\n    }\n    (_b = this._defaultBackgroundTokenizer) === null || _b === void 0 ? void 0 : _b.checkFinished();\n  }\n  forceTokenization(lineNumber) {\n    var _a, _b;\n    const builder = new ContiguousMultilineTokensBuilder();\n    (_a = this._tokenizer) === null || _a === void 0 ? void 0 : _a.updateTokensUntilLine(builder, lineNumber);\n    this.setTokens(builder.finalize());\n    (_b = this._defaultBackgroundTokenizer) === null || _b === void 0 ? void 0 : _b.checkFinished();\n  }\n  isCheapToTokenize(lineNumber) {\n    if (!this._tokenizer) {\n      return true;\n    }\n    return this._tokenizer.isCheapToTokenize(lineNumber);\n  }\n  tokenizeIfCheap(lineNumber) {\n    if (this.isCheapToTokenize(lineNumber)) {\n      this.forceTokenization(lineNumber);\n    }\n  }\n  getLineTokens(lineNumber) {\n    var _a;\n    const lineText = this._textModel.getLineContent(lineNumber);\n    const result = this._tokens.getTokens(this._textModel.getLanguageId(), lineNumber - 1, lineText);\n    if (this._debugBackgroundTokens && this._debugBackgroundStates && this._tokenizer) {\n      if (this._debugBackgroundStates.getFirstInvalidEndStateLineNumberOrMax() > lineNumber && this._tokenizer.store.getFirstInvalidEndStateLineNumberOrMax() > lineNumber) {\n        const backgroundResult = this._debugBackgroundTokens.getTokens(this._textModel.getLanguageId(), lineNumber - 1, lineText);\n        if (!result.equals(backgroundResult) && ((_a = this._debugBackgroundTokenizer.value) === null || _a === void 0 ? void 0 : _a.reportMismatchingTokens)) {\n          this._debugBackgroundTokenizer.value.reportMismatchingTokens(lineNumber);\n        }\n      }\n    }\n    return result;\n  }\n  getTokenTypeIfInsertingCharacter(lineNumber, column, character) {\n    if (!this._tokenizer) {\n      return 0 /* StandardTokenType.Other */;\n    }\n    const position = this._textModel.validatePosition(new Position(lineNumber, column));\n    this.forceTokenization(position.lineNumber);\n    return this._tokenizer.getTokenTypeIfInsertingCharacter(position, character);\n  }\n  tokenizeLineWithEdit(position, length, newText) {\n    if (!this._tokenizer) {\n      return null;\n    }\n    const validatedPosition = this._textModel.validatePosition(position);\n    this.forceTokenization(validatedPosition.lineNumber);\n    return this._tokenizer.tokenizeLineWithEdit(validatedPosition, length, newText);\n  }\n  get hasTokens() {\n    return this._tokens.hasTokens;\n  }\n}\nclass AttachedViewHandler extends Disposable {\n  get lineRanges() {\n    return this._lineRanges;\n  }\n  constructor(_refreshTokens) {\n    super();\n    this._refreshTokens = _refreshTokens;\n    this.runner = this._register(new RunOnceScheduler(() => this.update(), 50));\n    this._computedLineRanges = [];\n    this._lineRanges = [];\n  }\n  update() {\n    if (equals(this._computedLineRanges, this._lineRanges, (a, b) => a.equals(b))) {\n      return;\n    }\n    this._computedLineRanges = this._lineRanges;\n    this._refreshTokens();\n  }\n  handleStateChange(state) {\n    this._lineRanges = state.visibleLineRanges;\n    if (state.stabilized) {\n      this.runner.cancel();\n      this.update();\n    } else {\n      this.runner.schedule();\n    }\n  }\n}","map":{"version":3,"names":["equals","RunOnceScheduler","BugIndicatingError","onUnexpectedError","Emitter","Disposable","DisposableMap","MutableDisposable","countEOL","LineRange","Position","getWordAtText","TokenizationRegistry","TextModelPart","DefaultBackgroundTokenizer","TokenizerWithStateStoreAndTextModel","TrackingTokenizationStateStore","ContiguousMultilineTokensBuilder","ContiguousTokensStore","SparseTokensStore","TokenizationTextModelPart","constructor","_languageService","_languageConfigurationService","_textModel","_bracketPairsTextModelPart","_languageId","_attachedViews","_semanticTokens","languageIdCodec","_onDidChangeLanguage","_register","onDidChangeLanguage","event","_onDidChangeLanguageConfiguration","onDidChangeLanguageConfiguration","_onDidChangeTokens","onDidChangeTokens","grammarTokens","GrammarTokens","onDidChange","e","affects","fire","_emitModelTokensChangedEvent","onDidChangeBackgroundTokenizationState","handleDidChangeBackgroundTokenizationState","handleDidChangeContent","isFlush","flush","isEolChange","c","changes","eolCount","firstLineLength","lastLineLength","text","acceptEdit","range","length","charCodeAt","handleDidChangeAttached","getLineTokens","lineNumber","validateLineNumber","syntacticTokens","addSparseTokens","_isDisposing","handleDidChangeTokens","getLineCount","hasTokens","resetTokenization","backgroundTokenizationState","forceTokenization","isCheapToTokenize","tokenizeIfCheap","getTokenTypeIfInsertingCharacter","column","character","tokenizeLineWithEdit","position","newText","setSemanticTokens","tokens","isComplete","set","semanticTokensApplied","ranges","fromLineNumber","toLineNumber","hasCompleteSemanticTokens","hasSomeSemanticTokens","isEmpty","setPartialSemanticTokens","changedRange","validateRange","setPartial","startLineNumber","endLineNumber","getWordAtPosition","_position","assertNotDisposed","validatePosition","lineContent","getLineContent","lineTokens","tokenIndex","findTokenIndexAtOffset","rbStartOffset","rbEndOffset","_findLanguageBoundaries","rightBiasedWord","getLanguageConfiguration","getLanguageId","getWordDefinition","substring","startColumn","endColumn","lbStartOffset","lbEndOffset","leftBiasedWord","languageId","startOffset","i","getStartOffset","endOffset","tokenCount","getCount","getEndOffset","getWordUntilPosition","wordAtPosition","word","substr","getLanguageIdAtPosition","setLanguageId","source","oldLanguage","newLanguage","handleDidChangeLanguage","_backgroundTokenizationState","_languageIdCodec","attachedViews","_tokenizer","_defaultBackgroundTokenizer","_backgroundTokenizer","_tokens","_debugBackgroundTokenizer","_onDidChangeBackgroundTokenizationState","_attachedViewStates","changedLanguages","indexOf","onDidChangeVisibleRanges","view","state","existing","get","AttachedViewHandler","refreshRanges","lineRanges","handleStateChange","deleteAndDispose","fireTokenChangeEvent","_a","_debugBackgroundTokens","_debugBackgroundStates","initializeTokenization","isTooLargeForTokenization","tokenizationSupport","initialState","getInitialState","clear","b","setTokens","backgroundTokenizationFinished","newState","setEndState","firstInvalidEndStateLineNumber","store","getFirstInvalidEndStateLineNumber","createBackgroundTokenizer","backgroundTokenizerShouldOnlyVerifyTokens","value","handleChanges","setMultilineTokens","undefined","refreshAllVisibleLineTokens","_b","_c","acceptChanges","joinMany","map","_","s","refreshRange","endLineNumberExclusive","Math","max","min","builder","heuristicTokens","tokenizeHeuristically","changedTokens","finalize","requestTokens","checkFinished","updateTokensUntilLine","lineText","result","getTokens","getFirstInvalidEndStateLineNumberOrMax","backgroundResult","reportMismatchingTokens","validatedPosition","_lineRanges","_refreshTokens","runner","update","_computedLineRanges","a","visibleLineRanges","stabilized","cancel","schedule"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/model/tokenizationTextModelPart.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { BugIndicatingError, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableMap, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { Position } from '../core/position.js';\nimport { getWordAtText } from '../core/wordHelper.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { TextModelPart } from './textModelPart.js';\nimport { DefaultBackgroundTokenizer, TokenizerWithStateStoreAndTextModel, TrackingTokenizationStateStore } from './textModelTokens.js';\nimport { ContiguousMultilineTokensBuilder } from '../tokens/contiguousMultilineTokensBuilder.js';\nimport { ContiguousTokensStore } from '../tokens/contiguousTokensStore.js';\nimport { SparseTokensStore } from '../tokens/sparseTokensStore.js';\n/* hot-reload:patch-prototype-methods */\nexport class TokenizationTextModelPart extends TextModelPart {\n    constructor(_languageService, _languageConfigurationService, _textModel, _bracketPairsTextModelPart, _languageId, _attachedViews) {\n        super();\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._textModel = _textModel;\n        this._bracketPairsTextModelPart = _bracketPairsTextModelPart;\n        this._languageId = _languageId;\n        this._attachedViews = _attachedViews;\n        this._semanticTokens = new SparseTokensStore(this._languageService.languageIdCodec);\n        this._onDidChangeLanguage = this._register(new Emitter());\n        this.onDidChangeLanguage = this._onDidChangeLanguage.event;\n        this._onDidChangeLanguageConfiguration = this._register(new Emitter());\n        this.onDidChangeLanguageConfiguration = this._onDidChangeLanguageConfiguration.event;\n        this._onDidChangeTokens = this._register(new Emitter());\n        this.onDidChangeTokens = this._onDidChangeTokens.event;\n        this.grammarTokens = this._register(new GrammarTokens(this._languageService.languageIdCodec, this._textModel, () => this._languageId, this._attachedViews));\n        this._register(this._languageConfigurationService.onDidChange(e => {\n            if (e.affects(this._languageId)) {\n                this._onDidChangeLanguageConfiguration.fire({});\n            }\n        }));\n        this._register(this.grammarTokens.onDidChangeTokens(e => {\n            this._emitModelTokensChangedEvent(e);\n        }));\n        this._register(this.grammarTokens.onDidChangeBackgroundTokenizationState(e => {\n            this._bracketPairsTextModelPart.handleDidChangeBackgroundTokenizationState();\n        }));\n    }\n    handleDidChangeContent(e) {\n        if (e.isFlush) {\n            this._semanticTokens.flush();\n        }\n        else if (!e.isEolChange) { // We don't have to do anything on an EOL change\n            for (const c of e.changes) {\n                const [eolCount, firstLineLength, lastLineLength] = countEOL(c.text);\n                this._semanticTokens.acceptEdit(c.range, eolCount, firstLineLength, lastLineLength, c.text.length > 0 ? c.text.charCodeAt(0) : 0 /* CharCode.Null */);\n            }\n        }\n        this.grammarTokens.handleDidChangeContent(e);\n    }\n    handleDidChangeAttached() {\n        this.grammarTokens.handleDidChangeAttached();\n    }\n    /**\n     * Includes grammar and semantic tokens.\n     */\n    getLineTokens(lineNumber) {\n        this.validateLineNumber(lineNumber);\n        const syntacticTokens = this.grammarTokens.getLineTokens(lineNumber);\n        return this._semanticTokens.addSparseTokens(lineNumber, syntacticTokens);\n    }\n    _emitModelTokensChangedEvent(e) {\n        if (!this._textModel._isDisposing()) {\n            this._bracketPairsTextModelPart.handleDidChangeTokens(e);\n            this._onDidChangeTokens.fire(e);\n        }\n    }\n    // #region Grammar Tokens\n    validateLineNumber(lineNumber) {\n        if (lineNumber < 1 || lineNumber > this._textModel.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n    }\n    get hasTokens() {\n        return this.grammarTokens.hasTokens;\n    }\n    resetTokenization() {\n        this.grammarTokens.resetTokenization();\n    }\n    get backgroundTokenizationState() {\n        return this.grammarTokens.backgroundTokenizationState;\n    }\n    forceTokenization(lineNumber) {\n        this.validateLineNumber(lineNumber);\n        this.grammarTokens.forceTokenization(lineNumber);\n    }\n    isCheapToTokenize(lineNumber) {\n        this.validateLineNumber(lineNumber);\n        return this.grammarTokens.isCheapToTokenize(lineNumber);\n    }\n    tokenizeIfCheap(lineNumber) {\n        this.validateLineNumber(lineNumber);\n        this.grammarTokens.tokenizeIfCheap(lineNumber);\n    }\n    getTokenTypeIfInsertingCharacter(lineNumber, column, character) {\n        return this.grammarTokens.getTokenTypeIfInsertingCharacter(lineNumber, column, character);\n    }\n    tokenizeLineWithEdit(position, length, newText) {\n        return this.grammarTokens.tokenizeLineWithEdit(position, length, newText);\n    }\n    // #endregion\n    // #region Semantic Tokens\n    setSemanticTokens(tokens, isComplete) {\n        this._semanticTokens.set(tokens, isComplete);\n        this._emitModelTokensChangedEvent({\n            semanticTokensApplied: tokens !== null,\n            ranges: [{ fromLineNumber: 1, toLineNumber: this._textModel.getLineCount() }],\n        });\n    }\n    hasCompleteSemanticTokens() {\n        return this._semanticTokens.isComplete();\n    }\n    hasSomeSemanticTokens() {\n        return !this._semanticTokens.isEmpty();\n    }\n    setPartialSemanticTokens(range, tokens) {\n        if (this.hasCompleteSemanticTokens()) {\n            return;\n        }\n        const changedRange = this._textModel.validateRange(this._semanticTokens.setPartial(range, tokens));\n        this._emitModelTokensChangedEvent({\n            semanticTokensApplied: true,\n            ranges: [\n                {\n                    fromLineNumber: changedRange.startLineNumber,\n                    toLineNumber: changedRange.endLineNumber,\n                },\n            ],\n        });\n    }\n    // #endregion\n    // #region Utility Methods\n    getWordAtPosition(_position) {\n        this.assertNotDisposed();\n        const position = this._textModel.validatePosition(_position);\n        const lineContent = this._textModel.getLineContent(position.lineNumber);\n        const lineTokens = this.getLineTokens(position.lineNumber);\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        // (1). First try checking right biased word\n        const [rbStartOffset, rbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(lineTokens, tokenIndex);\n        const rightBiasedWord = getWordAtText(position.column, this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).getWordDefinition(), lineContent.substring(rbStartOffset, rbEndOffset), rbStartOffset);\n        // Make sure the result touches the original passed in position\n        if (rightBiasedWord &&\n            rightBiasedWord.startColumn <= _position.column &&\n            _position.column <= rightBiasedWord.endColumn) {\n            return rightBiasedWord;\n        }\n        // (2). Else, if we were at a language boundary, check the left biased word\n        if (tokenIndex > 0 && rbStartOffset === position.column - 1) {\n            // edge case, where `position` sits between two tokens belonging to two different languages\n            const [lbStartOffset, lbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(lineTokens, tokenIndex - 1);\n            const leftBiasedWord = getWordAtText(position.column, this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex - 1)).getWordDefinition(), lineContent.substring(lbStartOffset, lbEndOffset), lbStartOffset);\n            // Make sure the result touches the original passed in position\n            if (leftBiasedWord &&\n                leftBiasedWord.startColumn <= _position.column &&\n                _position.column <= leftBiasedWord.endColumn) {\n                return leftBiasedWord;\n            }\n        }\n        return null;\n    }\n    getLanguageConfiguration(languageId) {\n        return this._languageConfigurationService.getLanguageConfiguration(languageId);\n    }\n    static _findLanguageBoundaries(lineTokens, tokenIndex) {\n        const languageId = lineTokens.getLanguageId(tokenIndex);\n        // go left until a different language is hit\n        let startOffset = 0;\n        for (let i = tokenIndex; i >= 0 && lineTokens.getLanguageId(i) === languageId; i--) {\n            startOffset = lineTokens.getStartOffset(i);\n        }\n        // go right until a different language is hit\n        let endOffset = lineTokens.getLineContent().length;\n        for (let i = tokenIndex, tokenCount = lineTokens.getCount(); i < tokenCount && lineTokens.getLanguageId(i) === languageId; i++) {\n            endOffset = lineTokens.getEndOffset(i);\n        }\n        return [startOffset, endOffset];\n    }\n    getWordUntilPosition(position) {\n        const wordAtPosition = this.getWordAtPosition(position);\n        if (!wordAtPosition) {\n            return { word: '', startColumn: position.column, endColumn: position.column, };\n        }\n        return {\n            word: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\n            startColumn: wordAtPosition.startColumn,\n            endColumn: position.column,\n        };\n    }\n    // #endregion\n    // #region Language Id handling\n    getLanguageId() {\n        return this._languageId;\n    }\n    getLanguageIdAtPosition(lineNumber, column) {\n        const position = this._textModel.validatePosition(new Position(lineNumber, column));\n        const lineTokens = this.getLineTokens(position.lineNumber);\n        return lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\n    }\n    setLanguageId(languageId, source = 'api') {\n        if (this._languageId === languageId) {\n            // There's nothing to do\n            return;\n        }\n        const e = {\n            oldLanguage: this._languageId,\n            newLanguage: languageId,\n            source\n        };\n        this._languageId = languageId;\n        this._bracketPairsTextModelPart.handleDidChangeLanguage(e);\n        this.grammarTokens.resetTokenization();\n        this._onDidChangeLanguage.fire(e);\n        this._onDidChangeLanguageConfiguration.fire({});\n    }\n}\nclass GrammarTokens extends Disposable {\n    get backgroundTokenizationState() {\n        return this._backgroundTokenizationState;\n    }\n    constructor(_languageIdCodec, _textModel, getLanguageId, attachedViews) {\n        super();\n        this._languageIdCodec = _languageIdCodec;\n        this._textModel = _textModel;\n        this.getLanguageId = getLanguageId;\n        this._tokenizer = null;\n        this._defaultBackgroundTokenizer = null;\n        this._backgroundTokenizer = this._register(new MutableDisposable());\n        this._tokens = new ContiguousTokensStore(this._languageIdCodec);\n        this._debugBackgroundTokenizer = this._register(new MutableDisposable());\n        this._backgroundTokenizationState = 1 /* BackgroundTokenizationState.InProgress */;\n        this._onDidChangeBackgroundTokenizationState = this._register(new Emitter());\n        /** @internal, should not be exposed by the text model! */\n        this.onDidChangeBackgroundTokenizationState = this._onDidChangeBackgroundTokenizationState.event;\n        this._onDidChangeTokens = this._register(new Emitter());\n        /** @internal, should not be exposed by the text model! */\n        this.onDidChangeTokens = this._onDidChangeTokens.event;\n        this._attachedViewStates = this._register(new DisposableMap());\n        this._register(TokenizationRegistry.onDidChange((e) => {\n            const languageId = this.getLanguageId();\n            if (e.changedLanguages.indexOf(languageId) === -1) {\n                return;\n            }\n            this.resetTokenization();\n        }));\n        this.resetTokenization();\n        this._register(attachedViews.onDidChangeVisibleRanges(({ view, state }) => {\n            if (state) {\n                let existing = this._attachedViewStates.get(view);\n                if (!existing) {\n                    existing = new AttachedViewHandler(() => this.refreshRanges(existing.lineRanges));\n                    this._attachedViewStates.set(view, existing);\n                }\n                existing.handleStateChange(state);\n            }\n            else {\n                this._attachedViewStates.deleteAndDispose(view);\n            }\n        }));\n    }\n    resetTokenization(fireTokenChangeEvent = true) {\n        var _a;\n        this._tokens.flush();\n        (_a = this._debugBackgroundTokens) === null || _a === void 0 ? void 0 : _a.flush();\n        if (this._debugBackgroundStates) {\n            this._debugBackgroundStates = new TrackingTokenizationStateStore(this._textModel.getLineCount());\n        }\n        if (fireTokenChangeEvent) {\n            this._onDidChangeTokens.fire({\n                semanticTokensApplied: false,\n                ranges: [\n                    {\n                        fromLineNumber: 1,\n                        toLineNumber: this._textModel.getLineCount(),\n                    },\n                ],\n            });\n        }\n        const initializeTokenization = () => {\n            if (this._textModel.isTooLargeForTokenization()) {\n                return [null, null];\n            }\n            const tokenizationSupport = TokenizationRegistry.get(this.getLanguageId());\n            if (!tokenizationSupport) {\n                return [null, null];\n            }\n            let initialState;\n            try {\n                initialState = tokenizationSupport.getInitialState();\n            }\n            catch (e) {\n                onUnexpectedError(e);\n                return [null, null];\n            }\n            return [tokenizationSupport, initialState];\n        };\n        const [tokenizationSupport, initialState] = initializeTokenization();\n        if (tokenizationSupport && initialState) {\n            this._tokenizer = new TokenizerWithStateStoreAndTextModel(this._textModel.getLineCount(), tokenizationSupport, this._textModel, this._languageIdCodec);\n        }\n        else {\n            this._tokenizer = null;\n        }\n        this._backgroundTokenizer.clear();\n        this._defaultBackgroundTokenizer = null;\n        if (this._tokenizer) {\n            const b = {\n                setTokens: (tokens) => {\n                    this.setTokens(tokens);\n                },\n                backgroundTokenizationFinished: () => {\n                    if (this._backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) {\n                        // We already did a full tokenization and don't go back to progressing.\n                        return;\n                    }\n                    const newState = 2 /* BackgroundTokenizationState.Completed */;\n                    this._backgroundTokenizationState = newState;\n                    this._onDidChangeBackgroundTokenizationState.fire();\n                },\n                setEndState: (lineNumber, state) => {\n                    var _a;\n                    if (!this._tokenizer) {\n                        return;\n                    }\n                    const firstInvalidEndStateLineNumber = this._tokenizer.store.getFirstInvalidEndStateLineNumber();\n                    // Don't accept states for definitely valid states, the renderer is ahead of the worker!\n                    if (firstInvalidEndStateLineNumber !== null && lineNumber >= firstInvalidEndStateLineNumber) {\n                        (_a = this._tokenizer) === null || _a === void 0 ? void 0 : _a.store.setEndState(lineNumber, state);\n                    }\n                },\n            };\n            if (tokenizationSupport && tokenizationSupport.createBackgroundTokenizer && !tokenizationSupport.backgroundTokenizerShouldOnlyVerifyTokens) {\n                this._backgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, b);\n            }\n            if (!this._backgroundTokenizer.value) {\n                this._backgroundTokenizer.value = this._defaultBackgroundTokenizer =\n                    new DefaultBackgroundTokenizer(this._tokenizer, b);\n                this._defaultBackgroundTokenizer.handleChanges();\n            }\n            if ((tokenizationSupport === null || tokenizationSupport === void 0 ? void 0 : tokenizationSupport.backgroundTokenizerShouldOnlyVerifyTokens) && tokenizationSupport.createBackgroundTokenizer) {\n                this._debugBackgroundTokens = new ContiguousTokensStore(this._languageIdCodec);\n                this._debugBackgroundStates = new TrackingTokenizationStateStore(this._textModel.getLineCount());\n                this._debugBackgroundTokenizer.clear();\n                this._debugBackgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, {\n                    setTokens: (tokens) => {\n                        var _a;\n                        (_a = this._debugBackgroundTokens) === null || _a === void 0 ? void 0 : _a.setMultilineTokens(tokens, this._textModel);\n                    },\n                    backgroundTokenizationFinished() {\n                        // NO OP\n                    },\n                    setEndState: (lineNumber, state) => {\n                        var _a;\n                        (_a = this._debugBackgroundStates) === null || _a === void 0 ? void 0 : _a.setEndState(lineNumber, state);\n                    },\n                });\n            }\n            else {\n                this._debugBackgroundTokens = undefined;\n                this._debugBackgroundStates = undefined;\n                this._debugBackgroundTokenizer.value = undefined;\n            }\n        }\n        this.refreshAllVisibleLineTokens();\n    }\n    handleDidChangeAttached() {\n        var _a;\n        (_a = this._defaultBackgroundTokenizer) === null || _a === void 0 ? void 0 : _a.handleChanges();\n    }\n    handleDidChangeContent(e) {\n        var _a, _b, _c;\n        if (e.isFlush) {\n            // Don't fire the event, as the view might not have got the text change event yet\n            this.resetTokenization(false);\n        }\n        else if (!e.isEolChange) { // We don't have to do anything on an EOL change\n            for (const c of e.changes) {\n                const [eolCount, firstLineLength] = countEOL(c.text);\n                this._tokens.acceptEdit(c.range, eolCount, firstLineLength);\n                (_a = this._debugBackgroundTokens) === null || _a === void 0 ? void 0 : _a.acceptEdit(c.range, eolCount, firstLineLength);\n            }\n            (_b = this._debugBackgroundStates) === null || _b === void 0 ? void 0 : _b.acceptChanges(e.changes);\n            if (this._tokenizer) {\n                this._tokenizer.store.acceptChanges(e.changes);\n            }\n            (_c = this._defaultBackgroundTokenizer) === null || _c === void 0 ? void 0 : _c.handleChanges();\n        }\n    }\n    setTokens(tokens) {\n        const { changes } = this._tokens.setMultilineTokens(tokens, this._textModel);\n        if (changes.length > 0) {\n            this._onDidChangeTokens.fire({ semanticTokensApplied: false, ranges: changes, });\n        }\n        return { changes: changes };\n    }\n    refreshAllVisibleLineTokens() {\n        const ranges = LineRange.joinMany([...this._attachedViewStates].map(([_, s]) => s.lineRanges));\n        this.refreshRanges(ranges);\n    }\n    refreshRanges(ranges) {\n        for (const range of ranges) {\n            this.refreshRange(range.startLineNumber, range.endLineNumberExclusive - 1);\n        }\n    }\n    refreshRange(startLineNumber, endLineNumber) {\n        var _a, _b;\n        if (!this._tokenizer) {\n            return;\n        }\n        startLineNumber = Math.max(1, Math.min(this._textModel.getLineCount(), startLineNumber));\n        endLineNumber = Math.min(this._textModel.getLineCount(), endLineNumber);\n        const builder = new ContiguousMultilineTokensBuilder();\n        const { heuristicTokens } = this._tokenizer.tokenizeHeuristically(builder, startLineNumber, endLineNumber);\n        const changedTokens = this.setTokens(builder.finalize());\n        if (heuristicTokens) {\n            // We overrode tokens with heuristically computed ones.\n            // Because old states might get reused (thus stopping invalidation),\n            // we have to explicitly request the tokens for the changed ranges again.\n            for (const c of changedTokens.changes) {\n                (_a = this._backgroundTokenizer.value) === null || _a === void 0 ? void 0 : _a.requestTokens(c.fromLineNumber, c.toLineNumber + 1);\n            }\n        }\n        (_b = this._defaultBackgroundTokenizer) === null || _b === void 0 ? void 0 : _b.checkFinished();\n    }\n    forceTokenization(lineNumber) {\n        var _a, _b;\n        const builder = new ContiguousMultilineTokensBuilder();\n        (_a = this._tokenizer) === null || _a === void 0 ? void 0 : _a.updateTokensUntilLine(builder, lineNumber);\n        this.setTokens(builder.finalize());\n        (_b = this._defaultBackgroundTokenizer) === null || _b === void 0 ? void 0 : _b.checkFinished();\n    }\n    isCheapToTokenize(lineNumber) {\n        if (!this._tokenizer) {\n            return true;\n        }\n        return this._tokenizer.isCheapToTokenize(lineNumber);\n    }\n    tokenizeIfCheap(lineNumber) {\n        if (this.isCheapToTokenize(lineNumber)) {\n            this.forceTokenization(lineNumber);\n        }\n    }\n    getLineTokens(lineNumber) {\n        var _a;\n        const lineText = this._textModel.getLineContent(lineNumber);\n        const result = this._tokens.getTokens(this._textModel.getLanguageId(), lineNumber - 1, lineText);\n        if (this._debugBackgroundTokens && this._debugBackgroundStates && this._tokenizer) {\n            if (this._debugBackgroundStates.getFirstInvalidEndStateLineNumberOrMax() > lineNumber && this._tokenizer.store.getFirstInvalidEndStateLineNumberOrMax() > lineNumber) {\n                const backgroundResult = this._debugBackgroundTokens.getTokens(this._textModel.getLanguageId(), lineNumber - 1, lineText);\n                if (!result.equals(backgroundResult) && ((_a = this._debugBackgroundTokenizer.value) === null || _a === void 0 ? void 0 : _a.reportMismatchingTokens)) {\n                    this._debugBackgroundTokenizer.value.reportMismatchingTokens(lineNumber);\n                }\n            }\n        }\n        return result;\n    }\n    getTokenTypeIfInsertingCharacter(lineNumber, column, character) {\n        if (!this._tokenizer) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        const position = this._textModel.validatePosition(new Position(lineNumber, column));\n        this.forceTokenization(position.lineNumber);\n        return this._tokenizer.getTokenTypeIfInsertingCharacter(position, character);\n    }\n    tokenizeLineWithEdit(position, length, newText) {\n        if (!this._tokenizer) {\n            return null;\n        }\n        const validatedPosition = this._textModel.validatePosition(position);\n        this.forceTokenization(validatedPosition.lineNumber);\n        return this._tokenizer.tokenizeLineWithEdit(validatedPosition, length, newText);\n    }\n    get hasTokens() {\n        return this._tokens.hasTokens;\n    }\n}\nclass AttachedViewHandler extends Disposable {\n    get lineRanges() { return this._lineRanges; }\n    constructor(_refreshTokens) {\n        super();\n        this._refreshTokens = _refreshTokens;\n        this.runner = this._register(new RunOnceScheduler(() => this.update(), 50));\n        this._computedLineRanges = [];\n        this._lineRanges = [];\n    }\n    update() {\n        if (equals(this._computedLineRanges, this._lineRanges, (a, b) => a.equals(b))) {\n            return;\n        }\n        this._computedLineRanges = this._lineRanges;\n        this._refreshTokens();\n    }\n    handleStateChange(state) {\n        this._lineRanges = state.visibleLineRanges;\n        if (state.stabilized) {\n            this.runner.cancel();\n            this.update();\n        }\n        else {\n            this.runner.schedule();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}