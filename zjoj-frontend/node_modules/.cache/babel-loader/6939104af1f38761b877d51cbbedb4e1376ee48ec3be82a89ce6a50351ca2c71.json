{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nexport var IndentAction;\n(function (IndentAction) {\n  /**\n   * Insert new line and copy the previous line's indentation.\n   */\n  IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n  /**\n   * Insert new line and indent once (relative to the previous line's indentation).\n   */\n  IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n  /**\n   * Insert two new lines:\n   *  - the first one indented which will hold the cursor\n   *  - the second one at the same indentation level\n   */\n  IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n  /**\n   * Insert new line and outdent once (relative to the previous line's indentation).\n   */\n  IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\n/**\n * @internal\n */\nexport class StandardAutoClosingPairConditional {\n  constructor(source) {\n    this._neutralCharacter = null;\n    this._neutralCharacterSearched = false;\n    this.open = source.open;\n    this.close = source.close;\n    // initially allowed in all tokens\n    this._inString = true;\n    this._inComment = true;\n    this._inRegEx = true;\n    if (Array.isArray(source.notIn)) {\n      for (let i = 0, len = source.notIn.length; i < len; i++) {\n        const notIn = source.notIn[i];\n        switch (notIn) {\n          case 'string':\n            this._inString = false;\n            break;\n          case 'comment':\n            this._inComment = false;\n            break;\n          case 'regex':\n            this._inRegEx = false;\n            break;\n        }\n      }\n    }\n  }\n  isOK(standardToken) {\n    switch (standardToken) {\n      case 0 /* StandardTokenType.Other */:\n        return true;\n      case 1 /* StandardTokenType.Comment */:\n        return this._inComment;\n      case 2 /* StandardTokenType.String */:\n        return this._inString;\n      case 3 /* StandardTokenType.RegEx */:\n        return this._inRegEx;\n    }\n  }\n  shouldAutoClose(context, column) {\n    // Always complete on empty line\n    if (context.getTokenCount() === 0) {\n      return true;\n    }\n    const tokenIndex = context.findTokenIndexAtOffset(column - 2);\n    const standardTokenType = context.getStandardTokenType(tokenIndex);\n    return this.isOK(standardTokenType);\n  }\n  _findNeutralCharacterInRange(fromCharCode, toCharCode) {\n    for (let charCode = fromCharCode; charCode <= toCharCode; charCode++) {\n      const character = String.fromCharCode(charCode);\n      if (!this.open.includes(character) && !this.close.includes(character)) {\n        return character;\n      }\n    }\n    return null;\n  }\n  /**\n   * Find a character in the range [0-9a-zA-Z] that does not appear in the open or close\n   */\n  findNeutralCharacter() {\n    if (!this._neutralCharacterSearched) {\n      this._neutralCharacterSearched = true;\n      if (!this._neutralCharacter) {\n        this._neutralCharacter = this._findNeutralCharacterInRange(48 /* CharCode.Digit0 */, 57 /* CharCode.Digit9 */);\n      }\n      if (!this._neutralCharacter) {\n        this._neutralCharacter = this._findNeutralCharacterInRange(97 /* CharCode.a */, 122 /* CharCode.z */);\n      }\n      if (!this._neutralCharacter) {\n        this._neutralCharacter = this._findNeutralCharacterInRange(65 /* CharCode.A */, 90 /* CharCode.Z */);\n      }\n    }\n    return this._neutralCharacter;\n  }\n}\n/**\n * @internal\n */\nexport class AutoClosingPairs {\n  constructor(autoClosingPairs) {\n    this.autoClosingPairsOpenByStart = new Map();\n    this.autoClosingPairsOpenByEnd = new Map();\n    this.autoClosingPairsCloseByStart = new Map();\n    this.autoClosingPairsCloseByEnd = new Map();\n    this.autoClosingPairsCloseSingleChar = new Map();\n    for (const pair of autoClosingPairs) {\n      appendEntry(this.autoClosingPairsOpenByStart, pair.open.charAt(0), pair);\n      appendEntry(this.autoClosingPairsOpenByEnd, pair.open.charAt(pair.open.length - 1), pair);\n      appendEntry(this.autoClosingPairsCloseByStart, pair.close.charAt(0), pair);\n      appendEntry(this.autoClosingPairsCloseByEnd, pair.close.charAt(pair.close.length - 1), pair);\n      if (pair.close.length === 1 && pair.open.length === 1) {\n        appendEntry(this.autoClosingPairsCloseSingleChar, pair.close, pair);\n      }\n    }\n  }\n}\nfunction appendEntry(target, key, value) {\n  if (target.has(key)) {\n    target.get(key).push(value);\n  } else {\n    target.set(key, [value]);\n  }\n}","map":{"version":3,"names":["IndentAction","StandardAutoClosingPairConditional","constructor","source","_neutralCharacter","_neutralCharacterSearched","open","close","_inString","_inComment","_inRegEx","Array","isArray","notIn","i","len","length","isOK","standardToken","shouldAutoClose","context","column","getTokenCount","tokenIndex","findTokenIndexAtOffset","standardTokenType","getStandardTokenType","_findNeutralCharacterInRange","fromCharCode","toCharCode","charCode","character","String","includes","findNeutralCharacter","AutoClosingPairs","autoClosingPairs","autoClosingPairsOpenByStart","Map","autoClosingPairsOpenByEnd","autoClosingPairsCloseByStart","autoClosingPairsCloseByEnd","autoClosingPairsCloseSingleChar","pair","appendEntry","charAt","target","key","value","has","get","push","set"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/languages/languageConfiguration.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nexport var IndentAction;\n(function (IndentAction) {\n    /**\n     * Insert new line and copy the previous line's indentation.\n     */\n    IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n    /**\n     * Insert new line and indent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n    /**\n     * Insert two new lines:\n     *  - the first one indented which will hold the cursor\n     *  - the second one at the same indentation level\n     */\n    IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n    /**\n     * Insert new line and outdent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\n/**\n * @internal\n */\nexport class StandardAutoClosingPairConditional {\n    constructor(source) {\n        this._neutralCharacter = null;\n        this._neutralCharacterSearched = false;\n        this.open = source.open;\n        this.close = source.close;\n        // initially allowed in all tokens\n        this._inString = true;\n        this._inComment = true;\n        this._inRegEx = true;\n        if (Array.isArray(source.notIn)) {\n            for (let i = 0, len = source.notIn.length; i < len; i++) {\n                const notIn = source.notIn[i];\n                switch (notIn) {\n                    case 'string':\n                        this._inString = false;\n                        break;\n                    case 'comment':\n                        this._inComment = false;\n                        break;\n                    case 'regex':\n                        this._inRegEx = false;\n                        break;\n                }\n            }\n        }\n    }\n    isOK(standardToken) {\n        switch (standardToken) {\n            case 0 /* StandardTokenType.Other */:\n                return true;\n            case 1 /* StandardTokenType.Comment */:\n                return this._inComment;\n            case 2 /* StandardTokenType.String */:\n                return this._inString;\n            case 3 /* StandardTokenType.RegEx */:\n                return this._inRegEx;\n        }\n    }\n    shouldAutoClose(context, column) {\n        // Always complete on empty line\n        if (context.getTokenCount() === 0) {\n            return true;\n        }\n        const tokenIndex = context.findTokenIndexAtOffset(column - 2);\n        const standardTokenType = context.getStandardTokenType(tokenIndex);\n        return this.isOK(standardTokenType);\n    }\n    _findNeutralCharacterInRange(fromCharCode, toCharCode) {\n        for (let charCode = fromCharCode; charCode <= toCharCode; charCode++) {\n            const character = String.fromCharCode(charCode);\n            if (!this.open.includes(character) && !this.close.includes(character)) {\n                return character;\n            }\n        }\n        return null;\n    }\n    /**\n     * Find a character in the range [0-9a-zA-Z] that does not appear in the open or close\n     */\n    findNeutralCharacter() {\n        if (!this._neutralCharacterSearched) {\n            this._neutralCharacterSearched = true;\n            if (!this._neutralCharacter) {\n                this._neutralCharacter = this._findNeutralCharacterInRange(48 /* CharCode.Digit0 */, 57 /* CharCode.Digit9 */);\n            }\n            if (!this._neutralCharacter) {\n                this._neutralCharacter = this._findNeutralCharacterInRange(97 /* CharCode.a */, 122 /* CharCode.z */);\n            }\n            if (!this._neutralCharacter) {\n                this._neutralCharacter = this._findNeutralCharacterInRange(65 /* CharCode.A */, 90 /* CharCode.Z */);\n            }\n        }\n        return this._neutralCharacter;\n    }\n}\n/**\n * @internal\n */\nexport class AutoClosingPairs {\n    constructor(autoClosingPairs) {\n        this.autoClosingPairsOpenByStart = new Map();\n        this.autoClosingPairsOpenByEnd = new Map();\n        this.autoClosingPairsCloseByStart = new Map();\n        this.autoClosingPairsCloseByEnd = new Map();\n        this.autoClosingPairsCloseSingleChar = new Map();\n        for (const pair of autoClosingPairs) {\n            appendEntry(this.autoClosingPairsOpenByStart, pair.open.charAt(0), pair);\n            appendEntry(this.autoClosingPairsOpenByEnd, pair.open.charAt(pair.open.length - 1), pair);\n            appendEntry(this.autoClosingPairsCloseByStart, pair.close.charAt(0), pair);\n            appendEntry(this.autoClosingPairsCloseByEnd, pair.close.charAt(pair.close.length - 1), pair);\n            if (pair.close.length === 1 && pair.open.length === 1) {\n                appendEntry(this.autoClosingPairsCloseSingleChar, pair.close, pair);\n            }\n        }\n    }\n}\nfunction appendEntry(target, key, value) {\n    if (target.has(key)) {\n        target.get(key).push(value);\n    }\n    else {\n        target.set(key, [value]);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}