{"ast":null,"code":"import \"core-js/modules/es.array.with.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as paths from './path.js';\nimport { isWindows } from './platform.js';\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\nfunction _validateUri(ret, _strict) {\n  // scheme, must be set\n  if (!ret.scheme && _strict) {\n    throw new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n  }\n  // scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n  // ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n  if (ret.scheme && !_schemePattern.test(ret.scheme)) {\n    throw new Error('[UriError]: Scheme contains illegal characters.');\n  }\n  // path, http://tools.ietf.org/html/rfc3986#section-3.3\n  // If a URI contains an authority component, then the path component\n  // must either be empty or begin with a slash (\"/\") character.  If a URI\n  // does not contain an authority component, then the path cannot begin\n  // with two slash characters (\"//\").\n  if (ret.path) {\n    if (ret.authority) {\n      if (!_singleSlashStart.test(ret.path)) {\n        throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n      }\n    } else {\n      if (_doubleSlashStart.test(ret.path)) {\n        throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n      }\n    }\n  }\n}\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme, _strict) {\n  if (!scheme && !_strict) {\n    return 'file';\n  }\n  return scheme;\n}\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme, path) {\n  // the slash-character is our 'default base' as we don't\n  // support constructing URIs relative to other URIs. This\n  // also means that we alter and potentially break paths.\n  // see https://tools.ietf.org/html/rfc3986#section-5.1.4\n  switch (scheme) {\n    case 'https':\n    case 'http':\n    case 'file':\n      if (!path) {\n        path = _slash;\n      } else if (path[0] !== _slash) {\n        path = _slash + path;\n      }\n      break;\n  }\n  return path;\n}\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nexport class URI {\n  static isUri(thing) {\n    if (thing instanceof URI) {\n      return true;\n    }\n    if (!thing) {\n      return false;\n    }\n    return typeof thing.authority === 'string' && typeof thing.fragment === 'string' && typeof thing.path === 'string' && typeof thing.query === 'string' && typeof thing.scheme === 'string' && typeof thing.fsPath === 'string' && typeof thing.with === 'function' && typeof thing.toString === 'function';\n  }\n  /**\n   * @internal\n   */\n  constructor(schemeOrData, authority, path, query, fragment, _strict = false) {\n    if (typeof schemeOrData === 'object') {\n      this.scheme = schemeOrData.scheme || _empty;\n      this.authority = schemeOrData.authority || _empty;\n      this.path = schemeOrData.path || _empty;\n      this.query = schemeOrData.query || _empty;\n      this.fragment = schemeOrData.fragment || _empty;\n      // no validation because it's this URI\n      // that creates uri components.\n      // _validateUri(this);\n    } else {\n      this.scheme = _schemeFix(schemeOrData, _strict);\n      this.authority = authority || _empty;\n      this.path = _referenceResolution(this.scheme, path || _empty);\n      this.query = query || _empty;\n      this.fragment = fragment || _empty;\n      _validateUri(this, _strict);\n    }\n  }\n  // ---- filesystem path -----------------------\n  /**\n   * Returns a string representing the corresponding file system path of this URI.\n   * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n   * platform specific path separator.\n   *\n   * * Will *not* validate the path for invalid characters and semantics.\n   * * Will *not* look at the scheme of this URI.\n   * * The result shall *not* be used for display purposes but for accessing a file on disk.\n   *\n   *\n   * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n   * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n   *\n   * ```ts\n      const u = URI.parse('file://server/c$/folder/file.txt')\n      u.authority === 'server'\n      u.path === '/shares/c$/file.txt'\n      u.fsPath === '\\\\server\\c$\\folder\\file.txt'\n  ```\n   *\n   * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n   * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n   * with URIs that represent files on disk (`file` scheme).\n   */\n  get fsPath() {\n    // if (this.scheme !== 'file') {\n    // \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n    // }\n    return uriToFsPath(this, false);\n  }\n  // ---- modify to new -------------------------\n  with(change) {\n    if (!change) {\n      return this;\n    }\n    let {\n      scheme,\n      authority,\n      path,\n      query,\n      fragment\n    } = change;\n    if (scheme === undefined) {\n      scheme = this.scheme;\n    } else if (scheme === null) {\n      scheme = _empty;\n    }\n    if (authority === undefined) {\n      authority = this.authority;\n    } else if (authority === null) {\n      authority = _empty;\n    }\n    if (path === undefined) {\n      path = this.path;\n    } else if (path === null) {\n      path = _empty;\n    }\n    if (query === undefined) {\n      query = this.query;\n    } else if (query === null) {\n      query = _empty;\n    }\n    if (fragment === undefined) {\n      fragment = this.fragment;\n    } else if (fragment === null) {\n      fragment = _empty;\n    }\n    if (scheme === this.scheme && authority === this.authority && path === this.path && query === this.query && fragment === this.fragment) {\n      return this;\n    }\n    return new Uri(scheme, authority, path, query, fragment);\n  }\n  // ---- parse & validate ------------------------\n  /**\n   * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n   * `file:///usr/home`, or `scheme:with/path`.\n   *\n   * @param value A string which represents an URI (see `URI#toString`).\n   */\n  static parse(value, _strict = false) {\n    const match = _regexp.exec(value);\n    if (!match) {\n      return new Uri(_empty, _empty, _empty, _empty, _empty);\n    }\n    return new Uri(match[2] || _empty, percentDecode(match[4] || _empty), percentDecode(match[5] || _empty), percentDecode(match[7] || _empty), percentDecode(match[9] || _empty), _strict);\n  }\n  /**\n   * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n   * `/usr/home`, or `\\\\server\\share\\some\\path`.\n   *\n   * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n   * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n   * `URI.parse('file://' + path)` because the path might contain characters that are\n   * interpreted (# and ?). See the following sample:\n   * ```ts\n  const good = URI.file('/coding/c#/project1');\n  good.scheme === 'file';\n  good.path === '/coding/c#/project1';\n  good.fragment === '';\n  const bad = URI.parse('file://' + '/coding/c#/project1');\n  bad.scheme === 'file';\n  bad.path === '/coding/c'; // path is now broken\n  bad.fragment === '/project1';\n  ```\n   *\n   * @param path A file system path (see `URI#fsPath`)\n   */\n  static file(path) {\n    let authority = _empty;\n    // normalize to fwd-slashes on windows,\n    // on other systems bwd-slashes are valid\n    // filename character, eg /f\\oo/ba\\r.txt\n    if (isWindows) {\n      path = path.replace(/\\\\/g, _slash);\n    }\n    // check for authority as used in UNC shares\n    // or use the path as given\n    if (path[0] === _slash && path[1] === _slash) {\n      const idx = path.indexOf(_slash, 2);\n      if (idx === -1) {\n        authority = path.substring(2);\n        path = _slash;\n      } else {\n        authority = path.substring(2, idx);\n        path = path.substring(idx) || _slash;\n      }\n    }\n    return new Uri('file', authority, path, _empty, _empty);\n  }\n  /**\n   * Creates new URI from uri components.\n   *\n   * Unless `strict` is `true` the scheme is defaults to be `file`. This function performs\n   * validation and should be used for untrusted uri components retrieved from storage,\n   * user input, command arguments etc\n   */\n  static from(components, strict) {\n    const result = new Uri(components.scheme, components.authority, components.path, components.query, components.fragment, strict);\n    return result;\n  }\n  /**\n   * Join a URI path with path fragments and normalizes the resulting path.\n   *\n   * @param uri The input URI.\n   * @param pathFragment The path fragment to add to the URI path.\n   * @returns The resulting URI.\n   */\n  static joinPath(uri, ...pathFragment) {\n    if (!uri.path) {\n      throw new Error(`[UriError]: cannot call joinPath on URI without path`);\n    }\n    let newPath;\n    if (isWindows && uri.scheme === 'file') {\n      newPath = URI.file(paths.win32.join(uriToFsPath(uri, true), ...pathFragment)).path;\n    } else {\n      newPath = paths.posix.join(uri.path, ...pathFragment);\n    }\n    return uri.with({\n      path: newPath\n    });\n  }\n  // ---- printing/externalize ---------------------------\n  /**\n   * Creates a string representation for this URI. It's guaranteed that calling\n   * `URI.parse` with the result of this function creates an URI which is equal\n   * to this URI.\n   *\n   * * The result shall *not* be used for display purposes but for externalization or transport.\n   * * The result will be encoded using the percentage encoding and encoding happens mostly\n   * ignore the scheme-specific encoding rules.\n   *\n   * @param skipEncoding Do not encode the result, default is `false`\n   */\n  toString(skipEncoding = false) {\n    return _asFormatted(this, skipEncoding);\n  }\n  toJSON() {\n    return this;\n  }\n  static revive(data) {\n    var _a, _b;\n    if (!data) {\n      return data;\n    } else if (data instanceof URI) {\n      return data;\n    } else {\n      const result = new Uri(data);\n      result._formatted = (_a = data.external) !== null && _a !== void 0 ? _a : null;\n      result._fsPath = data._sep === _pathSepMarker ? (_b = data.fsPath) !== null && _b !== void 0 ? _b : null : null;\n      return result;\n    }\n  }\n}\nconst _pathSepMarker = isWindows ? 1 : undefined;\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n  constructor() {\n    super(...arguments);\n    this._formatted = null;\n    this._fsPath = null;\n  }\n  get fsPath() {\n    if (!this._fsPath) {\n      this._fsPath = uriToFsPath(this, false);\n    }\n    return this._fsPath;\n  }\n  toString(skipEncoding = false) {\n    if (!skipEncoding) {\n      if (!this._formatted) {\n        this._formatted = _asFormatted(this, false);\n      }\n      return this._formatted;\n    } else {\n      // we don't cache that\n      return _asFormatted(this, true);\n    }\n  }\n  toJSON() {\n    const res = {\n      $mid: 1 /* MarshalledId.Uri */\n    };\n    // cached state\n    if (this._fsPath) {\n      res.fsPath = this._fsPath;\n      res._sep = _pathSepMarker;\n    }\n    if (this._formatted) {\n      res.external = this._formatted;\n    }\n    //--- uri components\n    if (this.path) {\n      res.path = this.path;\n    }\n    // TODO\n    // this isn't correct and can violate the UriComponents contract but\n    // this is part of the vscode.Uri API and we shouldn't change how that\n    // works anymore\n    if (this.scheme) {\n      res.scheme = this.scheme;\n    }\n    if (this.authority) {\n      res.authority = this.authority;\n    }\n    if (this.query) {\n      res.query = this.query;\n    }\n    if (this.fragment) {\n      res.fragment = this.fragment;\n    }\n    return res;\n  }\n}\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable = {\n  [58 /* CharCode.Colon */]: '%3A',\n  // gen-delims\n  [47 /* CharCode.Slash */]: '%2F',\n  [63 /* CharCode.QuestionMark */]: '%3F',\n  [35 /* CharCode.Hash */]: '%23',\n  [91 /* CharCode.OpenSquareBracket */]: '%5B',\n  [93 /* CharCode.CloseSquareBracket */]: '%5D',\n  [64 /* CharCode.AtSign */]: '%40',\n  [33 /* CharCode.ExclamationMark */]: '%21',\n  // sub-delims\n  [36 /* CharCode.DollarSign */]: '%24',\n  [38 /* CharCode.Ampersand */]: '%26',\n  [39 /* CharCode.SingleQuote */]: '%27',\n  [40 /* CharCode.OpenParen */]: '%28',\n  [41 /* CharCode.CloseParen */]: '%29',\n  [42 /* CharCode.Asterisk */]: '%2A',\n  [43 /* CharCode.Plus */]: '%2B',\n  [44 /* CharCode.Comma */]: '%2C',\n  [59 /* CharCode.Semicolon */]: '%3B',\n  [61 /* CharCode.Equals */]: '%3D',\n  [32 /* CharCode.Space */]: '%20'\n};\nfunction encodeURIComponentFast(uriComponent, isPath, isAuthority) {\n  let res = undefined;\n  let nativeEncodePos = -1;\n  for (let pos = 0; pos < uriComponent.length; pos++) {\n    const code = uriComponent.charCodeAt(pos);\n    // unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n    if (code >= 97 /* CharCode.a */ && code <= 122 /* CharCode.z */ || code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */ || code >= 48 /* CharCode.Digit0 */ && code <= 57 /* CharCode.Digit9 */ || code === 45 /* CharCode.Dash */ || code === 46 /* CharCode.Period */ || code === 95 /* CharCode.Underline */ || code === 126 /* CharCode.Tilde */ || isPath && code === 47 /* CharCode.Slash */ || isAuthority && code === 91 /* CharCode.OpenSquareBracket */ || isAuthority && code === 93 /* CharCode.CloseSquareBracket */ || isAuthority && code === 58 /* CharCode.Colon */) {\n      // check if we are delaying native encode\n      if (nativeEncodePos !== -1) {\n        res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n        nativeEncodePos = -1;\n      }\n      // check if we write into a new string (by default we try to return the param)\n      if (res !== undefined) {\n        res += uriComponent.charAt(pos);\n      }\n    } else {\n      // encoding needed, we need to allocate a new string\n      if (res === undefined) {\n        res = uriComponent.substr(0, pos);\n      }\n      // check with default table first\n      const escaped = encodeTable[code];\n      if (escaped !== undefined) {\n        // check if we are delaying native encode\n        if (nativeEncodePos !== -1) {\n          res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n          nativeEncodePos = -1;\n        }\n        // append escaped variant to result\n        res += escaped;\n      } else if (nativeEncodePos === -1) {\n        // use native encode only when needed\n        nativeEncodePos = pos;\n      }\n    }\n  }\n  if (nativeEncodePos !== -1) {\n    res += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n  }\n  return res !== undefined ? res : uriComponent;\n}\nfunction encodeURIComponentMinimal(path) {\n  let res = undefined;\n  for (let pos = 0; pos < path.length; pos++) {\n    const code = path.charCodeAt(pos);\n    if (code === 35 /* CharCode.Hash */ || code === 63 /* CharCode.QuestionMark */) {\n      if (res === undefined) {\n        res = path.substr(0, pos);\n      }\n      res += encodeTable[code];\n    } else {\n      if (res !== undefined) {\n        res += path[pos];\n      }\n    }\n  }\n  return res !== undefined ? res : path;\n}\n/**\n * Compute `fsPath` for the given uri\n */\nexport function uriToFsPath(uri, keepDriveLetterCasing) {\n  let value;\n  if (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n    // unc path: file://shares/c$/far/boo\n    value = `//${uri.authority}${uri.path}`;\n  } else if (uri.path.charCodeAt(0) === 47 /* CharCode.Slash */ && (uri.path.charCodeAt(1) >= 65 /* CharCode.A */ && uri.path.charCodeAt(1) <= 90 /* CharCode.Z */ || uri.path.charCodeAt(1) >= 97 /* CharCode.a */ && uri.path.charCodeAt(1) <= 122 /* CharCode.z */) && uri.path.charCodeAt(2) === 58 /* CharCode.Colon */) {\n    if (!keepDriveLetterCasing) {\n      // windows drive letter: file:///c:/far/boo\n      value = uri.path[1].toLowerCase() + uri.path.substr(2);\n    } else {\n      value = uri.path.substr(1);\n    }\n  } else {\n    // other path\n    value = uri.path;\n  }\n  if (isWindows) {\n    value = value.replace(/\\//g, '\\\\');\n  }\n  return value;\n}\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri, skipEncoding) {\n  const encoder = !skipEncoding ? encodeURIComponentFast : encodeURIComponentMinimal;\n  let res = '';\n  let {\n    scheme,\n    authority,\n    path,\n    query,\n    fragment\n  } = uri;\n  if (scheme) {\n    res += scheme;\n    res += ':';\n  }\n  if (authority || scheme === 'file') {\n    res += _slash;\n    res += _slash;\n  }\n  if (authority) {\n    let idx = authority.indexOf('@');\n    if (idx !== -1) {\n      // <user>@<auth>\n      const userinfo = authority.substr(0, idx);\n      authority = authority.substr(idx + 1);\n      idx = userinfo.lastIndexOf(':');\n      if (idx === -1) {\n        res += encoder(userinfo, false, false);\n      } else {\n        // <user>:<pass>@<auth>\n        res += encoder(userinfo.substr(0, idx), false, false);\n        res += ':';\n        res += encoder(userinfo.substr(idx + 1), false, true);\n      }\n      res += '@';\n    }\n    authority = authority.toLowerCase();\n    idx = authority.lastIndexOf(':');\n    if (idx === -1) {\n      res += encoder(authority, false, true);\n    } else {\n      // <auth>:<port>\n      res += encoder(authority.substr(0, idx), false, true);\n      res += authority.substr(idx);\n    }\n  }\n  if (path) {\n    // lower-case windows drive letters in /C:/fff or C:/fff\n    if (path.length >= 3 && path.charCodeAt(0) === 47 /* CharCode.Slash */ && path.charCodeAt(2) === 58 /* CharCode.Colon */) {\n      const code = path.charCodeAt(1);\n      if (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */) {\n        path = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n      }\n    } else if (path.length >= 2 && path.charCodeAt(1) === 58 /* CharCode.Colon */) {\n      const code = path.charCodeAt(0);\n      if (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */) {\n        path = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n      }\n    }\n    // encode the rest of the path\n    res += encoder(path, true, false);\n  }\n  if (query) {\n    res += '?';\n    res += encoder(query, false, false);\n  }\n  if (fragment) {\n    res += '#';\n    res += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n  }\n  return res;\n}\n// --- decode\nfunction decodeURIComponentGraceful(str) {\n  try {\n    return decodeURIComponent(str);\n  } catch (_a) {\n    if (str.length > 3) {\n      return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n    } else {\n      return str;\n    }\n  }\n}\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\nfunction percentDecode(str) {\n  if (!str.match(_rEncodedAsHex)) {\n    return str;\n  }\n  return str.replace(_rEncodedAsHex, match => decodeURIComponentGraceful(match));\n}","map":{"version":3,"names":["paths","isWindows","_schemePattern","_singleSlashStart","_doubleSlashStart","_validateUri","ret","_strict","scheme","Error","authority","path","query","fragment","test","_schemeFix","_referenceResolution","_slash","_empty","_regexp","URI","isUri","thing","fsPath","with","toString","constructor","schemeOrData","uriToFsPath","change","undefined","Uri","parse","value","match","exec","percentDecode","file","replace","idx","indexOf","substring","from","components","strict","result","joinPath","uri","pathFragment","newPath","win32","join","posix","skipEncoding","_asFormatted","toJSON","revive","data","_a","_b","_formatted","external","_fsPath","_sep","_pathSepMarker","arguments","res","$mid","encodeTable","encodeURIComponentFast","uriComponent","isPath","isAuthority","nativeEncodePos","pos","length","code","charCodeAt","encodeURIComponent","charAt","substr","escaped","encodeURIComponentMinimal","keepDriveLetterCasing","toLowerCase","encoder","userinfo","lastIndexOf","String","fromCharCode","decodeURIComponentGraceful","str","decodeURIComponent","_rEncodedAsHex"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/base/common/uri.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as paths from './path.js';\nimport { isWindows } from './platform.js';\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\nfunction _validateUri(ret, _strict) {\n    // scheme, must be set\n    if (!ret.scheme && _strict) {\n        throw new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n    }\n    // scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n    // ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n    if (ret.scheme && !_schemePattern.test(ret.scheme)) {\n        throw new Error('[UriError]: Scheme contains illegal characters.');\n    }\n    // path, http://tools.ietf.org/html/rfc3986#section-3.3\n    // If a URI contains an authority component, then the path component\n    // must either be empty or begin with a slash (\"/\") character.  If a URI\n    // does not contain an authority component, then the path cannot begin\n    // with two slash characters (\"//\").\n    if (ret.path) {\n        if (ret.authority) {\n            if (!_singleSlashStart.test(ret.path)) {\n                throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n            }\n        }\n        else {\n            if (_doubleSlashStart.test(ret.path)) {\n                throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n            }\n        }\n    }\n}\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme, _strict) {\n    if (!scheme && !_strict) {\n        return 'file';\n    }\n    return scheme;\n}\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme, path) {\n    // the slash-character is our 'default base' as we don't\n    // support constructing URIs relative to other URIs. This\n    // also means that we alter and potentially break paths.\n    // see https://tools.ietf.org/html/rfc3986#section-5.1.4\n    switch (scheme) {\n        case 'https':\n        case 'http':\n        case 'file':\n            if (!path) {\n                path = _slash;\n            }\n            else if (path[0] !== _slash) {\n                path = _slash + path;\n            }\n            break;\n    }\n    return path;\n}\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nexport class URI {\n    static isUri(thing) {\n        if (thing instanceof URI) {\n            return true;\n        }\n        if (!thing) {\n            return false;\n        }\n        return typeof thing.authority === 'string'\n            && typeof thing.fragment === 'string'\n            && typeof thing.path === 'string'\n            && typeof thing.query === 'string'\n            && typeof thing.scheme === 'string'\n            && typeof thing.fsPath === 'string'\n            && typeof thing.with === 'function'\n            && typeof thing.toString === 'function';\n    }\n    /**\n     * @internal\n     */\n    constructor(schemeOrData, authority, path, query, fragment, _strict = false) {\n        if (typeof schemeOrData === 'object') {\n            this.scheme = schemeOrData.scheme || _empty;\n            this.authority = schemeOrData.authority || _empty;\n            this.path = schemeOrData.path || _empty;\n            this.query = schemeOrData.query || _empty;\n            this.fragment = schemeOrData.fragment || _empty;\n            // no validation because it's this URI\n            // that creates uri components.\n            // _validateUri(this);\n        }\n        else {\n            this.scheme = _schemeFix(schemeOrData, _strict);\n            this.authority = authority || _empty;\n            this.path = _referenceResolution(this.scheme, path || _empty);\n            this.query = query || _empty;\n            this.fragment = fragment || _empty;\n            _validateUri(this, _strict);\n        }\n    }\n    // ---- filesystem path -----------------------\n    /**\n     * Returns a string representing the corresponding file system path of this URI.\n     * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n     * platform specific path separator.\n     *\n     * * Will *not* validate the path for invalid characters and semantics.\n     * * Will *not* look at the scheme of this URI.\n     * * The result shall *not* be used for display purposes but for accessing a file on disk.\n     *\n     *\n     * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n     * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n     *\n     * ```ts\n        const u = URI.parse('file://server/c$/folder/file.txt')\n        u.authority === 'server'\n        u.path === '/shares/c$/file.txt'\n        u.fsPath === '\\\\server\\c$\\folder\\file.txt'\n    ```\n     *\n     * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n     * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n     * with URIs that represent files on disk (`file` scheme).\n     */\n    get fsPath() {\n        // if (this.scheme !== 'file') {\n        // \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n        // }\n        return uriToFsPath(this, false);\n    }\n    // ---- modify to new -------------------------\n    with(change) {\n        if (!change) {\n            return this;\n        }\n        let { scheme, authority, path, query, fragment } = change;\n        if (scheme === undefined) {\n            scheme = this.scheme;\n        }\n        else if (scheme === null) {\n            scheme = _empty;\n        }\n        if (authority === undefined) {\n            authority = this.authority;\n        }\n        else if (authority === null) {\n            authority = _empty;\n        }\n        if (path === undefined) {\n            path = this.path;\n        }\n        else if (path === null) {\n            path = _empty;\n        }\n        if (query === undefined) {\n            query = this.query;\n        }\n        else if (query === null) {\n            query = _empty;\n        }\n        if (fragment === undefined) {\n            fragment = this.fragment;\n        }\n        else if (fragment === null) {\n            fragment = _empty;\n        }\n        if (scheme === this.scheme\n            && authority === this.authority\n            && path === this.path\n            && query === this.query\n            && fragment === this.fragment) {\n            return this;\n        }\n        return new Uri(scheme, authority, path, query, fragment);\n    }\n    // ---- parse & validate ------------------------\n    /**\n     * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n     * `file:///usr/home`, or `scheme:with/path`.\n     *\n     * @param value A string which represents an URI (see `URI#toString`).\n     */\n    static parse(value, _strict = false) {\n        const match = _regexp.exec(value);\n        if (!match) {\n            return new Uri(_empty, _empty, _empty, _empty, _empty);\n        }\n        return new Uri(match[2] || _empty, percentDecode(match[4] || _empty), percentDecode(match[5] || _empty), percentDecode(match[7] || _empty), percentDecode(match[9] || _empty), _strict);\n    }\n    /**\n     * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n     * `/usr/home`, or `\\\\server\\share\\some\\path`.\n     *\n     * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n     * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n     * `URI.parse('file://' + path)` because the path might contain characters that are\n     * interpreted (# and ?). See the following sample:\n     * ```ts\n    const good = URI.file('/coding/c#/project1');\n    good.scheme === 'file';\n    good.path === '/coding/c#/project1';\n    good.fragment === '';\n    const bad = URI.parse('file://' + '/coding/c#/project1');\n    bad.scheme === 'file';\n    bad.path === '/coding/c'; // path is now broken\n    bad.fragment === '/project1';\n    ```\n     *\n     * @param path A file system path (see `URI#fsPath`)\n     */\n    static file(path) {\n        let authority = _empty;\n        // normalize to fwd-slashes on windows,\n        // on other systems bwd-slashes are valid\n        // filename character, eg /f\\oo/ba\\r.txt\n        if (isWindows) {\n            path = path.replace(/\\\\/g, _slash);\n        }\n        // check for authority as used in UNC shares\n        // or use the path as given\n        if (path[0] === _slash && path[1] === _slash) {\n            const idx = path.indexOf(_slash, 2);\n            if (idx === -1) {\n                authority = path.substring(2);\n                path = _slash;\n            }\n            else {\n                authority = path.substring(2, idx);\n                path = path.substring(idx) || _slash;\n            }\n        }\n        return new Uri('file', authority, path, _empty, _empty);\n    }\n    /**\n     * Creates new URI from uri components.\n     *\n     * Unless `strict` is `true` the scheme is defaults to be `file`. This function performs\n     * validation and should be used for untrusted uri components retrieved from storage,\n     * user input, command arguments etc\n     */\n    static from(components, strict) {\n        const result = new Uri(components.scheme, components.authority, components.path, components.query, components.fragment, strict);\n        return result;\n    }\n    /**\n     * Join a URI path with path fragments and normalizes the resulting path.\n     *\n     * @param uri The input URI.\n     * @param pathFragment The path fragment to add to the URI path.\n     * @returns The resulting URI.\n     */\n    static joinPath(uri, ...pathFragment) {\n        if (!uri.path) {\n            throw new Error(`[UriError]: cannot call joinPath on URI without path`);\n        }\n        let newPath;\n        if (isWindows && uri.scheme === 'file') {\n            newPath = URI.file(paths.win32.join(uriToFsPath(uri, true), ...pathFragment)).path;\n        }\n        else {\n            newPath = paths.posix.join(uri.path, ...pathFragment);\n        }\n        return uri.with({ path: newPath });\n    }\n    // ---- printing/externalize ---------------------------\n    /**\n     * Creates a string representation for this URI. It's guaranteed that calling\n     * `URI.parse` with the result of this function creates an URI which is equal\n     * to this URI.\n     *\n     * * The result shall *not* be used for display purposes but for externalization or transport.\n     * * The result will be encoded using the percentage encoding and encoding happens mostly\n     * ignore the scheme-specific encoding rules.\n     *\n     * @param skipEncoding Do not encode the result, default is `false`\n     */\n    toString(skipEncoding = false) {\n        return _asFormatted(this, skipEncoding);\n    }\n    toJSON() {\n        return this;\n    }\n    static revive(data) {\n        var _a, _b;\n        if (!data) {\n            return data;\n        }\n        else if (data instanceof URI) {\n            return data;\n        }\n        else {\n            const result = new Uri(data);\n            result._formatted = (_a = data.external) !== null && _a !== void 0 ? _a : null;\n            result._fsPath = data._sep === _pathSepMarker ? (_b = data.fsPath) !== null && _b !== void 0 ? _b : null : null;\n            return result;\n        }\n    }\n}\nconst _pathSepMarker = isWindows ? 1 : undefined;\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n    constructor() {\n        super(...arguments);\n        this._formatted = null;\n        this._fsPath = null;\n    }\n    get fsPath() {\n        if (!this._fsPath) {\n            this._fsPath = uriToFsPath(this, false);\n        }\n        return this._fsPath;\n    }\n    toString(skipEncoding = false) {\n        if (!skipEncoding) {\n            if (!this._formatted) {\n                this._formatted = _asFormatted(this, false);\n            }\n            return this._formatted;\n        }\n        else {\n            // we don't cache that\n            return _asFormatted(this, true);\n        }\n    }\n    toJSON() {\n        const res = {\n            $mid: 1 /* MarshalledId.Uri */\n        };\n        // cached state\n        if (this._fsPath) {\n            res.fsPath = this._fsPath;\n            res._sep = _pathSepMarker;\n        }\n        if (this._formatted) {\n            res.external = this._formatted;\n        }\n        //--- uri components\n        if (this.path) {\n            res.path = this.path;\n        }\n        // TODO\n        // this isn't correct and can violate the UriComponents contract but\n        // this is part of the vscode.Uri API and we shouldn't change how that\n        // works anymore\n        if (this.scheme) {\n            res.scheme = this.scheme;\n        }\n        if (this.authority) {\n            res.authority = this.authority;\n        }\n        if (this.query) {\n            res.query = this.query;\n        }\n        if (this.fragment) {\n            res.fragment = this.fragment;\n        }\n        return res;\n    }\n}\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable = {\n    [58 /* CharCode.Colon */]: '%3A', // gen-delims\n    [47 /* CharCode.Slash */]: '%2F',\n    [63 /* CharCode.QuestionMark */]: '%3F',\n    [35 /* CharCode.Hash */]: '%23',\n    [91 /* CharCode.OpenSquareBracket */]: '%5B',\n    [93 /* CharCode.CloseSquareBracket */]: '%5D',\n    [64 /* CharCode.AtSign */]: '%40',\n    [33 /* CharCode.ExclamationMark */]: '%21', // sub-delims\n    [36 /* CharCode.DollarSign */]: '%24',\n    [38 /* CharCode.Ampersand */]: '%26',\n    [39 /* CharCode.SingleQuote */]: '%27',\n    [40 /* CharCode.OpenParen */]: '%28',\n    [41 /* CharCode.CloseParen */]: '%29',\n    [42 /* CharCode.Asterisk */]: '%2A',\n    [43 /* CharCode.Plus */]: '%2B',\n    [44 /* CharCode.Comma */]: '%2C',\n    [59 /* CharCode.Semicolon */]: '%3B',\n    [61 /* CharCode.Equals */]: '%3D',\n    [32 /* CharCode.Space */]: '%20',\n};\nfunction encodeURIComponentFast(uriComponent, isPath, isAuthority) {\n    let res = undefined;\n    let nativeEncodePos = -1;\n    for (let pos = 0; pos < uriComponent.length; pos++) {\n        const code = uriComponent.charCodeAt(pos);\n        // unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n        if ((code >= 97 /* CharCode.a */ && code <= 122 /* CharCode.z */)\n            || (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */)\n            || (code >= 48 /* CharCode.Digit0 */ && code <= 57 /* CharCode.Digit9 */)\n            || code === 45 /* CharCode.Dash */\n            || code === 46 /* CharCode.Period */\n            || code === 95 /* CharCode.Underline */\n            || code === 126 /* CharCode.Tilde */\n            || (isPath && code === 47 /* CharCode.Slash */)\n            || (isAuthority && code === 91 /* CharCode.OpenSquareBracket */)\n            || (isAuthority && code === 93 /* CharCode.CloseSquareBracket */)\n            || (isAuthority && code === 58 /* CharCode.Colon */)) {\n            // check if we are delaying native encode\n            if (nativeEncodePos !== -1) {\n                res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n                nativeEncodePos = -1;\n            }\n            // check if we write into a new string (by default we try to return the param)\n            if (res !== undefined) {\n                res += uriComponent.charAt(pos);\n            }\n        }\n        else {\n            // encoding needed, we need to allocate a new string\n            if (res === undefined) {\n                res = uriComponent.substr(0, pos);\n            }\n            // check with default table first\n            const escaped = encodeTable[code];\n            if (escaped !== undefined) {\n                // check if we are delaying native encode\n                if (nativeEncodePos !== -1) {\n                    res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n                    nativeEncodePos = -1;\n                }\n                // append escaped variant to result\n                res += escaped;\n            }\n            else if (nativeEncodePos === -1) {\n                // use native encode only when needed\n                nativeEncodePos = pos;\n            }\n        }\n    }\n    if (nativeEncodePos !== -1) {\n        res += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n    }\n    return res !== undefined ? res : uriComponent;\n}\nfunction encodeURIComponentMinimal(path) {\n    let res = undefined;\n    for (let pos = 0; pos < path.length; pos++) {\n        const code = path.charCodeAt(pos);\n        if (code === 35 /* CharCode.Hash */ || code === 63 /* CharCode.QuestionMark */) {\n            if (res === undefined) {\n                res = path.substr(0, pos);\n            }\n            res += encodeTable[code];\n        }\n        else {\n            if (res !== undefined) {\n                res += path[pos];\n            }\n        }\n    }\n    return res !== undefined ? res : path;\n}\n/**\n * Compute `fsPath` for the given uri\n */\nexport function uriToFsPath(uri, keepDriveLetterCasing) {\n    let value;\n    if (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n        // unc path: file://shares/c$/far/boo\n        value = `//${uri.authority}${uri.path}`;\n    }\n    else if (uri.path.charCodeAt(0) === 47 /* CharCode.Slash */\n        && (uri.path.charCodeAt(1) >= 65 /* CharCode.A */ && uri.path.charCodeAt(1) <= 90 /* CharCode.Z */ || uri.path.charCodeAt(1) >= 97 /* CharCode.a */ && uri.path.charCodeAt(1) <= 122 /* CharCode.z */)\n        && uri.path.charCodeAt(2) === 58 /* CharCode.Colon */) {\n        if (!keepDriveLetterCasing) {\n            // windows drive letter: file:///c:/far/boo\n            value = uri.path[1].toLowerCase() + uri.path.substr(2);\n        }\n        else {\n            value = uri.path.substr(1);\n        }\n    }\n    else {\n        // other path\n        value = uri.path;\n    }\n    if (isWindows) {\n        value = value.replace(/\\//g, '\\\\');\n    }\n    return value;\n}\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri, skipEncoding) {\n    const encoder = !skipEncoding\n        ? encodeURIComponentFast\n        : encodeURIComponentMinimal;\n    let res = '';\n    let { scheme, authority, path, query, fragment } = uri;\n    if (scheme) {\n        res += scheme;\n        res += ':';\n    }\n    if (authority || scheme === 'file') {\n        res += _slash;\n        res += _slash;\n    }\n    if (authority) {\n        let idx = authority.indexOf('@');\n        if (idx !== -1) {\n            // <user>@<auth>\n            const userinfo = authority.substr(0, idx);\n            authority = authority.substr(idx + 1);\n            idx = userinfo.lastIndexOf(':');\n            if (idx === -1) {\n                res += encoder(userinfo, false, false);\n            }\n            else {\n                // <user>:<pass>@<auth>\n                res += encoder(userinfo.substr(0, idx), false, false);\n                res += ':';\n                res += encoder(userinfo.substr(idx + 1), false, true);\n            }\n            res += '@';\n        }\n        authority = authority.toLowerCase();\n        idx = authority.lastIndexOf(':');\n        if (idx === -1) {\n            res += encoder(authority, false, true);\n        }\n        else {\n            // <auth>:<port>\n            res += encoder(authority.substr(0, idx), false, true);\n            res += authority.substr(idx);\n        }\n    }\n    if (path) {\n        // lower-case windows drive letters in /C:/fff or C:/fff\n        if (path.length >= 3 && path.charCodeAt(0) === 47 /* CharCode.Slash */ && path.charCodeAt(2) === 58 /* CharCode.Colon */) {\n            const code = path.charCodeAt(1);\n            if (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */) {\n                path = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n            }\n        }\n        else if (path.length >= 2 && path.charCodeAt(1) === 58 /* CharCode.Colon */) {\n            const code = path.charCodeAt(0);\n            if (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */) {\n                path = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n            }\n        }\n        // encode the rest of the path\n        res += encoder(path, true, false);\n    }\n    if (query) {\n        res += '?';\n        res += encoder(query, false, false);\n    }\n    if (fragment) {\n        res += '#';\n        res += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n    }\n    return res;\n}\n// --- decode\nfunction decodeURIComponentGraceful(str) {\n    try {\n        return decodeURIComponent(str);\n    }\n    catch (_a) {\n        if (str.length > 3) {\n            return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n        }\n        else {\n            return str;\n        }\n    }\n}\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\nfunction percentDecode(str) {\n    if (!str.match(_rEncodedAsHex)) {\n        return str;\n    }\n    return str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}