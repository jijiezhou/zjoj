{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\nexport class BracketElectricCharacterSupport {\n  constructor(richEditBrackets) {\n    this._richEditBrackets = richEditBrackets;\n  }\n  getElectricCharacters() {\n    const result = [];\n    if (this._richEditBrackets) {\n      for (const bracket of this._richEditBrackets.brackets) {\n        for (const close of bracket.close) {\n          const lastChar = close.charAt(close.length - 1);\n          result.push(lastChar);\n        }\n      }\n    }\n    return distinct(result);\n  }\n  onElectricCharacter(character, context, column) {\n    if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n      return null;\n    }\n    const tokenIndex = context.findTokenIndexAtOffset(column - 1);\n    if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n      return null;\n    }\n    const reversedBracketRegex = this._richEditBrackets.reversedRegex;\n    const text = context.getLineContent().substring(0, column - 1) + character;\n    const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n    if (!r) {\n      return null;\n    }\n    const bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n    const isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n    if (isOpen) {\n      return null;\n    }\n    const textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n    if (!/^\\s*$/.test(textBeforeBracket)) {\n      // There is other text on the line before the bracket\n      return null;\n    }\n    return {\n      matchOpenBracket: bracketText\n    };\n  }\n}","map":{"version":3,"names":["distinct","ignoreBracketsInToken","BracketsUtils","BracketElectricCharacterSupport","constructor","richEditBrackets","_richEditBrackets","getElectricCharacters","result","bracket","brackets","close","lastChar","charAt","length","push","onElectricCharacter","character","context","column","tokenIndex","findTokenIndexAtOffset","getStandardTokenType","reversedBracketRegex","reversedRegex","text","getLineContent","substring","r","findPrevBracketInRange","bracketText","startColumn","endColumn","toLowerCase","isOpen","textIsOpenBracket","textBeforeBracket","getActualLineContentBefore","test","matchOpenBracket"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/electricCharacter.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\nexport class BracketElectricCharacterSupport {\n    constructor(richEditBrackets) {\n        this._richEditBrackets = richEditBrackets;\n    }\n    getElectricCharacters() {\n        const result = [];\n        if (this._richEditBrackets) {\n            for (const bracket of this._richEditBrackets.brackets) {\n                for (const close of bracket.close) {\n                    const lastChar = close.charAt(close.length - 1);\n                    result.push(lastChar);\n                }\n            }\n        }\n        return distinct(result);\n    }\n    onElectricCharacter(character, context, column) {\n        if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n            return null;\n        }\n        const tokenIndex = context.findTokenIndexAtOffset(column - 1);\n        if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n            return null;\n        }\n        const reversedBracketRegex = this._richEditBrackets.reversedRegex;\n        const text = context.getLineContent().substring(0, column - 1) + character;\n        const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n        if (!r) {\n            return null;\n        }\n        const bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        const isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n        if (isOpen) {\n            return null;\n        }\n        const textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n        if (!/^\\s*$/.test(textBeforeBracket)) {\n            // There is other text on the line before the bracket\n            return null;\n        }\n        return {\n            matchOpenBracket: bracketText\n        };\n    }\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,mCAAmC;AAC5D,SAASC,qBAAqB,QAAQ,gBAAgB;AACtD,SAASC,aAAa,QAAQ,uBAAuB;AACrD,OAAO,MAAMC,+BAA+B,CAAC;EACzCC,WAAWA,CAACC,gBAAgB,EAAE;IAC1B,IAAI,CAACC,iBAAiB,GAAGD,gBAAgB;EAC7C;EACAE,qBAAqBA,CAAA,EAAG;IACpB,MAAMC,MAAM,GAAG,EAAE;IACjB,IAAI,IAAI,CAACF,iBAAiB,EAAE;MACxB,KAAK,MAAMG,OAAO,IAAI,IAAI,CAACH,iBAAiB,CAACI,QAAQ,EAAE;QACnD,KAAK,MAAMC,KAAK,IAAIF,OAAO,CAACE,KAAK,EAAE;UAC/B,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAACF,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC;UAC/CN,MAAM,CAACO,IAAI,CAACH,QAAQ,CAAC;QACzB;MACJ;IACJ;IACA,OAAOZ,QAAQ,CAACQ,MAAM,CAAC;EAC3B;EACAQ,mBAAmBA,CAACC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAE;IAC5C,IAAI,CAAC,IAAI,CAACb,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACI,QAAQ,CAACI,MAAM,KAAK,CAAC,EAAE;MACzE,OAAO,IAAI;IACf;IACA,MAAMM,UAAU,GAAGF,OAAO,CAACG,sBAAsB,CAACF,MAAM,GAAG,CAAC,CAAC;IAC7D,IAAIlB,qBAAqB,CAACiB,OAAO,CAACI,oBAAoB,CAACF,UAAU,CAAC,CAAC,EAAE;MACjE,OAAO,IAAI;IACf;IACA,MAAMG,oBAAoB,GAAG,IAAI,CAACjB,iBAAiB,CAACkB,aAAa;IACjE,MAAMC,IAAI,GAAGP,OAAO,CAACQ,cAAc,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,EAAER,MAAM,GAAG,CAAC,CAAC,GAAGF,SAAS;IAC1E,MAAMW,CAAC,GAAG1B,aAAa,CAAC2B,sBAAsB,CAACN,oBAAoB,EAAE,CAAC,EAAEE,IAAI,EAAE,CAAC,EAAEA,IAAI,CAACX,MAAM,CAAC;IAC7F,IAAI,CAACc,CAAC,EAAE;MACJ,OAAO,IAAI;IACf;IACA,MAAME,WAAW,GAAGL,IAAI,CAACE,SAAS,CAACC,CAAC,CAACG,WAAW,GAAG,CAAC,EAAEH,CAAC,CAACI,SAAS,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACpF,MAAMC,MAAM,GAAG,IAAI,CAAC5B,iBAAiB,CAAC6B,iBAAiB,CAACL,WAAW,CAAC;IACpE,IAAII,MAAM,EAAE;MACR,OAAO,IAAI;IACf;IACA,MAAME,iBAAiB,GAAGlB,OAAO,CAACmB,0BAA0B,CAACT,CAAC,CAACG,WAAW,GAAG,CAAC,CAAC;IAC/E,IAAI,CAAC,OAAO,CAACO,IAAI,CAACF,iBAAiB,CAAC,EAAE;MAClC;MACA,OAAO,IAAI;IACf;IACA,OAAO;MACHG,gBAAgB,EAAET;IACtB,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}