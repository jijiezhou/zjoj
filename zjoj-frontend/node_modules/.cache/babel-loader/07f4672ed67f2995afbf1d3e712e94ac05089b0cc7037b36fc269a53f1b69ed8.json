{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Selection } from '../core/selection.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { TextChange, compressConsecutiveTextChanges } from '../core/textChange.js';\nimport * as buffer from '../../../base/common/buffer.js';\nimport { basename } from '../../../base/common/resources.js';\nfunction uriGetComparisonKey(resource) {\n  return resource.toString();\n}\nexport class SingleModelEditStackData {\n  static create(model, beforeCursorState) {\n    const alternativeVersionId = model.getAlternativeVersionId();\n    const eol = getModelEOL(model);\n    return new SingleModelEditStackData(alternativeVersionId, alternativeVersionId, eol, eol, beforeCursorState, beforeCursorState, []);\n  }\n  constructor(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes) {\n    this.beforeVersionId = beforeVersionId;\n    this.afterVersionId = afterVersionId;\n    this.beforeEOL = beforeEOL;\n    this.afterEOL = afterEOL;\n    this.beforeCursorState = beforeCursorState;\n    this.afterCursorState = afterCursorState;\n    this.changes = changes;\n  }\n  append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n    if (textChanges.length > 0) {\n      this.changes = compressConsecutiveTextChanges(this.changes, textChanges);\n    }\n    this.afterEOL = afterEOL;\n    this.afterVersionId = afterVersionId;\n    this.afterCursorState = afterCursorState;\n  }\n  static _writeSelectionsSize(selections) {\n    return 4 + 4 * 4 * (selections ? selections.length : 0);\n  }\n  static _writeSelections(b, selections, offset) {\n    buffer.writeUInt32BE(b, selections ? selections.length : 0, offset);\n    offset += 4;\n    if (selections) {\n      for (const selection of selections) {\n        buffer.writeUInt32BE(b, selection.selectionStartLineNumber, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, selection.selectionStartColumn, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, selection.positionLineNumber, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, selection.positionColumn, offset);\n        offset += 4;\n      }\n    }\n    return offset;\n  }\n  static _readSelections(b, offset, dest) {\n    const count = buffer.readUInt32BE(b, offset);\n    offset += 4;\n    for (let i = 0; i < count; i++) {\n      const selectionStartLineNumber = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      const selectionStartColumn = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      const positionLineNumber = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      const positionColumn = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      dest.push(new Selection(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn));\n    }\n    return offset;\n  }\n  serialize() {\n    let necessarySize = +4 // beforeVersionId\n    + 4 // afterVersionId\n    + 1 // beforeEOL\n    + 1 // afterEOL\n    + SingleModelEditStackData._writeSelectionsSize(this.beforeCursorState) + SingleModelEditStackData._writeSelectionsSize(this.afterCursorState) + 4 // change count\n    ;\n    for (const change of this.changes) {\n      necessarySize += change.writeSize();\n    }\n    const b = new Uint8Array(necessarySize);\n    let offset = 0;\n    buffer.writeUInt32BE(b, this.beforeVersionId, offset);\n    offset += 4;\n    buffer.writeUInt32BE(b, this.afterVersionId, offset);\n    offset += 4;\n    buffer.writeUInt8(b, this.beforeEOL, offset);\n    offset += 1;\n    buffer.writeUInt8(b, this.afterEOL, offset);\n    offset += 1;\n    offset = SingleModelEditStackData._writeSelections(b, this.beforeCursorState, offset);\n    offset = SingleModelEditStackData._writeSelections(b, this.afterCursorState, offset);\n    buffer.writeUInt32BE(b, this.changes.length, offset);\n    offset += 4;\n    for (const change of this.changes) {\n      offset = change.write(b, offset);\n    }\n    return b.buffer;\n  }\n  static deserialize(source) {\n    const b = new Uint8Array(source);\n    let offset = 0;\n    const beforeVersionId = buffer.readUInt32BE(b, offset);\n    offset += 4;\n    const afterVersionId = buffer.readUInt32BE(b, offset);\n    offset += 4;\n    const beforeEOL = buffer.readUInt8(b, offset);\n    offset += 1;\n    const afterEOL = buffer.readUInt8(b, offset);\n    offset += 1;\n    const beforeCursorState = [];\n    offset = SingleModelEditStackData._readSelections(b, offset, beforeCursorState);\n    const afterCursorState = [];\n    offset = SingleModelEditStackData._readSelections(b, offset, afterCursorState);\n    const changeCount = buffer.readUInt32BE(b, offset);\n    offset += 4;\n    const changes = [];\n    for (let i = 0; i < changeCount; i++) {\n      offset = TextChange.read(b, offset, changes);\n    }\n    return new SingleModelEditStackData(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes);\n  }\n}\nexport class SingleModelEditStackElement {\n  get type() {\n    return 0 /* UndoRedoElementType.Resource */;\n  }\n  get resource() {\n    if (URI.isUri(this.model)) {\n      return this.model;\n    }\n    return this.model.uri;\n  }\n  constructor(label, code, model, beforeCursorState) {\n    this.label = label;\n    this.code = code;\n    this.model = model;\n    this._data = SingleModelEditStackData.create(model, beforeCursorState);\n  }\n  toString() {\n    const data = this._data instanceof SingleModelEditStackData ? this._data : SingleModelEditStackData.deserialize(this._data);\n    return data.changes.map(change => change.toString()).join(', ');\n  }\n  matchesResource(resource) {\n    const uri = URI.isUri(this.model) ? this.model : this.model.uri;\n    return uri.toString() === resource.toString();\n  }\n  setModel(model) {\n    this.model = model;\n  }\n  canAppend(model) {\n    return this.model === model && this._data instanceof SingleModelEditStackData;\n  }\n  append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n    }\n  }\n  close() {\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data = this._data.serialize();\n    }\n  }\n  open() {\n    if (!(this._data instanceof SingleModelEditStackData)) {\n      this._data = SingleModelEditStackData.deserialize(this._data);\n    }\n  }\n  undo() {\n    if (URI.isUri(this.model)) {\n      // don't have a model\n      throw new Error(`Invalid SingleModelEditStackElement`);\n    }\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data = this._data.serialize();\n    }\n    const data = SingleModelEditStackData.deserialize(this._data);\n    this.model._applyUndo(data.changes, data.beforeEOL, data.beforeVersionId, data.beforeCursorState);\n  }\n  redo() {\n    if (URI.isUri(this.model)) {\n      // don't have a model\n      throw new Error(`Invalid SingleModelEditStackElement`);\n    }\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data = this._data.serialize();\n    }\n    const data = SingleModelEditStackData.deserialize(this._data);\n    this.model._applyRedo(data.changes, data.afterEOL, data.afterVersionId, data.afterCursorState);\n  }\n  heapSize() {\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data = this._data.serialize();\n    }\n    return this._data.byteLength + 168 /*heap overhead*/;\n  }\n}\nexport class MultiModelEditStackElement {\n  get resources() {\n    return this._editStackElementsArr.map(editStackElement => editStackElement.resource);\n  }\n  constructor(label, code, editStackElements) {\n    this.label = label;\n    this.code = code;\n    this.type = 1 /* UndoRedoElementType.Workspace */;\n    this._isOpen = true;\n    this._editStackElementsArr = editStackElements.slice(0);\n    this._editStackElementsMap = new Map();\n    for (const editStackElement of this._editStackElementsArr) {\n      const key = uriGetComparisonKey(editStackElement.resource);\n      this._editStackElementsMap.set(key, editStackElement);\n    }\n    this._delegate = null;\n  }\n  prepareUndoRedo() {\n    if (this._delegate) {\n      return this._delegate.prepareUndoRedo(this);\n    }\n  }\n  matchesResource(resource) {\n    const key = uriGetComparisonKey(resource);\n    return this._editStackElementsMap.has(key);\n  }\n  setModel(model) {\n    const key = uriGetComparisonKey(URI.isUri(model) ? model : model.uri);\n    if (this._editStackElementsMap.has(key)) {\n      this._editStackElementsMap.get(key).setModel(model);\n    }\n  }\n  canAppend(model) {\n    if (!this._isOpen) {\n      return false;\n    }\n    const key = uriGetComparisonKey(model.uri);\n    if (this._editStackElementsMap.has(key)) {\n      const editStackElement = this._editStackElementsMap.get(key);\n      return editStackElement.canAppend(model);\n    }\n    return false;\n  }\n  append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n    const key = uriGetComparisonKey(model.uri);\n    const editStackElement = this._editStackElementsMap.get(key);\n    editStackElement.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n  }\n  close() {\n    this._isOpen = false;\n  }\n  open() {\n    // cannot reopen\n  }\n  undo() {\n    this._isOpen = false;\n    for (const editStackElement of this._editStackElementsArr) {\n      editStackElement.undo();\n    }\n  }\n  redo() {\n    for (const editStackElement of this._editStackElementsArr) {\n      editStackElement.redo();\n    }\n  }\n  heapSize(resource) {\n    const key = uriGetComparisonKey(resource);\n    if (this._editStackElementsMap.has(key)) {\n      const editStackElement = this._editStackElementsMap.get(key);\n      return editStackElement.heapSize();\n    }\n    return 0;\n  }\n  split() {\n    return this._editStackElementsArr;\n  }\n  toString() {\n    const result = [];\n    for (const editStackElement of this._editStackElementsArr) {\n      result.push(`${basename(editStackElement.resource)}: ${editStackElement}`);\n    }\n    return `{${result.join(', ')}}`;\n  }\n}\nfunction getModelEOL(model) {\n  const eol = model.getEOL();\n  if (eol === '\\n') {\n    return 0 /* EndOfLineSequence.LF */;\n  } else {\n    return 1 /* EndOfLineSequence.CRLF */;\n  }\n}\nexport function isEditStackElement(element) {\n  if (!element) {\n    return false;\n  }\n  return element instanceof SingleModelEditStackElement || element instanceof MultiModelEditStackElement;\n}\nexport class EditStack {\n  constructor(model, undoRedoService) {\n    this._model = model;\n    this._undoRedoService = undoRedoService;\n  }\n  pushStackElement() {\n    const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n    if (isEditStackElement(lastElement)) {\n      lastElement.close();\n    }\n  }\n  popStackElement() {\n    const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n    if (isEditStackElement(lastElement)) {\n      lastElement.open();\n    }\n  }\n  clear() {\n    this._undoRedoService.removeElements(this._model.uri);\n  }\n  _getOrCreateEditStackElement(beforeCursorState, group) {\n    const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n    if (isEditStackElement(lastElement) && lastElement.canAppend(this._model)) {\n      return lastElement;\n    }\n    const newElement = new SingleModelEditStackElement(nls.localize('edit', \"Typing\"), 'undoredo.textBufferEdit', this._model, beforeCursorState);\n    this._undoRedoService.pushElement(newElement, group);\n    return newElement;\n  }\n  pushEOL(eol) {\n    const editStackElement = this._getOrCreateEditStackElement(null, undefined);\n    this._model.setEOL(eol);\n    editStackElement.append(this._model, [], getModelEOL(this._model), this._model.getAlternativeVersionId(), null);\n  }\n  pushEditOperation(beforeCursorState, editOperations, cursorStateComputer, group) {\n    const editStackElement = this._getOrCreateEditStackElement(beforeCursorState, group);\n    const inverseEditOperations = this._model.applyEdits(editOperations, true);\n    const afterCursorState = EditStack._computeCursorState(cursorStateComputer, inverseEditOperations);\n    const textChanges = inverseEditOperations.map((op, index) => ({\n      index: index,\n      textChange: op.textChange\n    }));\n    textChanges.sort((a, b) => {\n      if (a.textChange.oldPosition === b.textChange.oldPosition) {\n        return a.index - b.index;\n      }\n      return a.textChange.oldPosition - b.textChange.oldPosition;\n    });\n    editStackElement.append(this._model, textChanges.map(op => op.textChange), getModelEOL(this._model), this._model.getAlternativeVersionId(), afterCursorState);\n    return afterCursorState;\n  }\n  static _computeCursorState(cursorStateComputer, inverseEditOperations) {\n    try {\n      return cursorStateComputer ? cursorStateComputer(inverseEditOperations) : null;\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  }\n}","map":{"version":3,"names":["nls","onUnexpectedError","Selection","URI","TextChange","compressConsecutiveTextChanges","buffer","basename","uriGetComparisonKey","resource","toString","SingleModelEditStackData","create","model","beforeCursorState","alternativeVersionId","getAlternativeVersionId","eol","getModelEOL","constructor","beforeVersionId","afterVersionId","beforeEOL","afterEOL","afterCursorState","changes","append","textChanges","length","_writeSelectionsSize","selections","_writeSelections","b","offset","writeUInt32BE","selection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","_readSelections","dest","count","readUInt32BE","i","push","serialize","necessarySize","change","writeSize","Uint8Array","writeUInt8","write","deserialize","source","readUInt8","changeCount","read","SingleModelEditStackElement","type","isUri","uri","label","code","_data","data","map","join","matchesResource","setModel","canAppend","close","open","undo","Error","_applyUndo","redo","_applyRedo","heapSize","byteLength","MultiModelEditStackElement","resources","_editStackElementsArr","editStackElement","editStackElements","_isOpen","slice","_editStackElementsMap","Map","key","set","_delegate","prepareUndoRedo","has","get","split","result","getEOL","isEditStackElement","element","EditStack","undoRedoService","_model","_undoRedoService","pushStackElement","lastElement","getLastElement","popStackElement","clear","removeElements","_getOrCreateEditStackElement","group","newElement","localize","pushElement","pushEOL","undefined","setEOL","pushEditOperation","editOperations","cursorStateComputer","inverseEditOperations","applyEdits","_computeCursorState","op","index","textChange","sort","a","oldPosition","e"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/model/editStack.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Selection } from '../core/selection.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { TextChange, compressConsecutiveTextChanges } from '../core/textChange.js';\nimport * as buffer from '../../../base/common/buffer.js';\nimport { basename } from '../../../base/common/resources.js';\nfunction uriGetComparisonKey(resource) {\n    return resource.toString();\n}\nexport class SingleModelEditStackData {\n    static create(model, beforeCursorState) {\n        const alternativeVersionId = model.getAlternativeVersionId();\n        const eol = getModelEOL(model);\n        return new SingleModelEditStackData(alternativeVersionId, alternativeVersionId, eol, eol, beforeCursorState, beforeCursorState, []);\n    }\n    constructor(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes) {\n        this.beforeVersionId = beforeVersionId;\n        this.afterVersionId = afterVersionId;\n        this.beforeEOL = beforeEOL;\n        this.afterEOL = afterEOL;\n        this.beforeCursorState = beforeCursorState;\n        this.afterCursorState = afterCursorState;\n        this.changes = changes;\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        if (textChanges.length > 0) {\n            this.changes = compressConsecutiveTextChanges(this.changes, textChanges);\n        }\n        this.afterEOL = afterEOL;\n        this.afterVersionId = afterVersionId;\n        this.afterCursorState = afterCursorState;\n    }\n    static _writeSelectionsSize(selections) {\n        return 4 + 4 * 4 * (selections ? selections.length : 0);\n    }\n    static _writeSelections(b, selections, offset) {\n        buffer.writeUInt32BE(b, (selections ? selections.length : 0), offset);\n        offset += 4;\n        if (selections) {\n            for (const selection of selections) {\n                buffer.writeUInt32BE(b, selection.selectionStartLineNumber, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.selectionStartColumn, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.positionLineNumber, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.positionColumn, offset);\n                offset += 4;\n            }\n        }\n        return offset;\n    }\n    static _readSelections(b, offset, dest) {\n        const count = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        for (let i = 0; i < count; i++) {\n            const selectionStartLineNumber = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const selectionStartColumn = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const positionLineNumber = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const positionColumn = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            dest.push(new Selection(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn));\n        }\n        return offset;\n    }\n    serialize() {\n        let necessarySize = (+4 // beforeVersionId\n            + 4 // afterVersionId\n            + 1 // beforeEOL\n            + 1 // afterEOL\n            + SingleModelEditStackData._writeSelectionsSize(this.beforeCursorState)\n            + SingleModelEditStackData._writeSelectionsSize(this.afterCursorState)\n            + 4 // change count\n        );\n        for (const change of this.changes) {\n            necessarySize += change.writeSize();\n        }\n        const b = new Uint8Array(necessarySize);\n        let offset = 0;\n        buffer.writeUInt32BE(b, this.beforeVersionId, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, this.afterVersionId, offset);\n        offset += 4;\n        buffer.writeUInt8(b, this.beforeEOL, offset);\n        offset += 1;\n        buffer.writeUInt8(b, this.afterEOL, offset);\n        offset += 1;\n        offset = SingleModelEditStackData._writeSelections(b, this.beforeCursorState, offset);\n        offset = SingleModelEditStackData._writeSelections(b, this.afterCursorState, offset);\n        buffer.writeUInt32BE(b, this.changes.length, offset);\n        offset += 4;\n        for (const change of this.changes) {\n            offset = change.write(b, offset);\n        }\n        return b.buffer;\n    }\n    static deserialize(source) {\n        const b = new Uint8Array(source);\n        let offset = 0;\n        const beforeVersionId = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const afterVersionId = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const beforeEOL = buffer.readUInt8(b, offset);\n        offset += 1;\n        const afterEOL = buffer.readUInt8(b, offset);\n        offset += 1;\n        const beforeCursorState = [];\n        offset = SingleModelEditStackData._readSelections(b, offset, beforeCursorState);\n        const afterCursorState = [];\n        offset = SingleModelEditStackData._readSelections(b, offset, afterCursorState);\n        const changeCount = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const changes = [];\n        for (let i = 0; i < changeCount; i++) {\n            offset = TextChange.read(b, offset, changes);\n        }\n        return new SingleModelEditStackData(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes);\n    }\n}\nexport class SingleModelEditStackElement {\n    get type() {\n        return 0 /* UndoRedoElementType.Resource */;\n    }\n    get resource() {\n        if (URI.isUri(this.model)) {\n            return this.model;\n        }\n        return this.model.uri;\n    }\n    constructor(label, code, model, beforeCursorState) {\n        this.label = label;\n        this.code = code;\n        this.model = model;\n        this._data = SingleModelEditStackData.create(model, beforeCursorState);\n    }\n    toString() {\n        const data = (this._data instanceof SingleModelEditStackData ? this._data : SingleModelEditStackData.deserialize(this._data));\n        return data.changes.map(change => change.toString()).join(', ');\n    }\n    matchesResource(resource) {\n        const uri = (URI.isUri(this.model) ? this.model : this.model.uri);\n        return (uri.toString() === resource.toString());\n    }\n    setModel(model) {\n        this.model = model;\n    }\n    canAppend(model) {\n        return (this.model === model && this._data instanceof SingleModelEditStackData);\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n        }\n    }\n    close() {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n    }\n    open() {\n        if (!(this._data instanceof SingleModelEditStackData)) {\n            this._data = SingleModelEditStackData.deserialize(this._data);\n        }\n    }\n    undo() {\n        if (URI.isUri(this.model)) {\n            // don't have a model\n            throw new Error(`Invalid SingleModelEditStackElement`);\n        }\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        const data = SingleModelEditStackData.deserialize(this._data);\n        this.model._applyUndo(data.changes, data.beforeEOL, data.beforeVersionId, data.beforeCursorState);\n    }\n    redo() {\n        if (URI.isUri(this.model)) {\n            // don't have a model\n            throw new Error(`Invalid SingleModelEditStackElement`);\n        }\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        const data = SingleModelEditStackData.deserialize(this._data);\n        this.model._applyRedo(data.changes, data.afterEOL, data.afterVersionId, data.afterCursorState);\n    }\n    heapSize() {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        return this._data.byteLength + 168 /*heap overhead*/;\n    }\n}\nexport class MultiModelEditStackElement {\n    get resources() {\n        return this._editStackElementsArr.map(editStackElement => editStackElement.resource);\n    }\n    constructor(label, code, editStackElements) {\n        this.label = label;\n        this.code = code;\n        this.type = 1 /* UndoRedoElementType.Workspace */;\n        this._isOpen = true;\n        this._editStackElementsArr = editStackElements.slice(0);\n        this._editStackElementsMap = new Map();\n        for (const editStackElement of this._editStackElementsArr) {\n            const key = uriGetComparisonKey(editStackElement.resource);\n            this._editStackElementsMap.set(key, editStackElement);\n        }\n        this._delegate = null;\n    }\n    prepareUndoRedo() {\n        if (this._delegate) {\n            return this._delegate.prepareUndoRedo(this);\n        }\n    }\n    matchesResource(resource) {\n        const key = uriGetComparisonKey(resource);\n        return (this._editStackElementsMap.has(key));\n    }\n    setModel(model) {\n        const key = uriGetComparisonKey(URI.isUri(model) ? model : model.uri);\n        if (this._editStackElementsMap.has(key)) {\n            this._editStackElementsMap.get(key).setModel(model);\n        }\n    }\n    canAppend(model) {\n        if (!this._isOpen) {\n            return false;\n        }\n        const key = uriGetComparisonKey(model.uri);\n        if (this._editStackElementsMap.has(key)) {\n            const editStackElement = this._editStackElementsMap.get(key);\n            return editStackElement.canAppend(model);\n        }\n        return false;\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        const key = uriGetComparisonKey(model.uri);\n        const editStackElement = this._editStackElementsMap.get(key);\n        editStackElement.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n    }\n    close() {\n        this._isOpen = false;\n    }\n    open() {\n        // cannot reopen\n    }\n    undo() {\n        this._isOpen = false;\n        for (const editStackElement of this._editStackElementsArr) {\n            editStackElement.undo();\n        }\n    }\n    redo() {\n        for (const editStackElement of this._editStackElementsArr) {\n            editStackElement.redo();\n        }\n    }\n    heapSize(resource) {\n        const key = uriGetComparisonKey(resource);\n        if (this._editStackElementsMap.has(key)) {\n            const editStackElement = this._editStackElementsMap.get(key);\n            return editStackElement.heapSize();\n        }\n        return 0;\n    }\n    split() {\n        return this._editStackElementsArr;\n    }\n    toString() {\n        const result = [];\n        for (const editStackElement of this._editStackElementsArr) {\n            result.push(`${basename(editStackElement.resource)}: ${editStackElement}`);\n        }\n        return `{${result.join(', ')}}`;\n    }\n}\nfunction getModelEOL(model) {\n    const eol = model.getEOL();\n    if (eol === '\\n') {\n        return 0 /* EndOfLineSequence.LF */;\n    }\n    else {\n        return 1 /* EndOfLineSequence.CRLF */;\n    }\n}\nexport function isEditStackElement(element) {\n    if (!element) {\n        return false;\n    }\n    return ((element instanceof SingleModelEditStackElement) || (element instanceof MultiModelEditStackElement));\n}\nexport class EditStack {\n    constructor(model, undoRedoService) {\n        this._model = model;\n        this._undoRedoService = undoRedoService;\n    }\n    pushStackElement() {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement)) {\n            lastElement.close();\n        }\n    }\n    popStackElement() {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement)) {\n            lastElement.open();\n        }\n    }\n    clear() {\n        this._undoRedoService.removeElements(this._model.uri);\n    }\n    _getOrCreateEditStackElement(beforeCursorState, group) {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement) && lastElement.canAppend(this._model)) {\n            return lastElement;\n        }\n        const newElement = new SingleModelEditStackElement(nls.localize('edit', \"Typing\"), 'undoredo.textBufferEdit', this._model, beforeCursorState);\n        this._undoRedoService.pushElement(newElement, group);\n        return newElement;\n    }\n    pushEOL(eol) {\n        const editStackElement = this._getOrCreateEditStackElement(null, undefined);\n        this._model.setEOL(eol);\n        editStackElement.append(this._model, [], getModelEOL(this._model), this._model.getAlternativeVersionId(), null);\n    }\n    pushEditOperation(beforeCursorState, editOperations, cursorStateComputer, group) {\n        const editStackElement = this._getOrCreateEditStackElement(beforeCursorState, group);\n        const inverseEditOperations = this._model.applyEdits(editOperations, true);\n        const afterCursorState = EditStack._computeCursorState(cursorStateComputer, inverseEditOperations);\n        const textChanges = inverseEditOperations.map((op, index) => ({ index: index, textChange: op.textChange }));\n        textChanges.sort((a, b) => {\n            if (a.textChange.oldPosition === b.textChange.oldPosition) {\n                return a.index - b.index;\n            }\n            return a.textChange.oldPosition - b.textChange.oldPosition;\n        });\n        editStackElement.append(this._model, textChanges.map(op => op.textChange), getModelEOL(this._model), this._model.getAlternativeVersionId(), afterCursorState);\n        return afterCursorState;\n    }\n    static _computeCursorState(cursorStateComputer, inverseEditOperations) {\n        try {\n            return cursorStateComputer ? cursorStateComputer(inverseEditOperations) : null;\n        }\n        catch (e) {\n            onUnexpectedError(e);\n            return null;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}