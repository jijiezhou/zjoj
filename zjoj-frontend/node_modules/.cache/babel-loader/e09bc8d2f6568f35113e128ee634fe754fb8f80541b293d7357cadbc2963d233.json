{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from './characterClassifier.js';\nexport class WordCharacterClassifier extends CharacterClassifier {\n  constructor(wordSeparators) {\n    super(0 /* WordCharacterClass.Regular */);\n    for (let i = 0, len = wordSeparators.length; i < len; i++) {\n      this.set(wordSeparators.charCodeAt(i), 2 /* WordCharacterClass.WordSeparator */);\n    }\n    this.set(32 /* CharCode.Space */, 1 /* WordCharacterClass.Whitespace */);\n    this.set(9 /* CharCode.Tab */, 1 /* WordCharacterClass.Whitespace */);\n  }\n}\nfunction once(computeFn) {\n  const cache = {}; // TODO@Alex unbounded cache\n  return input => {\n    if (!cache.hasOwnProperty(input)) {\n      cache[input] = computeFn(input);\n    }\n    return cache[input];\n  };\n}\nexport const getMapForWordSeparators = once(input => new WordCharacterClassifier(input));","map":{"version":3,"names":["CharacterClassifier","WordCharacterClassifier","constructor","wordSeparators","i","len","length","set","charCodeAt","once","computeFn","cache","input","hasOwnProperty","getMapForWordSeparators"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from './characterClassifier.js';\nexport class WordCharacterClassifier extends CharacterClassifier {\n    constructor(wordSeparators) {\n        super(0 /* WordCharacterClass.Regular */);\n        for (let i = 0, len = wordSeparators.length; i < len; i++) {\n            this.set(wordSeparators.charCodeAt(i), 2 /* WordCharacterClass.WordSeparator */);\n        }\n        this.set(32 /* CharCode.Space */, 1 /* WordCharacterClass.Whitespace */);\n        this.set(9 /* CharCode.Tab */, 1 /* WordCharacterClass.Whitespace */);\n    }\n}\nfunction once(computeFn) {\n    const cache = {}; // TODO@Alex unbounded cache\n    return (input) => {\n        if (!cache.hasOwnProperty(input)) {\n            cache[input] = computeFn(input);\n        }\n        return cache[input];\n    };\n}\nexport const getMapForWordSeparators = once((input) => new WordCharacterClassifier(input));\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAO,MAAMC,uBAAuB,SAASD,mBAAmB,CAAC;EAC7DE,WAAWA,CAACC,cAAc,EAAE;IACxB,KAAK,CAAC,CAAC,CAAC,gCAAgC,CAAC;IACzC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGF,cAAc,CAACG,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACvD,IAAI,CAACG,GAAG,CAACJ,cAAc,CAACK,UAAU,CAACJ,CAAC,CAAC,EAAE,CAAC,CAAC,sCAAsC,CAAC;IACpF;IACA,IAAI,CAACG,GAAG,CAAC,EAAE,CAAC,sBAAsB,CAAC,CAAC,mCAAmC,CAAC;IACxE,IAAI,CAACA,GAAG,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,mCAAmC,CAAC;EACzE;AACJ;AACA,SAASE,IAAIA,CAACC,SAAS,EAAE;EACrB,MAAMC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,OAAQC,KAAK,IAAK;IACd,IAAI,CAACD,KAAK,CAACE,cAAc,CAACD,KAAK,CAAC,EAAE;MAC9BD,KAAK,CAACC,KAAK,CAAC,GAAGF,SAAS,CAACE,KAAK,CAAC;IACnC;IACA,OAAOD,KAAK,CAACC,KAAK,CAAC;EACvB,CAAC;AACL;AACA,OAAO,MAAME,uBAAuB,GAAGL,IAAI,CAAEG,KAAK,IAAK,IAAIX,uBAAuB,CAACW,KAAK,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}