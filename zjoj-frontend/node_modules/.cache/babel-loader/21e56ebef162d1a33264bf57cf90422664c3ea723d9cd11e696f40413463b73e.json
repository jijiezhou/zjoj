{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IndentAction } from './languageConfiguration.js';\nimport { getIndentationAtPosition, getScopedLineTokens } from './languageConfigurationRegistry.js';\nexport function getEnterAction(autoIndent, model, range, languageConfigurationService) {\n  const scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n  const richEditSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId);\n  if (!richEditSupport) {\n    return null;\n  }\n  const scopedLineText = scopedLineTokens.getLineContent();\n  const beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n  // selection support\n  let afterEnterText;\n  if (range.isEmpty()) {\n    afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n  } else {\n    const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n    afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n  }\n  let previousLineText = '';\n  if (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {\n    // This is not the first line and the entire line belongs to this mode\n    const oneLineAboveScopedLineTokens = getScopedLineTokens(model, range.startLineNumber - 1);\n    if (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {\n      // The line above ends with text belonging to the same mode\n      previousLineText = oneLineAboveScopedLineTokens.getLineContent();\n    }\n  }\n  const enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n  if (!enterResult) {\n    return null;\n  }\n  const indentAction = enterResult.indentAction;\n  let appendText = enterResult.appendText;\n  const removeText = enterResult.removeText || 0;\n  // Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n  if (!appendText) {\n    if (indentAction === IndentAction.Indent || indentAction === IndentAction.IndentOutdent) {\n      appendText = '\\t';\n    } else {\n      appendText = '';\n    }\n  } else if (indentAction === IndentAction.Indent) {\n    appendText = '\\t' + appendText;\n  }\n  let indentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n  if (removeText) {\n    indentation = indentation.substring(0, indentation.length - removeText);\n  }\n  return {\n    indentAction: indentAction,\n    appendText: appendText,\n    removeText: removeText,\n    indentation: indentation\n  };\n}","map":{"version":3,"names":["IndentAction","getIndentationAtPosition","getScopedLineTokens","getEnterAction","autoIndent","model","range","languageConfigurationService","scopedLineTokens","startLineNumber","startColumn","richEditSupport","getLanguageConfiguration","languageId","scopedLineText","getLineContent","beforeEnterText","substr","firstCharOffset","afterEnterText","isEmpty","endScopedLineTokens","endLineNumber","endColumn","previousLineText","oneLineAboveScopedLineTokens","enterResult","onEnter","indentAction","appendText","removeText","Indent","IndentOutdent","indentation","substring","length"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/languages/enterAction.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IndentAction } from './languageConfiguration.js';\nimport { getIndentationAtPosition, getScopedLineTokens } from './languageConfigurationRegistry.js';\nexport function getEnterAction(autoIndent, model, range, languageConfigurationService) {\n    const scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n    const richEditSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId);\n    if (!richEditSupport) {\n        return null;\n    }\n    const scopedLineText = scopedLineTokens.getLineContent();\n    const beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    // selection support\n    let afterEnterText;\n    if (range.isEmpty()) {\n        afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    let previousLineText = '';\n    if (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {\n        // This is not the first line and the entire line belongs to this mode\n        const oneLineAboveScopedLineTokens = getScopedLineTokens(model, range.startLineNumber - 1);\n        if (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {\n            // The line above ends with text belonging to the same mode\n            previousLineText = oneLineAboveScopedLineTokens.getLineContent();\n        }\n    }\n    const enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n    if (!enterResult) {\n        return null;\n    }\n    const indentAction = enterResult.indentAction;\n    let appendText = enterResult.appendText;\n    const removeText = enterResult.removeText || 0;\n    // Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n    if (!appendText) {\n        if ((indentAction === IndentAction.Indent) ||\n            (indentAction === IndentAction.IndentOutdent)) {\n            appendText = '\\t';\n        }\n        else {\n            appendText = '';\n        }\n    }\n    else if (indentAction === IndentAction.Indent) {\n        appendText = '\\t' + appendText;\n    }\n    let indentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n    if (removeText) {\n        indentation = indentation.substring(0, indentation.length - removeText);\n    }\n    return {\n        indentAction: indentAction,\n        appendText: appendText,\n        removeText: removeText,\n        indentation: indentation\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}