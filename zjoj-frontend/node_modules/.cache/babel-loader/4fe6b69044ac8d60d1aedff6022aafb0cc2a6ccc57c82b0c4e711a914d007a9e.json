{"ast":null,"code":"import \"core-js/modules/es.regexp.flags.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { mapFindFirst } from '../../../../base/common/arraysFind.js';\nimport { BugIndicatingError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, derived, derivedHandleChanges, derivedOpts, recomputeInitiallyAndOnChange, observableSignal, observableValue, subtransaction, transaction } from '../../../../base/common/observable.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { InlineCompletionTriggerKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { GhostText, ghostTextOrReplacementEquals } from './ghostText.js';\nimport { InlineCompletionsSource } from './inlineCompletionsSource.js';\nimport { addPositions, lengthOfText } from './utils.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nexport var VersionIdChangeReason;\n(function (VersionIdChangeReason) {\n  VersionIdChangeReason[VersionIdChangeReason[\"Undo\"] = 0] = \"Undo\";\n  VersionIdChangeReason[VersionIdChangeReason[\"Redo\"] = 1] = \"Redo\";\n  VersionIdChangeReason[VersionIdChangeReason[\"AcceptWord\"] = 2] = \"AcceptWord\";\n  VersionIdChangeReason[VersionIdChangeReason[\"Other\"] = 3] = \"Other\";\n})(VersionIdChangeReason || (VersionIdChangeReason = {}));\nlet InlineCompletionsModel = class InlineCompletionsModel extends Disposable {\n  get isAcceptingPartially() {\n    return this._isAcceptingPartially;\n  }\n  constructor(textModel, selectedSuggestItem, cursorPosition, textModelVersionId, _debounceValue, _suggestPreviewEnabled, _suggestPreviewMode, _inlineSuggestMode, _enabled, _instantiationService, _commandService, _languageConfigurationService) {\n    super();\n    this.textModel = textModel;\n    this.selectedSuggestItem = selectedSuggestItem;\n    this.cursorPosition = cursorPosition;\n    this.textModelVersionId = textModelVersionId;\n    this._debounceValue = _debounceValue;\n    this._suggestPreviewEnabled = _suggestPreviewEnabled;\n    this._suggestPreviewMode = _suggestPreviewMode;\n    this._inlineSuggestMode = _inlineSuggestMode;\n    this._enabled = _enabled;\n    this._instantiationService = _instantiationService;\n    this._commandService = _commandService;\n    this._languageConfigurationService = _languageConfigurationService;\n    this._source = this._register(this._instantiationService.createInstance(InlineCompletionsSource, this.textModel, this.textModelVersionId, this._debounceValue));\n    this._isActive = observableValue(this, false);\n    this._forceUpdateSignal = observableSignal('forceUpdate');\n    // We use a semantic id to keep the same inline completion selected even if the provider reorders the completions.\n    this._selectedInlineCompletionId = observableValue(this, undefined);\n    this._isAcceptingPartially = false;\n    this._preserveCurrentCompletionReasons = new Set([VersionIdChangeReason.Redo, VersionIdChangeReason.Undo, VersionIdChangeReason.AcceptWord]);\n    this._fetchInlineCompletions = derivedHandleChanges({\n      owner: this,\n      createEmptyChangeSummary: () => ({\n        preserveCurrentCompletion: false,\n        inlineCompletionTriggerKind: InlineCompletionTriggerKind.Automatic\n      }),\n      handleChange: (ctx, changeSummary) => {\n        /** @description fetch inline completions */\n        if (ctx.didChange(this.textModelVersionId) && this._preserveCurrentCompletionReasons.has(ctx.change)) {\n          changeSummary.preserveCurrentCompletion = true;\n        } else if (ctx.didChange(this._forceUpdateSignal)) {\n          changeSummary.inlineCompletionTriggerKind = ctx.change;\n        }\n        return true;\n      }\n    }, (reader, changeSummary) => {\n      this._forceUpdateSignal.read(reader);\n      const shouldUpdate = this._enabled.read(reader) && this.selectedSuggestItem.read(reader) || this._isActive.read(reader);\n      if (!shouldUpdate) {\n        this._source.cancelUpdate();\n        return undefined;\n      }\n      this.textModelVersionId.read(reader); // Refetch on text change\n      const itemToPreserveCandidate = this.selectedInlineCompletion.get();\n      const itemToPreserve = changeSummary.preserveCurrentCompletion || (itemToPreserveCandidate === null || itemToPreserveCandidate === void 0 ? void 0 : itemToPreserveCandidate.forwardStable) ? itemToPreserveCandidate : undefined;\n      const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.get();\n      const suggestItem = this.selectedSuggestItem.read(reader);\n      if (suggestWidgetInlineCompletions && !suggestItem) {\n        const inlineCompletions = this._source.inlineCompletions.get();\n        transaction(tx => {\n          /** @description Seed inline completions with (newer) suggest widget inline completions */\n          if (!inlineCompletions || suggestWidgetInlineCompletions.request.versionId > inlineCompletions.request.versionId) {\n            this._source.inlineCompletions.set(suggestWidgetInlineCompletions.clone(), tx);\n          }\n          this._source.clearSuggestWidgetInlineCompletions(tx);\n        });\n      }\n      const cursorPosition = this.cursorPosition.read(reader);\n      const context = {\n        triggerKind: changeSummary.inlineCompletionTriggerKind,\n        selectedSuggestionInfo: suggestItem === null || suggestItem === void 0 ? void 0 : suggestItem.toSelectedSuggestionInfo()\n      };\n      return this._source.fetch(cursorPosition, context, itemToPreserve);\n    });\n    this._filteredInlineCompletionItems = derived(this, reader => {\n      const c = this._source.inlineCompletions.read(reader);\n      if (!c) {\n        return [];\n      }\n      const cursorPosition = this.cursorPosition.read(reader);\n      const filteredCompletions = c.inlineCompletions.filter(c => c.isVisible(this.textModel, cursorPosition, reader));\n      return filteredCompletions;\n    });\n    this.selectedInlineCompletionIndex = derived(this, reader => {\n      const selectedInlineCompletionId = this._selectedInlineCompletionId.read(reader);\n      const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n      const idx = this._selectedInlineCompletionId === undefined ? -1 : filteredCompletions.findIndex(v => v.semanticId === selectedInlineCompletionId);\n      if (idx === -1) {\n        // Reset the selection so that the selection does not jump back when it appears again\n        this._selectedInlineCompletionId.set(undefined, undefined);\n        return 0;\n      }\n      return idx;\n    });\n    this.selectedInlineCompletion = derived(this, reader => {\n      const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n      const idx = this.selectedInlineCompletionIndex.read(reader);\n      return filteredCompletions[idx];\n    });\n    this.lastTriggerKind = this._source.inlineCompletions.map(this, v => v === null || v === void 0 ? void 0 : v.request.context.triggerKind);\n    this.inlineCompletionsCount = derived(this, reader => {\n      if (this.lastTriggerKind.read(reader) === InlineCompletionTriggerKind.Explicit) {\n        return this._filteredInlineCompletionItems.read(reader).length;\n      } else {\n        return undefined;\n      }\n    });\n    this.state = derivedOpts({\n      owner: this,\n      equalityComparer: (a, b) => {\n        if (!a || !b) {\n          return a === b;\n        }\n        return ghostTextOrReplacementEquals(a.ghostText, b.ghostText) && a.inlineCompletion === b.inlineCompletion && a.suggestItem === b.suggestItem;\n      }\n    }, reader => {\n      var _a;\n      const model = this.textModel;\n      const suggestItem = this.selectedSuggestItem.read(reader);\n      if (suggestItem) {\n        const suggestCompletion = suggestItem.toSingleTextEdit().removeCommonPrefix(model);\n        const augmentedCompletion = this._computeAugmentedCompletion(suggestCompletion, reader);\n        const isSuggestionPreviewEnabled = this._suggestPreviewEnabled.read(reader);\n        if (!isSuggestionPreviewEnabled && !augmentedCompletion) {\n          return undefined;\n        }\n        const edit = (_a = augmentedCompletion === null || augmentedCompletion === void 0 ? void 0 : augmentedCompletion.edit) !== null && _a !== void 0 ? _a : suggestCompletion;\n        const editPreviewLength = augmentedCompletion ? augmentedCompletion.edit.text.length - suggestCompletion.text.length : 0;\n        const mode = this._suggestPreviewMode.read(reader);\n        const cursor = this.cursorPosition.read(reader);\n        const newGhostText = edit.computeGhostText(model, mode, cursor, editPreviewLength);\n        // Show an invisible ghost text to reserve space\n        const ghostText = newGhostText !== null && newGhostText !== void 0 ? newGhostText : new GhostText(edit.range.endLineNumber, []);\n        return {\n          ghostText,\n          inlineCompletion: augmentedCompletion === null || augmentedCompletion === void 0 ? void 0 : augmentedCompletion.completion,\n          suggestItem\n        };\n      } else {\n        if (!this._isActive.read(reader)) {\n          return undefined;\n        }\n        const item = this.selectedInlineCompletion.read(reader);\n        if (!item) {\n          return undefined;\n        }\n        const replacement = item.toSingleTextEdit(reader);\n        const mode = this._inlineSuggestMode.read(reader);\n        const cursor = this.cursorPosition.read(reader);\n        const ghostText = replacement.computeGhostText(model, mode, cursor);\n        return ghostText ? {\n          ghostText,\n          inlineCompletion: item,\n          suggestItem: undefined\n        } : undefined;\n      }\n    });\n    this.ghostText = derivedOpts({\n      owner: this,\n      equalityComparer: ghostTextOrReplacementEquals\n    }, reader => {\n      const v = this.state.read(reader);\n      if (!v) {\n        return undefined;\n      }\n      return v.ghostText;\n    });\n    this._register(recomputeInitiallyAndOnChange(this._fetchInlineCompletions));\n    let lastItem = undefined;\n    this._register(autorun(reader => {\n      var _a, _b;\n      /** @description call handleItemDidShow */\n      const item = this.state.read(reader);\n      const completion = item === null || item === void 0 ? void 0 : item.inlineCompletion;\n      if ((completion === null || completion === void 0 ? void 0 : completion.semanticId) !== (lastItem === null || lastItem === void 0 ? void 0 : lastItem.semanticId)) {\n        lastItem = completion;\n        if (completion) {\n          const i = completion.inlineCompletion;\n          const src = i.source;\n          (_b = (_a = src.provider).handleItemDidShow) === null || _b === void 0 ? void 0 : _b.call(_a, src.inlineCompletions, i.sourceInlineCompletion, i.insertText);\n        }\n      }\n    }));\n  }\n  async trigger(tx) {\n    this._isActive.set(true, tx);\n    await this._fetchInlineCompletions.get();\n  }\n  async triggerExplicitly(tx) {\n    subtransaction(tx, tx => {\n      this._isActive.set(true, tx);\n      this._forceUpdateSignal.trigger(tx, InlineCompletionTriggerKind.Explicit);\n    });\n    await this._fetchInlineCompletions.get();\n  }\n  stop(tx) {\n    subtransaction(tx, tx => {\n      this._isActive.set(false, tx);\n      this._source.clear(tx);\n    });\n  }\n  _computeAugmentedCompletion(suggestCompletion, reader) {\n    const model = this.textModel;\n    const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.read(reader);\n    const candidateInlineCompletions = suggestWidgetInlineCompletions ? suggestWidgetInlineCompletions.inlineCompletions : [this.selectedInlineCompletion.read(reader)].filter(isDefined);\n    const augmentedCompletion = mapFindFirst(candidateInlineCompletions, completion => {\n      let r = completion.toSingleTextEdit(reader);\n      r = r.removeCommonPrefix(model, Range.fromPositions(r.range.getStartPosition(), suggestCompletion.range.getEndPosition()));\n      return r.augments(suggestCompletion) ? {\n        edit: r,\n        completion\n      } : undefined;\n    });\n    return augmentedCompletion;\n  }\n  async _deltaSelectedInlineCompletionIndex(delta) {\n    await this.triggerExplicitly();\n    const completions = this._filteredInlineCompletionItems.get() || [];\n    if (completions.length > 0) {\n      const newIdx = (this.selectedInlineCompletionIndex.get() + delta + completions.length) % completions.length;\n      this._selectedInlineCompletionId.set(completions[newIdx].semanticId, undefined);\n    } else {\n      this._selectedInlineCompletionId.set(undefined, undefined);\n    }\n  }\n  async next() {\n    await this._deltaSelectedInlineCompletionIndex(1);\n  }\n  async previous() {\n    await this._deltaSelectedInlineCompletionIndex(-1);\n  }\n  async accept(editor) {\n    var _a;\n    if (editor.getModel() !== this.textModel) {\n      throw new BugIndicatingError();\n    }\n    const state = this.state.get();\n    if (!state || state.ghostText.isEmpty() || !state.inlineCompletion) {\n      return;\n    }\n    const completion = state.inlineCompletion.toInlineCompletion(undefined);\n    editor.pushUndoStop();\n    if (completion.snippetInfo) {\n      editor.executeEdits('inlineSuggestion.accept', [EditOperation.replaceMove(completion.range, ''), ...completion.additionalTextEdits]);\n      editor.setPosition(completion.snippetInfo.range.getStartPosition());\n      (_a = SnippetController2.get(editor)) === null || _a === void 0 ? void 0 : _a.insert(completion.snippetInfo.snippet, {\n        undoStopBefore: false\n      });\n    } else {\n      editor.executeEdits('inlineSuggestion.accept', [EditOperation.replaceMove(completion.range, completion.insertText), ...completion.additionalTextEdits]);\n    }\n    if (completion.command) {\n      // Make sure the completion list will not be disposed.\n      completion.source.addRef();\n    }\n    // Reset before invoking the command, since the command might cause a follow up trigger.\n    transaction(tx => {\n      this._source.clear(tx);\n      // Potentially, isActive will get set back to true by the typing or accept inline suggest event\n      // if automatic inline suggestions are enabled.\n      this._isActive.set(false, tx);\n    });\n    if (completion.command) {\n      await this._commandService.executeCommand(completion.command.id, ...(completion.command.arguments || [])).then(undefined, onUnexpectedExternalError);\n      completion.source.removeRef();\n    }\n  }\n  async acceptNextWord(editor) {\n    await this._acceptNext(editor, (pos, text) => {\n      const langId = this.textModel.getLanguageIdAtPosition(pos.lineNumber, pos.column);\n      const config = this._languageConfigurationService.getLanguageConfiguration(langId);\n      const wordRegExp = new RegExp(config.wordDefinition.source, config.wordDefinition.flags.replace('g', ''));\n      const m1 = text.match(wordRegExp);\n      let acceptUntilIndexExclusive = 0;\n      if (m1 && m1.index !== undefined) {\n        if (m1.index === 0) {\n          acceptUntilIndexExclusive = m1[0].length;\n        } else {\n          acceptUntilIndexExclusive = m1.index;\n        }\n      } else {\n        acceptUntilIndexExclusive = text.length;\n      }\n      const wsRegExp = /\\s+/g;\n      const m2 = wsRegExp.exec(text);\n      if (m2 && m2.index !== undefined) {\n        if (m2.index + m2[0].length < acceptUntilIndexExclusive) {\n          acceptUntilIndexExclusive = m2.index + m2[0].length;\n        }\n      }\n      return acceptUntilIndexExclusive;\n    });\n  }\n  async acceptNextLine(editor) {\n    await this._acceptNext(editor, (pos, text) => {\n      const m = text.match(/\\n/);\n      if (m && m.index !== undefined) {\n        return m.index + 1;\n      }\n      return text.length;\n    });\n  }\n  async _acceptNext(editor, getAcceptUntilIndex) {\n    if (editor.getModel() !== this.textModel) {\n      throw new BugIndicatingError();\n    }\n    const state = this.state.get();\n    if (!state || state.ghostText.isEmpty() || !state.inlineCompletion) {\n      return;\n    }\n    const ghostText = state.ghostText;\n    const completion = state.inlineCompletion.toInlineCompletion(undefined);\n    if (completion.snippetInfo || completion.filterText !== completion.insertText) {\n      // not in WYSIWYG mode, partial commit might change completion, thus it is not supported\n      await this.accept(editor);\n      return;\n    }\n    const firstPart = ghostText.parts[0];\n    const position = new Position(ghostText.lineNumber, firstPart.column);\n    const line = firstPart.lines.join('\\n');\n    const acceptUntilIndexExclusive = getAcceptUntilIndex(position, line);\n    if (acceptUntilIndexExclusive === line.length && ghostText.parts.length === 1) {\n      this.accept(editor);\n      return;\n    }\n    const partialText = line.substring(0, acceptUntilIndexExclusive);\n    // Executing the edit might free the completion, so we have to hold a reference on it.\n    completion.source.addRef();\n    try {\n      this._isAcceptingPartially = true;\n      try {\n        editor.pushUndoStop();\n        editor.executeEdits('inlineSuggestion.accept', [EditOperation.replace(Range.fromPositions(position), partialText)]);\n        const length = lengthOfText(partialText);\n        editor.setPosition(addPositions(position, length));\n      } finally {\n        this._isAcceptingPartially = false;\n      }\n      if (completion.source.provider.handlePartialAccept) {\n        const acceptedRange = Range.fromPositions(completion.range.getStartPosition(), addPositions(position, lengthOfText(partialText)));\n        // This assumes that the inline completion and the model use the same EOL style.\n        const text = editor.getModel().getValueInRange(acceptedRange, 1 /* EndOfLinePreference.LF */);\n        completion.source.provider.handlePartialAccept(completion.source.inlineCompletions, completion.sourceInlineCompletion, text.length);\n      }\n    } finally {\n      completion.source.removeRef();\n    }\n  }\n  handleSuggestAccepted(item) {\n    var _a, _b;\n    const itemEdit = item.toSingleTextEdit().removeCommonPrefix(this.textModel);\n    const augmentedCompletion = this._computeAugmentedCompletion(itemEdit, undefined);\n    if (!augmentedCompletion) {\n      return;\n    }\n    const inlineCompletion = augmentedCompletion.completion.inlineCompletion;\n    (_b = (_a = inlineCompletion.source.provider).handlePartialAccept) === null || _b === void 0 ? void 0 : _b.call(_a, inlineCompletion.source.inlineCompletions, inlineCompletion.sourceInlineCompletion, itemEdit.text.length);\n  }\n};\nInlineCompletionsModel = __decorate([__param(9, IInstantiationService), __param(10, ICommandService), __param(11, ILanguageConfigurationService)], InlineCompletionsModel);\nexport { InlineCompletionsModel };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","mapFindFirst","BugIndicatingError","onUnexpectedExternalError","Disposable","autorun","derived","derivedHandleChanges","derivedOpts","recomputeInitiallyAndOnChange","observableSignal","observableValue","subtransaction","transaction","isDefined","EditOperation","Position","Range","InlineCompletionTriggerKind","ILanguageConfigurationService","GhostText","ghostTextOrReplacementEquals","InlineCompletionsSource","addPositions","lengthOfText","SnippetController2","ICommandService","IInstantiationService","VersionIdChangeReason","InlineCompletionsModel","isAcceptingPartially","_isAcceptingPartially","constructor","textModel","selectedSuggestItem","cursorPosition","textModelVersionId","_debounceValue","_suggestPreviewEnabled","_suggestPreviewMode","_inlineSuggestMode","_enabled","_instantiationService","_commandService","_languageConfigurationService","_source","_register","createInstance","_isActive","_forceUpdateSignal","_selectedInlineCompletionId","undefined","_preserveCurrentCompletionReasons","Set","Redo","Undo","AcceptWord","_fetchInlineCompletions","owner","createEmptyChangeSummary","preserveCurrentCompletion","inlineCompletionTriggerKind","Automatic","handleChange","ctx","changeSummary","didChange","has","change","reader","read","shouldUpdate","cancelUpdate","itemToPreserveCandidate","selectedInlineCompletion","get","itemToPreserve","forwardStable","suggestWidgetInlineCompletions","suggestItem","inlineCompletions","tx","request","versionId","set","clone","clearSuggestWidgetInlineCompletions","context","triggerKind","selectedSuggestionInfo","toSelectedSuggestionInfo","fetch","_filteredInlineCompletionItems","filteredCompletions","filter","isVisible","selectedInlineCompletionIndex","selectedInlineCompletionId","idx","findIndex","v","semanticId","lastTriggerKind","map","inlineCompletionsCount","Explicit","state","equalityComparer","a","b","ghostText","inlineCompletion","_a","model","suggestCompletion","toSingleTextEdit","removeCommonPrefix","augmentedCompletion","_computeAugmentedCompletion","isSuggestionPreviewEnabled","edit","editPreviewLength","text","mode","cursor","newGhostText","computeGhostText","range","endLineNumber","completion","item","replacement","lastItem","_b","src","source","provider","handleItemDidShow","call","sourceInlineCompletion","insertText","trigger","triggerExplicitly","stop","clear","candidateInlineCompletions","fromPositions","getStartPosition","getEndPosition","augments","_deltaSelectedInlineCompletionIndex","delta","completions","newIdx","next","previous","accept","editor","getModel","isEmpty","toInlineCompletion","pushUndoStop","snippetInfo","executeEdits","replaceMove","additionalTextEdits","setPosition","insert","snippet","undoStopBefore","command","addRef","executeCommand","id","then","removeRef","acceptNextWord","_acceptNext","pos","langId","getLanguageIdAtPosition","lineNumber","column","config","getLanguageConfiguration","wordRegExp","RegExp","wordDefinition","flags","replace","m1","match","acceptUntilIndexExclusive","index","wsRegExp","m2","exec","acceptNextLine","m","getAcceptUntilIndex","filterText","firstPart","parts","position","line","lines","join","partialText","substring","handlePartialAccept","acceptedRange","getValueInRange","handleSuggestAccepted","itemEdit"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletionsModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { mapFindFirst } from '../../../../base/common/arraysFind.js';\nimport { BugIndicatingError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, derived, derivedHandleChanges, derivedOpts, recomputeInitiallyAndOnChange, observableSignal, observableValue, subtransaction, transaction } from '../../../../base/common/observable.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { InlineCompletionTriggerKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { GhostText, ghostTextOrReplacementEquals } from './ghostText.js';\nimport { InlineCompletionsSource } from './inlineCompletionsSource.js';\nimport { addPositions, lengthOfText } from './utils.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nexport var VersionIdChangeReason;\n(function (VersionIdChangeReason) {\n    VersionIdChangeReason[VersionIdChangeReason[\"Undo\"] = 0] = \"Undo\";\n    VersionIdChangeReason[VersionIdChangeReason[\"Redo\"] = 1] = \"Redo\";\n    VersionIdChangeReason[VersionIdChangeReason[\"AcceptWord\"] = 2] = \"AcceptWord\";\n    VersionIdChangeReason[VersionIdChangeReason[\"Other\"] = 3] = \"Other\";\n})(VersionIdChangeReason || (VersionIdChangeReason = {}));\nlet InlineCompletionsModel = class InlineCompletionsModel extends Disposable {\n    get isAcceptingPartially() { return this._isAcceptingPartially; }\n    constructor(textModel, selectedSuggestItem, cursorPosition, textModelVersionId, _debounceValue, _suggestPreviewEnabled, _suggestPreviewMode, _inlineSuggestMode, _enabled, _instantiationService, _commandService, _languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.selectedSuggestItem = selectedSuggestItem;\n        this.cursorPosition = cursorPosition;\n        this.textModelVersionId = textModelVersionId;\n        this._debounceValue = _debounceValue;\n        this._suggestPreviewEnabled = _suggestPreviewEnabled;\n        this._suggestPreviewMode = _suggestPreviewMode;\n        this._inlineSuggestMode = _inlineSuggestMode;\n        this._enabled = _enabled;\n        this._instantiationService = _instantiationService;\n        this._commandService = _commandService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._source = this._register(this._instantiationService.createInstance(InlineCompletionsSource, this.textModel, this.textModelVersionId, this._debounceValue));\n        this._isActive = observableValue(this, false);\n        this._forceUpdateSignal = observableSignal('forceUpdate');\n        // We use a semantic id to keep the same inline completion selected even if the provider reorders the completions.\n        this._selectedInlineCompletionId = observableValue(this, undefined);\n        this._isAcceptingPartially = false;\n        this._preserveCurrentCompletionReasons = new Set([\n            VersionIdChangeReason.Redo,\n            VersionIdChangeReason.Undo,\n            VersionIdChangeReason.AcceptWord,\n        ]);\n        this._fetchInlineCompletions = derivedHandleChanges({\n            owner: this,\n            createEmptyChangeSummary: () => ({\n                preserveCurrentCompletion: false,\n                inlineCompletionTriggerKind: InlineCompletionTriggerKind.Automatic\n            }),\n            handleChange: (ctx, changeSummary) => {\n                /** @description fetch inline completions */\n                if (ctx.didChange(this.textModelVersionId) && this._preserveCurrentCompletionReasons.has(ctx.change)) {\n                    changeSummary.preserveCurrentCompletion = true;\n                }\n                else if (ctx.didChange(this._forceUpdateSignal)) {\n                    changeSummary.inlineCompletionTriggerKind = ctx.change;\n                }\n                return true;\n            },\n        }, (reader, changeSummary) => {\n            this._forceUpdateSignal.read(reader);\n            const shouldUpdate = (this._enabled.read(reader) && this.selectedSuggestItem.read(reader)) || this._isActive.read(reader);\n            if (!shouldUpdate) {\n                this._source.cancelUpdate();\n                return undefined;\n            }\n            this.textModelVersionId.read(reader); // Refetch on text change\n            const itemToPreserveCandidate = this.selectedInlineCompletion.get();\n            const itemToPreserve = changeSummary.preserveCurrentCompletion || (itemToPreserveCandidate === null || itemToPreserveCandidate === void 0 ? void 0 : itemToPreserveCandidate.forwardStable)\n                ? itemToPreserveCandidate : undefined;\n            const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.get();\n            const suggestItem = this.selectedSuggestItem.read(reader);\n            if (suggestWidgetInlineCompletions && !suggestItem) {\n                const inlineCompletions = this._source.inlineCompletions.get();\n                transaction(tx => {\n                    /** @description Seed inline completions with (newer) suggest widget inline completions */\n                    if (!inlineCompletions || suggestWidgetInlineCompletions.request.versionId > inlineCompletions.request.versionId) {\n                        this._source.inlineCompletions.set(suggestWidgetInlineCompletions.clone(), tx);\n                    }\n                    this._source.clearSuggestWidgetInlineCompletions(tx);\n                });\n            }\n            const cursorPosition = this.cursorPosition.read(reader);\n            const context = {\n                triggerKind: changeSummary.inlineCompletionTriggerKind,\n                selectedSuggestionInfo: suggestItem === null || suggestItem === void 0 ? void 0 : suggestItem.toSelectedSuggestionInfo(),\n            };\n            return this._source.fetch(cursorPosition, context, itemToPreserve);\n        });\n        this._filteredInlineCompletionItems = derived(this, reader => {\n            const c = this._source.inlineCompletions.read(reader);\n            if (!c) {\n                return [];\n            }\n            const cursorPosition = this.cursorPosition.read(reader);\n            const filteredCompletions = c.inlineCompletions.filter(c => c.isVisible(this.textModel, cursorPosition, reader));\n            return filteredCompletions;\n        });\n        this.selectedInlineCompletionIndex = derived(this, (reader) => {\n            const selectedInlineCompletionId = this._selectedInlineCompletionId.read(reader);\n            const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n            const idx = this._selectedInlineCompletionId === undefined ? -1\n                : filteredCompletions.findIndex(v => v.semanticId === selectedInlineCompletionId);\n            if (idx === -1) {\n                // Reset the selection so that the selection does not jump back when it appears again\n                this._selectedInlineCompletionId.set(undefined, undefined);\n                return 0;\n            }\n            return idx;\n        });\n        this.selectedInlineCompletion = derived(this, (reader) => {\n            const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n            const idx = this.selectedInlineCompletionIndex.read(reader);\n            return filteredCompletions[idx];\n        });\n        this.lastTriggerKind = this._source.inlineCompletions.map(this, v => v === null || v === void 0 ? void 0 : v.request.context.triggerKind);\n        this.inlineCompletionsCount = derived(this, reader => {\n            if (this.lastTriggerKind.read(reader) === InlineCompletionTriggerKind.Explicit) {\n                return this._filteredInlineCompletionItems.read(reader).length;\n            }\n            else {\n                return undefined;\n            }\n        });\n        this.state = derivedOpts({\n            owner: this,\n            equalityComparer: (a, b) => {\n                if (!a || !b) {\n                    return a === b;\n                }\n                return ghostTextOrReplacementEquals(a.ghostText, b.ghostText)\n                    && a.inlineCompletion === b.inlineCompletion\n                    && a.suggestItem === b.suggestItem;\n            }\n        }, (reader) => {\n            var _a;\n            const model = this.textModel;\n            const suggestItem = this.selectedSuggestItem.read(reader);\n            if (suggestItem) {\n                const suggestCompletion = suggestItem.toSingleTextEdit().removeCommonPrefix(model);\n                const augmentedCompletion = this._computeAugmentedCompletion(suggestCompletion, reader);\n                const isSuggestionPreviewEnabled = this._suggestPreviewEnabled.read(reader);\n                if (!isSuggestionPreviewEnabled && !augmentedCompletion) {\n                    return undefined;\n                }\n                const edit = (_a = augmentedCompletion === null || augmentedCompletion === void 0 ? void 0 : augmentedCompletion.edit) !== null && _a !== void 0 ? _a : suggestCompletion;\n                const editPreviewLength = augmentedCompletion ? augmentedCompletion.edit.text.length - suggestCompletion.text.length : 0;\n                const mode = this._suggestPreviewMode.read(reader);\n                const cursor = this.cursorPosition.read(reader);\n                const newGhostText = edit.computeGhostText(model, mode, cursor, editPreviewLength);\n                // Show an invisible ghost text to reserve space\n                const ghostText = newGhostText !== null && newGhostText !== void 0 ? newGhostText : new GhostText(edit.range.endLineNumber, []);\n                return { ghostText, inlineCompletion: augmentedCompletion === null || augmentedCompletion === void 0 ? void 0 : augmentedCompletion.completion, suggestItem };\n            }\n            else {\n                if (!this._isActive.read(reader)) {\n                    return undefined;\n                }\n                const item = this.selectedInlineCompletion.read(reader);\n                if (!item) {\n                    return undefined;\n                }\n                const replacement = item.toSingleTextEdit(reader);\n                const mode = this._inlineSuggestMode.read(reader);\n                const cursor = this.cursorPosition.read(reader);\n                const ghostText = replacement.computeGhostText(model, mode, cursor);\n                return ghostText ? { ghostText, inlineCompletion: item, suggestItem: undefined } : undefined;\n            }\n        });\n        this.ghostText = derivedOpts({\n            owner: this,\n            equalityComparer: ghostTextOrReplacementEquals\n        }, reader => {\n            const v = this.state.read(reader);\n            if (!v) {\n                return undefined;\n            }\n            return v.ghostText;\n        });\n        this._register(recomputeInitiallyAndOnChange(this._fetchInlineCompletions));\n        let lastItem = undefined;\n        this._register(autorun(reader => {\n            var _a, _b;\n            /** @description call handleItemDidShow */\n            const item = this.state.read(reader);\n            const completion = item === null || item === void 0 ? void 0 : item.inlineCompletion;\n            if ((completion === null || completion === void 0 ? void 0 : completion.semanticId) !== (lastItem === null || lastItem === void 0 ? void 0 : lastItem.semanticId)) {\n                lastItem = completion;\n                if (completion) {\n                    const i = completion.inlineCompletion;\n                    const src = i.source;\n                    (_b = (_a = src.provider).handleItemDidShow) === null || _b === void 0 ? void 0 : _b.call(_a, src.inlineCompletions, i.sourceInlineCompletion, i.insertText);\n                }\n            }\n        }));\n    }\n    async trigger(tx) {\n        this._isActive.set(true, tx);\n        await this._fetchInlineCompletions.get();\n    }\n    async triggerExplicitly(tx) {\n        subtransaction(tx, tx => {\n            this._isActive.set(true, tx);\n            this._forceUpdateSignal.trigger(tx, InlineCompletionTriggerKind.Explicit);\n        });\n        await this._fetchInlineCompletions.get();\n    }\n    stop(tx) {\n        subtransaction(tx, tx => {\n            this._isActive.set(false, tx);\n            this._source.clear(tx);\n        });\n    }\n    _computeAugmentedCompletion(suggestCompletion, reader) {\n        const model = this.textModel;\n        const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.read(reader);\n        const candidateInlineCompletions = suggestWidgetInlineCompletions\n            ? suggestWidgetInlineCompletions.inlineCompletions\n            : [this.selectedInlineCompletion.read(reader)].filter(isDefined);\n        const augmentedCompletion = mapFindFirst(candidateInlineCompletions, completion => {\n            let r = completion.toSingleTextEdit(reader);\n            r = r.removeCommonPrefix(model, Range.fromPositions(r.range.getStartPosition(), suggestCompletion.range.getEndPosition()));\n            return r.augments(suggestCompletion) ? { edit: r, completion } : undefined;\n        });\n        return augmentedCompletion;\n    }\n    async _deltaSelectedInlineCompletionIndex(delta) {\n        await this.triggerExplicitly();\n        const completions = this._filteredInlineCompletionItems.get() || [];\n        if (completions.length > 0) {\n            const newIdx = (this.selectedInlineCompletionIndex.get() + delta + completions.length) % completions.length;\n            this._selectedInlineCompletionId.set(completions[newIdx].semanticId, undefined);\n        }\n        else {\n            this._selectedInlineCompletionId.set(undefined, undefined);\n        }\n    }\n    async next() {\n        await this._deltaSelectedInlineCompletionIndex(1);\n    }\n    async previous() {\n        await this._deltaSelectedInlineCompletionIndex(-1);\n    }\n    async accept(editor) {\n        var _a;\n        if (editor.getModel() !== this.textModel) {\n            throw new BugIndicatingError();\n        }\n        const state = this.state.get();\n        if (!state || state.ghostText.isEmpty() || !state.inlineCompletion) {\n            return;\n        }\n        const completion = state.inlineCompletion.toInlineCompletion(undefined);\n        editor.pushUndoStop();\n        if (completion.snippetInfo) {\n            editor.executeEdits('inlineSuggestion.accept', [\n                EditOperation.replaceMove(completion.range, ''),\n                ...completion.additionalTextEdits\n            ]);\n            editor.setPosition(completion.snippetInfo.range.getStartPosition());\n            (_a = SnippetController2.get(editor)) === null || _a === void 0 ? void 0 : _a.insert(completion.snippetInfo.snippet, { undoStopBefore: false });\n        }\n        else {\n            editor.executeEdits('inlineSuggestion.accept', [\n                EditOperation.replaceMove(completion.range, completion.insertText),\n                ...completion.additionalTextEdits\n            ]);\n        }\n        if (completion.command) {\n            // Make sure the completion list will not be disposed.\n            completion.source.addRef();\n        }\n        // Reset before invoking the command, since the command might cause a follow up trigger.\n        transaction(tx => {\n            this._source.clear(tx);\n            // Potentially, isActive will get set back to true by the typing or accept inline suggest event\n            // if automatic inline suggestions are enabled.\n            this._isActive.set(false, tx);\n        });\n        if (completion.command) {\n            await this._commandService\n                .executeCommand(completion.command.id, ...(completion.command.arguments || []))\n                .then(undefined, onUnexpectedExternalError);\n            completion.source.removeRef();\n        }\n    }\n    async acceptNextWord(editor) {\n        await this._acceptNext(editor, (pos, text) => {\n            const langId = this.textModel.getLanguageIdAtPosition(pos.lineNumber, pos.column);\n            const config = this._languageConfigurationService.getLanguageConfiguration(langId);\n            const wordRegExp = new RegExp(config.wordDefinition.source, config.wordDefinition.flags.replace('g', ''));\n            const m1 = text.match(wordRegExp);\n            let acceptUntilIndexExclusive = 0;\n            if (m1 && m1.index !== undefined) {\n                if (m1.index === 0) {\n                    acceptUntilIndexExclusive = m1[0].length;\n                }\n                else {\n                    acceptUntilIndexExclusive = m1.index;\n                }\n            }\n            else {\n                acceptUntilIndexExclusive = text.length;\n            }\n            const wsRegExp = /\\s+/g;\n            const m2 = wsRegExp.exec(text);\n            if (m2 && m2.index !== undefined) {\n                if (m2.index + m2[0].length < acceptUntilIndexExclusive) {\n                    acceptUntilIndexExclusive = m2.index + m2[0].length;\n                }\n            }\n            return acceptUntilIndexExclusive;\n        });\n    }\n    async acceptNextLine(editor) {\n        await this._acceptNext(editor, (pos, text) => {\n            const m = text.match(/\\n/);\n            if (m && m.index !== undefined) {\n                return m.index + 1;\n            }\n            return text.length;\n        });\n    }\n    async _acceptNext(editor, getAcceptUntilIndex) {\n        if (editor.getModel() !== this.textModel) {\n            throw new BugIndicatingError();\n        }\n        const state = this.state.get();\n        if (!state || state.ghostText.isEmpty() || !state.inlineCompletion) {\n            return;\n        }\n        const ghostText = state.ghostText;\n        const completion = state.inlineCompletion.toInlineCompletion(undefined);\n        if (completion.snippetInfo || completion.filterText !== completion.insertText) {\n            // not in WYSIWYG mode, partial commit might change completion, thus it is not supported\n            await this.accept(editor);\n            return;\n        }\n        const firstPart = ghostText.parts[0];\n        const position = new Position(ghostText.lineNumber, firstPart.column);\n        const line = firstPart.lines.join('\\n');\n        const acceptUntilIndexExclusive = getAcceptUntilIndex(position, line);\n        if (acceptUntilIndexExclusive === line.length && ghostText.parts.length === 1) {\n            this.accept(editor);\n            return;\n        }\n        const partialText = line.substring(0, acceptUntilIndexExclusive);\n        // Executing the edit might free the completion, so we have to hold a reference on it.\n        completion.source.addRef();\n        try {\n            this._isAcceptingPartially = true;\n            try {\n                editor.pushUndoStop();\n                editor.executeEdits('inlineSuggestion.accept', [\n                    EditOperation.replace(Range.fromPositions(position), partialText),\n                ]);\n                const length = lengthOfText(partialText);\n                editor.setPosition(addPositions(position, length));\n            }\n            finally {\n                this._isAcceptingPartially = false;\n            }\n            if (completion.source.provider.handlePartialAccept) {\n                const acceptedRange = Range.fromPositions(completion.range.getStartPosition(), addPositions(position, lengthOfText(partialText)));\n                // This assumes that the inline completion and the model use the same EOL style.\n                const text = editor.getModel().getValueInRange(acceptedRange, 1 /* EndOfLinePreference.LF */);\n                completion.source.provider.handlePartialAccept(completion.source.inlineCompletions, completion.sourceInlineCompletion, text.length);\n            }\n        }\n        finally {\n            completion.source.removeRef();\n        }\n    }\n    handleSuggestAccepted(item) {\n        var _a, _b;\n        const itemEdit = item.toSingleTextEdit().removeCommonPrefix(this.textModel);\n        const augmentedCompletion = this._computeAugmentedCompletion(itemEdit, undefined);\n        if (!augmentedCompletion) {\n            return;\n        }\n        const inlineCompletion = augmentedCompletion.completion.inlineCompletion;\n        (_b = (_a = inlineCompletion.source.provider).handlePartialAccept) === null || _b === void 0 ? void 0 : _b.call(_a, inlineCompletion.source.inlineCompletions, inlineCompletion.sourceInlineCompletion, itemEdit.text.length);\n    }\n};\nInlineCompletionsModel = __decorate([\n    __param(9, IInstantiationService),\n    __param(10, ICommandService),\n    __param(11, ILanguageConfigurationService)\n], InlineCompletionsModel);\nexport { InlineCompletionsModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}