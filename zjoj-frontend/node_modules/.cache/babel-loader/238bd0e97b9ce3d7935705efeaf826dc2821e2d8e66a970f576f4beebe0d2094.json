{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SingleCursorState } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class ColumnSelection {\n  static columnSelect(config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n    const lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n    const reversed = fromLineNumber > toLineNumber;\n    const isRTL = fromVisibleColumn > toVisibleColumn;\n    const isLTR = fromVisibleColumn < toVisibleColumn;\n    const result = [];\n    // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n    for (let i = 0; i < lineCount; i++) {\n      const lineNumber = fromLineNumber + (reversed ? -i : i);\n      const startColumn = config.columnFromVisibleColumn(model, lineNumber, fromVisibleColumn);\n      const endColumn = config.columnFromVisibleColumn(model, lineNumber, toVisibleColumn);\n      const visibleStartColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, startColumn));\n      const visibleEndColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, endColumn));\n      // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n      if (isLTR) {\n        if (visibleStartColumn > toVisibleColumn) {\n          continue;\n        }\n        if (visibleEndColumn < fromVisibleColumn) {\n          continue;\n        }\n      }\n      if (isRTL) {\n        if (visibleEndColumn > fromVisibleColumn) {\n          continue;\n        }\n        if (visibleStartColumn < toVisibleColumn) {\n          continue;\n        }\n      }\n      result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, endColumn), 0));\n    }\n    if (result.length === 0) {\n      // We are after all the lines, so add cursor at the end of each line\n      for (let i = 0; i < lineCount; i++) {\n        const lineNumber = fromLineNumber + (reversed ? -i : i);\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, maxColumn), 0));\n      }\n    }\n    return {\n      viewStates: result,\n      reversed: reversed,\n      fromLineNumber: fromLineNumber,\n      fromVisualColumn: fromVisibleColumn,\n      toLineNumber: toLineNumber,\n      toVisualColumn: toVisibleColumn\n    };\n  }\n  static columnSelectLeft(config, model, prevColumnSelectData) {\n    let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n    if (toViewVisualColumn > 0) {\n      toViewVisualColumn--;\n    }\n    return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n  }\n  static columnSelectRight(config, model, prevColumnSelectData) {\n    let maxVisualViewColumn = 0;\n    const minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n    const maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n    for (let lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n      const lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n      const lineMaxVisualViewColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, lineMaxViewColumn));\n      maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n    }\n    let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n    if (toViewVisualColumn < maxVisualViewColumn) {\n      toViewVisualColumn++;\n    }\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n  }\n  static columnSelectUp(config, model, prevColumnSelectData, isPaged) {\n    const linesCount = isPaged ? config.pageSize : 1;\n    const toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n  }\n  static columnSelectDown(config, model, prevColumnSelectData, isPaged) {\n    const linesCount = isPaged ? config.pageSize : 1;\n    const toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n  }\n}","map":{"version":3,"names":["SingleCursorState","Position","Range","ColumnSelection","columnSelect","config","model","fromLineNumber","fromVisibleColumn","toLineNumber","toVisibleColumn","lineCount","Math","abs","reversed","isRTL","isLTR","result","i","lineNumber","startColumn","columnFromVisibleColumn","endColumn","visibleStartColumn","visibleColumnFromColumn","visibleEndColumn","push","length","maxColumn","getLineMaxColumn","viewStates","fromVisualColumn","toVisualColumn","columnSelectLeft","prevColumnSelectData","toViewVisualColumn","fromViewLineNumber","fromViewVisualColumn","toViewLineNumber","columnSelectRight","maxVisualViewColumn","minViewLineNumber","min","maxViewLineNumber","max","lineMaxViewColumn","lineMaxVisualViewColumn","columnSelectUp","isPaged","linesCount","pageSize","columnSelectDown","getLineCount"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorColumnSelection.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SingleCursorState } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class ColumnSelection {\n    static columnSelect(config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n        const lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n        const reversed = (fromLineNumber > toLineNumber);\n        const isRTL = (fromVisibleColumn > toVisibleColumn);\n        const isLTR = (fromVisibleColumn < toVisibleColumn);\n        const result = [];\n        // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n        for (let i = 0; i < lineCount; i++) {\n            const lineNumber = fromLineNumber + (reversed ? -i : i);\n            const startColumn = config.columnFromVisibleColumn(model, lineNumber, fromVisibleColumn);\n            const endColumn = config.columnFromVisibleColumn(model, lineNumber, toVisibleColumn);\n            const visibleStartColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, startColumn));\n            const visibleEndColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, endColumn));\n            // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n            if (isLTR) {\n                if (visibleStartColumn > toVisibleColumn) {\n                    continue;\n                }\n                if (visibleEndColumn < fromVisibleColumn) {\n                    continue;\n                }\n            }\n            if (isRTL) {\n                if (visibleEndColumn > fromVisibleColumn) {\n                    continue;\n                }\n                if (visibleStartColumn < toVisibleColumn) {\n                    continue;\n                }\n            }\n            result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, endColumn), 0));\n        }\n        if (result.length === 0) {\n            // We are after all the lines, so add cursor at the end of each line\n            for (let i = 0; i < lineCount; i++) {\n                const lineNumber = fromLineNumber + (reversed ? -i : i);\n                const maxColumn = model.getLineMaxColumn(lineNumber);\n                result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, maxColumn), 0));\n            }\n        }\n        return {\n            viewStates: result,\n            reversed: reversed,\n            fromLineNumber: fromLineNumber,\n            fromVisualColumn: fromVisibleColumn,\n            toLineNumber: toLineNumber,\n            toVisualColumn: toVisibleColumn\n        };\n    }\n    static columnSelectLeft(config, model, prevColumnSelectData) {\n        let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n        if (toViewVisualColumn > 0) {\n            toViewVisualColumn--;\n        }\n        return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n    static columnSelectRight(config, model, prevColumnSelectData) {\n        let maxVisualViewColumn = 0;\n        const minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n        const maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n        for (let lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n            const lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n            const lineMaxVisualViewColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, lineMaxViewColumn));\n            maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n        }\n        let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n        if (toViewVisualColumn < maxVisualViewColumn) {\n            toViewVisualColumn++;\n        }\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n    static columnSelectUp(config, model, prevColumnSelectData, isPaged) {\n        const linesCount = isPaged ? config.pageSize : 1;\n        const toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n    static columnSelectDown(config, model, prevColumnSelectData, isPaged) {\n        const linesCount = isPaged ? config.pageSize : 1;\n        const toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}