{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { match as matchGlobPattern } from '../../base/common/glob.js';\nimport { normalize } from '../../base/common/path.js';\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType) {\n  if (Array.isArray(selector)) {\n    // array -> take max individual value\n    let ret = 0;\n    for (const filter of selector) {\n      const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType);\n      if (value === 10) {\n        return value; // already at the highest\n      }\n      if (value > ret) {\n        ret = value;\n      }\n    }\n    return ret;\n  } else if (typeof selector === 'string') {\n    if (!candidateIsSynchronized) {\n      return 0;\n    }\n    // short-hand notion, desugars to\n    // 'fooLang' -> { language: 'fooLang'}\n    // '*' -> { language: '*' }\n    if (selector === '*') {\n      return 5;\n    } else if (selector === candidateLanguage) {\n      return 10;\n    } else {\n      return 0;\n    }\n  } else if (selector) {\n    // filter -> select accordingly, use defaults for scheme\n    const {\n      language,\n      pattern,\n      scheme,\n      hasAccessToAllModels,\n      notebookType\n    } = selector; // TODO: microsoft/TypeScript#42768\n    if (!candidateIsSynchronized && !hasAccessToAllModels) {\n      return 0;\n    }\n    // selector targets a notebook -> use the notebook uri instead\n    // of the \"normal\" document uri.\n    if (notebookType && candidateNotebookUri) {\n      candidateUri = candidateNotebookUri;\n    }\n    let ret = 0;\n    if (scheme) {\n      if (scheme === candidateUri.scheme) {\n        ret = 10;\n      } else if (scheme === '*') {\n        ret = 5;\n      } else {\n        return 0;\n      }\n    }\n    if (language) {\n      if (language === candidateLanguage) {\n        ret = 10;\n      } else if (language === '*') {\n        ret = Math.max(ret, 5);\n      } else {\n        return 0;\n      }\n    }\n    if (notebookType) {\n      if (notebookType === candidateNotebookType) {\n        ret = 10;\n      } else if (notebookType === '*' && candidateNotebookType !== undefined) {\n        ret = Math.max(ret, 5);\n      } else {\n        return 0;\n      }\n    }\n    if (pattern) {\n      let normalizedPattern;\n      if (typeof pattern === 'string') {\n        normalizedPattern = pattern;\n      } else {\n        // Since this pattern has a `base` property, we need\n        // to normalize this path first before passing it on\n        // because we will compare it against `Uri.fsPath`\n        // which uses platform specific separators.\n        // Refs: https://github.com/microsoft/vscode/issues/99938\n        normalizedPattern = {\n          ...pattern,\n          base: normalize(pattern.base)\n        };\n      }\n      if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n        ret = 10;\n      } else {\n        return 0;\n      }\n    }\n    return ret;\n  } else {\n    return 0;\n  }\n}","map":{"version":3,"names":["match","matchGlobPattern","normalize","score","selector","candidateUri","candidateLanguage","candidateIsSynchronized","candidateNotebookUri","candidateNotebookType","Array","isArray","ret","filter","value","language","pattern","scheme","hasAccessToAllModels","notebookType","Math","max","undefined","normalizedPattern","base","fsPath"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/languageSelector.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { match as matchGlobPattern } from '../../base/common/glob.js';\nimport { normalize } from '../../base/common/path.js';\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType) {\n    if (Array.isArray(selector)) {\n        // array -> take max individual value\n        let ret = 0;\n        for (const filter of selector) {\n            const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType);\n            if (value === 10) {\n                return value; // already at the highest\n            }\n            if (value > ret) {\n                ret = value;\n            }\n        }\n        return ret;\n    }\n    else if (typeof selector === 'string') {\n        if (!candidateIsSynchronized) {\n            return 0;\n        }\n        // short-hand notion, desugars to\n        // 'fooLang' -> { language: 'fooLang'}\n        // '*' -> { language: '*' }\n        if (selector === '*') {\n            return 5;\n        }\n        else if (selector === candidateLanguage) {\n            return 10;\n        }\n        else {\n            return 0;\n        }\n    }\n    else if (selector) {\n        // filter -> select accordingly, use defaults for scheme\n        const { language, pattern, scheme, hasAccessToAllModels, notebookType } = selector; // TODO: microsoft/TypeScript#42768\n        if (!candidateIsSynchronized && !hasAccessToAllModels) {\n            return 0;\n        }\n        // selector targets a notebook -> use the notebook uri instead\n        // of the \"normal\" document uri.\n        if (notebookType && candidateNotebookUri) {\n            candidateUri = candidateNotebookUri;\n        }\n        let ret = 0;\n        if (scheme) {\n            if (scheme === candidateUri.scheme) {\n                ret = 10;\n            }\n            else if (scheme === '*') {\n                ret = 5;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (language) {\n            if (language === candidateLanguage) {\n                ret = 10;\n            }\n            else if (language === '*') {\n                ret = Math.max(ret, 5);\n            }\n            else {\n                return 0;\n            }\n        }\n        if (notebookType) {\n            if (notebookType === candidateNotebookType) {\n                ret = 10;\n            }\n            else if (notebookType === '*' && candidateNotebookType !== undefined) {\n                ret = Math.max(ret, 5);\n            }\n            else {\n                return 0;\n            }\n        }\n        if (pattern) {\n            let normalizedPattern;\n            if (typeof pattern === 'string') {\n                normalizedPattern = pattern;\n            }\n            else {\n                // Since this pattern has a `base` property, we need\n                // to normalize this path first before passing it on\n                // because we will compare it against `Uri.fsPath`\n                // which uses platform specific separators.\n                // Refs: https://github.com/microsoft/vscode/issues/99938\n                normalizedPattern = { ...pattern, base: normalize(pattern.base) };\n            }\n            if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n                ret = 10;\n            }\n            else {\n                return 0;\n            }\n        }\n        return ret;\n    }\n    else {\n        return 0;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}