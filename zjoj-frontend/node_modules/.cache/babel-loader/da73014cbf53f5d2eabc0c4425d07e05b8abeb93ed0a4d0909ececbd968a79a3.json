{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { editorDimmedLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    this._readConfig();\n    this._lastCursorModelPosition = new Position(1, 1);\n    this._renderResult = null;\n    this._activeLineNumber = 1;\n    this._context.addEventHandler(this);\n  }\n  _readConfig() {\n    const options = this._context.configuration.options;\n    this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n    const lineNumbers = options.get(67 /* EditorOption.lineNumbers */);\n    this._renderLineNumbers = lineNumbers.renderType;\n    this._renderCustomLineNumbers = lineNumbers.renderFn;\n    this._renderFinalNewline = options.get(94 /* EditorOption.renderFinalNewline */);\n    const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n    this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n    this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n  }\n  dispose() {\n    this._context.removeEventHandler(this);\n    this._renderResult = null;\n    super.dispose();\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    this._readConfig();\n    return true;\n  }\n  onCursorStateChanged(e) {\n    const primaryViewPosition = e.selections[0].getPosition();\n    this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n    let shouldRender = false;\n    if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n      this._activeLineNumber = primaryViewPosition.lineNumber;\n      shouldRender = true;\n    }\n    if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */ || this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n      shouldRender = true;\n    }\n    return shouldRender;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLinesChanged(e) {\n    return true;\n  }\n  onLinesDeleted(e) {\n    return true;\n  }\n  onLinesInserted(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    return e.scrollTopChanged;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  // --- end event handlers\n  _getLineRenderLineNumber(viewLineNumber) {\n    const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n    if (modelPosition.column !== 1) {\n      return '';\n    }\n    const modelLineNumber = modelPosition.lineNumber;\n    if (this._renderCustomLineNumbers) {\n      return this._renderCustomLineNumbers(modelLineNumber);\n    }\n    if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */) {\n      const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n      if (diff === 0) {\n        return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n      }\n      return String(diff);\n    }\n    if (this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n      if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n        return String(modelLineNumber);\n      }\n      if (modelLineNumber % 10 === 0) {\n        return String(modelLineNumber);\n      }\n      return '';\n    }\n    return String(modelLineNumber);\n  }\n  prepareRender(ctx) {\n    if (this._renderLineNumbers === 0 /* RenderLineNumbersType.Off */) {\n      this._renderResult = null;\n      return;\n    }\n    const lineHeightClassName = platform.isLinux ? this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd' : '';\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    const lineCount = this._context.viewModel.getLineCount();\n    const output = [];\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      const renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n      if (!renderLineNumber) {\n        output[lineIndex] = '';\n        continue;\n      }\n      let extraClassName = '';\n      if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n        // this is the last line\n        if (this._renderFinalNewline === 'off') {\n          output[lineIndex] = '';\n          continue;\n        }\n        if (this._renderFinalNewline === 'dimmed') {\n          extraClassName = ' dimmed-line-number';\n        }\n      }\n      if (lineNumber === this._activeLineNumber) {\n        extraClassName = ' active-line-number';\n      }\n      output[lineIndex] = `<div class=\"${LineNumbersOverlay.CLASS_NAME}${lineHeightClassName}${extraClassName}\" style=\"left:${this._lineNumbersLeft}px;width:${this._lineNumbersWidth}px;\">${renderLineNumber}</div>`;\n    }\n    this._renderResult = output;\n  }\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n    const lineIndex = lineNumber - startLineNumber;\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n    return this._renderResult[lineIndex];\n  }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\nregisterThemingParticipant((theme, collector) => {\n  const editorLineNumbersColor = theme.getColor(editorLineNumbers);\n  const editorDimmedLineNumberColor = theme.getColor(editorDimmedLineNumber);\n  if (editorDimmedLineNumberColor) {\n    collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorDimmedLineNumberColor}; }`);\n  } else if (editorLineNumbersColor) {\n    collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorLineNumbersColor.transparent(0.4)}; }`);\n  }\n});","map":{"version":3,"names":["platform","DynamicViewOverlay","Position","registerThemingParticipant","editorDimmedLineNumber","editorLineNumbers","LineNumbersOverlay","constructor","context","_context","_readConfig","_lastCursorModelPosition","_renderResult","_activeLineNumber","addEventHandler","options","configuration","_lineHeight","get","lineNumbers","_renderLineNumbers","renderType","_renderCustomLineNumbers","renderFn","_renderFinalNewline","layoutInfo","_lineNumbersLeft","lineNumbersLeft","_lineNumbersWidth","lineNumbersWidth","dispose","removeEventHandler","onConfigurationChanged","e","onCursorStateChanged","primaryViewPosition","selections","getPosition","viewModel","coordinatesConverter","convertViewPositionToModelPosition","shouldRender","lineNumber","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","_getLineRenderLineNumber","viewLineNumber","modelPosition","column","modelLineNumber","diff","Math","abs","String","prepareRender","ctx","lineHeightClassName","isLinux","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","lineCount","getLineCount","output","lineIndex","renderLineNumber","extraClassName","getLineLength","CLASS_NAME","render","length","theme","collector","editorLineNumbersColor","getColor","editorDimmedLineNumberColor","addRule","transparent"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { editorDimmedLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._readConfig();\n        this._lastCursorModelPosition = new Position(1, 1);\n        this._renderResult = null;\n        this._activeLineNumber = 1;\n        this._context.addEventHandler(this);\n    }\n    _readConfig() {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        const lineNumbers = options.get(67 /* EditorOption.lineNumbers */);\n        this._renderLineNumbers = lineNumbers.renderType;\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\n        this._renderFinalNewline = options.get(94 /* EditorOption.renderFinalNewline */);\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        this._readConfig();\n        return true;\n    }\n    onCursorStateChanged(e) {\n        const primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        let shouldRender = false;\n        if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n            this._activeLineNumber = primaryViewPosition.lineNumber;\n            shouldRender = true;\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */ || this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n        const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        const modelLineNumber = modelPosition.lineNumber;\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */) {\n            const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n            if (diff === 0) {\n                return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n            }\n            return String(diff);\n        }\n        if (this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n        if (this._renderLineNumbers === 0 /* RenderLineNumbersType.Off */) {\n            this._renderResult = null;\n            return;\n        }\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const lineCount = this._context.viewModel.getLineCount();\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            if (!renderLineNumber) {\n                output[lineIndex] = '';\n                continue;\n            }\n            let extraClassName = '';\n            if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n                // this is the last line\n                if (this._renderFinalNewline === 'off') {\n                    output[lineIndex] = '';\n                    continue;\n                }\n                if (this._renderFinalNewline === 'dimmed') {\n                    extraClassName = ' dimmed-line-number';\n                }\n            }\n            if (lineNumber === this._activeLineNumber) {\n                extraClassName = ' active-line-number';\n            }\n            output[lineIndex] = (`<div class=\"${LineNumbersOverlay.CLASS_NAME}${lineHeightClassName}${extraClassName}\" style=\"left:${this._lineNumbersLeft}px;width:${this._lineNumbersWidth}px;\">${renderLineNumber}</div>`);\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\nregisterThemingParticipant((theme, collector) => {\n    const editorLineNumbersColor = theme.getColor(editorLineNumbers);\n    const editorDimmedLineNumberColor = theme.getColor(editorDimmedLineNumber);\n    if (editorDimmedLineNumberColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorDimmedLineNumberColor}; }`);\n    }\n    else if (editorLineNumbersColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorLineNumbersColor.transparent(0.4)}; }`);\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}