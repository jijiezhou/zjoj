{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\nexport default (function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"yaml\", function () {\n    var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n    var keywordRegex = new RegExp(\"\\\\b((\" + cons.join(\")|(\") + \"))$\", 'i');\n    return {\n      token: function (stream, state) {\n        var ch = stream.peek();\n        var esc = state.escaped;\n        state.escaped = false;\n        /* comments */\n        if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n        if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/)) return \"string\";\n        if (state.literal && stream.indentation() > state.keyCol) {\n          stream.skipToEnd();\n          return \"string\";\n        } else if (state.literal) {\n          state.literal = false;\n        }\n        if (stream.sol()) {\n          state.keyCol = 0;\n          state.pair = false;\n          state.pairStart = false;\n          /* document start */\n          if (stream.match('---')) {\n            return \"def\";\n          }\n          /* document end */\n          if (stream.match('...')) {\n            return \"def\";\n          }\n          /* array list item */\n          if (stream.match(/\\s*-\\s+/)) {\n            return 'meta';\n          }\n        }\n        /* inline pairs/lists */\n        if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n          if (ch == '{') state.inlinePairs++;else if (ch == '}') state.inlinePairs--;else if (ch == '[') state.inlineList++;else state.inlineList--;\n          return 'meta';\n        }\n\n        /* list separator */\n        if (state.inlineList > 0 && !esc && ch == ',') {\n          stream.next();\n          return 'meta';\n        }\n        /* pairs separator */\n        if (state.inlinePairs > 0 && !esc && ch == ',') {\n          state.keyCol = 0;\n          state.pair = false;\n          state.pairStart = false;\n          stream.next();\n          return 'meta';\n        }\n\n        /* start of value of a pair */\n        if (state.pairStart) {\n          /* block literals */\n          if (stream.match(/^\\s*(\\||\\>)\\s*/)) {\n            state.literal = true;\n            return 'meta';\n          }\n          ;\n          /* references */\n          if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) {\n            return 'variable-2';\n          }\n          /* numbers */\n          if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) {\n            return 'number';\n          }\n          if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) {\n            return 'number';\n          }\n          /* keywords */\n          if (stream.match(keywordRegex)) {\n            return 'keyword';\n          }\n        }\n\n        /* pairs (associative arrays) -> key */\n        if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n          state.pair = true;\n          state.keyCol = stream.indentation();\n          return \"atom\";\n        }\n        if (state.pair && stream.match(/^:\\s*/)) {\n          state.pairStart = true;\n          return 'meta';\n        }\n\n        /* nothing found, continue */\n        state.pairStart = false;\n        state.escaped = ch == '\\\\';\n        stream.next();\n        return null;\n      },\n      startState: function () {\n        return {\n          pair: false,\n          pairStart: false,\n          keyCol: 0,\n          inlinePairs: 0,\n          inlineList: 0,\n          literal: false,\n          escaped: false\n        };\n      },\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\n  CodeMirror.defineMIME(\"text/yaml\", \"yaml\");\n});","map":{"version":3,"names":["CodeMirror","defineMode","cons","keywordRegex","RegExp","join","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","lineComment","fold","defineMIME"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/codemirror-ssr/mode/yaml/yaml.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\nexport default (function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"yaml\", function() {\n\n  var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n  var keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\n  return {\n    token: function(stream, state) {\n      var ch = stream.peek();\n      var esc = state.escaped;\n      state.escaped = false;\n      /* comments */\n      if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n        return \"string\";\n\n      if (state.literal && stream.indentation() > state.keyCol) {\n        stream.skipToEnd(); return \"string\";\n      } else if (state.literal) { state.literal = false; }\n      if (stream.sol()) {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        /* document start */\n        if(stream.match('---')) { return \"def\"; }\n        /* document end */\n        if (stream.match('...')) { return \"def\"; }\n        /* array list item */\n        if (stream.match(/\\s*-\\s+/)) { return 'meta'; }\n      }\n      /* inline pairs/lists */\n      if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n        if (ch == '{')\n          state.inlinePairs++;\n        else if (ch == '}')\n          state.inlinePairs--;\n        else if (ch == '[')\n          state.inlineList++;\n        else\n          state.inlineList--;\n        return 'meta';\n      }\n\n      /* list separator */\n      if (state.inlineList > 0 && !esc && ch == ',') {\n        stream.next();\n        return 'meta';\n      }\n      /* pairs separator */\n      if (state.inlinePairs > 0 && !esc && ch == ',') {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        stream.next();\n        return 'meta';\n      }\n\n      /* start of value of a pair */\n      if (state.pairStart) {\n        /* block literals */\n        if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n        /* references */\n        if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable-2'; }\n        /* numbers */\n        if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n        if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n        /* keywords */\n        if (stream.match(keywordRegex)) { return 'keyword'; }\n      }\n\n      /* pairs (associative arrays) -> key */\n      if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n        state.pair = true;\n        state.keyCol = stream.indentation();\n        return \"atom\";\n      }\n      if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n      /* nothing found, continue */\n      state.pairStart = false;\n      state.escaped = (ch == '\\\\');\n      stream.next();\n      return null;\n    },\n    startState: function() {\n      return {\n        pair: false,\n        pairStart: false,\n        keyCol: 0,\n        inlinePairs: 0,\n        inlineList: 0,\n        literal: false,\n        escaped: false\n      };\n    },\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\nCodeMirror.defineMIME(\"text/yaml\", \"yaml\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}