{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { computeIndentLevel } from '../../../common/model/utils.js';\nimport { FoldingRegions, MAX_LINE_NUMBER } from './foldingRanges.js';\nconst MAX_FOLDING_REGIONS_FOR_INDENT_DEFAULT = 5000;\nconst ID_INDENT_PROVIDER = 'indent';\nexport class IndentRangeProvider {\n  constructor(editorModel, languageConfigurationService, foldingRangesLimit) {\n    this.editorModel = editorModel;\n    this.languageConfigurationService = languageConfigurationService;\n    this.foldingRangesLimit = foldingRangesLimit;\n    this.id = ID_INDENT_PROVIDER;\n  }\n  dispose() {}\n  compute(cancelationToken) {\n    const foldingRules = this.languageConfigurationService.getLanguageConfiguration(this.editorModel.getLanguageId()).foldingRules;\n    const offSide = foldingRules && !!foldingRules.offSide;\n    const markers = foldingRules && foldingRules.markers;\n    return Promise.resolve(computeRanges(this.editorModel, offSide, markers, this.foldingRangesLimit));\n  }\n}\n// public only for testing\nexport class RangesCollector {\n  constructor(foldingRangesLimit) {\n    this._startIndexes = [];\n    this._endIndexes = [];\n    this._indentOccurrences = [];\n    this._length = 0;\n    this._foldingRangesLimit = foldingRangesLimit;\n  }\n  insertFirst(startLineNumber, endLineNumber, indent) {\n    if (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\n      return;\n    }\n    const index = this._length;\n    this._startIndexes[index] = startLineNumber;\n    this._endIndexes[index] = endLineNumber;\n    this._length++;\n    if (indent < 1000) {\n      this._indentOccurrences[indent] = (this._indentOccurrences[indent] || 0) + 1;\n    }\n  }\n  toIndentRanges(model) {\n    const limit = this._foldingRangesLimit.limit;\n    if (this._length <= limit) {\n      this._foldingRangesLimit.update(this._length, false);\n      // reverse and create arrays of the exact length\n      const startIndexes = new Uint32Array(this._length);\n      const endIndexes = new Uint32Array(this._length);\n      for (let i = this._length - 1, k = 0; i >= 0; i--, k++) {\n        startIndexes[k] = this._startIndexes[i];\n        endIndexes[k] = this._endIndexes[i];\n      }\n      return new FoldingRegions(startIndexes, endIndexes);\n    } else {\n      this._foldingRangesLimit.update(this._length, limit);\n      let entries = 0;\n      let maxIndent = this._indentOccurrences.length;\n      for (let i = 0; i < this._indentOccurrences.length; i++) {\n        const n = this._indentOccurrences[i];\n        if (n) {\n          if (n + entries > limit) {\n            maxIndent = i;\n            break;\n          }\n          entries += n;\n        }\n      }\n      const tabSize = model.getOptions().tabSize;\n      // reverse and create arrays of the exact length\n      const startIndexes = new Uint32Array(limit);\n      const endIndexes = new Uint32Array(limit);\n      for (let i = this._length - 1, k = 0; i >= 0; i--) {\n        const startIndex = this._startIndexes[i];\n        const lineContent = model.getLineContent(startIndex);\n        const indent = computeIndentLevel(lineContent, tabSize);\n        if (indent < maxIndent || indent === maxIndent && entries++ < limit) {\n          startIndexes[k] = startIndex;\n          endIndexes[k] = this._endIndexes[i];\n          k++;\n        }\n      }\n      return new FoldingRegions(startIndexes, endIndexes);\n    }\n  }\n}\nconst foldingRangesLimitDefault = {\n  limit: MAX_FOLDING_REGIONS_FOR_INDENT_DEFAULT,\n  update: () => {}\n};\nexport function computeRanges(model, offSide, markers, foldingRangesLimit = foldingRangesLimitDefault) {\n  const tabSize = model.getOptions().tabSize;\n  const result = new RangesCollector(foldingRangesLimit);\n  let pattern = undefined;\n  if (markers) {\n    pattern = new RegExp(`(${markers.start.source})|(?:${markers.end.source})`);\n  }\n  const previousRegions = [];\n  const line = model.getLineCount() + 1;\n  previousRegions.push({\n    indent: -1,\n    endAbove: line,\n    line\n  }); // sentinel, to make sure there's at least one entry\n  for (let line = model.getLineCount(); line > 0; line--) {\n    const lineContent = model.getLineContent(line);\n    const indent = computeIndentLevel(lineContent, tabSize);\n    let previous = previousRegions[previousRegions.length - 1];\n    if (indent === -1) {\n      if (offSide) {\n        // for offSide languages, empty lines are associated to the previous block\n        // note: the next block is already written to the results, so this only\n        // impacts the end position of the block before\n        previous.endAbove = line;\n      }\n      continue; // only whitespace\n    }\n    let m;\n    if (pattern && (m = lineContent.match(pattern))) {\n      // folding pattern match\n      if (m[1]) {\n        // start pattern match\n        // discard all regions until the folding pattern\n        let i = previousRegions.length - 1;\n        while (i > 0 && previousRegions[i].indent !== -2) {\n          i--;\n        }\n        if (i > 0) {\n          previousRegions.length = i + 1;\n          previous = previousRegions[i];\n          // new folding range from pattern, includes the end line\n          result.insertFirst(line, previous.line, indent);\n          previous.line = line;\n          previous.indent = indent;\n          previous.endAbove = line;\n          continue;\n        } else {\n          // no end marker found, treat line as a regular line\n        }\n      } else {\n        // end pattern match\n        previousRegions.push({\n          indent: -2,\n          endAbove: line,\n          line\n        });\n        continue;\n      }\n    }\n    if (previous.indent > indent) {\n      // discard all regions with larger indent\n      do {\n        previousRegions.pop();\n        previous = previousRegions[previousRegions.length - 1];\n      } while (previous.indent > indent);\n      // new folding range\n      const endLineNumber = previous.endAbove - 1;\n      if (endLineNumber - line >= 1) {\n        // needs at east size 1\n        result.insertFirst(line, endLineNumber, indent);\n      }\n    }\n    if (previous.indent === indent) {\n      previous.endAbove = line;\n    } else {\n      // previous.indent < indent\n      // new region with a bigger indent\n      previousRegions.push({\n        indent,\n        endAbove: line,\n        line\n      });\n    }\n  }\n  return result.toIndentRanges(model);\n}","map":{"version":3,"names":["computeIndentLevel","FoldingRegions","MAX_LINE_NUMBER","MAX_FOLDING_REGIONS_FOR_INDENT_DEFAULT","ID_INDENT_PROVIDER","IndentRangeProvider","constructor","editorModel","languageConfigurationService","foldingRangesLimit","id","dispose","compute","cancelationToken","foldingRules","getLanguageConfiguration","getLanguageId","offSide","markers","Promise","resolve","computeRanges","RangesCollector","_startIndexes","_endIndexes","_indentOccurrences","_length","_foldingRangesLimit","insertFirst","startLineNumber","endLineNumber","indent","index","toIndentRanges","model","limit","update","startIndexes","Uint32Array","endIndexes","i","k","entries","maxIndent","length","n","tabSize","getOptions","startIndex","lineContent","getLineContent","foldingRangesLimitDefault","result","pattern","undefined","RegExp","start","source","end","previousRegions","line","getLineCount","push","endAbove","previous","m","match","pop"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/folding/browser/indentRangeProvider.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { computeIndentLevel } from '../../../common/model/utils.js';\nimport { FoldingRegions, MAX_LINE_NUMBER } from './foldingRanges.js';\nconst MAX_FOLDING_REGIONS_FOR_INDENT_DEFAULT = 5000;\nconst ID_INDENT_PROVIDER = 'indent';\nexport class IndentRangeProvider {\n    constructor(editorModel, languageConfigurationService, foldingRangesLimit) {\n        this.editorModel = editorModel;\n        this.languageConfigurationService = languageConfigurationService;\n        this.foldingRangesLimit = foldingRangesLimit;\n        this.id = ID_INDENT_PROVIDER;\n    }\n    dispose() { }\n    compute(cancelationToken) {\n        const foldingRules = this.languageConfigurationService.getLanguageConfiguration(this.editorModel.getLanguageId()).foldingRules;\n        const offSide = foldingRules && !!foldingRules.offSide;\n        const markers = foldingRules && foldingRules.markers;\n        return Promise.resolve(computeRanges(this.editorModel, offSide, markers, this.foldingRangesLimit));\n    }\n}\n// public only for testing\nexport class RangesCollector {\n    constructor(foldingRangesLimit) {\n        this._startIndexes = [];\n        this._endIndexes = [];\n        this._indentOccurrences = [];\n        this._length = 0;\n        this._foldingRangesLimit = foldingRangesLimit;\n    }\n    insertFirst(startLineNumber, endLineNumber, indent) {\n        if (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\n            return;\n        }\n        const index = this._length;\n        this._startIndexes[index] = startLineNumber;\n        this._endIndexes[index] = endLineNumber;\n        this._length++;\n        if (indent < 1000) {\n            this._indentOccurrences[indent] = (this._indentOccurrences[indent] || 0) + 1;\n        }\n    }\n    toIndentRanges(model) {\n        const limit = this._foldingRangesLimit.limit;\n        if (this._length <= limit) {\n            this._foldingRangesLimit.update(this._length, false);\n            // reverse and create arrays of the exact length\n            const startIndexes = new Uint32Array(this._length);\n            const endIndexes = new Uint32Array(this._length);\n            for (let i = this._length - 1, k = 0; i >= 0; i--, k++) {\n                startIndexes[k] = this._startIndexes[i];\n                endIndexes[k] = this._endIndexes[i];\n            }\n            return new FoldingRegions(startIndexes, endIndexes);\n        }\n        else {\n            this._foldingRangesLimit.update(this._length, limit);\n            let entries = 0;\n            let maxIndent = this._indentOccurrences.length;\n            for (let i = 0; i < this._indentOccurrences.length; i++) {\n                const n = this._indentOccurrences[i];\n                if (n) {\n                    if (n + entries > limit) {\n                        maxIndent = i;\n                        break;\n                    }\n                    entries += n;\n                }\n            }\n            const tabSize = model.getOptions().tabSize;\n            // reverse and create arrays of the exact length\n            const startIndexes = new Uint32Array(limit);\n            const endIndexes = new Uint32Array(limit);\n            for (let i = this._length - 1, k = 0; i >= 0; i--) {\n                const startIndex = this._startIndexes[i];\n                const lineContent = model.getLineContent(startIndex);\n                const indent = computeIndentLevel(lineContent, tabSize);\n                if (indent < maxIndent || (indent === maxIndent && entries++ < limit)) {\n                    startIndexes[k] = startIndex;\n                    endIndexes[k] = this._endIndexes[i];\n                    k++;\n                }\n            }\n            return new FoldingRegions(startIndexes, endIndexes);\n        }\n    }\n}\nconst foldingRangesLimitDefault = {\n    limit: MAX_FOLDING_REGIONS_FOR_INDENT_DEFAULT,\n    update: () => { }\n};\nexport function computeRanges(model, offSide, markers, foldingRangesLimit = foldingRangesLimitDefault) {\n    const tabSize = model.getOptions().tabSize;\n    const result = new RangesCollector(foldingRangesLimit);\n    let pattern = undefined;\n    if (markers) {\n        pattern = new RegExp(`(${markers.start.source})|(?:${markers.end.source})`);\n    }\n    const previousRegions = [];\n    const line = model.getLineCount() + 1;\n    previousRegions.push({ indent: -1, endAbove: line, line }); // sentinel, to make sure there's at least one entry\n    for (let line = model.getLineCount(); line > 0; line--) {\n        const lineContent = model.getLineContent(line);\n        const indent = computeIndentLevel(lineContent, tabSize);\n        let previous = previousRegions[previousRegions.length - 1];\n        if (indent === -1) {\n            if (offSide) {\n                // for offSide languages, empty lines are associated to the previous block\n                // note: the next block is already written to the results, so this only\n                // impacts the end position of the block before\n                previous.endAbove = line;\n            }\n            continue; // only whitespace\n        }\n        let m;\n        if (pattern && (m = lineContent.match(pattern))) {\n            // folding pattern match\n            if (m[1]) { // start pattern match\n                // discard all regions until the folding pattern\n                let i = previousRegions.length - 1;\n                while (i > 0 && previousRegions[i].indent !== -2) {\n                    i--;\n                }\n                if (i > 0) {\n                    previousRegions.length = i + 1;\n                    previous = previousRegions[i];\n                    // new folding range from pattern, includes the end line\n                    result.insertFirst(line, previous.line, indent);\n                    previous.line = line;\n                    previous.indent = indent;\n                    previous.endAbove = line;\n                    continue;\n                }\n                else {\n                    // no end marker found, treat line as a regular line\n                }\n            }\n            else { // end pattern match\n                previousRegions.push({ indent: -2, endAbove: line, line });\n                continue;\n            }\n        }\n        if (previous.indent > indent) {\n            // discard all regions with larger indent\n            do {\n                previousRegions.pop();\n                previous = previousRegions[previousRegions.length - 1];\n            } while (previous.indent > indent);\n            // new folding range\n            const endLineNumber = previous.endAbove - 1;\n            if (endLineNumber - line >= 1) { // needs at east size 1\n                result.insertFirst(line, endLineNumber, indent);\n            }\n        }\n        if (previous.indent === indent) {\n            previous.endAbove = line;\n        }\n        else { // previous.indent < indent\n            // new region with a bigger indent\n            previousRegions.push({ indent, endAbove: line, line });\n        }\n    }\n    return result.toIndentRanges(model);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}