{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction resetGlobalRegex(reg) {\n  if (reg.global) {\n    reg.lastIndex = 0;\n  }\n  return true;\n}\nexport class IndentRulesSupport {\n  constructor(indentationRules) {\n    this._indentationRules = indentationRules;\n  }\n  shouldIncrease(text) {\n    if (this._indentationRules) {\n      if (this._indentationRules.increaseIndentPattern && resetGlobalRegex(this._indentationRules.increaseIndentPattern) && this._indentationRules.increaseIndentPattern.test(text)) {\n        return true;\n      }\n      // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n      // \treturn true;\n      // }\n    }\n    return false;\n  }\n  shouldDecrease(text) {\n    if (this._indentationRules && this._indentationRules.decreaseIndentPattern && resetGlobalRegex(this._indentationRules.decreaseIndentPattern) && this._indentationRules.decreaseIndentPattern.test(text)) {\n      return true;\n    }\n    return false;\n  }\n  shouldIndentNextLine(text) {\n    if (this._indentationRules && this._indentationRules.indentNextLinePattern && resetGlobalRegex(this._indentationRules.indentNextLinePattern) && this._indentationRules.indentNextLinePattern.test(text)) {\n      return true;\n    }\n    return false;\n  }\n  shouldIgnore(text) {\n    // the text matches `unIndentedLinePattern`\n    if (this._indentationRules && this._indentationRules.unIndentedLinePattern && resetGlobalRegex(this._indentationRules.unIndentedLinePattern) && this._indentationRules.unIndentedLinePattern.test(text)) {\n      return true;\n    }\n    return false;\n  }\n  getIndentMetadata(text) {\n    let ret = 0;\n    if (this.shouldIncrease(text)) {\n      ret += 1 /* IndentConsts.INCREASE_MASK */;\n    }\n    if (this.shouldDecrease(text)) {\n      ret += 2 /* IndentConsts.DECREASE_MASK */;\n    }\n    if (this.shouldIndentNextLine(text)) {\n      ret += 4 /* IndentConsts.INDENT_NEXTLINE_MASK */;\n    }\n    if (this.shouldIgnore(text)) {\n      ret += 8 /* IndentConsts.UNINDENT_MASK */;\n    }\n    return ret;\n  }\n}","map":{"version":3,"names":["resetGlobalRegex","reg","global","lastIndex","IndentRulesSupport","constructor","indentationRules","_indentationRules","shouldIncrease","text","increaseIndentPattern","test","shouldDecrease","decreaseIndentPattern","shouldIndentNextLine","indentNextLinePattern","shouldIgnore","unIndentedLinePattern","getIndentMetadata","ret"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/indentRules.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction resetGlobalRegex(reg) {\n    if (reg.global) {\n        reg.lastIndex = 0;\n    }\n    return true;\n}\nexport class IndentRulesSupport {\n    constructor(indentationRules) {\n        this._indentationRules = indentationRules;\n    }\n    shouldIncrease(text) {\n        if (this._indentationRules) {\n            if (this._indentationRules.increaseIndentPattern && resetGlobalRegex(this._indentationRules.increaseIndentPattern) && this._indentationRules.increaseIndentPattern.test(text)) {\n                return true;\n            }\n            // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n            // \treturn true;\n            // }\n        }\n        return false;\n    }\n    shouldDecrease(text) {\n        if (this._indentationRules && this._indentationRules.decreaseIndentPattern && resetGlobalRegex(this._indentationRules.decreaseIndentPattern) && this._indentationRules.decreaseIndentPattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    shouldIndentNextLine(text) {\n        if (this._indentationRules && this._indentationRules.indentNextLinePattern && resetGlobalRegex(this._indentationRules.indentNextLinePattern) && this._indentationRules.indentNextLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    shouldIgnore(text) {\n        // the text matches `unIndentedLinePattern`\n        if (this._indentationRules && this._indentationRules.unIndentedLinePattern && resetGlobalRegex(this._indentationRules.unIndentedLinePattern) && this._indentationRules.unIndentedLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    getIndentMetadata(text) {\n        let ret = 0;\n        if (this.shouldIncrease(text)) {\n            ret += 1 /* IndentConsts.INCREASE_MASK */;\n        }\n        if (this.shouldDecrease(text)) {\n            ret += 2 /* IndentConsts.DECREASE_MASK */;\n        }\n        if (this.shouldIndentNextLine(text)) {\n            ret += 4 /* IndentConsts.INDENT_NEXTLINE_MASK */;\n        }\n        if (this.shouldIgnore(text)) {\n            ret += 8 /* IndentConsts.UNINDENT_MASK */;\n        }\n        return ret;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,gBAAgBA,CAACC,GAAG,EAAE;EAC3B,IAAIA,GAAG,CAACC,MAAM,EAAE;IACZD,GAAG,CAACE,SAAS,GAAG,CAAC;EACrB;EACA,OAAO,IAAI;AACf;AACA,OAAO,MAAMC,kBAAkB,CAAC;EAC5BC,WAAWA,CAACC,gBAAgB,EAAE;IAC1B,IAAI,CAACC,iBAAiB,GAAGD,gBAAgB;EAC7C;EACAE,cAAcA,CAACC,IAAI,EAAE;IACjB,IAAI,IAAI,CAACF,iBAAiB,EAAE;MACxB,IAAI,IAAI,CAACA,iBAAiB,CAACG,qBAAqB,IAAIV,gBAAgB,CAAC,IAAI,CAACO,iBAAiB,CAACG,qBAAqB,CAAC,IAAI,IAAI,CAACH,iBAAiB,CAACG,qBAAqB,CAACC,IAAI,CAACF,IAAI,CAAC,EAAE;QAC3K,OAAO,IAAI;MACf;MACA;MACA;MACA;IACJ;IACA,OAAO,KAAK;EAChB;EACAG,cAAcA,CAACH,IAAI,EAAE;IACjB,IAAI,IAAI,CAACF,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACM,qBAAqB,IAAIb,gBAAgB,CAAC,IAAI,CAACO,iBAAiB,CAACM,qBAAqB,CAAC,IAAI,IAAI,CAACN,iBAAiB,CAACM,qBAAqB,CAACF,IAAI,CAACF,IAAI,CAAC,EAAE;MACrM,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;EACAK,oBAAoBA,CAACL,IAAI,EAAE;IACvB,IAAI,IAAI,CAACF,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACQ,qBAAqB,IAAIf,gBAAgB,CAAC,IAAI,CAACO,iBAAiB,CAACQ,qBAAqB,CAAC,IAAI,IAAI,CAACR,iBAAiB,CAACQ,qBAAqB,CAACJ,IAAI,CAACF,IAAI,CAAC,EAAE;MACrM,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;EACAO,YAAYA,CAACP,IAAI,EAAE;IACf;IACA,IAAI,IAAI,CAACF,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACU,qBAAqB,IAAIjB,gBAAgB,CAAC,IAAI,CAACO,iBAAiB,CAACU,qBAAqB,CAAC,IAAI,IAAI,CAACV,iBAAiB,CAACU,qBAAqB,CAACN,IAAI,CAACF,IAAI,CAAC,EAAE;MACrM,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;EACAS,iBAAiBA,CAACT,IAAI,EAAE;IACpB,IAAIU,GAAG,GAAG,CAAC;IACX,IAAI,IAAI,CAACX,cAAc,CAACC,IAAI,CAAC,EAAE;MAC3BU,GAAG,IAAI,CAAC,CAAC;IACb;IACA,IAAI,IAAI,CAACP,cAAc,CAACH,IAAI,CAAC,EAAE;MAC3BU,GAAG,IAAI,CAAC,CAAC;IACb;IACA,IAAI,IAAI,CAACL,oBAAoB,CAACL,IAAI,CAAC,EAAE;MACjCU,GAAG,IAAI,CAAC,CAAC;IACb;IACA,IAAI,IAAI,CAACH,YAAY,CAACP,IAAI,CAAC,EAAE;MACzBU,GAAG,IAAI,CAAC,CAAC;IACb;IACA,OAAOA,GAAG;EACd;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}