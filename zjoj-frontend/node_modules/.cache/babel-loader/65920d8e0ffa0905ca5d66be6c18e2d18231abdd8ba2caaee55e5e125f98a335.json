{"ast":null,"code":"/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase();\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next)) ? value : value + ';';\n}","map":{"version":3,"names":["toHexadecimal","code","next","omit","value","toString","toUpperCase","test","String","fromCharCode"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/stringify-entities/lib/util/to-hexadecimal.js"],"sourcesContent":["/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAaA,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAC9C,MAAMC,KAAK,GAAG,KAAK,GAAGH,IAAI,CAACI,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;EACrD,OAAOH,IAAI,IAAID,IAAI,IAAI,CAAC,YAAY,CAACK,IAAI,CAACC,MAAM,CAACC,YAAY,CAACP,IAAI,CAAC,CAAC,GAChEE,KAAK,GACLA,KAAK,GAAG,GAAG;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}