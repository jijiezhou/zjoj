{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { coalesce, equals, isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { illegalArgument, isCancellationError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { TextModelCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport * as nls from '../../../../nls.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { Progress } from '../../../../platform/progress/common/progress.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { CodeActionItem, CodeActionKind, CodeActionTriggerSource, filtersAction, mayIncludeActionsOfKind } from '../common/types.js';\nexport const codeActionCommandId = 'editor.action.codeAction';\nexport const quickFixCommandId = 'editor.action.quickFix';\nexport const autoFixCommandId = 'editor.action.autoFix';\nexport const refactorCommandId = 'editor.action.refactor';\nexport const sourceActionCommandId = 'editor.action.sourceAction';\nexport const organizeImportsCommandId = 'editor.action.organizeImports';\nexport const fixAllCommandId = 'editor.action.fixAll';\nclass ManagedCodeActionSet extends Disposable {\n  static codeActionsPreferredComparator(a, b) {\n    if (a.isPreferred && !b.isPreferred) {\n      return -1;\n    } else if (!a.isPreferred && b.isPreferred) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n  static codeActionsComparator({\n    action: a\n  }, {\n    action: b\n  }) {\n    if (a.isAI && !b.isAI) {\n      return 1;\n    } else if (!a.isAI && b.isAI) {\n      return -1;\n    }\n    if (isNonEmptyArray(a.diagnostics)) {\n      return isNonEmptyArray(b.diagnostics) ? ManagedCodeActionSet.codeActionsPreferredComparator(a, b) : -1;\n    } else if (isNonEmptyArray(b.diagnostics)) {\n      return 1;\n    } else {\n      return ManagedCodeActionSet.codeActionsPreferredComparator(a, b); // both have no diagnostics\n    }\n  }\n  constructor(actions, documentation, disposables) {\n    super();\n    this.documentation = documentation;\n    this._register(disposables);\n    this.allActions = [...actions].sort(ManagedCodeActionSet.codeActionsComparator);\n    this.validActions = this.allActions.filter(({\n      action\n    }) => !action.disabled);\n  }\n  get hasAutoFix() {\n    return this.validActions.some(({\n      action: fix\n    }) => !!fix.kind && CodeActionKind.QuickFix.contains(new CodeActionKind(fix.kind)) && !!fix.isPreferred);\n  }\n  get hasAIFix() {\n    return this.validActions.some(({\n      action: fix\n    }) => !!fix.isAI);\n  }\n  get allAIFixes() {\n    return this.validActions.every(({\n      action: fix\n    }) => !!fix.isAI);\n  }\n}\nconst emptyCodeActionsResponse = {\n  actions: [],\n  documentation: undefined\n};\nexport async function getCodeActions(registry, model, rangeOrSelection, trigger, progress, token) {\n  var _a;\n  const filter = trigger.filter || {};\n  const notebookFilter = {\n    ...filter,\n    excludes: [...(filter.excludes || []), CodeActionKind.Notebook]\n  };\n  const codeActionContext = {\n    only: (_a = filter.include) === null || _a === void 0 ? void 0 : _a.value,\n    trigger: trigger.type\n  };\n  const cts = new TextModelCancellationTokenSource(model, token);\n  // if the trigger is auto (autosave, lightbulb, etc), we should exclude notebook codeActions\n  const excludeNotebookCodeActions = trigger.type === 2 /* languages.CodeActionTriggerType.Auto */;\n  const providers = getCodeActionProviders(registry, model, excludeNotebookCodeActions ? notebookFilter : filter);\n  const disposables = new DisposableStore();\n  const promises = providers.map(async provider => {\n    try {\n      progress.report(provider);\n      const providedCodeActions = await provider.provideCodeActions(model, rangeOrSelection, codeActionContext, cts.token);\n      if (providedCodeActions) {\n        disposables.add(providedCodeActions);\n      }\n      if (cts.token.isCancellationRequested) {\n        return emptyCodeActionsResponse;\n      }\n      const filteredActions = ((providedCodeActions === null || providedCodeActions === void 0 ? void 0 : providedCodeActions.actions) || []).filter(action => action && filtersAction(filter, action));\n      const documentation = getDocumentationFromProvider(provider, filteredActions, filter.include);\n      return {\n        actions: filteredActions.map(action => new CodeActionItem(action, provider)),\n        documentation\n      };\n    } catch (err) {\n      if (isCancellationError(err)) {\n        throw err;\n      }\n      onUnexpectedExternalError(err);\n      return emptyCodeActionsResponse;\n    }\n  });\n  const listener = registry.onDidChange(() => {\n    const newProviders = registry.all(model);\n    if (!equals(newProviders, providers)) {\n      cts.cancel();\n    }\n  });\n  try {\n    const actions = await Promise.all(promises);\n    const allActions = actions.map(x => x.actions).flat();\n    const allDocumentation = [...coalesce(actions.map(x => x.documentation)), ...getAdditionalDocumentationForShowingActions(registry, model, trigger, allActions)];\n    return new ManagedCodeActionSet(allActions, allDocumentation, disposables);\n  } finally {\n    listener.dispose();\n    cts.dispose();\n  }\n}\nfunction getCodeActionProviders(registry, model, filter) {\n  return registry.all(model)\n  // Don't include providers that we know will not return code actions of interest\n  .filter(provider => {\n    if (!provider.providedCodeActionKinds) {\n      // We don't know what type of actions this provider will return.\n      return true;\n    }\n    return provider.providedCodeActionKinds.some(kind => mayIncludeActionsOfKind(filter, new CodeActionKind(kind)));\n  });\n}\nfunction* getAdditionalDocumentationForShowingActions(registry, model, trigger, actionsToShow) {\n  var _a, _b, _c;\n  if (model && actionsToShow.length) {\n    for (const provider of registry.all(model)) {\n      if (provider._getAdditionalMenuItems) {\n        yield* (_a = provider._getAdditionalMenuItems) === null || _a === void 0 ? void 0 : _a.call(provider, {\n          trigger: trigger.type,\n          only: (_c = (_b = trigger.filter) === null || _b === void 0 ? void 0 : _b.include) === null || _c === void 0 ? void 0 : _c.value\n        }, actionsToShow.map(item => item.action));\n      }\n    }\n  }\n}\nfunction getDocumentationFromProvider(provider, providedCodeActions, only) {\n  if (!provider.documentation) {\n    return undefined;\n  }\n  const documentation = provider.documentation.map(entry => ({\n    kind: new CodeActionKind(entry.kind),\n    command: entry.command\n  }));\n  if (only) {\n    let currentBest;\n    for (const entry of documentation) {\n      if (entry.kind.contains(only)) {\n        if (!currentBest) {\n          currentBest = entry;\n        } else {\n          // Take best match\n          if (currentBest.kind.contains(entry.kind)) {\n            currentBest = entry;\n          }\n        }\n      }\n    }\n    if (currentBest) {\n      return currentBest === null || currentBest === void 0 ? void 0 : currentBest.command;\n    }\n  }\n  // Otherwise, check to see if any of the provided actions match.\n  for (const action of providedCodeActions) {\n    if (!action.kind) {\n      continue;\n    }\n    for (const entry of documentation) {\n      if (entry.kind.contains(new CodeActionKind(action.kind))) {\n        return entry.command;\n      }\n    }\n  }\n  return undefined;\n}\nexport var ApplyCodeActionReason;\n(function (ApplyCodeActionReason) {\n  ApplyCodeActionReason[\"OnSave\"] = \"onSave\";\n  ApplyCodeActionReason[\"FromProblemsView\"] = \"fromProblemsView\";\n  ApplyCodeActionReason[\"FromCodeActions\"] = \"fromCodeActions\";\n})(ApplyCodeActionReason || (ApplyCodeActionReason = {}));\nexport async function applyCodeAction(accessor, item, codeActionReason, options, token = CancellationToken.None) {\n  var _a;\n  const bulkEditService = accessor.get(IBulkEditService);\n  const commandService = accessor.get(ICommandService);\n  const telemetryService = accessor.get(ITelemetryService);\n  const notificationService = accessor.get(INotificationService);\n  telemetryService.publicLog2('codeAction.applyCodeAction', {\n    codeActionTitle: item.action.title,\n    codeActionKind: item.action.kind,\n    codeActionIsPreferred: !!item.action.isPreferred,\n    reason: codeActionReason\n  });\n  await item.resolve(token);\n  if (token.isCancellationRequested) {\n    return;\n  }\n  if ((_a = item.action.edit) === null || _a === void 0 ? void 0 : _a.edits.length) {\n    const result = await bulkEditService.apply(item.action.edit, {\n      editor: options === null || options === void 0 ? void 0 : options.editor,\n      label: item.action.title,\n      quotableLabel: item.action.title,\n      code: 'undoredo.codeAction',\n      respectAutoSaveConfig: codeActionReason !== ApplyCodeActionReason.OnSave,\n      showPreview: options === null || options === void 0 ? void 0 : options.preview\n    });\n    if (!result.isApplied) {\n      return;\n    }\n  }\n  if (item.action.command) {\n    try {\n      await commandService.executeCommand(item.action.command.id, ...(item.action.command.arguments || []));\n    } catch (err) {\n      const message = asMessage(err);\n      notificationService.error(typeof message === 'string' ? message : nls.localize('applyCodeActionFailed', \"An unknown error occurred while applying the code action\"));\n    }\n  }\n}\nfunction asMessage(err) {\n  if (typeof err === 'string') {\n    return err;\n  } else if (err instanceof Error && typeof err.message === 'string') {\n    return err.message;\n  } else {\n    return undefined;\n  }\n}\nCommandsRegistry.registerCommand('_executeCodeActionProvider', async function (accessor, resource, rangeOrSelection, kind, itemResolveCount) {\n  if (!(resource instanceof URI)) {\n    throw illegalArgument();\n  }\n  const {\n    codeActionProvider\n  } = accessor.get(ILanguageFeaturesService);\n  const model = accessor.get(IModelService).getModel(resource);\n  if (!model) {\n    throw illegalArgument();\n  }\n  const validatedRangeOrSelection = Selection.isISelection(rangeOrSelection) ? Selection.liftSelection(rangeOrSelection) : Range.isIRange(rangeOrSelection) ? model.validateRange(rangeOrSelection) : undefined;\n  if (!validatedRangeOrSelection) {\n    throw illegalArgument();\n  }\n  const include = typeof kind === 'string' ? new CodeActionKind(kind) : undefined;\n  const codeActionSet = await getCodeActions(codeActionProvider, model, validatedRangeOrSelection, {\n    type: 1 /* languages.CodeActionTriggerType.Invoke */,\n    triggerAction: CodeActionTriggerSource.Default,\n    filter: {\n      includeSourceActions: true,\n      include\n    }\n  }, Progress.None, CancellationToken.None);\n  const resolving = [];\n  const resolveCount = Math.min(codeActionSet.validActions.length, typeof itemResolveCount === 'number' ? itemResolveCount : 0);\n  for (let i = 0; i < resolveCount; i++) {\n    resolving.push(codeActionSet.validActions[i].resolve(CancellationToken.None));\n  }\n  try {\n    await Promise.all(resolving);\n    return codeActionSet.validActions.map(item => item.action);\n  } finally {\n    setTimeout(() => codeActionSet.dispose(), 100);\n  }\n});","map":{"version":3,"names":["coalesce","equals","isNonEmptyArray","CancellationToken","illegalArgument","isCancellationError","onUnexpectedExternalError","Disposable","DisposableStore","URI","IBulkEditService","Range","Selection","ILanguageFeaturesService","IModelService","TextModelCancellationTokenSource","nls","CommandsRegistry","ICommandService","INotificationService","Progress","ITelemetryService","CodeActionItem","CodeActionKind","CodeActionTriggerSource","filtersAction","mayIncludeActionsOfKind","codeActionCommandId","quickFixCommandId","autoFixCommandId","refactorCommandId","sourceActionCommandId","organizeImportsCommandId","fixAllCommandId","ManagedCodeActionSet","codeActionsPreferredComparator","a","b","isPreferred","codeActionsComparator","action","isAI","diagnostics","constructor","actions","documentation","disposables","_register","allActions","sort","validActions","filter","disabled","hasAutoFix","some","fix","kind","QuickFix","contains","hasAIFix","allAIFixes","every","emptyCodeActionsResponse","undefined","getCodeActions","registry","model","rangeOrSelection","trigger","progress","token","_a","notebookFilter","excludes","Notebook","codeActionContext","only","include","value","type","cts","excludeNotebookCodeActions","providers","getCodeActionProviders","promises","map","provider","report","providedCodeActions","provideCodeActions","add","isCancellationRequested","filteredActions","getDocumentationFromProvider","err","listener","onDidChange","newProviders","all","cancel","Promise","x","flat","allDocumentation","getAdditionalDocumentationForShowingActions","dispose","providedCodeActionKinds","actionsToShow","_b","_c","length","_getAdditionalMenuItems","call","item","entry","command","currentBest","ApplyCodeActionReason","applyCodeAction","accessor","codeActionReason","options","None","bulkEditService","get","commandService","telemetryService","notificationService","publicLog2","codeActionTitle","title","codeActionKind","codeActionIsPreferred","reason","resolve","edit","edits","result","apply","editor","label","quotableLabel","code","respectAutoSaveConfig","OnSave","showPreview","preview","isApplied","executeCommand","id","arguments","message","asMessage","error","localize","Error","registerCommand","resource","itemResolveCount","codeActionProvider","getModel","validatedRangeOrSelection","isISelection","liftSelection","isIRange","validateRange","codeActionSet","triggerAction","Default","includeSourceActions","resolving","resolveCount","Math","min","i","push","setTimeout"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/browser/codeAction.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { coalesce, equals, isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { illegalArgument, isCancellationError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { TextModelCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport * as nls from '../../../../nls.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { Progress } from '../../../../platform/progress/common/progress.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { CodeActionItem, CodeActionKind, CodeActionTriggerSource, filtersAction, mayIncludeActionsOfKind } from '../common/types.js';\nexport const codeActionCommandId = 'editor.action.codeAction';\nexport const quickFixCommandId = 'editor.action.quickFix';\nexport const autoFixCommandId = 'editor.action.autoFix';\nexport const refactorCommandId = 'editor.action.refactor';\nexport const sourceActionCommandId = 'editor.action.sourceAction';\nexport const organizeImportsCommandId = 'editor.action.organizeImports';\nexport const fixAllCommandId = 'editor.action.fixAll';\nclass ManagedCodeActionSet extends Disposable {\n    static codeActionsPreferredComparator(a, b) {\n        if (a.isPreferred && !b.isPreferred) {\n            return -1;\n        }\n        else if (!a.isPreferred && b.isPreferred) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    static codeActionsComparator({ action: a }, { action: b }) {\n        if (a.isAI && !b.isAI) {\n            return 1;\n        }\n        else if (!a.isAI && b.isAI) {\n            return -1;\n        }\n        if (isNonEmptyArray(a.diagnostics)) {\n            return isNonEmptyArray(b.diagnostics) ? ManagedCodeActionSet.codeActionsPreferredComparator(a, b) : -1;\n        }\n        else if (isNonEmptyArray(b.diagnostics)) {\n            return 1;\n        }\n        else {\n            return ManagedCodeActionSet.codeActionsPreferredComparator(a, b); // both have no diagnostics\n        }\n    }\n    constructor(actions, documentation, disposables) {\n        super();\n        this.documentation = documentation;\n        this._register(disposables);\n        this.allActions = [...actions].sort(ManagedCodeActionSet.codeActionsComparator);\n        this.validActions = this.allActions.filter(({ action }) => !action.disabled);\n    }\n    get hasAutoFix() {\n        return this.validActions.some(({ action: fix }) => !!fix.kind && CodeActionKind.QuickFix.contains(new CodeActionKind(fix.kind)) && !!fix.isPreferred);\n    }\n    get hasAIFix() {\n        return this.validActions.some(({ action: fix }) => !!fix.isAI);\n    }\n    get allAIFixes() {\n        return this.validActions.every(({ action: fix }) => !!fix.isAI);\n    }\n}\nconst emptyCodeActionsResponse = { actions: [], documentation: undefined };\nexport async function getCodeActions(registry, model, rangeOrSelection, trigger, progress, token) {\n    var _a;\n    const filter = trigger.filter || {};\n    const notebookFilter = {\n        ...filter,\n        excludes: [...(filter.excludes || []), CodeActionKind.Notebook],\n    };\n    const codeActionContext = {\n        only: (_a = filter.include) === null || _a === void 0 ? void 0 : _a.value,\n        trigger: trigger.type,\n    };\n    const cts = new TextModelCancellationTokenSource(model, token);\n    // if the trigger is auto (autosave, lightbulb, etc), we should exclude notebook codeActions\n    const excludeNotebookCodeActions = (trigger.type === 2 /* languages.CodeActionTriggerType.Auto */);\n    const providers = getCodeActionProviders(registry, model, (excludeNotebookCodeActions) ? notebookFilter : filter);\n    const disposables = new DisposableStore();\n    const promises = providers.map(async (provider) => {\n        try {\n            progress.report(provider);\n            const providedCodeActions = await provider.provideCodeActions(model, rangeOrSelection, codeActionContext, cts.token);\n            if (providedCodeActions) {\n                disposables.add(providedCodeActions);\n            }\n            if (cts.token.isCancellationRequested) {\n                return emptyCodeActionsResponse;\n            }\n            const filteredActions = ((providedCodeActions === null || providedCodeActions === void 0 ? void 0 : providedCodeActions.actions) || []).filter(action => action && filtersAction(filter, action));\n            const documentation = getDocumentationFromProvider(provider, filteredActions, filter.include);\n            return {\n                actions: filteredActions.map(action => new CodeActionItem(action, provider)),\n                documentation\n            };\n        }\n        catch (err) {\n            if (isCancellationError(err)) {\n                throw err;\n            }\n            onUnexpectedExternalError(err);\n            return emptyCodeActionsResponse;\n        }\n    });\n    const listener = registry.onDidChange(() => {\n        const newProviders = registry.all(model);\n        if (!equals(newProviders, providers)) {\n            cts.cancel();\n        }\n    });\n    try {\n        const actions = await Promise.all(promises);\n        const allActions = actions.map(x => x.actions).flat();\n        const allDocumentation = [\n            ...coalesce(actions.map(x => x.documentation)),\n            ...getAdditionalDocumentationForShowingActions(registry, model, trigger, allActions)\n        ];\n        return new ManagedCodeActionSet(allActions, allDocumentation, disposables);\n    }\n    finally {\n        listener.dispose();\n        cts.dispose();\n    }\n}\nfunction getCodeActionProviders(registry, model, filter) {\n    return registry.all(model)\n        // Don't include providers that we know will not return code actions of interest\n        .filter(provider => {\n        if (!provider.providedCodeActionKinds) {\n            // We don't know what type of actions this provider will return.\n            return true;\n        }\n        return provider.providedCodeActionKinds.some(kind => mayIncludeActionsOfKind(filter, new CodeActionKind(kind)));\n    });\n}\nfunction* getAdditionalDocumentationForShowingActions(registry, model, trigger, actionsToShow) {\n    var _a, _b, _c;\n    if (model && actionsToShow.length) {\n        for (const provider of registry.all(model)) {\n            if (provider._getAdditionalMenuItems) {\n                yield* (_a = provider._getAdditionalMenuItems) === null || _a === void 0 ? void 0 : _a.call(provider, { trigger: trigger.type, only: (_c = (_b = trigger.filter) === null || _b === void 0 ? void 0 : _b.include) === null || _c === void 0 ? void 0 : _c.value }, actionsToShow.map(item => item.action));\n            }\n        }\n    }\n}\nfunction getDocumentationFromProvider(provider, providedCodeActions, only) {\n    if (!provider.documentation) {\n        return undefined;\n    }\n    const documentation = provider.documentation.map(entry => ({ kind: new CodeActionKind(entry.kind), command: entry.command }));\n    if (only) {\n        let currentBest;\n        for (const entry of documentation) {\n            if (entry.kind.contains(only)) {\n                if (!currentBest) {\n                    currentBest = entry;\n                }\n                else {\n                    // Take best match\n                    if (currentBest.kind.contains(entry.kind)) {\n                        currentBest = entry;\n                    }\n                }\n            }\n        }\n        if (currentBest) {\n            return currentBest === null || currentBest === void 0 ? void 0 : currentBest.command;\n        }\n    }\n    // Otherwise, check to see if any of the provided actions match.\n    for (const action of providedCodeActions) {\n        if (!action.kind) {\n            continue;\n        }\n        for (const entry of documentation) {\n            if (entry.kind.contains(new CodeActionKind(action.kind))) {\n                return entry.command;\n            }\n        }\n    }\n    return undefined;\n}\nexport var ApplyCodeActionReason;\n(function (ApplyCodeActionReason) {\n    ApplyCodeActionReason[\"OnSave\"] = \"onSave\";\n    ApplyCodeActionReason[\"FromProblemsView\"] = \"fromProblemsView\";\n    ApplyCodeActionReason[\"FromCodeActions\"] = \"fromCodeActions\";\n})(ApplyCodeActionReason || (ApplyCodeActionReason = {}));\nexport async function applyCodeAction(accessor, item, codeActionReason, options, token = CancellationToken.None) {\n    var _a;\n    const bulkEditService = accessor.get(IBulkEditService);\n    const commandService = accessor.get(ICommandService);\n    const telemetryService = accessor.get(ITelemetryService);\n    const notificationService = accessor.get(INotificationService);\n    telemetryService.publicLog2('codeAction.applyCodeAction', {\n        codeActionTitle: item.action.title,\n        codeActionKind: item.action.kind,\n        codeActionIsPreferred: !!item.action.isPreferred,\n        reason: codeActionReason,\n    });\n    await item.resolve(token);\n    if (token.isCancellationRequested) {\n        return;\n    }\n    if ((_a = item.action.edit) === null || _a === void 0 ? void 0 : _a.edits.length) {\n        const result = await bulkEditService.apply(item.action.edit, {\n            editor: options === null || options === void 0 ? void 0 : options.editor,\n            label: item.action.title,\n            quotableLabel: item.action.title,\n            code: 'undoredo.codeAction',\n            respectAutoSaveConfig: codeActionReason !== ApplyCodeActionReason.OnSave,\n            showPreview: options === null || options === void 0 ? void 0 : options.preview,\n        });\n        if (!result.isApplied) {\n            return;\n        }\n    }\n    if (item.action.command) {\n        try {\n            await commandService.executeCommand(item.action.command.id, ...(item.action.command.arguments || []));\n        }\n        catch (err) {\n            const message = asMessage(err);\n            notificationService.error(typeof message === 'string'\n                ? message\n                : nls.localize('applyCodeActionFailed', \"An unknown error occurred while applying the code action\"));\n        }\n    }\n}\nfunction asMessage(err) {\n    if (typeof err === 'string') {\n        return err;\n    }\n    else if (err instanceof Error && typeof err.message === 'string') {\n        return err.message;\n    }\n    else {\n        return undefined;\n    }\n}\nCommandsRegistry.registerCommand('_executeCodeActionProvider', async function (accessor, resource, rangeOrSelection, kind, itemResolveCount) {\n    if (!(resource instanceof URI)) {\n        throw illegalArgument();\n    }\n    const { codeActionProvider } = accessor.get(ILanguageFeaturesService);\n    const model = accessor.get(IModelService).getModel(resource);\n    if (!model) {\n        throw illegalArgument();\n    }\n    const validatedRangeOrSelection = Selection.isISelection(rangeOrSelection)\n        ? Selection.liftSelection(rangeOrSelection)\n        : Range.isIRange(rangeOrSelection)\n            ? model.validateRange(rangeOrSelection)\n            : undefined;\n    if (!validatedRangeOrSelection) {\n        throw illegalArgument();\n    }\n    const include = typeof kind === 'string' ? new CodeActionKind(kind) : undefined;\n    const codeActionSet = await getCodeActions(codeActionProvider, model, validatedRangeOrSelection, { type: 1 /* languages.CodeActionTriggerType.Invoke */, triggerAction: CodeActionTriggerSource.Default, filter: { includeSourceActions: true, include } }, Progress.None, CancellationToken.None);\n    const resolving = [];\n    const resolveCount = Math.min(codeActionSet.validActions.length, typeof itemResolveCount === 'number' ? itemResolveCount : 0);\n    for (let i = 0; i < resolveCount; i++) {\n        resolving.push(codeActionSet.validActions[i].resolve(CancellationToken.None));\n    }\n    try {\n        await Promise.all(resolving);\n        return codeActionSet.validActions.map(item => item.action);\n    }\n    finally {\n        setTimeout(() => codeActionSet.dispose(), 100);\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}