{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\n/**\n * A column in a position is the gap between two adjacent characters. The methods here\n * work with a concept called \"visible column\". A visible column is a very rough approximation\n * of the horizontal screen position of a column. For example, using a tab size of 4:\n * ```txt\n * |<TAB>|<TAB>|T|ext\n * |     |     | \\---- column = 4, visible column = 9\n * |     |     \\------ column = 3, visible column = 8\n * |     \\------------ column = 2, visible column = 4\n * \\------------------ column = 1, visible column = 0\n * ```\n *\n * **NOTE**: Visual columns do not work well for RTL text or variable-width fonts or characters.\n *\n * **NOTE**: These methods work and make sense both on the model and on the view model.\n */\nexport class CursorColumns {\n  static _nextVisibleColumn(codePoint, visibleColumn, tabSize) {\n    if (codePoint === 9 /* CharCode.Tab */) {\n      return CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n    }\n    if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n      return visibleColumn + 2;\n    }\n    return visibleColumn + 1;\n  }\n  /**\n   * Returns a visible column from a column.\n   * @see {@link CursorColumns}\n   */\n  static visibleColumnFromColumn(lineContent, column, tabSize) {\n    const textLen = Math.min(column - 1, lineContent.length);\n    const text = lineContent.substring(0, textLen);\n    const iterator = new strings.GraphemeIterator(text);\n    let result = 0;\n    while (!iterator.eol()) {\n      const codePoint = strings.getNextCodePoint(text, textLen, iterator.offset);\n      iterator.nextGraphemeLength();\n      result = this._nextVisibleColumn(codePoint, result, tabSize);\n    }\n    return result;\n  }\n  /**\n   * Returns a column from a visible column.\n   * @see {@link CursorColumns}\n   */\n  static columnFromVisibleColumn(lineContent, visibleColumn, tabSize) {\n    if (visibleColumn <= 0) {\n      return 1;\n    }\n    const lineContentLength = lineContent.length;\n    const iterator = new strings.GraphemeIterator(lineContent);\n    let beforeVisibleColumn = 0;\n    let beforeColumn = 1;\n    while (!iterator.eol()) {\n      const codePoint = strings.getNextCodePoint(lineContent, lineContentLength, iterator.offset);\n      iterator.nextGraphemeLength();\n      const afterVisibleColumn = this._nextVisibleColumn(codePoint, beforeVisibleColumn, tabSize);\n      const afterColumn = iterator.offset + 1;\n      if (afterVisibleColumn >= visibleColumn) {\n        const beforeDelta = visibleColumn - beforeVisibleColumn;\n        const afterDelta = afterVisibleColumn - visibleColumn;\n        if (afterDelta < beforeDelta) {\n          return afterColumn;\n        } else {\n          return beforeColumn;\n        }\n      }\n      beforeVisibleColumn = afterVisibleColumn;\n      beforeColumn = afterColumn;\n    }\n    // walked the entire string\n    return lineContentLength + 1;\n  }\n  /**\n   * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n   * @see {@link CursorColumns}\n   */\n  static nextRenderTabStop(visibleColumn, tabSize) {\n    return visibleColumn + tabSize - visibleColumn % tabSize;\n  }\n  /**\n   * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n   * @see {@link CursorColumns}\n   */\n  static nextIndentTabStop(visibleColumn, indentSize) {\n    return visibleColumn + indentSize - visibleColumn % indentSize;\n  }\n  /**\n   * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n   * @see {@link CursorColumns}\n   */\n  static prevRenderTabStop(column, tabSize) {\n    return Math.max(0, column - 1 - (column - 1) % tabSize);\n  }\n  /**\n   * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n   * @see {@link CursorColumns}\n   */\n  static prevIndentTabStop(column, indentSize) {\n    return Math.max(0, column - 1 - (column - 1) % indentSize);\n  }\n}","map":{"version":3,"names":["strings","CursorColumns","_nextVisibleColumn","codePoint","visibleColumn","tabSize","nextRenderTabStop","isFullWidthCharacter","isEmojiImprecise","visibleColumnFromColumn","lineContent","column","textLen","Math","min","length","text","substring","iterator","GraphemeIterator","result","eol","getNextCodePoint","offset","nextGraphemeLength","columnFromVisibleColumn","lineContentLength","beforeVisibleColumn","beforeColumn","afterVisibleColumn","afterColumn","beforeDelta","afterDelta","nextIndentTabStop","indentSize","prevRenderTabStop","max","prevIndentTabStop"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/core/cursorColumns.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\n/**\n * A column in a position is the gap between two adjacent characters. The methods here\n * work with a concept called \"visible column\". A visible column is a very rough approximation\n * of the horizontal screen position of a column. For example, using a tab size of 4:\n * ```txt\n * |<TAB>|<TAB>|T|ext\n * |     |     | \\---- column = 4, visible column = 9\n * |     |     \\------ column = 3, visible column = 8\n * |     \\------------ column = 2, visible column = 4\n * \\------------------ column = 1, visible column = 0\n * ```\n *\n * **NOTE**: Visual columns do not work well for RTL text or variable-width fonts or characters.\n *\n * **NOTE**: These methods work and make sense both on the model and on the view model.\n */\nexport class CursorColumns {\n    static _nextVisibleColumn(codePoint, visibleColumn, tabSize) {\n        if (codePoint === 9 /* CharCode.Tab */) {\n            return CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n        }\n        if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n            return visibleColumn + 2;\n        }\n        return visibleColumn + 1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    static visibleColumnFromColumn(lineContent, column, tabSize) {\n        const textLen = Math.min(column - 1, lineContent.length);\n        const text = lineContent.substring(0, textLen);\n        const iterator = new strings.GraphemeIterator(text);\n        let result = 0;\n        while (!iterator.eol()) {\n            const codePoint = strings.getNextCodePoint(text, textLen, iterator.offset);\n            iterator.nextGraphemeLength();\n            result = this._nextVisibleColumn(codePoint, result, tabSize);\n        }\n        return result;\n    }\n    /**\n     * Returns a column from a visible column.\n     * @see {@link CursorColumns}\n     */\n    static columnFromVisibleColumn(lineContent, visibleColumn, tabSize) {\n        if (visibleColumn <= 0) {\n            return 1;\n        }\n        const lineContentLength = lineContent.length;\n        const iterator = new strings.GraphemeIterator(lineContent);\n        let beforeVisibleColumn = 0;\n        let beforeColumn = 1;\n        while (!iterator.eol()) {\n            const codePoint = strings.getNextCodePoint(lineContent, lineContentLength, iterator.offset);\n            iterator.nextGraphemeLength();\n            const afterVisibleColumn = this._nextVisibleColumn(codePoint, beforeVisibleColumn, tabSize);\n            const afterColumn = iterator.offset + 1;\n            if (afterVisibleColumn >= visibleColumn) {\n                const beforeDelta = visibleColumn - beforeVisibleColumn;\n                const afterDelta = afterVisibleColumn - visibleColumn;\n                if (afterDelta < beforeDelta) {\n                    return afterColumn;\n                }\n                else {\n                    return beforeColumn;\n                }\n            }\n            beforeVisibleColumn = afterVisibleColumn;\n            beforeColumn = afterColumn;\n        }\n        // walked the entire string\n        return lineContentLength + 1;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static nextRenderTabStop(visibleColumn, tabSize) {\n        return visibleColumn + tabSize - visibleColumn % tabSize;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static nextIndentTabStop(visibleColumn, indentSize) {\n        return visibleColumn + indentSize - visibleColumn % indentSize;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static prevRenderTabStop(column, tabSize) {\n        return Math.max(0, column - 1 - (column - 1) % tabSize);\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static prevIndentTabStop(column, indentSize) {\n        return Math.max(0, column - 1 - (column - 1) % indentSize);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}