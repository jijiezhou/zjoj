{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\nexport class ErrorHandler {\n  constructor() {\n    this.listeners = [];\n    this.unexpectedErrorHandler = function (e) {\n      setTimeout(() => {\n        if (e.stack) {\n          if (ErrorNoTelemetry.isErrorNoTelemetry(e)) {\n            throw new ErrorNoTelemetry(e.message + '\\n\\n' + e.stack);\n          }\n          throw new Error(e.message + '\\n\\n' + e.stack);\n        }\n        throw e;\n      }, 0);\n    };\n  }\n  emit(e) {\n    this.listeners.forEach(listener => {\n      listener(e);\n    });\n  }\n  onUnexpectedError(e) {\n    this.unexpectedErrorHandler(e);\n    this.emit(e);\n  }\n  // For external errors, we don't want the listeners to be called\n  onUnexpectedExternalError(e) {\n    this.unexpectedErrorHandler(e);\n  }\n}\nexport const errorHandler = new ErrorHandler();\nexport function onUnexpectedError(e) {\n  // ignore errors from cancelled promises\n  if (!isCancellationError(e)) {\n    errorHandler.onUnexpectedError(e);\n  }\n  return undefined;\n}\nexport function onUnexpectedExternalError(e) {\n  // ignore errors from cancelled promises\n  if (!isCancellationError(e)) {\n    errorHandler.onUnexpectedExternalError(e);\n  }\n  return undefined;\n}\nexport function transformErrorForSerialization(error) {\n  if (error instanceof Error) {\n    const {\n      name,\n      message\n    } = error;\n    const stack = error.stacktrace || error.stack;\n    return {\n      $isError: true,\n      name,\n      message,\n      stack,\n      noTelemetry: ErrorNoTelemetry.isErrorNoTelemetry(error)\n    };\n  }\n  // return as is\n  return error;\n}\nconst canceledName = 'Canceled';\n/**\n * Checks if the given error is a promise in canceled state\n */\nexport function isCancellationError(error) {\n  if (error instanceof CancellationError) {\n    return true;\n  }\n  return error instanceof Error && error.name === canceledName && error.message === canceledName;\n}\n// !!!IMPORTANT!!!\n// Do NOT change this class because it is also used as an API-type.\nexport class CancellationError extends Error {\n  constructor() {\n    super(canceledName);\n    this.name = this.message;\n  }\n}\n/**\n * @deprecated use {@link CancellationError `new CancellationError()`} instead\n */\nexport function canceled() {\n  const error = new Error(canceledName);\n  error.name = error.message;\n  return error;\n}\nexport function illegalArgument(name) {\n  if (name) {\n    return new Error(`Illegal argument: ${name}`);\n  } else {\n    return new Error('Illegal argument');\n  }\n}\nexport function illegalState(name) {\n  if (name) {\n    return new Error(`Illegal state: ${name}`);\n  } else {\n    return new Error('Illegal state');\n  }\n}\nexport class NotSupportedError extends Error {\n  constructor(message) {\n    super('NotSupported');\n    if (message) {\n      this.message = message;\n    }\n  }\n}\n/**\n * Error that when thrown won't be logged in telemetry as an unhandled error.\n */\nexport class ErrorNoTelemetry extends Error {\n  constructor(msg) {\n    super(msg);\n    this.name = 'CodeExpectedError';\n  }\n  static fromError(err) {\n    if (err instanceof ErrorNoTelemetry) {\n      return err;\n    }\n    const result = new ErrorNoTelemetry();\n    result.message = err.message;\n    result.stack = err.stack;\n    return result;\n  }\n  static isErrorNoTelemetry(err) {\n    return err.name === 'CodeExpectedError';\n  }\n}\n/**\n * This error indicates a bug.\n * Do not throw this for invalid user input.\n * Only catch this error to recover gracefully from bugs.\n */\nexport class BugIndicatingError extends Error {\n  constructor(message) {\n    super(message || 'An unexpected bug occurred.');\n    Object.setPrototypeOf(this, BugIndicatingError.prototype);\n    // Because we know for sure only buggy code throws this,\n    // we definitely want to break here and fix the bug.\n    // eslint-disable-next-line no-debugger\n    // debugger;\n  }\n}","map":{"version":3,"names":["ErrorHandler","constructor","listeners","unexpectedErrorHandler","e","setTimeout","stack","ErrorNoTelemetry","isErrorNoTelemetry","message","Error","emit","forEach","listener","onUnexpectedError","onUnexpectedExternalError","errorHandler","isCancellationError","undefined","transformErrorForSerialization","error","name","stacktrace","$isError","noTelemetry","canceledName","CancellationError","canceled","illegalArgument","illegalState","NotSupportedError","msg","fromError","err","result","BugIndicatingError","Object","setPrototypeOf","prototype"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/base/common/errors.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\nexport class ErrorHandler {\n    constructor() {\n        this.listeners = [];\n        this.unexpectedErrorHandler = function (e) {\n            setTimeout(() => {\n                if (e.stack) {\n                    if (ErrorNoTelemetry.isErrorNoTelemetry(e)) {\n                        throw new ErrorNoTelemetry(e.message + '\\n\\n' + e.stack);\n                    }\n                    throw new Error(e.message + '\\n\\n' + e.stack);\n                }\n                throw e;\n            }, 0);\n        };\n    }\n    emit(e) {\n        this.listeners.forEach((listener) => {\n            listener(e);\n        });\n    }\n    onUnexpectedError(e) {\n        this.unexpectedErrorHandler(e);\n        this.emit(e);\n    }\n    // For external errors, we don't want the listeners to be called\n    onUnexpectedExternalError(e) {\n        this.unexpectedErrorHandler(e);\n    }\n}\nexport const errorHandler = new ErrorHandler();\nexport function onUnexpectedError(e) {\n    // ignore errors from cancelled promises\n    if (!isCancellationError(e)) {\n        errorHandler.onUnexpectedError(e);\n    }\n    return undefined;\n}\nexport function onUnexpectedExternalError(e) {\n    // ignore errors from cancelled promises\n    if (!isCancellationError(e)) {\n        errorHandler.onUnexpectedExternalError(e);\n    }\n    return undefined;\n}\nexport function transformErrorForSerialization(error) {\n    if (error instanceof Error) {\n        const { name, message } = error;\n        const stack = error.stacktrace || error.stack;\n        return {\n            $isError: true,\n            name,\n            message,\n            stack,\n            noTelemetry: ErrorNoTelemetry.isErrorNoTelemetry(error)\n        };\n    }\n    // return as is\n    return error;\n}\nconst canceledName = 'Canceled';\n/**\n * Checks if the given error is a promise in canceled state\n */\nexport function isCancellationError(error) {\n    if (error instanceof CancellationError) {\n        return true;\n    }\n    return error instanceof Error && error.name === canceledName && error.message === canceledName;\n}\n// !!!IMPORTANT!!!\n// Do NOT change this class because it is also used as an API-type.\nexport class CancellationError extends Error {\n    constructor() {\n        super(canceledName);\n        this.name = this.message;\n    }\n}\n/**\n * @deprecated use {@link CancellationError `new CancellationError()`} instead\n */\nexport function canceled() {\n    const error = new Error(canceledName);\n    error.name = error.message;\n    return error;\n}\nexport function illegalArgument(name) {\n    if (name) {\n        return new Error(`Illegal argument: ${name}`);\n    }\n    else {\n        return new Error('Illegal argument');\n    }\n}\nexport function illegalState(name) {\n    if (name) {\n        return new Error(`Illegal state: ${name}`);\n    }\n    else {\n        return new Error('Illegal state');\n    }\n}\nexport class NotSupportedError extends Error {\n    constructor(message) {\n        super('NotSupported');\n        if (message) {\n            this.message = message;\n        }\n    }\n}\n/**\n * Error that when thrown won't be logged in telemetry as an unhandled error.\n */\nexport class ErrorNoTelemetry extends Error {\n    constructor(msg) {\n        super(msg);\n        this.name = 'CodeExpectedError';\n    }\n    static fromError(err) {\n        if (err instanceof ErrorNoTelemetry) {\n            return err;\n        }\n        const result = new ErrorNoTelemetry();\n        result.message = err.message;\n        result.stack = err.stack;\n        return result;\n    }\n    static isErrorNoTelemetry(err) {\n        return err.name === 'CodeExpectedError';\n    }\n}\n/**\n * This error indicates a bug.\n * Do not throw this for invalid user input.\n * Only catch this error to recover gracefully from bugs.\n */\nexport class BugIndicatingError extends Error {\n    constructor(message) {\n        super(message || 'An unexpected bug occurred.');\n        Object.setPrototypeOf(this, BugIndicatingError.prototype);\n        // Because we know for sure only buggy code throws this,\n        // we definitely want to break here and fix the bug.\n        // eslint-disable-next-line no-debugger\n        // debugger;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}