{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { MessageController } from '../../message/browser/messageController.js';\nimport * as nls from '../../../../nls.js';\nexport class ReadOnlyMessageController extends Disposable {\n  constructor(editor) {\n    super();\n    this.editor = editor;\n    this._register(this.editor.onDidAttemptReadOnlyEdit(() => this._onDidAttemptReadOnlyEdit()));\n  }\n  _onDidAttemptReadOnlyEdit() {\n    const messageController = MessageController.get(this.editor);\n    if (messageController && this.editor.hasModel()) {\n      let message = this.editor.getOptions().get(91 /* EditorOption.readOnlyMessage */);\n      if (!message) {\n        if (this.editor.isSimpleWidget) {\n          message = new MarkdownString(nls.localize('editor.simple.readonly', \"Cannot edit in read-only input\"));\n        } else {\n          message = new MarkdownString(nls.localize('editor.readonly', \"Cannot edit in read-only editor\"));\n        }\n      }\n      messageController.showMessage(message, this.editor.getPosition());\n    }\n  }\n}\nReadOnlyMessageController.ID = 'editor.contrib.readOnlyMessageController';\nregisterEditorContribution(ReadOnlyMessageController.ID, ReadOnlyMessageController, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);","map":{"version":3,"names":["MarkdownString","Disposable","registerEditorContribution","MessageController","nls","ReadOnlyMessageController","constructor","editor","_register","onDidAttemptReadOnlyEdit","_onDidAttemptReadOnlyEdit","messageController","get","hasModel","message","getOptions","isSimpleWidget","localize","showMessage","getPosition","ID"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/readOnlyMessage/browser/contribution.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { MessageController } from '../../message/browser/messageController.js';\nimport * as nls from '../../../../nls.js';\nexport class ReadOnlyMessageController extends Disposable {\n    constructor(editor) {\n        super();\n        this.editor = editor;\n        this._register(this.editor.onDidAttemptReadOnlyEdit(() => this._onDidAttemptReadOnlyEdit()));\n    }\n    _onDidAttemptReadOnlyEdit() {\n        const messageController = MessageController.get(this.editor);\n        if (messageController && this.editor.hasModel()) {\n            let message = this.editor.getOptions().get(91 /* EditorOption.readOnlyMessage */);\n            if (!message) {\n                if (this.editor.isSimpleWidget) {\n                    message = new MarkdownString(nls.localize('editor.simple.readonly', \"Cannot edit in read-only input\"));\n                }\n                else {\n                    message = new MarkdownString(nls.localize('editor.readonly', \"Cannot edit in read-only editor\"));\n                }\n            }\n            messageController.showMessage(message, this.editor.getPosition());\n        }\n    }\n}\nReadOnlyMessageController.ID = 'editor.contrib.readOnlyMessageController';\nregisterEditorContribution(ReadOnlyMessageController.ID, ReadOnlyMessageController, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,wCAAwC;AACvE,SAASC,UAAU,QAAQ,sCAAsC;AACjE,SAASC,0BAA0B,QAAQ,sCAAsC;AACjF,SAASC,iBAAiB,QAAQ,4CAA4C;AAC9E,OAAO,KAAKC,GAAG,MAAM,oBAAoB;AACzC,OAAO,MAAMC,yBAAyB,SAASJ,UAAU,CAAC;EACtDK,WAAWA,CAACC,MAAM,EAAE;IAChB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,SAAS,CAAC,IAAI,CAACD,MAAM,CAACE,wBAAwB,CAAC,MAAM,IAAI,CAACC,yBAAyB,CAAC,CAAC,CAAC,CAAC;EAChG;EACAA,yBAAyBA,CAAA,EAAG;IACxB,MAAMC,iBAAiB,GAAGR,iBAAiB,CAACS,GAAG,CAAC,IAAI,CAACL,MAAM,CAAC;IAC5D,IAAII,iBAAiB,IAAI,IAAI,CAACJ,MAAM,CAACM,QAAQ,CAAC,CAAC,EAAE;MAC7C,IAAIC,OAAO,GAAG,IAAI,CAACP,MAAM,CAACQ,UAAU,CAAC,CAAC,CAACH,GAAG,CAAC,EAAE,CAAC,kCAAkC,CAAC;MACjF,IAAI,CAACE,OAAO,EAAE;QACV,IAAI,IAAI,CAACP,MAAM,CAACS,cAAc,EAAE;UAC5BF,OAAO,GAAG,IAAId,cAAc,CAACI,GAAG,CAACa,QAAQ,CAAC,wBAAwB,EAAE,gCAAgC,CAAC,CAAC;QAC1G,CAAC,MACI;UACDH,OAAO,GAAG,IAAId,cAAc,CAACI,GAAG,CAACa,QAAQ,CAAC,iBAAiB,EAAE,iCAAiC,CAAC,CAAC;QACpG;MACJ;MACAN,iBAAiB,CAACO,WAAW,CAACJ,OAAO,EAAE,IAAI,CAACP,MAAM,CAACY,WAAW,CAAC,CAAC,CAAC;IACrE;EACJ;AACJ;AACAd,yBAAyB,CAACe,EAAE,GAAG,0CAA0C;AACzElB,0BAA0B,CAACG,yBAAyB,CAACe,EAAE,EAAEf,yBAAyB,EAAE,CAAC,CAAC,4DAA4D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}