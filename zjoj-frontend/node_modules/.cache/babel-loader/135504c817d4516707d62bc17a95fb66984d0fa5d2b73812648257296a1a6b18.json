{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.45.0(5e5af013f8d295555a7210df0d5f2cea0bf5dd56)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \":\",\n    close: \".\"\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"`\",\n    close: \"`\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \":\",\n    close: \".\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\"lexon\", \"lex\", \"clause\", \"terms\", \"contracts\", \"may\", \"pay\", \"pays\", \"appoints\", \"into\", \"to\"],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\"less\", \"greater\", \"equal\", \"le\", \"gt\", \"or\", \"and\", \"add\", \"added\", \"subtract\", \"subtracted\", \"multiply\", \"multiplied\", \"times\", \"divide\", \"divided\", \"is\", \"be\", \"certified\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  tokenizer: {\n    root: [[/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]], [/\"/, {\n      token: \"identifier.quote\",\n      bracket: \"@open\",\n      next: \"@quoted_identifier\"\n    }], [\"LEX$\", {\n      token: \"keyword\",\n      bracket: \"@open\",\n      next: \"@identifier_until_period\"\n    }], [\"LEXON\", {\n      token: \"keyword\",\n      bracket: \"@open\",\n      next: \"@semver\"\n    }], [\":\", {\n      token: \"delimiter\",\n      bracket: \"@open\",\n      next: \"@identifier_until_period\"\n    }], [/[a-z_$][\\w$]*/, {\n      cases: {\n        \"@operators\": \"operator\",\n        \"@typeKeywords\": \"keyword.type\",\n        \"@keywords\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }], {\n      include: \"@whitespace\"\n    }, [/[{}()\\[\\]]/, \"@brackets\"], [/[<>](?!@symbols)/, \"@brackets\"], [/@symbols/, \"delimiter\"], [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"], [/0[xX][0-9a-fA-F]+/, \"number.hex\"], [/\\d+/, \"number\"], [/[;,.]/, \"delimiter\"]],\n    quoted_identifier: [[/[^\\\\\"]+/, \"identifier\"], [/\"/, {\n      token: \"identifier.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    space_identifier_until_period: [[\":\", \"delimiter\"], [\" \", {\n      token: \"white\",\n      next: \"@identifier_rest\"\n    }]],\n    identifier_until_period: [{\n      include: \"@whitespace\"\n    }, [\":\", {\n      token: \"delimiter\",\n      next: \"@identifier_rest\"\n    }], [/[^\\\\.]+/, \"identifier\"], [/\\./, {\n      token: \"delimiter\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    identifier_rest: [[/[^\\\\.]+/, \"identifier\"], [/\\./, {\n      token: \"delimiter\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    semver: [{\n      include: \"@whitespace\"\n    }, [\":\", \"delimiter\"], [/\\d*\\.\\d*\\.\\d*/, {\n      token: \"number.semver\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport { conf, language };","map":{"version":3,"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","tokenPostfix","ignoreCase","keywords","typeKeywords","operators","symbols","tokenizer","root","token","bracket","next","cases","include","quoted_identifier","space_identifier_until_period","identifier_until_period","identifier_rest","semver","whitespace"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.45.0(5e5af013f8d295555a7210df0d5f2cea0bf5dd56)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \":\", close: \".\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: \":\", close: \".\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\n    \"lexon\",\n    \"lex\",\n    \"clause\",\n    \"terms\",\n    \"contracts\",\n    \"may\",\n    \"pay\",\n    \"pays\",\n    \"appoints\",\n    \"into\",\n    \"to\"\n  ],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\n    \"less\",\n    \"greater\",\n    \"equal\",\n    \"le\",\n    \"gt\",\n    \"or\",\n    \"and\",\n    \"add\",\n    \"added\",\n    \"subtract\",\n    \"subtracted\",\n    \"multiply\",\n    \"multiplied\",\n    \"times\",\n    \"divide\",\n    \"divided\",\n    \"is\",\n    \"be\",\n    \"certified\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  tokenizer: {\n    root: [\n      [/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]],\n      [\n        /\"/,\n        {\n          token: \"identifier.quote\",\n          bracket: \"@open\",\n          next: \"@quoted_identifier\"\n        }\n      ],\n      [\n        \"LEX$\",\n        {\n          token: \"keyword\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\"LEXON\", { token: \"keyword\", bracket: \"@open\", next: \"@semver\" }],\n      [\n        \":\",\n        {\n          token: \"delimiter\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\n        /[a-z_$][\\w$]*/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@typeKeywords\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/@symbols/, \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/\\d+/, \"number\"],\n      [/[;,.]/, \"delimiter\"]\n    ],\n    quoted_identifier: [\n      [/[^\\\\\"]+/, \"identifier\"],\n      [/\"/, { token: \"identifier.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    space_identifier_until_period: [\n      [\":\", \"delimiter\"],\n      [\" \", { token: \"white\", next: \"@identifier_rest\" }]\n    ],\n    identifier_until_period: [\n      { include: \"@whitespace\" },\n      [\":\", { token: \"delimiter\", next: \"@identifier_rest\" }],\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    identifier_rest: [\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    semver: [\n      { include: \"@whitespace\" },\n      [\":\", \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, { token: \"number.semver\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}