{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.45.0(5e5af013f8d295555a7210df0d5f2cea0bf5dd56)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/bicep/bicep.ts\nvar bounded = text => `\\\\b${text}\\\\b`;\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\nvar keywords = [\"targetScope\", \"resource\", \"module\", \"param\", \"var\", \"output\", \"for\", \"in\", \"if\", \"existing\"];\nvar namedLiterals = [\"true\", \"false\", \"null\"];\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar numericLiteral = `[0-9]+`;\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \"'''\",\n    close: \"'''\"\n  }],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"'''\",\n    close: \"'''\",\n    notIn: [\"string\", \"comment\"]\n  }],\n  autoCloseBefore: \":.,=}])' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".bicep\",\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords,\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  tokenizer: {\n    root: [{\n      include: \"@expression\"\n    }, {\n      include: \"@whitespace\"\n    }],\n    stringVerbatim: [{\n      regex: `(|'|'')[^']`,\n      action: {\n        token: \"string\"\n      }\n    }, {\n      regex: `'''`,\n      action: {\n        token: \"string.quote\",\n        next: \"@pop\"\n      }\n    }],\n    stringLiteral: [{\n      regex: `\\\\\\${`,\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@bracketCounting\"\n      }\n    }, {\n      regex: `[^\\\\\\\\'$]+`,\n      action: {\n        token: \"string\"\n      }\n    }, {\n      regex: \"@escapes\",\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: `\\\\\\\\.`,\n      action: {\n        token: \"string.escape.invalid\"\n      }\n    }, {\n      regex: `'`,\n      action: {\n        token: \"string\",\n        next: \"@pop\"\n      }\n    }],\n    bracketCounting: [{\n      regex: `{`,\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@bracketCounting\"\n      }\n    }, {\n      regex: `}`,\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@pop\"\n      }\n    }, {\n      include: \"expression\"\n    }],\n    comment: [{\n      regex: `[^\\\\*]+`,\n      action: {\n        token: \"comment\"\n      }\n    }, {\n      regex: `\\\\*\\\\/`,\n      action: {\n        token: \"comment\",\n        next: \"@pop\"\n      }\n    }, {\n      regex: `[\\\\/*]`,\n      action: {\n        token: \"comment\"\n      }\n    }],\n    whitespace: [{\n      regex: nonCommentWs\n    }, {\n      regex: `\\\\/\\\\*`,\n      action: {\n        token: \"comment\",\n        next: \"@comment\"\n      }\n    }, {\n      regex: `\\\\/\\\\/.*$`,\n      action: {\n        token: \"comment\"\n      }\n    }],\n    expression: [{\n      regex: `'''`,\n      action: {\n        token: \"string.quote\",\n        next: \"@stringVerbatim\"\n      }\n    }, {\n      regex: `'`,\n      action: {\n        token: \"string.quote\",\n        next: \"@stringLiteral\"\n      }\n    }, {\n      regex: numericLiteral,\n      action: {\n        token: \"number\"\n      }\n    }, {\n      regex: identifier,\n      action: {\n        cases: {\n          \"@keywords\": {\n            token: \"keyword\"\n          },\n          \"@namedLiterals\": {\n            token: \"keyword\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }]\n  }\n};\nexport { conf, language };","map":{"version":3,"names":["bounded","text","identifierStart","identifierContinue","identifier","keywords","namedLiterals","nonCommentWs","numericLiteral","conf","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","symbols","escapes","tokenizer","root","include","stringVerbatim","regex","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.45.0(5e5af013f8d295555a7210df0d5f2cea0bf5dd56)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/bicep/bicep.ts\nvar bounded = (text) => `\\\\b${text}\\\\b`;\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\nvar keywords = [\n  \"targetScope\",\n  \"resource\",\n  \"module\",\n  \"param\",\n  \"var\",\n  \"output\",\n  \"for\",\n  \"in\",\n  \"if\",\n  \"existing\"\n];\nvar namedLiterals = [\"true\", \"false\", \"null\"];\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar numericLiteral = `[0-9]+`;\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\" },\n    { open: \"'''\", close: \"'''\" }\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: \"'''\", close: \"'''\", notIn: [\"string\", \"comment\"] }\n  ],\n  autoCloseBefore: \":.,=}])' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".bicep\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords,\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  tokenizer: {\n    root: [{ include: \"@expression\" }, { include: \"@whitespace\" }],\n    stringVerbatim: [\n      { regex: `(|'|'')[^']`, action: { token: \"string\" } },\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@pop\" } }\n    ],\n    stringLiteral: [\n      { regex: `\\\\\\${`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `[^\\\\\\\\'$]+`, action: { token: \"string\" } },\n      { regex: \"@escapes\", action: { token: \"string.escape\" } },\n      { regex: `\\\\\\\\.`, action: { token: \"string.escape.invalid\" } },\n      { regex: `'`, action: { token: \"string\", next: \"@pop\" } }\n    ],\n    bracketCounting: [\n      { regex: `{`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `}`, action: { token: \"delimiter.bracket\", next: \"@pop\" } },\n      { include: \"expression\" }\n    ],\n    comment: [\n      { regex: `[^\\\\*]+`, action: { token: \"comment\" } },\n      { regex: `\\\\*\\\\/`, action: { token: \"comment\", next: \"@pop\" } },\n      { regex: `[\\\\/*]`, action: { token: \"comment\" } }\n    ],\n    whitespace: [\n      { regex: nonCommentWs },\n      { regex: `\\\\/\\\\*`, action: { token: \"comment\", next: \"@comment\" } },\n      { regex: `\\\\/\\\\/.*$`, action: { token: \"comment\" } }\n    ],\n    expression: [\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@stringVerbatim\" } },\n      { regex: `'`, action: { token: \"string.quote\", next: \"@stringLiteral\" } },\n      { regex: numericLiteral, action: { token: \"number\" } },\n      {\n        regex: identifier,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@namedLiterals\": { token: \"keyword\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}