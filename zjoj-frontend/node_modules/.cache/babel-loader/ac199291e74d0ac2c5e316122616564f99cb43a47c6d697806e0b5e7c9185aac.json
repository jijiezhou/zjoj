{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar EditorContribution_1;\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { RefCountedDisposable } from '../../../../base/common/lifecycle.js';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CompletionModel, LineContext } from './completionModel.js';\nimport { CompletionOptions, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ISuggestMemoryService } from './suggestMemory.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nclass SuggestInlineCompletion {\n  constructor(range, insertText, filterText, additionalTextEdits, command, completion) {\n    this.range = range;\n    this.insertText = insertText;\n    this.filterText = filterText;\n    this.additionalTextEdits = additionalTextEdits;\n    this.command = command;\n    this.completion = completion;\n  }\n}\nlet InlineCompletionResults = class InlineCompletionResults extends RefCountedDisposable {\n  constructor(model, line, word, completionModel, completions, _suggestMemoryService) {\n    super(completions.disposable);\n    this.model = model;\n    this.line = line;\n    this.word = word;\n    this.completionModel = completionModel;\n    this._suggestMemoryService = _suggestMemoryService;\n  }\n  canBeReused(model, line, word) {\n    return this.model === model // same model\n    && this.line === line && this.word.word.length > 0 && this.word.startColumn === word.startColumn && this.word.endColumn < word.endColumn // same word\n    && this.completionModel.getIncompleteProvider().size === 0; // no incomplete results\n  }\n  get items() {\n    var _a;\n    const result = [];\n    // Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n    // ranked items are before/after\n    const {\n      items\n    } = this.completionModel;\n    const selectedIndex = this._suggestMemoryService.select(this.model, {\n      lineNumber: this.line,\n      column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta\n    }, items);\n    const first = Iterable.slice(items, selectedIndex);\n    const second = Iterable.slice(items, 0, selectedIndex);\n    let resolveCount = 5;\n    for (const item of Iterable.concat(first, second)) {\n      if (item.score === FuzzyScore.Default) {\n        // skip items that have no overlap\n        continue;\n      }\n      const range = new Range(item.editStart.lineNumber, item.editStart.column, item.editInsertEnd.lineNumber, item.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta // end PLUS character delta\n      );\n      const insertText = item.completion.insertTextRules && item.completion.insertTextRules & 4 /* CompletionItemInsertTextRule.InsertAsSnippet */ ? {\n        snippet: item.completion.insertText\n      } : item.completion.insertText;\n      result.push(new SuggestInlineCompletion(range, insertText, (_a = item.filterTextLow) !== null && _a !== void 0 ? _a : item.labelLow, item.completion.additionalTextEdits, item.completion.command, item));\n      // resolve the first N suggestions eagerly\n      if (resolveCount-- >= 0) {\n        item.resolve(CancellationToken.None);\n      }\n    }\n    return result;\n  }\n};\nInlineCompletionResults = __decorate([__param(5, ISuggestMemoryService)], InlineCompletionResults);\nlet SuggestInlineCompletions = class SuggestInlineCompletions {\n  constructor(_getEditorOption, _languageFeatureService, _clipboardService, _suggestMemoryService) {\n    this._getEditorOption = _getEditorOption;\n    this._languageFeatureService = _languageFeatureService;\n    this._clipboardService = _clipboardService;\n    this._suggestMemoryService = _suggestMemoryService;\n  }\n  async provideInlineCompletions(model, position, context, token) {\n    var _a;\n    if (context.selectedSuggestionInfo) {\n      return;\n    }\n    const config = this._getEditorOption(88 /* EditorOption.quickSuggestions */, model);\n    if (QuickSuggestionsOptions.isAllOff(config)) {\n      // quick suggest is off (for this model/language)\n      return;\n    }\n    model.tokenization.tokenizeIfCheap(position.lineNumber);\n    const lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n    const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(position.column - 1 - 1, 0)));\n    if (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'inline') {\n      // quick suggest is off (for this token)\n      return undefined;\n    }\n    // We consider non-empty leading words and trigger characters. The latter only\n    // when no word is being typed (word characters superseed trigger characters)\n    let wordInfo = model.getWordAtPosition(position);\n    let triggerCharacterInfo;\n    if (!(wordInfo === null || wordInfo === void 0 ? void 0 : wordInfo.word)) {\n      triggerCharacterInfo = this._getTriggerCharacterInfo(model, position);\n    }\n    if (!(wordInfo === null || wordInfo === void 0 ? void 0 : wordInfo.word) && !triggerCharacterInfo) {\n      // not at word, not a trigger character\n      return;\n    }\n    // ensure that we have word information and that we are at the end of a word\n    // otherwise we stop because we don't want to do quick suggestions inside words\n    if (!wordInfo) {\n      wordInfo = model.getWordUntilPosition(position);\n    }\n    if (wordInfo.endColumn !== position.column) {\n      return;\n    }\n    let result;\n    const leadingLineContents = model.getValueInRange(new Range(position.lineNumber, 1, position.lineNumber, position.column));\n    if (!triggerCharacterInfo && ((_a = this._lastResult) === null || _a === void 0 ? void 0 : _a.canBeReused(model, position.lineNumber, wordInfo))) {\n      // reuse a previous result iff possible, only a refilter is needed\n      // TODO@jrieken this can be improved further and only incomplete results can be updated\n      // console.log(`REUSE with ${wordInfo.word}`);\n      const newLineContext = new LineContext(leadingLineContents, position.column - this._lastResult.word.endColumn);\n      this._lastResult.completionModel.lineContext = newLineContext;\n      this._lastResult.acquire();\n      result = this._lastResult;\n    } else {\n      // refesh model is required\n      const completions = await provideSuggestionItems(this._languageFeatureService.completionProvider, model, position, new CompletionOptions(undefined, undefined, triggerCharacterInfo === null || triggerCharacterInfo === void 0 ? void 0 : triggerCharacterInfo.providers), triggerCharacterInfo && {\n        triggerKind: 1 /* CompletionTriggerKind.TriggerCharacter */,\n        triggerCharacter: triggerCharacterInfo.ch\n      }, token);\n      let clipboardText;\n      if (completions.needsClipboard) {\n        clipboardText = await this._clipboardService.readText();\n      }\n      const completionModel = new CompletionModel(completions.items, position.column, new LineContext(leadingLineContents, 0), WordDistance.None, this._getEditorOption(117 /* EditorOption.suggest */, model), this._getEditorOption(111 /* EditorOption.snippetSuggestions */, model), {\n        boostFullMatch: false,\n        firstMatchCanBeWeak: false\n      }, clipboardText);\n      result = new InlineCompletionResults(model, position.lineNumber, wordInfo, completionModel, completions, this._suggestMemoryService);\n    }\n    this._lastResult = result;\n    return result;\n  }\n  handleItemDidShow(_completions, item) {\n    item.completion.resolve(CancellationToken.None);\n  }\n  freeInlineCompletions(result) {\n    result.release();\n  }\n  _getTriggerCharacterInfo(model, position) {\n    var _a;\n    const ch = model.getValueInRange(Range.fromPositions({\n      lineNumber: position.lineNumber,\n      column: position.column - 1\n    }, position));\n    const providers = new Set();\n    for (const provider of this._languageFeatureService.completionProvider.all(model)) {\n      if ((_a = provider.triggerCharacters) === null || _a === void 0 ? void 0 : _a.includes(ch)) {\n        providers.add(provider);\n      }\n    }\n    if (providers.size === 0) {\n      return undefined;\n    }\n    return {\n      providers,\n      ch\n    };\n  }\n};\nSuggestInlineCompletions = __decorate([__param(1, ILanguageFeaturesService), __param(2, IClipboardService), __param(3, ISuggestMemoryService)], SuggestInlineCompletions);\nexport { SuggestInlineCompletions };\nlet EditorContribution = EditorContribution_1 = class EditorContribution {\n  constructor(_editor, languageFeatureService, editorService, instaService) {\n    // HACK - way to contribute something only once\n    if (++EditorContribution_1._counter === 1) {\n      const provider = instaService.createInstance(SuggestInlineCompletions, (id, model) => {\n        var _a;\n        // HACK - reuse the editor options world outside from a \"normal\" contribution\n        const editor = (_a = editorService.listCodeEditors().find(editor => editor.getModel() === model)) !== null && _a !== void 0 ? _a : _editor;\n        return editor.getOption(id);\n      });\n      EditorContribution_1._disposable = languageFeatureService.inlineCompletionsProvider.register('*', provider);\n    }\n  }\n  dispose() {\n    var _a;\n    if (--EditorContribution_1._counter === 0) {\n      (_a = EditorContribution_1._disposable) === null || _a === void 0 ? void 0 : _a.dispose();\n      EditorContribution_1._disposable = undefined;\n    }\n  }\n};\nEditorContribution._counter = 0;\nEditorContribution = EditorContribution_1 = __decorate([__param(1, ILanguageFeaturesService), __param(2, ICodeEditorService), __param(3, IInstantiationService)], EditorContribution);\nregisterEditorContribution('suggest.inlineCompletionsProvider', EditorContribution, 0 /* EditorContributionInstantiation.Eager */); // eager because the contribution is used as a way to ONCE access a service to which a provider is registered","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","EditorContribution_1","CancellationToken","FuzzyScore","Iterable","RefCountedDisposable","registerEditorContribution","ICodeEditorService","Range","ILanguageFeaturesService","CompletionModel","LineContext","CompletionOptions","provideSuggestionItems","QuickSuggestionsOptions","ISuggestMemoryService","WordDistance","IClipboardService","IInstantiationService","SuggestInlineCompletion","constructor","range","insertText","filterText","additionalTextEdits","command","completion","InlineCompletionResults","model","line","word","completionModel","completions","_suggestMemoryService","disposable","canBeReused","startColumn","endColumn","getIncompleteProvider","size","items","_a","result","selectedIndex","select","lineNumber","column","lineContext","characterCountDelta","first","slice","second","resolveCount","item","concat","score","Default","editStart","editInsertEnd","insertTextRules","snippet","push","filterTextLow","labelLow","resolve","None","SuggestInlineCompletions","_getEditorOption","_languageFeatureService","_clipboardService","provideInlineCompletions","position","context","token","selectedSuggestionInfo","config","isAllOff","tokenization","tokenizeIfCheap","lineTokens","getLineTokens","tokenType","getStandardTokenType","findTokenIndexAtOffset","Math","max","valueFor","undefined","wordInfo","getWordAtPosition","triggerCharacterInfo","_getTriggerCharacterInfo","getWordUntilPosition","leadingLineContents","getValueInRange","_lastResult","newLineContext","acquire","completionProvider","providers","triggerKind","triggerCharacter","ch","clipboardText","needsClipboard","readText","boostFullMatch","firstMatchCanBeWeak","handleItemDidShow","_completions","freeInlineCompletions","release","fromPositions","Set","provider","all","triggerCharacters","includes","add","EditorContribution","_editor","languageFeatureService","editorService","instaService","_counter","createInstance","id","editor","listCodeEditors","find","getModel","getOption","_disposable","inlineCompletionsProvider","register","dispose"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestInlineCompletions.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar EditorContribution_1;\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { RefCountedDisposable } from '../../../../base/common/lifecycle.js';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CompletionModel, LineContext } from './completionModel.js';\nimport { CompletionOptions, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ISuggestMemoryService } from './suggestMemory.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nclass SuggestInlineCompletion {\n    constructor(range, insertText, filterText, additionalTextEdits, command, completion) {\n        this.range = range;\n        this.insertText = insertText;\n        this.filterText = filterText;\n        this.additionalTextEdits = additionalTextEdits;\n        this.command = command;\n        this.completion = completion;\n    }\n}\nlet InlineCompletionResults = class InlineCompletionResults extends RefCountedDisposable {\n    constructor(model, line, word, completionModel, completions, _suggestMemoryService) {\n        super(completions.disposable);\n        this.model = model;\n        this.line = line;\n        this.word = word;\n        this.completionModel = completionModel;\n        this._suggestMemoryService = _suggestMemoryService;\n    }\n    canBeReused(model, line, word) {\n        return this.model === model // same model\n            && this.line === line\n            && this.word.word.length > 0\n            && this.word.startColumn === word.startColumn && this.word.endColumn < word.endColumn // same word\n            && this.completionModel.getIncompleteProvider().size === 0; // no incomplete results\n    }\n    get items() {\n        var _a;\n        const result = [];\n        // Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n        // ranked items are before/after\n        const { items } = this.completionModel;\n        const selectedIndex = this._suggestMemoryService.select(this.model, { lineNumber: this.line, column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta }, items);\n        const first = Iterable.slice(items, selectedIndex);\n        const second = Iterable.slice(items, 0, selectedIndex);\n        let resolveCount = 5;\n        for (const item of Iterable.concat(first, second)) {\n            if (item.score === FuzzyScore.Default) {\n                // skip items that have no overlap\n                continue;\n            }\n            const range = new Range(item.editStart.lineNumber, item.editStart.column, item.editInsertEnd.lineNumber, item.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta // end PLUS character delta\n            );\n            const insertText = item.completion.insertTextRules && (item.completion.insertTextRules & 4 /* CompletionItemInsertTextRule.InsertAsSnippet */)\n                ? { snippet: item.completion.insertText }\n                : item.completion.insertText;\n            result.push(new SuggestInlineCompletion(range, insertText, (_a = item.filterTextLow) !== null && _a !== void 0 ? _a : item.labelLow, item.completion.additionalTextEdits, item.completion.command, item));\n            // resolve the first N suggestions eagerly\n            if (resolveCount-- >= 0) {\n                item.resolve(CancellationToken.None);\n            }\n        }\n        return result;\n    }\n};\nInlineCompletionResults = __decorate([\n    __param(5, ISuggestMemoryService)\n], InlineCompletionResults);\nlet SuggestInlineCompletions = class SuggestInlineCompletions {\n    constructor(_getEditorOption, _languageFeatureService, _clipboardService, _suggestMemoryService) {\n        this._getEditorOption = _getEditorOption;\n        this._languageFeatureService = _languageFeatureService;\n        this._clipboardService = _clipboardService;\n        this._suggestMemoryService = _suggestMemoryService;\n    }\n    async provideInlineCompletions(model, position, context, token) {\n        var _a;\n        if (context.selectedSuggestionInfo) {\n            return;\n        }\n        const config = this._getEditorOption(88 /* EditorOption.quickSuggestions */, model);\n        if (QuickSuggestionsOptions.isAllOff(config)) {\n            // quick suggest is off (for this model/language)\n            return;\n        }\n        model.tokenization.tokenizeIfCheap(position.lineNumber);\n        const lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n        const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(position.column - 1 - 1, 0)));\n        if (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'inline') {\n            // quick suggest is off (for this token)\n            return undefined;\n        }\n        // We consider non-empty leading words and trigger characters. The latter only\n        // when no word is being typed (word characters superseed trigger characters)\n        let wordInfo = model.getWordAtPosition(position);\n        let triggerCharacterInfo;\n        if (!(wordInfo === null || wordInfo === void 0 ? void 0 : wordInfo.word)) {\n            triggerCharacterInfo = this._getTriggerCharacterInfo(model, position);\n        }\n        if (!(wordInfo === null || wordInfo === void 0 ? void 0 : wordInfo.word) && !triggerCharacterInfo) {\n            // not at word, not a trigger character\n            return;\n        }\n        // ensure that we have word information and that we are at the end of a word\n        // otherwise we stop because we don't want to do quick suggestions inside words\n        if (!wordInfo) {\n            wordInfo = model.getWordUntilPosition(position);\n        }\n        if (wordInfo.endColumn !== position.column) {\n            return;\n        }\n        let result;\n        const leadingLineContents = model.getValueInRange(new Range(position.lineNumber, 1, position.lineNumber, position.column));\n        if (!triggerCharacterInfo && ((_a = this._lastResult) === null || _a === void 0 ? void 0 : _a.canBeReused(model, position.lineNumber, wordInfo))) {\n            // reuse a previous result iff possible, only a refilter is needed\n            // TODO@jrieken this can be improved further and only incomplete results can be updated\n            // console.log(`REUSE with ${wordInfo.word}`);\n            const newLineContext = new LineContext(leadingLineContents, position.column - this._lastResult.word.endColumn);\n            this._lastResult.completionModel.lineContext = newLineContext;\n            this._lastResult.acquire();\n            result = this._lastResult;\n        }\n        else {\n            // refesh model is required\n            const completions = await provideSuggestionItems(this._languageFeatureService.completionProvider, model, position, new CompletionOptions(undefined, undefined, triggerCharacterInfo === null || triggerCharacterInfo === void 0 ? void 0 : triggerCharacterInfo.providers), triggerCharacterInfo && { triggerKind: 1 /* CompletionTriggerKind.TriggerCharacter */, triggerCharacter: triggerCharacterInfo.ch }, token);\n            let clipboardText;\n            if (completions.needsClipboard) {\n                clipboardText = await this._clipboardService.readText();\n            }\n            const completionModel = new CompletionModel(completions.items, position.column, new LineContext(leadingLineContents, 0), WordDistance.None, this._getEditorOption(117 /* EditorOption.suggest */, model), this._getEditorOption(111 /* EditorOption.snippetSuggestions */, model), { boostFullMatch: false, firstMatchCanBeWeak: false }, clipboardText);\n            result = new InlineCompletionResults(model, position.lineNumber, wordInfo, completionModel, completions, this._suggestMemoryService);\n        }\n        this._lastResult = result;\n        return result;\n    }\n    handleItemDidShow(_completions, item) {\n        item.completion.resolve(CancellationToken.None);\n    }\n    freeInlineCompletions(result) {\n        result.release();\n    }\n    _getTriggerCharacterInfo(model, position) {\n        var _a;\n        const ch = model.getValueInRange(Range.fromPositions({ lineNumber: position.lineNumber, column: position.column - 1 }, position));\n        const providers = new Set();\n        for (const provider of this._languageFeatureService.completionProvider.all(model)) {\n            if ((_a = provider.triggerCharacters) === null || _a === void 0 ? void 0 : _a.includes(ch)) {\n                providers.add(provider);\n            }\n        }\n        if (providers.size === 0) {\n            return undefined;\n        }\n        return { providers, ch };\n    }\n};\nSuggestInlineCompletions = __decorate([\n    __param(1, ILanguageFeaturesService),\n    __param(2, IClipboardService),\n    __param(3, ISuggestMemoryService)\n], SuggestInlineCompletions);\nexport { SuggestInlineCompletions };\nlet EditorContribution = EditorContribution_1 = class EditorContribution {\n    constructor(_editor, languageFeatureService, editorService, instaService) {\n        // HACK - way to contribute something only once\n        if (++EditorContribution_1._counter === 1) {\n            const provider = instaService.createInstance(SuggestInlineCompletions, (id, model) => {\n                var _a;\n                // HACK - reuse the editor options world outside from a \"normal\" contribution\n                const editor = (_a = editorService.listCodeEditors().find(editor => editor.getModel() === model)) !== null && _a !== void 0 ? _a : _editor;\n                return editor.getOption(id);\n            });\n            EditorContribution_1._disposable = languageFeatureService.inlineCompletionsProvider.register('*', provider);\n        }\n    }\n    dispose() {\n        var _a;\n        if (--EditorContribution_1._counter === 0) {\n            (_a = EditorContribution_1._disposable) === null || _a === void 0 ? void 0 : _a.dispose();\n            EditorContribution_1._disposable = undefined;\n        }\n    }\n};\nEditorContribution._counter = 0;\nEditorContribution = EditorContribution_1 = __decorate([\n    __param(1, ILanguageFeaturesService),\n    __param(2, ICodeEditorService),\n    __param(3, IInstantiationService)\n], EditorContribution);\nregisterEditorContribution('suggest.inlineCompletionsProvider', EditorContribution, 0 /* EditorContributionInstantiation.Eager */); // eager because the contribution is used as a way to ONCE access a service to which a provider is registered\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}