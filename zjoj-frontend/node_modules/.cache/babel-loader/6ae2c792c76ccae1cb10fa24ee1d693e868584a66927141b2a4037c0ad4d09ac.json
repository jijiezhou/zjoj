{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './whitespace.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorWhitespaces } from '../../../common/core/editorColorRegistry.js';\nexport class WhitespaceOverlay extends DynamicViewOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    this._options = new WhitespaceOptions(this._context.configuration);\n    this._selection = [];\n    this._renderResult = null;\n    this._context.addEventHandler(this);\n  }\n  dispose() {\n    this._context.removeEventHandler(this);\n    this._renderResult = null;\n    super.dispose();\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    const newOptions = new WhitespaceOptions(this._context.configuration);\n    if (this._options.equals(newOptions)) {\n      return e.hasChanged(143 /* EditorOption.layoutInfo */);\n    }\n    this._options = newOptions;\n    return true;\n  }\n  onCursorStateChanged(e) {\n    this._selection = e.selections;\n    if (this._options.renderWhitespace === 'selection') {\n      return true;\n    }\n    return false;\n  }\n  onDecorationsChanged(e) {\n    return true;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLinesChanged(e) {\n    return true;\n  }\n  onLinesDeleted(e) {\n    return true;\n  }\n  onLinesInserted(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    return e.scrollTopChanged;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  // --- end event handlers\n  prepareRender(ctx) {\n    if (this._options.renderWhitespace === 'none') {\n      this._renderResult = null;\n      return;\n    }\n    const startLineNumber = ctx.visibleRange.startLineNumber;\n    const endLineNumber = ctx.visibleRange.endLineNumber;\n    const lineCount = endLineNumber - startLineNumber + 1;\n    const needed = new Array(lineCount);\n    for (let i = 0; i < lineCount; i++) {\n      needed[i] = true;\n    }\n    const viewportData = this._context.viewModel.getMinimapLinesRenderingData(ctx.viewportData.startLineNumber, ctx.viewportData.endLineNumber, needed);\n    this._renderResult = [];\n    for (let lineNumber = ctx.viewportData.startLineNumber; lineNumber <= ctx.viewportData.endLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - ctx.viewportData.startLineNumber;\n      const lineData = viewportData.data[lineIndex];\n      let selectionsOnLine = null;\n      if (this._options.renderWhitespace === 'selection') {\n        const selections = this._selection;\n        for (const selection of selections) {\n          if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n            // Selection does not intersect line\n            continue;\n          }\n          const startColumn = selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn;\n          const endColumn = selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn;\n          if (startColumn < endColumn) {\n            if (!selectionsOnLine) {\n              selectionsOnLine = [];\n            }\n            selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n          }\n        }\n      }\n      this._renderResult[lineIndex] = this._applyRenderWhitespace(ctx, lineNumber, selectionsOnLine, lineData);\n    }\n  }\n  _applyRenderWhitespace(ctx, lineNumber, selections, lineData) {\n    if (this._options.renderWhitespace === 'selection' && !selections) {\n      return '';\n    }\n    if (this._options.renderWhitespace === 'trailing' && lineData.continuesWithWrappedLine) {\n      return '';\n    }\n    const color = this._context.theme.getColor(editorWhitespaces);\n    const USE_SVG = this._options.renderWithSVG;\n    const lineContent = lineData.content;\n    const len = this._options.stopRenderingLineAfter === -1 ? lineContent.length : Math.min(this._options.stopRenderingLineAfter, lineContent.length);\n    const continuesWithWrappedLine = lineData.continuesWithWrappedLine;\n    const fauxIndentLength = lineData.minColumn - 1;\n    const onlyBoundary = this._options.renderWhitespace === 'boundary';\n    const onlyTrailing = this._options.renderWhitespace === 'trailing';\n    const lineHeight = this._options.lineHeight;\n    const middotWidth = this._options.middotWidth;\n    const wsmiddotWidth = this._options.wsmiddotWidth;\n    const spaceWidth = this._options.spaceWidth;\n    const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n    const middotDiff = Math.abs(middotWidth - spaceWidth);\n    // U+2E31 - WORD SEPARATOR MIDDLE DOT\n    // U+00B7 - MIDDLE DOT\n    const renderSpaceCharCode = wsmiddotDiff < middotDiff ? 0x2E31 : 0xB7;\n    const canUseHalfwidthRightwardsArrow = this._options.canUseHalfwidthRightwardsArrow;\n    let result = '';\n    let lineIsEmptyOrWhitespace = false;\n    let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n    let lastNonWhitespaceIndex;\n    if (firstNonWhitespaceIndex === -1) {\n      lineIsEmptyOrWhitespace = true;\n      firstNonWhitespaceIndex = len;\n      lastNonWhitespaceIndex = len;\n    } else {\n      lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n    }\n    let currentSelectionIndex = 0;\n    let currentSelection = selections && selections[currentSelectionIndex];\n    let maxLeft = 0;\n    for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n      const chCode = lineContent.charCodeAt(charIndex);\n      if (currentSelection && charIndex >= currentSelection.endOffset) {\n        currentSelectionIndex++;\n        currentSelection = selections && selections[currentSelectionIndex];\n      }\n      if (chCode !== 9 /* CharCode.Tab */ && chCode !== 32 /* CharCode.Space */) {\n        continue;\n      }\n      if (onlyTrailing && !lineIsEmptyOrWhitespace && charIndex <= lastNonWhitespaceIndex) {\n        // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n        continue;\n      }\n      if (onlyBoundary && charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex && chCode === 32 /* CharCode.Space */) {\n        // rendering only boundary whitespace\n        const prevChCode = charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */;\n        const nextChCode = charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */;\n        if (prevChCode !== 32 /* CharCode.Space */ && nextChCode !== 32 /* CharCode.Space */) {\n          continue;\n        }\n      }\n      if (onlyBoundary && continuesWithWrappedLine && charIndex === len - 1) {\n        const prevCharCode = charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */;\n        const isSingleTrailingSpace = chCode === 32 /* CharCode.Space */ && prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */;\n        if (isSingleTrailingSpace) {\n          continue;\n        }\n      }\n      if (selections && (!currentSelection || currentSelection.startOffset > charIndex || currentSelection.endOffset <= charIndex)) {\n        // If rendering whitespace on selection, check that the charIndex falls within a selection\n        continue;\n      }\n      const visibleRange = ctx.visibleRangeForPosition(new Position(lineNumber, charIndex + 1));\n      if (!visibleRange) {\n        continue;\n      }\n      if (USE_SVG) {\n        maxLeft = Math.max(maxLeft, visibleRange.left);\n        if (chCode === 9 /* CharCode.Tab */) {\n          result += this._renderArrow(lineHeight, spaceWidth, visibleRange.left);\n        } else {\n          result += `<circle cx=\"${(visibleRange.left + spaceWidth / 2).toFixed(2)}\" cy=\"${(lineHeight / 2).toFixed(2)}\" r=\"${(spaceWidth / 7).toFixed(2)}\" />`;\n        }\n      } else {\n        if (chCode === 9 /* CharCode.Tab */) {\n          result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${canUseHalfwidthRightwardsArrow ? String.fromCharCode(0xFFEB) : String.fromCharCode(0x2192)}</div>`;\n        } else {\n          result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${String.fromCharCode(renderSpaceCharCode)}</div>`;\n        }\n      }\n    }\n    if (USE_SVG) {\n      maxLeft = Math.round(maxLeft + spaceWidth);\n      return `<svg style=\"position:absolute;width:${maxLeft}px;height:${lineHeight}px\" viewBox=\"0 0 ${maxLeft} ${lineHeight}\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"${color}\">` + result + `</svg>`;\n    }\n    return result;\n  }\n  _renderArrow(lineHeight, spaceWidth, left) {\n    const strokeWidth = spaceWidth / 7;\n    const width = spaceWidth;\n    const dy = lineHeight / 2;\n    const dx = left;\n    const p1 = {\n      x: 0,\n      y: strokeWidth / 2\n    };\n    const p2 = {\n      x: 100 / 125 * width,\n      y: p1.y\n    };\n    const p3 = {\n      x: p2.x - 0.2 * p2.x,\n      y: p2.y + 0.2 * p2.x\n    };\n    const p4 = {\n      x: p3.x + 0.1 * p2.x,\n      y: p3.y + 0.1 * p2.x\n    };\n    const p5 = {\n      x: p4.x + 0.35 * p2.x,\n      y: p4.y - 0.35 * p2.x\n    };\n    const p6 = {\n      x: p5.x,\n      y: -p5.y\n    };\n    const p7 = {\n      x: p4.x,\n      y: -p4.y\n    };\n    const p8 = {\n      x: p3.x,\n      y: -p3.y\n    };\n    const p9 = {\n      x: p2.x,\n      y: -p2.y\n    };\n    const p10 = {\n      x: p1.x,\n      y: -p1.y\n    };\n    const p = [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10];\n    const parts = p.map(p => `${(dx + p.x).toFixed(2)} ${(dy + p.y).toFixed(2)}`).join(' L ');\n    return `<path d=\"M ${parts}\" />`;\n  }\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n    const lineIndex = lineNumber - startLineNumber;\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n    return this._renderResult[lineIndex];\n  }\n}\nclass WhitespaceOptions {\n  constructor(config) {\n    const options = config.options;\n    const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n    const experimentalWhitespaceRendering = options.get(38 /* EditorOption.experimentalWhitespaceRendering */);\n    if (experimentalWhitespaceRendering === 'off') {\n      // whitespace is rendered in the view line\n      this.renderWhitespace = 'none';\n      this.renderWithSVG = false;\n    } else if (experimentalWhitespaceRendering === 'svg') {\n      this.renderWhitespace = options.get(98 /* EditorOption.renderWhitespace */);\n      this.renderWithSVG = true;\n    } else {\n      this.renderWhitespace = options.get(98 /* EditorOption.renderWhitespace */);\n      this.renderWithSVG = false;\n    }\n    this.spaceWidth = fontInfo.spaceWidth;\n    this.middotWidth = fontInfo.middotWidth;\n    this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n    this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n    this.lineHeight = options.get(66 /* EditorOption.lineHeight */);\n    this.stopRenderingLineAfter = options.get(116 /* EditorOption.stopRenderingLineAfter */);\n  }\n  equals(other) {\n    return this.renderWhitespace === other.renderWhitespace && this.renderWithSVG === other.renderWithSVG && this.spaceWidth === other.spaceWidth && this.middotWidth === other.middotWidth && this.wsmiddotWidth === other.wsmiddotWidth && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow && this.lineHeight === other.lineHeight && this.stopRenderingLineAfter === other.stopRenderingLineAfter;\n  }\n}","map":{"version":3,"names":["DynamicViewOverlay","strings","LineRange","Position","editorWhitespaces","WhitespaceOverlay","constructor","context","_context","_options","WhitespaceOptions","configuration","_selection","_renderResult","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","newOptions","equals","hasChanged","onCursorStateChanged","selections","renderWhitespace","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","prepareRender","ctx","startLineNumber","visibleRange","endLineNumber","lineCount","needed","Array","i","viewportData","viewModel","getMinimapLinesRenderingData","lineNumber","lineIndex","lineData","data","selectionsOnLine","selection","startColumn","minColumn","endColumn","maxColumn","push","_applyRenderWhitespace","continuesWithWrappedLine","color","theme","getColor","USE_SVG","renderWithSVG","lineContent","content","len","stopRenderingLineAfter","length","Math","min","fauxIndentLength","onlyBoundary","onlyTrailing","lineHeight","middotWidth","wsmiddotWidth","spaceWidth","wsmiddotDiff","abs","middotDiff","renderSpaceCharCode","canUseHalfwidthRightwardsArrow","result","lineIsEmptyOrWhitespace","firstNonWhitespaceIndex","lastNonWhitespaceIndex","currentSelectionIndex","currentSelection","maxLeft","charIndex","chCode","charCodeAt","endOffset","prevChCode","nextChCode","prevCharCode","isSingleTrailingSpace","startOffset","visibleRangeForPosition","max","left","_renderArrow","toFixed","String","fromCharCode","round","strokeWidth","width","dy","dx","p1","x","y","p2","p3","p4","p5","p6","p7","p8","p9","p10","p","parts","map","join","render","config","options","fontInfo","get","experimentalWhitespaceRendering","other"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/whitespace/whitespace.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './whitespace.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorWhitespaces } from '../../../common/core/editorColorRegistry.js';\nexport class WhitespaceOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._options = new WhitespaceOptions(this._context.configuration);\n        this._selection = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const newOptions = new WhitespaceOptions(this._context.configuration);\n        if (this._options.equals(newOptions)) {\n            return e.hasChanged(143 /* EditorOption.layoutInfo */);\n        }\n        this._options = newOptions;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selection = e.selections;\n        if (this._options.renderWhitespace === 'selection') {\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._options.renderWhitespace === 'none') {\n            this._renderResult = null;\n            return;\n        }\n        const startLineNumber = ctx.visibleRange.startLineNumber;\n        const endLineNumber = ctx.visibleRange.endLineNumber;\n        const lineCount = endLineNumber - startLineNumber + 1;\n        const needed = new Array(lineCount);\n        for (let i = 0; i < lineCount; i++) {\n            needed[i] = true;\n        }\n        const viewportData = this._context.viewModel.getMinimapLinesRenderingData(ctx.viewportData.startLineNumber, ctx.viewportData.endLineNumber, needed);\n        this._renderResult = [];\n        for (let lineNumber = ctx.viewportData.startLineNumber; lineNumber <= ctx.viewportData.endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - ctx.viewportData.startLineNumber;\n            const lineData = viewportData.data[lineIndex];\n            let selectionsOnLine = null;\n            if (this._options.renderWhitespace === 'selection') {\n                const selections = this._selection;\n                for (const selection of selections) {\n                    if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                        // Selection does not intersect line\n                        continue;\n                    }\n                    const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                    const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                    if (startColumn < endColumn) {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n            this._renderResult[lineIndex] = this._applyRenderWhitespace(ctx, lineNumber, selectionsOnLine, lineData);\n        }\n    }\n    _applyRenderWhitespace(ctx, lineNumber, selections, lineData) {\n        if (this._options.renderWhitespace === 'selection' && !selections) {\n            return '';\n        }\n        if (this._options.renderWhitespace === 'trailing' && lineData.continuesWithWrappedLine) {\n            return '';\n        }\n        const color = this._context.theme.getColor(editorWhitespaces);\n        const USE_SVG = this._options.renderWithSVG;\n        const lineContent = lineData.content;\n        const len = (this._options.stopRenderingLineAfter === -1 ? lineContent.length : Math.min(this._options.stopRenderingLineAfter, lineContent.length));\n        const continuesWithWrappedLine = lineData.continuesWithWrappedLine;\n        const fauxIndentLength = lineData.minColumn - 1;\n        const onlyBoundary = (this._options.renderWhitespace === 'boundary');\n        const onlyTrailing = (this._options.renderWhitespace === 'trailing');\n        const lineHeight = this._options.lineHeight;\n        const middotWidth = this._options.middotWidth;\n        const wsmiddotWidth = this._options.wsmiddotWidth;\n        const spaceWidth = this._options.spaceWidth;\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        // U+00B7 - MIDDLE DOT\n        const renderSpaceCharCode = (wsmiddotDiff < middotDiff ? 0x2E31 : 0xB7);\n        const canUseHalfwidthRightwardsArrow = this._options.canUseHalfwidthRightwardsArrow;\n        let result = '';\n        let lineIsEmptyOrWhitespace = false;\n        let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n        let lastNonWhitespaceIndex;\n        if (firstNonWhitespaceIndex === -1) {\n            lineIsEmptyOrWhitespace = true;\n            firstNonWhitespaceIndex = len;\n            lastNonWhitespaceIndex = len;\n        }\n        else {\n            lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n        }\n        let currentSelectionIndex = 0;\n        let currentSelection = selections && selections[currentSelectionIndex];\n        let maxLeft = 0;\n        for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n            const chCode = lineContent.charCodeAt(charIndex);\n            if (currentSelection && charIndex >= currentSelection.endOffset) {\n                currentSelectionIndex++;\n                currentSelection = selections && selections[currentSelectionIndex];\n            }\n            if (chCode !== 9 /* CharCode.Tab */ && chCode !== 32 /* CharCode.Space */) {\n                continue;\n            }\n            if (onlyTrailing && !lineIsEmptyOrWhitespace && charIndex <= lastNonWhitespaceIndex) {\n                // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n                continue;\n            }\n            if (onlyBoundary && charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex && chCode === 32 /* CharCode.Space */) {\n                // rendering only boundary whitespace\n                const prevChCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                if (prevChCode !== 32 /* CharCode.Space */ && nextChCode !== 32 /* CharCode.Space */) {\n                    continue;\n                }\n            }\n            if (onlyBoundary && continuesWithWrappedLine && charIndex === len - 1) {\n                const prevCharCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const isSingleTrailingSpace = (chCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n                if (isSingleTrailingSpace) {\n                    continue;\n                }\n            }\n            if (selections && (!currentSelection || currentSelection.startOffset > charIndex || currentSelection.endOffset <= charIndex)) {\n                // If rendering whitespace on selection, check that the charIndex falls within a selection\n                continue;\n            }\n            const visibleRange = ctx.visibleRangeForPosition(new Position(lineNumber, charIndex + 1));\n            if (!visibleRange) {\n                continue;\n            }\n            if (USE_SVG) {\n                maxLeft = Math.max(maxLeft, visibleRange.left);\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += this._renderArrow(lineHeight, spaceWidth, visibleRange.left);\n                }\n                else {\n                    result += `<circle cx=\"${(visibleRange.left + spaceWidth / 2).toFixed(2)}\" cy=\"${(lineHeight / 2).toFixed(2)}\" r=\"${(spaceWidth / 7).toFixed(2)}\" />`;\n                }\n            }\n            else {\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${canUseHalfwidthRightwardsArrow ? String.fromCharCode(0xFFEB) : String.fromCharCode(0x2192)}</div>`;\n                }\n                else {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${String.fromCharCode(renderSpaceCharCode)}</div>`;\n                }\n            }\n        }\n        if (USE_SVG) {\n            maxLeft = Math.round(maxLeft + spaceWidth);\n            return (`<svg style=\"position:absolute;width:${maxLeft}px;height:${lineHeight}px\" viewBox=\"0 0 ${maxLeft} ${lineHeight}\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"${color}\">`\n                + result\n                + `</svg>`);\n        }\n        return result;\n    }\n    _renderArrow(lineHeight, spaceWidth, left) {\n        const strokeWidth = spaceWidth / 7;\n        const width = spaceWidth;\n        const dy = lineHeight / 2;\n        const dx = left;\n        const p1 = { x: 0, y: strokeWidth / 2 };\n        const p2 = { x: 100 / 125 * width, y: p1.y };\n        const p3 = { x: p2.x - 0.2 * p2.x, y: p2.y + 0.2 * p2.x };\n        const p4 = { x: p3.x + 0.1 * p2.x, y: p3.y + 0.1 * p2.x };\n        const p5 = { x: p4.x + 0.35 * p2.x, y: p4.y - 0.35 * p2.x };\n        const p6 = { x: p5.x, y: -p5.y };\n        const p7 = { x: p4.x, y: -p4.y };\n        const p8 = { x: p3.x, y: -p3.y };\n        const p9 = { x: p2.x, y: -p2.y };\n        const p10 = { x: p1.x, y: -p1.y };\n        const p = [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10];\n        const parts = p.map((p) => `${(dx + p.x).toFixed(2)} ${(dy + p.y).toFixed(2)}`).join(' L ');\n        return `<path d=\"M ${parts}\" />`;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nclass WhitespaceOptions {\n    constructor(config) {\n        const options = config.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const experimentalWhitespaceRendering = options.get(38 /* EditorOption.experimentalWhitespaceRendering */);\n        if (experimentalWhitespaceRendering === 'off') {\n            // whitespace is rendered in the view line\n            this.renderWhitespace = 'none';\n            this.renderWithSVG = false;\n        }\n        else if (experimentalWhitespaceRendering === 'svg') {\n            this.renderWhitespace = options.get(98 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = true;\n        }\n        else {\n            this.renderWhitespace = options.get(98 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = false;\n        }\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(116 /* EditorOption.stopRenderingLineAfter */);\n    }\n    equals(other) {\n        return (this.renderWhitespace === other.renderWhitespace\n            && this.renderWithSVG === other.renderWithSVG\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}