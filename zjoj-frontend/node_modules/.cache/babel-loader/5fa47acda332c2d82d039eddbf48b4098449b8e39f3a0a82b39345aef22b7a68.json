{"ast":null,"code":"import { defineComponent, toRefs, computed, createVNode, mergeProps } from \"vue\";\nimport { getPrefixCls } from \"../_utils/global-config.js\";\nimport Base from \"./base.js\";\nvar TypographyParagraph = defineComponent({\n  name: \"TypographyParagraph\",\n  inheritAttrs: false,\n  props: {\n    blockquote: {\n      type: Boolean\n    },\n    spacing: {\n      type: String,\n      default: \"default\"\n    }\n  },\n  setup(props) {\n    const {\n      blockquote,\n      spacing\n    } = toRefs(props);\n    const prefixCls = getPrefixCls(\"typography\");\n    const component = computed(() => (blockquote == null ? void 0 : blockquote.value) ? \"blockquote\" : \"div\");\n    const classNames = computed(() => [{\n      [`${prefixCls}-spacing-close`]: (spacing == null ? void 0 : spacing.value) === \"close\"\n    }]);\n    return {\n      component,\n      classNames\n    };\n  },\n  render() {\n    const {\n      component,\n      classNames\n    } = this;\n    return createVNode(Base, mergeProps({\n      \"class\": classNames\n    }, this.$attrs, {\n      \"component\": component\n    }), this.$slots);\n  }\n});\nexport { TypographyParagraph as default };","map":{"version":3,"names":["defineComponent","toRefs","computed","createVNode","mergeProps","getPrefixCls","Base","TypographyParagraph","name","inheritAttrs","props","blockquote","type","Boolean","spacing","String","default","setup","prefixCls","component","value","classNames","render","$attrs","$slots"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/@arco-design/web-vue/es/typography/paragraph.js"],"sourcesContent":["import { defineComponent, toRefs, computed, createVNode, mergeProps } from \"vue\";\nimport { getPrefixCls } from \"../_utils/global-config.js\";\nimport Base from \"./base.js\";\nvar TypographyParagraph = defineComponent({\n  name: \"TypographyParagraph\",\n  inheritAttrs: false,\n  props: {\n    blockquote: {\n      type: Boolean\n    },\n    spacing: {\n      type: String,\n      default: \"default\"\n    }\n  },\n  setup(props) {\n    const {\n      blockquote,\n      spacing\n    } = toRefs(props);\n    const prefixCls = getPrefixCls(\"typography\");\n    const component = computed(() => (blockquote == null ? void 0 : blockquote.value) ? \"blockquote\" : \"div\");\n    const classNames = computed(() => [{\n      [`${prefixCls}-spacing-close`]: (spacing == null ? void 0 : spacing.value) === \"close\"\n    }]);\n    return {\n      component,\n      classNames\n    };\n  },\n  render() {\n    const {\n      component,\n      classNames\n    } = this;\n    return createVNode(Base, mergeProps({\n      \"class\": classNames\n    }, this.$attrs, {\n      \"component\": component\n    }), this.$slots);\n  }\n});\nexport { TypographyParagraph as default };\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,QAAQ,KAAK;AAChF,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAOC,IAAI,MAAM,WAAW;AAC5B,IAAIC,mBAAmB,GAAGP,eAAe,CAAC;EACxCQ,IAAI,EAAE,qBAAqB;EAC3BC,YAAY,EAAE,KAAK;EACnBC,KAAK,EAAE;IACLC,UAAU,EAAE;MACVC,IAAI,EAAEC;IACR,CAAC;IACDC,OAAO,EAAE;MACPF,IAAI,EAAEG,MAAM;MACZC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,KAAKA,CAACP,KAAK,EAAE;IACX,MAAM;MACJC,UAAU;MACVG;IACF,CAAC,GAAGb,MAAM,CAACS,KAAK,CAAC;IACjB,MAAMQ,SAAS,GAAGb,YAAY,CAAC,YAAY,CAAC;IAC5C,MAAMc,SAAS,GAAGjB,QAAQ,CAAC,MAAM,CAACS,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACS,KAAK,IAAI,YAAY,GAAG,KAAK,CAAC;IACzG,MAAMC,UAAU,GAAGnB,QAAQ,CAAC,MAAM,CAAC;MACjC,CAAE,GAAEgB,SAAU,gBAAe,GAAG,CAACJ,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACM,KAAK,MAAM;IACjF,CAAC,CAAC,CAAC;IACH,OAAO;MACLD,SAAS;MACTE;IACF,CAAC;EACH,CAAC;EACDC,MAAMA,CAAA,EAAG;IACP,MAAM;MACJH,SAAS;MACTE;IACF,CAAC,GAAG,IAAI;IACR,OAAOlB,WAAW,CAACG,IAAI,EAAEF,UAAU,CAAC;MAClC,OAAO,EAAEiB;IACX,CAAC,EAAE,IAAI,CAACE,MAAM,EAAE;MACd,WAAW,EAAEJ;IACf,CAAC,CAAC,EAAE,IAAI,CAACK,MAAM,CAAC;EAClB;AACF,CAAC,CAAC;AACF,SAASjB,mBAAmB,IAAIS,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}