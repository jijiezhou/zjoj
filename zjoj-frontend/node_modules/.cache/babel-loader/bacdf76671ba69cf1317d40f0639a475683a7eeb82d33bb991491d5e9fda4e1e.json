{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getActiveElement } from '../../../../base/browser/dom.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { EditorAction2 } from '../../editorExtensions.js';\nimport { ICodeEditorService } from '../../services/codeEditorService.js';\nimport { DiffEditorWidget } from './diffEditorWidget.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { localize } from '../../../../nls.js';\nimport { Action2, MenuId, MenuRegistry, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyEqualsExpr, ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nexport class ToggleCollapseUnchangedRegions extends Action2 {\n  constructor() {\n    super({\n      id: 'diffEditor.toggleCollapseUnchangedRegions',\n      title: {\n        value: localize('toggleCollapseUnchangedRegions', \"Toggle Collapse Unchanged Regions\"),\n        original: 'Toggle Collapse Unchanged Regions'\n      },\n      icon: Codicon.map,\n      toggled: ContextKeyExpr.has('config.diffEditor.hideUnchangedRegions.enabled'),\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      menu: {\n        when: ContextKeyExpr.has('isInDiffEditor'),\n        id: MenuId.EditorTitle,\n        order: 22,\n        group: 'navigation'\n      }\n    });\n  }\n  run(accessor, ...args) {\n    const configurationService = accessor.get(IConfigurationService);\n    const newValue = !configurationService.getValue('diffEditor.hideUnchangedRegions.enabled');\n    configurationService.updateValue('diffEditor.hideUnchangedRegions.enabled', newValue);\n  }\n}\nregisterAction2(ToggleCollapseUnchangedRegions);\nexport class ToggleShowMovedCodeBlocks extends Action2 {\n  constructor() {\n    super({\n      id: 'diffEditor.toggleShowMovedCodeBlocks',\n      title: {\n        value: localize('toggleShowMovedCodeBlocks', \"Toggle Show Moved Code Blocks\"),\n        original: 'Toggle Show Moved Code Blocks'\n      },\n      precondition: ContextKeyExpr.has('isInDiffEditor')\n    });\n  }\n  run(accessor, ...args) {\n    const configurationService = accessor.get(IConfigurationService);\n    const newValue = !configurationService.getValue('diffEditor.experimental.showMoves');\n    configurationService.updateValue('diffEditor.experimental.showMoves', newValue);\n  }\n}\nregisterAction2(ToggleShowMovedCodeBlocks);\nexport class ToggleUseInlineViewWhenSpaceIsLimited extends Action2 {\n  constructor() {\n    super({\n      id: 'diffEditor.toggleUseInlineViewWhenSpaceIsLimited',\n      title: {\n        value: localize('toggleUseInlineViewWhenSpaceIsLimited', \"Toggle Use Inline View When Space Is Limited\"),\n        original: 'Toggle Use Inline View When Space Is Limited'\n      },\n      precondition: ContextKeyExpr.has('isInDiffEditor')\n    });\n  }\n  run(accessor, ...args) {\n    const configurationService = accessor.get(IConfigurationService);\n    const newValue = !configurationService.getValue('diffEditor.useInlineViewWhenSpaceIsLimited');\n    configurationService.updateValue('diffEditor.useInlineViewWhenSpaceIsLimited', newValue);\n  }\n}\nregisterAction2(ToggleUseInlineViewWhenSpaceIsLimited);\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n  command: {\n    id: new ToggleUseInlineViewWhenSpaceIsLimited().desc.id,\n    title: localize('useInlineViewWhenSpaceIsLimited', \"Use Inline View When Space Is Limited\"),\n    toggled: ContextKeyExpr.has('config.diffEditor.useInlineViewWhenSpaceIsLimited'),\n    precondition: ContextKeyExpr.has('isInDiffEditor')\n  },\n  order: 11,\n  group: '1_diff',\n  when: ContextKeyExpr.and(EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached, ContextKeyExpr.has('isInDiffEditor'))\n});\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n  command: {\n    id: new ToggleShowMovedCodeBlocks().desc.id,\n    title: localize('showMoves', \"Show Moved Code Blocks\"),\n    icon: Codicon.move,\n    toggled: ContextKeyEqualsExpr.create('config.diffEditor.experimental.showMoves', true),\n    precondition: ContextKeyExpr.has('isInDiffEditor')\n  },\n  order: 10,\n  group: '1_diff',\n  when: ContextKeyExpr.has('isInDiffEditor')\n});\nconst diffEditorCategory = {\n  value: localize('diffEditor', 'Diff Editor'),\n  original: 'Diff Editor'\n};\nexport class SwitchSide extends EditorAction2 {\n  constructor() {\n    super({\n      id: 'diffEditor.switchSide',\n      title: {\n        value: localize('switchSide', \"Switch Side\"),\n        original: 'Switch Side'\n      },\n      icon: Codicon.arrowSwap,\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      f1: true,\n      category: diffEditorCategory\n    });\n  }\n  runEditorCommand(accessor, editor, arg) {\n    const diffEditor = findFocusedDiffEditor(accessor);\n    if (diffEditor instanceof DiffEditorWidget) {\n      if (arg && arg.dryRun) {\n        return {\n          destinationSelection: diffEditor.mapToOtherSide().destinationSelection\n        };\n      } else {\n        diffEditor.switchSide();\n      }\n    }\n    return undefined;\n  }\n}\nregisterAction2(SwitchSide);\nexport class ExitCompareMove extends EditorAction2 {\n  constructor() {\n    super({\n      id: 'diffEditor.exitCompareMove',\n      title: {\n        value: localize('exitCompareMove', \"Exit Compare Move\"),\n        original: 'Exit Compare Move'\n      },\n      icon: Codicon.close,\n      precondition: EditorContextKeys.comparingMovedCode,\n      f1: false,\n      category: diffEditorCategory,\n      keybinding: {\n        weight: 10000,\n        primary: 9 /* KeyCode.Escape */\n      }\n    });\n  }\n  runEditorCommand(accessor, editor, ...args) {\n    const diffEditor = findFocusedDiffEditor(accessor);\n    if (diffEditor instanceof DiffEditorWidget) {\n      diffEditor.exitCompareMove();\n    }\n  }\n}\nregisterAction2(ExitCompareMove);\nexport class CollapseAllUnchangedRegions extends EditorAction2 {\n  constructor() {\n    super({\n      id: 'diffEditor.collapseAllUnchangedRegions',\n      title: {\n        value: localize('collapseAllUnchangedRegions', \"Collapse All Unchanged Regions\"),\n        original: 'Collapse All Unchanged Regions'\n      },\n      icon: Codicon.fold,\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      f1: true,\n      category: diffEditorCategory\n    });\n  }\n  runEditorCommand(accessor, editor, ...args) {\n    const diffEditor = findFocusedDiffEditor(accessor);\n    if (diffEditor instanceof DiffEditorWidget) {\n      diffEditor.collapseAllUnchangedRegions();\n    }\n  }\n}\nregisterAction2(CollapseAllUnchangedRegions);\nexport class ShowAllUnchangedRegions extends EditorAction2 {\n  constructor() {\n    super({\n      id: 'diffEditor.showAllUnchangedRegions',\n      title: {\n        value: localize('showAllUnchangedRegions', \"Show All Unchanged Regions\"),\n        original: 'Show All Unchanged Regions'\n      },\n      icon: Codicon.unfold,\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      f1: true,\n      category: diffEditorCategory\n    });\n  }\n  runEditorCommand(accessor, editor, ...args) {\n    const diffEditor = findFocusedDiffEditor(accessor);\n    if (diffEditor instanceof DiffEditorWidget) {\n      diffEditor.showAllUnchangedRegions();\n    }\n  }\n}\nregisterAction2(ShowAllUnchangedRegions);\nconst accessibleDiffViewerCategory = {\n  value: localize('accessibleDiffViewer', 'Accessible Diff Viewer'),\n  original: 'Accessible Diff Viewer'\n};\nexport class AccessibleDiffViewerNext extends Action2 {\n  constructor() {\n    super({\n      id: AccessibleDiffViewerNext.id,\n      title: {\n        value: localize('editor.action.accessibleDiffViewer.next', \"Go to Next Difference\"),\n        original: 'Go to Next Difference'\n      },\n      category: accessibleDiffViewerCategory,\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      keybinding: {\n        primary: 65 /* KeyCode.F7 */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      f1: true\n    });\n  }\n  run(accessor) {\n    const diffEditor = findFocusedDiffEditor(accessor);\n    diffEditor === null || diffEditor === void 0 ? void 0 : diffEditor.accessibleDiffViewerNext();\n  }\n}\nAccessibleDiffViewerNext.id = 'editor.action.accessibleDiffViewer.next';\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n  command: {\n    id: AccessibleDiffViewerNext.id,\n    title: localize('Open Accessible Diff Viewer', \"Open Accessible Diff Viewer\"),\n    precondition: ContextKeyExpr.has('isInDiffEditor')\n  },\n  order: 10,\n  group: '2_diff',\n  when: ContextKeyExpr.and(EditorContextKeys.accessibleDiffViewerVisible.negate(), ContextKeyExpr.has('isInDiffEditor'))\n});\nexport class AccessibleDiffViewerPrev extends Action2 {\n  constructor() {\n    super({\n      id: AccessibleDiffViewerPrev.id,\n      title: {\n        value: localize('editor.action.accessibleDiffViewer.prev', \"Go to Previous Difference\"),\n        original: 'Go to Previous Difference'\n      },\n      category: accessibleDiffViewerCategory,\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      keybinding: {\n        primary: 1024 /* KeyMod.Shift */ | 65 /* KeyCode.F7 */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      f1: true\n    });\n  }\n  run(accessor) {\n    const diffEditor = findFocusedDiffEditor(accessor);\n    diffEditor === null || diffEditor === void 0 ? void 0 : diffEditor.accessibleDiffViewerPrev();\n  }\n}\nAccessibleDiffViewerPrev.id = 'editor.action.accessibleDiffViewer.prev';\nexport function findFocusedDiffEditor(accessor) {\n  var _a;\n  const codeEditorService = accessor.get(ICodeEditorService);\n  const diffEditors = codeEditorService.listDiffEditors();\n  const activeCodeEditor = (_a = codeEditorService.getFocusedCodeEditor()) !== null && _a !== void 0 ? _a : codeEditorService.getActiveCodeEditor();\n  if (!activeCodeEditor) {\n    return null;\n  }\n  for (let i = 0, len = diffEditors.length; i < len; i++) {\n    const diffEditor = diffEditors[i];\n    if (diffEditor.getModifiedEditor().getId() === activeCodeEditor.getId() || diffEditor.getOriginalEditor().getId() === activeCodeEditor.getId()) {\n      return diffEditor;\n    }\n  }\n  const activeElement = getActiveElement();\n  if (activeElement) {\n    for (const d of diffEditors) {\n      const container = d.getContainerDomNode();\n      if (isElementOrParentOf(container, activeElement)) {\n        return d;\n      }\n    }\n  }\n  return null;\n}\nfunction isElementOrParentOf(elementOrParent, element) {\n  let e = element;\n  while (e) {\n    if (e === elementOrParent) {\n      return true;\n    }\n    e = e.parentElement;\n  }\n  return false;\n}\nCommandsRegistry.registerCommandAlias('editor.action.diffReview.next', AccessibleDiffViewerNext.id);\nregisterAction2(AccessibleDiffViewerNext);\nCommandsRegistry.registerCommandAlias('editor.action.diffReview.prev', AccessibleDiffViewerPrev.id);\nregisterAction2(AccessibleDiffViewerPrev);","map":{"version":3,"names":["getActiveElement","Codicon","EditorAction2","ICodeEditorService","DiffEditorWidget","EditorContextKeys","localize","Action2","MenuId","MenuRegistry","registerAction2","CommandsRegistry","IConfigurationService","ContextKeyEqualsExpr","ContextKeyExpr","ToggleCollapseUnchangedRegions","constructor","id","title","value","original","icon","map","toggled","has","precondition","menu","when","EditorTitle","order","group","run","accessor","args","configurationService","get","newValue","getValue","updateValue","ToggleShowMovedCodeBlocks","ToggleUseInlineViewWhenSpaceIsLimited","appendMenuItem","command","desc","and","diffEditorRenderSideBySideInlineBreakpointReached","move","create","diffEditorCategory","SwitchSide","arrowSwap","f1","category","runEditorCommand","editor","arg","diffEditor","findFocusedDiffEditor","dryRun","destinationSelection","mapToOtherSide","switchSide","undefined","ExitCompareMove","close","comparingMovedCode","keybinding","weight","primary","exitCompareMove","CollapseAllUnchangedRegions","fold","collapseAllUnchangedRegions","ShowAllUnchangedRegions","unfold","showAllUnchangedRegions","accessibleDiffViewerCategory","AccessibleDiffViewerNext","accessibleDiffViewerNext","accessibleDiffViewerVisible","negate","AccessibleDiffViewerPrev","accessibleDiffViewerPrev","_a","codeEditorService","diffEditors","listDiffEditors","activeCodeEditor","getFocusedCodeEditor","getActiveCodeEditor","i","len","length","getModifiedEditor","getId","getOriginalEditor","activeElement","d","container","getContainerDomNode","isElementOrParentOf","elementOrParent","element","e","parentElement","registerCommandAlias"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditor/diffEditor.contribution.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getActiveElement } from '../../../../base/browser/dom.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { EditorAction2 } from '../../editorExtensions.js';\nimport { ICodeEditorService } from '../../services/codeEditorService.js';\nimport { DiffEditorWidget } from './diffEditorWidget.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { localize } from '../../../../nls.js';\nimport { Action2, MenuId, MenuRegistry, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyEqualsExpr, ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nexport class ToggleCollapseUnchangedRegions extends Action2 {\n    constructor() {\n        super({\n            id: 'diffEditor.toggleCollapseUnchangedRegions',\n            title: { value: localize('toggleCollapseUnchangedRegions', \"Toggle Collapse Unchanged Regions\"), original: 'Toggle Collapse Unchanged Regions' },\n            icon: Codicon.map,\n            toggled: ContextKeyExpr.has('config.diffEditor.hideUnchangedRegions.enabled'),\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\n            menu: {\n                when: ContextKeyExpr.has('isInDiffEditor'),\n                id: MenuId.EditorTitle,\n                order: 22,\n                group: 'navigation',\n            },\n        });\n    }\n    run(accessor, ...args) {\n        const configurationService = accessor.get(IConfigurationService);\n        const newValue = !configurationService.getValue('diffEditor.hideUnchangedRegions.enabled');\n        configurationService.updateValue('diffEditor.hideUnchangedRegions.enabled', newValue);\n    }\n}\nregisterAction2(ToggleCollapseUnchangedRegions);\nexport class ToggleShowMovedCodeBlocks extends Action2 {\n    constructor() {\n        super({\n            id: 'diffEditor.toggleShowMovedCodeBlocks',\n            title: { value: localize('toggleShowMovedCodeBlocks', \"Toggle Show Moved Code Blocks\"), original: 'Toggle Show Moved Code Blocks' },\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\n        });\n    }\n    run(accessor, ...args) {\n        const configurationService = accessor.get(IConfigurationService);\n        const newValue = !configurationService.getValue('diffEditor.experimental.showMoves');\n        configurationService.updateValue('diffEditor.experimental.showMoves', newValue);\n    }\n}\nregisterAction2(ToggleShowMovedCodeBlocks);\nexport class ToggleUseInlineViewWhenSpaceIsLimited extends Action2 {\n    constructor() {\n        super({\n            id: 'diffEditor.toggleUseInlineViewWhenSpaceIsLimited',\n            title: { value: localize('toggleUseInlineViewWhenSpaceIsLimited', \"Toggle Use Inline View When Space Is Limited\"), original: 'Toggle Use Inline View When Space Is Limited' },\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\n        });\n    }\n    run(accessor, ...args) {\n        const configurationService = accessor.get(IConfigurationService);\n        const newValue = !configurationService.getValue('diffEditor.useInlineViewWhenSpaceIsLimited');\n        configurationService.updateValue('diffEditor.useInlineViewWhenSpaceIsLimited', newValue);\n    }\n}\nregisterAction2(ToggleUseInlineViewWhenSpaceIsLimited);\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n    command: {\n        id: new ToggleUseInlineViewWhenSpaceIsLimited().desc.id,\n        title: localize('useInlineViewWhenSpaceIsLimited', \"Use Inline View When Space Is Limited\"),\n        toggled: ContextKeyExpr.has('config.diffEditor.useInlineViewWhenSpaceIsLimited'),\n        precondition: ContextKeyExpr.has('isInDiffEditor'),\n    },\n    order: 11,\n    group: '1_diff',\n    when: ContextKeyExpr.and(EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached, ContextKeyExpr.has('isInDiffEditor')),\n});\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n    command: {\n        id: new ToggleShowMovedCodeBlocks().desc.id,\n        title: localize('showMoves', \"Show Moved Code Blocks\"),\n        icon: Codicon.move,\n        toggled: ContextKeyEqualsExpr.create('config.diffEditor.experimental.showMoves', true),\n        precondition: ContextKeyExpr.has('isInDiffEditor'),\n    },\n    order: 10,\n    group: '1_diff',\n    when: ContextKeyExpr.has('isInDiffEditor'),\n});\nconst diffEditorCategory = {\n    value: localize('diffEditor', 'Diff Editor'),\n    original: 'Diff Editor',\n};\nexport class SwitchSide extends EditorAction2 {\n    constructor() {\n        super({\n            id: 'diffEditor.switchSide',\n            title: { value: localize('switchSide', \"Switch Side\"), original: 'Switch Side' },\n            icon: Codicon.arrowSwap,\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\n            f1: true,\n            category: diffEditorCategory,\n        });\n    }\n    runEditorCommand(accessor, editor, arg) {\n        const diffEditor = findFocusedDiffEditor(accessor);\n        if (diffEditor instanceof DiffEditorWidget) {\n            if (arg && arg.dryRun) {\n                return { destinationSelection: diffEditor.mapToOtherSide().destinationSelection };\n            }\n            else {\n                diffEditor.switchSide();\n            }\n        }\n        return undefined;\n    }\n}\nregisterAction2(SwitchSide);\nexport class ExitCompareMove extends EditorAction2 {\n    constructor() {\n        super({\n            id: 'diffEditor.exitCompareMove',\n            title: { value: localize('exitCompareMove', \"Exit Compare Move\"), original: 'Exit Compare Move' },\n            icon: Codicon.close,\n            precondition: EditorContextKeys.comparingMovedCode,\n            f1: false,\n            category: diffEditorCategory,\n            keybinding: {\n                weight: 10000,\n                primary: 9 /* KeyCode.Escape */,\n            }\n        });\n    }\n    runEditorCommand(accessor, editor, ...args) {\n        const diffEditor = findFocusedDiffEditor(accessor);\n        if (diffEditor instanceof DiffEditorWidget) {\n            diffEditor.exitCompareMove();\n        }\n    }\n}\nregisterAction2(ExitCompareMove);\nexport class CollapseAllUnchangedRegions extends EditorAction2 {\n    constructor() {\n        super({\n            id: 'diffEditor.collapseAllUnchangedRegions',\n            title: { value: localize('collapseAllUnchangedRegions', \"Collapse All Unchanged Regions\"), original: 'Collapse All Unchanged Regions' },\n            icon: Codicon.fold,\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\n            f1: true,\n            category: diffEditorCategory,\n        });\n    }\n    runEditorCommand(accessor, editor, ...args) {\n        const diffEditor = findFocusedDiffEditor(accessor);\n        if (diffEditor instanceof DiffEditorWidget) {\n            diffEditor.collapseAllUnchangedRegions();\n        }\n    }\n}\nregisterAction2(CollapseAllUnchangedRegions);\nexport class ShowAllUnchangedRegions extends EditorAction2 {\n    constructor() {\n        super({\n            id: 'diffEditor.showAllUnchangedRegions',\n            title: { value: localize('showAllUnchangedRegions', \"Show All Unchanged Regions\"), original: 'Show All Unchanged Regions' },\n            icon: Codicon.unfold,\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\n            f1: true,\n            category: diffEditorCategory,\n        });\n    }\n    runEditorCommand(accessor, editor, ...args) {\n        const diffEditor = findFocusedDiffEditor(accessor);\n        if (diffEditor instanceof DiffEditorWidget) {\n            diffEditor.showAllUnchangedRegions();\n        }\n    }\n}\nregisterAction2(ShowAllUnchangedRegions);\nconst accessibleDiffViewerCategory = {\n    value: localize('accessibleDiffViewer', 'Accessible Diff Viewer'),\n    original: 'Accessible Diff Viewer',\n};\nexport class AccessibleDiffViewerNext extends Action2 {\n    constructor() {\n        super({\n            id: AccessibleDiffViewerNext.id,\n            title: { value: localize('editor.action.accessibleDiffViewer.next', \"Go to Next Difference\"), original: 'Go to Next Difference' },\n            category: accessibleDiffViewerCategory,\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\n            keybinding: {\n                primary: 65 /* KeyCode.F7 */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            f1: true,\n        });\n    }\n    run(accessor) {\n        const diffEditor = findFocusedDiffEditor(accessor);\n        diffEditor === null || diffEditor === void 0 ? void 0 : diffEditor.accessibleDiffViewerNext();\n    }\n}\nAccessibleDiffViewerNext.id = 'editor.action.accessibleDiffViewer.next';\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n    command: {\n        id: AccessibleDiffViewerNext.id,\n        title: localize('Open Accessible Diff Viewer', \"Open Accessible Diff Viewer\"),\n        precondition: ContextKeyExpr.has('isInDiffEditor'),\n    },\n    order: 10,\n    group: '2_diff',\n    when: ContextKeyExpr.and(EditorContextKeys.accessibleDiffViewerVisible.negate(), ContextKeyExpr.has('isInDiffEditor')),\n});\nexport class AccessibleDiffViewerPrev extends Action2 {\n    constructor() {\n        super({\n            id: AccessibleDiffViewerPrev.id,\n            title: { value: localize('editor.action.accessibleDiffViewer.prev', \"Go to Previous Difference\"), original: 'Go to Previous Difference' },\n            category: accessibleDiffViewerCategory,\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\n            keybinding: {\n                primary: 1024 /* KeyMod.Shift */ | 65 /* KeyCode.F7 */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            f1: true,\n        });\n    }\n    run(accessor) {\n        const diffEditor = findFocusedDiffEditor(accessor);\n        diffEditor === null || diffEditor === void 0 ? void 0 : diffEditor.accessibleDiffViewerPrev();\n    }\n}\nAccessibleDiffViewerPrev.id = 'editor.action.accessibleDiffViewer.prev';\nexport function findFocusedDiffEditor(accessor) {\n    var _a;\n    const codeEditorService = accessor.get(ICodeEditorService);\n    const diffEditors = codeEditorService.listDiffEditors();\n    const activeCodeEditor = (_a = codeEditorService.getFocusedCodeEditor()) !== null && _a !== void 0 ? _a : codeEditorService.getActiveCodeEditor();\n    if (!activeCodeEditor) {\n        return null;\n    }\n    for (let i = 0, len = diffEditors.length; i < len; i++) {\n        const diffEditor = diffEditors[i];\n        if (diffEditor.getModifiedEditor().getId() === activeCodeEditor.getId() || diffEditor.getOriginalEditor().getId() === activeCodeEditor.getId()) {\n            return diffEditor;\n        }\n    }\n    const activeElement = getActiveElement();\n    if (activeElement) {\n        for (const d of diffEditors) {\n            const container = d.getContainerDomNode();\n            if (isElementOrParentOf(container, activeElement)) {\n                return d;\n            }\n        }\n    }\n    return null;\n}\nfunction isElementOrParentOf(elementOrParent, element) {\n    let e = element;\n    while (e) {\n        if (e === elementOrParent) {\n            return true;\n        }\n        e = e.parentElement;\n    }\n    return false;\n}\nCommandsRegistry.registerCommandAlias('editor.action.diffReview.next', AccessibleDiffViewerNext.id);\nregisterAction2(AccessibleDiffViewerNext);\nCommandsRegistry.registerCommandAlias('editor.action.diffReview.prev', AccessibleDiffViewerPrev.id);\nregisterAction2(AccessibleDiffViewerPrev);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}