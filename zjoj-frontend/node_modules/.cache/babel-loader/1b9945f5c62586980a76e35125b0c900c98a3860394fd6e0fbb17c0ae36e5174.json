{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $window } from '../../../base/browser/window.js';\nimport { applyFontInfo } from './domFontInfo.js';\nexport class CharWidthRequest {\n  constructor(chr, type) {\n    this.chr = chr;\n    this.type = type;\n    this.width = 0;\n  }\n  fulfill(width) {\n    this.width = width;\n  }\n}\nclass DomCharWidthReader {\n  constructor(bareFontInfo, requests) {\n    this._bareFontInfo = bareFontInfo;\n    this._requests = requests;\n    this._container = null;\n    this._testElements = null;\n  }\n  read() {\n    // Create a test container with all these test elements\n    this._createDomElements();\n    // Add the container to the DOM\n    $window.document.body.appendChild(this._container);\n    // Read character widths\n    this._readFromDomElements();\n    // Remove the container from the DOM\n    $window.document.body.removeChild(this._container);\n    this._container = null;\n    this._testElements = null;\n  }\n  _createDomElements() {\n    const container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.top = '-50000px';\n    container.style.width = '50000px';\n    const regularDomNode = document.createElement('div');\n    applyFontInfo(regularDomNode, this._bareFontInfo);\n    container.appendChild(regularDomNode);\n    const boldDomNode = document.createElement('div');\n    applyFontInfo(boldDomNode, this._bareFontInfo);\n    boldDomNode.style.fontWeight = 'bold';\n    container.appendChild(boldDomNode);\n    const italicDomNode = document.createElement('div');\n    applyFontInfo(italicDomNode, this._bareFontInfo);\n    italicDomNode.style.fontStyle = 'italic';\n    container.appendChild(italicDomNode);\n    const testElements = [];\n    for (const request of this._requests) {\n      let parent;\n      if (request.type === 0 /* CharWidthRequestType.Regular */) {\n        parent = regularDomNode;\n      }\n      if (request.type === 2 /* CharWidthRequestType.Bold */) {\n        parent = boldDomNode;\n      }\n      if (request.type === 1 /* CharWidthRequestType.Italic */) {\n        parent = italicDomNode;\n      }\n      parent.appendChild(document.createElement('br'));\n      const testElement = document.createElement('span');\n      DomCharWidthReader._render(testElement, request);\n      parent.appendChild(testElement);\n      testElements.push(testElement);\n    }\n    this._container = container;\n    this._testElements = testElements;\n  }\n  static _render(testElement, request) {\n    if (request.chr === ' ') {\n      let htmlString = '\\u00a0';\n      // Repeat character 256 (2^8) times\n      for (let i = 0; i < 8; i++) {\n        htmlString += htmlString;\n      }\n      testElement.innerText = htmlString;\n    } else {\n      let testString = request.chr;\n      // Repeat character 256 (2^8) times\n      for (let i = 0; i < 8; i++) {\n        testString += testString;\n      }\n      testElement.textContent = testString;\n    }\n  }\n  _readFromDomElements() {\n    for (let i = 0, len = this._requests.length; i < len; i++) {\n      const request = this._requests[i];\n      const testElement = this._testElements[i];\n      request.fulfill(testElement.offsetWidth / 256);\n    }\n  }\n}\nexport function readCharWidths(bareFontInfo, requests) {\n  const reader = new DomCharWidthReader(bareFontInfo, requests);\n  reader.read();\n}","map":{"version":3,"names":["$window","applyFontInfo","CharWidthRequest","constructor","chr","type","width","fulfill","DomCharWidthReader","bareFontInfo","requests","_bareFontInfo","_requests","_container","_testElements","read","_createDomElements","document","body","appendChild","_readFromDomElements","removeChild","container","createElement","style","position","top","regularDomNode","boldDomNode","fontWeight","italicDomNode","fontStyle","testElements","request","parent","testElement","_render","push","htmlString","i","innerText","testString","textContent","len","length","offsetWidth","readCharWidths","reader"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/browser/config/charWidthReader.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $window } from '../../../base/browser/window.js';\nimport { applyFontInfo } from './domFontInfo.js';\nexport class CharWidthRequest {\n    constructor(chr, type) {\n        this.chr = chr;\n        this.type = type;\n        this.width = 0;\n    }\n    fulfill(width) {\n        this.width = width;\n    }\n}\nclass DomCharWidthReader {\n    constructor(bareFontInfo, requests) {\n        this._bareFontInfo = bareFontInfo;\n        this._requests = requests;\n        this._container = null;\n        this._testElements = null;\n    }\n    read() {\n        // Create a test container with all these test elements\n        this._createDomElements();\n        // Add the container to the DOM\n        $window.document.body.appendChild(this._container);\n        // Read character widths\n        this._readFromDomElements();\n        // Remove the container from the DOM\n        $window.document.body.removeChild(this._container);\n        this._container = null;\n        this._testElements = null;\n    }\n    _createDomElements() {\n        const container = document.createElement('div');\n        container.style.position = 'absolute';\n        container.style.top = '-50000px';\n        container.style.width = '50000px';\n        const regularDomNode = document.createElement('div');\n        applyFontInfo(regularDomNode, this._bareFontInfo);\n        container.appendChild(regularDomNode);\n        const boldDomNode = document.createElement('div');\n        applyFontInfo(boldDomNode, this._bareFontInfo);\n        boldDomNode.style.fontWeight = 'bold';\n        container.appendChild(boldDomNode);\n        const italicDomNode = document.createElement('div');\n        applyFontInfo(italicDomNode, this._bareFontInfo);\n        italicDomNode.style.fontStyle = 'italic';\n        container.appendChild(italicDomNode);\n        const testElements = [];\n        for (const request of this._requests) {\n            let parent;\n            if (request.type === 0 /* CharWidthRequestType.Regular */) {\n                parent = regularDomNode;\n            }\n            if (request.type === 2 /* CharWidthRequestType.Bold */) {\n                parent = boldDomNode;\n            }\n            if (request.type === 1 /* CharWidthRequestType.Italic */) {\n                parent = italicDomNode;\n            }\n            parent.appendChild(document.createElement('br'));\n            const testElement = document.createElement('span');\n            DomCharWidthReader._render(testElement, request);\n            parent.appendChild(testElement);\n            testElements.push(testElement);\n        }\n        this._container = container;\n        this._testElements = testElements;\n    }\n    static _render(testElement, request) {\n        if (request.chr === ' ') {\n            let htmlString = '\\u00a0';\n            // Repeat character 256 (2^8) times\n            for (let i = 0; i < 8; i++) {\n                htmlString += htmlString;\n            }\n            testElement.innerText = htmlString;\n        }\n        else {\n            let testString = request.chr;\n            // Repeat character 256 (2^8) times\n            for (let i = 0; i < 8; i++) {\n                testString += testString;\n            }\n            testElement.textContent = testString;\n        }\n    }\n    _readFromDomElements() {\n        for (let i = 0, len = this._requests.length; i < len; i++) {\n            const request = this._requests[i];\n            const testElement = this._testElements[i];\n            request.fulfill(testElement.offsetWidth / 256);\n        }\n    }\n}\nexport function readCharWidths(bareFontInfo, requests) {\n    const reader = new DomCharWidthReader(bareFontInfo, requests);\n    reader.read();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}