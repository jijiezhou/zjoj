{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CachedFunction } from '../../../../base/common/cache.js';\n/**\n * Captures all bracket related configurations for a single language.\n * Immutable.\n*/\nexport class LanguageBracketsConfiguration {\n  constructor(languageId, config) {\n    this.languageId = languageId;\n    const bracketPairs = config.brackets ? filterValidBrackets(config.brackets) : [];\n    const openingBracketInfos = new CachedFunction(bracket => {\n      const closing = new Set();\n      return {\n        info: new OpeningBracketKind(this, bracket, closing),\n        closing\n      };\n    });\n    const closingBracketInfos = new CachedFunction(bracket => {\n      const opening = new Set();\n      const openingColorized = new Set();\n      return {\n        info: new ClosingBracketKind(this, bracket, opening, openingColorized),\n        opening,\n        openingColorized\n      };\n    });\n    for (const [open, close] of bracketPairs) {\n      const opening = openingBracketInfos.get(open);\n      const closing = closingBracketInfos.get(close);\n      opening.closing.add(closing.info);\n      closing.opening.add(opening.info);\n    }\n    // Treat colorized brackets as brackets, and mark them as colorized.\n    const colorizedBracketPairs = config.colorizedBracketPairs ? filterValidBrackets(config.colorizedBracketPairs)\n    // If not configured: Take all brackets except `<` ... `>`\n    // Many languages set < ... > as bracket pair, even though they also use it as comparison operator.\n    // This leads to problems when colorizing this bracket, so we exclude it if not explicitly configured otherwise.\n    // https://github.com/microsoft/vscode/issues/132476\n    : bracketPairs.filter(p => !(p[0] === '<' && p[1] === '>'));\n    for (const [open, close] of colorizedBracketPairs) {\n      const opening = openingBracketInfos.get(open);\n      const closing = closingBracketInfos.get(close);\n      opening.closing.add(closing.info);\n      closing.openingColorized.add(opening.info);\n      closing.opening.add(opening.info);\n    }\n    this._openingBrackets = new Map([...openingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]));\n    this._closingBrackets = new Map([...closingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]));\n  }\n  /**\n   * No two brackets have the same bracket text.\n  */\n  get openingBrackets() {\n    return [...this._openingBrackets.values()];\n  }\n  /**\n   * No two brackets have the same bracket text.\n  */\n  get closingBrackets() {\n    return [...this._closingBrackets.values()];\n  }\n  getOpeningBracketInfo(bracketText) {\n    return this._openingBrackets.get(bracketText);\n  }\n  getClosingBracketInfo(bracketText) {\n    return this._closingBrackets.get(bracketText);\n  }\n  getBracketInfo(bracketText) {\n    return this.getOpeningBracketInfo(bracketText) || this.getClosingBracketInfo(bracketText);\n  }\n}\nfunction filterValidBrackets(bracketPairs) {\n  return bracketPairs.filter(([open, close]) => open !== '' && close !== '');\n}\nexport class BracketKindBase {\n  constructor(config, bracketText) {\n    this.config = config;\n    this.bracketText = bracketText;\n  }\n  get languageId() {\n    return this.config.languageId;\n  }\n}\nexport class OpeningBracketKind extends BracketKindBase {\n  constructor(config, bracketText, openedBrackets) {\n    super(config, bracketText);\n    this.openedBrackets = openedBrackets;\n    this.isOpeningBracket = true;\n  }\n}\nexport class ClosingBracketKind extends BracketKindBase {\n  constructor(config, bracketText,\n  /**\n   * Non empty array of all opening brackets this bracket closes.\n  */\n  openingBrackets, openingColorizedBrackets) {\n    super(config, bracketText);\n    this.openingBrackets = openingBrackets;\n    this.openingColorizedBrackets = openingColorizedBrackets;\n    this.isOpeningBracket = false;\n  }\n  /**\n   * Checks if this bracket closes the given other bracket.\n   * If the bracket infos come from different configurations, this method will return false.\n  */\n  closes(other) {\n    if (other['config'] !== this.config) {\n      return false;\n    }\n    return this.openingBrackets.has(other);\n  }\n  closesColorized(other) {\n    if (other['config'] !== this.config) {\n      return false;\n    }\n    return this.openingColorizedBrackets.has(other);\n  }\n  getOpeningBrackets() {\n    return [...this.openingBrackets];\n  }\n}","map":{"version":3,"names":["CachedFunction","LanguageBracketsConfiguration","constructor","languageId","config","bracketPairs","brackets","filterValidBrackets","openingBracketInfos","bracket","closing","Set","info","OpeningBracketKind","closingBracketInfos","opening","openingColorized","ClosingBracketKind","open","close","get","add","colorizedBracketPairs","filter","p","_openingBrackets","Map","cachedValues","map","k","v","_closingBrackets","openingBrackets","values","closingBrackets","getOpeningBracketInfo","bracketText","getClosingBracketInfo","getBracketInfo","BracketKindBase","openedBrackets","isOpeningBracket","openingColorizedBrackets","closes","other","has","closesColorized","getOpeningBrackets"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/languageBracketsConfiguration.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CachedFunction } from '../../../../base/common/cache.js';\n/**\n * Captures all bracket related configurations for a single language.\n * Immutable.\n*/\nexport class LanguageBracketsConfiguration {\n    constructor(languageId, config) {\n        this.languageId = languageId;\n        const bracketPairs = config.brackets ? filterValidBrackets(config.brackets) : [];\n        const openingBracketInfos = new CachedFunction((bracket) => {\n            const closing = new Set();\n            return {\n                info: new OpeningBracketKind(this, bracket, closing),\n                closing,\n            };\n        });\n        const closingBracketInfos = new CachedFunction((bracket) => {\n            const opening = new Set();\n            const openingColorized = new Set();\n            return {\n                info: new ClosingBracketKind(this, bracket, opening, openingColorized),\n                opening,\n                openingColorized,\n            };\n        });\n        for (const [open, close] of bracketPairs) {\n            const opening = openingBracketInfos.get(open);\n            const closing = closingBracketInfos.get(close);\n            opening.closing.add(closing.info);\n            closing.opening.add(opening.info);\n        }\n        // Treat colorized brackets as brackets, and mark them as colorized.\n        const colorizedBracketPairs = config.colorizedBracketPairs\n            ? filterValidBrackets(config.colorizedBracketPairs)\n            // If not configured: Take all brackets except `<` ... `>`\n            // Many languages set < ... > as bracket pair, even though they also use it as comparison operator.\n            // This leads to problems when colorizing this bracket, so we exclude it if not explicitly configured otherwise.\n            // https://github.com/microsoft/vscode/issues/132476\n            : bracketPairs.filter((p) => !(p[0] === '<' && p[1] === '>'));\n        for (const [open, close] of colorizedBracketPairs) {\n            const opening = openingBracketInfos.get(open);\n            const closing = closingBracketInfos.get(close);\n            opening.closing.add(closing.info);\n            closing.openingColorized.add(opening.info);\n            closing.opening.add(opening.info);\n        }\n        this._openingBrackets = new Map([...openingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]));\n        this._closingBrackets = new Map([...closingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]));\n    }\n    /**\n     * No two brackets have the same bracket text.\n    */\n    get openingBrackets() {\n        return [...this._openingBrackets.values()];\n    }\n    /**\n     * No two brackets have the same bracket text.\n    */\n    get closingBrackets() {\n        return [...this._closingBrackets.values()];\n    }\n    getOpeningBracketInfo(bracketText) {\n        return this._openingBrackets.get(bracketText);\n    }\n    getClosingBracketInfo(bracketText) {\n        return this._closingBrackets.get(bracketText);\n    }\n    getBracketInfo(bracketText) {\n        return this.getOpeningBracketInfo(bracketText) || this.getClosingBracketInfo(bracketText);\n    }\n}\nfunction filterValidBrackets(bracketPairs) {\n    return bracketPairs.filter(([open, close]) => open !== '' && close !== '');\n}\nexport class BracketKindBase {\n    constructor(config, bracketText) {\n        this.config = config;\n        this.bracketText = bracketText;\n    }\n    get languageId() {\n        return this.config.languageId;\n    }\n}\nexport class OpeningBracketKind extends BracketKindBase {\n    constructor(config, bracketText, openedBrackets) {\n        super(config, bracketText);\n        this.openedBrackets = openedBrackets;\n        this.isOpeningBracket = true;\n    }\n}\nexport class ClosingBracketKind extends BracketKindBase {\n    constructor(config, bracketText, \n    /**\n     * Non empty array of all opening brackets this bracket closes.\n    */\n    openingBrackets, openingColorizedBrackets) {\n        super(config, bracketText);\n        this.openingBrackets = openingBrackets;\n        this.openingColorizedBrackets = openingColorizedBrackets;\n        this.isOpeningBracket = false;\n    }\n    /**\n     * Checks if this bracket closes the given other bracket.\n     * If the bracket infos come from different configurations, this method will return false.\n    */\n    closes(other) {\n        if (other['config'] !== this.config) {\n            return false;\n        }\n        return this.openingBrackets.has(other);\n    }\n    closesColorized(other) {\n        if (other['config'] !== this.config) {\n            return false;\n        }\n        return this.openingColorizedBrackets.has(other);\n    }\n    getOpeningBrackets() {\n        return [...this.openingBrackets];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}