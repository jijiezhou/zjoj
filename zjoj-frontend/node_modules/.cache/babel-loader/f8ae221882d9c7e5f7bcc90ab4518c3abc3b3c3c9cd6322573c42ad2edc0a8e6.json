{"ast":null,"code":"import { defineComponent, toRefs, computed, resolveComponent, openBlock, createBlock, withCtx, createElementBlock, normalizeClass, Fragment, renderList, mergeProps, createCommentVNode } from \"vue\";\nimport ExpandTransition from \"./expand-transition.js\";\nimport { getPrefixCls } from \"../_utils/global-config.js\";\nimport useTreeContext from \"./hooks/use-tree-context.js\";\nimport BaseTreeNode from \"./base-node.js\";\nimport _export_sfc from \"../_virtual/plugin-vue_export-helper.js\";\nconst _sfc_main = defineComponent({\n  name: \"TransitionNodeList\",\n  components: {\n    ExpandTransition,\n    BaseTreeNode\n  },\n  props: {\n    nodeKey: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  setup(props) {\n    const prefixCls = getPrefixCls(\"tree\");\n    const classNames = [`${prefixCls}-node-list`];\n    const treeContext = useTreeContext();\n    const {\n      nodeKey\n    } = toRefs(props);\n    const expanded = computed(() => {\n      var _a, _b;\n      return (_b = (_a = treeContext.expandedKeys) == null ? void 0 : _a.includes) == null ? void 0 : _b.call(_a, nodeKey.value);\n    });\n    const visibleNodeList = computed(() => {\n      var _a;\n      const expandedKeysSet = new Set(treeContext.expandedKeys || []);\n      const childNodeList = (_a = treeContext.flattenTreeData) == null ? void 0 : _a.filter(node => {\n        var _a2, _b;\n        if ((_a2 = node.pathParentKeys) == null ? void 0 : _a2.includes(nodeKey.value)) {\n          return !treeContext.filterTreeNode || ((_b = treeContext.filterTreeNode) == null ? void 0 : _b.call(treeContext, node.treeNodeData));\n        }\n        return false;\n      });\n      return childNodeList == null ? void 0 : childNodeList.filter(node => {\n        var _a2;\n        if (expanded.value) {\n          return (_a2 = node.pathParentKeys) == null ? void 0 : _a2.every(_key => expandedKeysSet.has(_key));\n        }\n        const index = node.pathParentKeys.indexOf(nodeKey.value);\n        return node.pathParentKeys.slice(index + 1).every(_key => expandedKeysSet.has(_key));\n      });\n    });\n    const show = computed(() => {\n      var _a, _b;\n      return ((_a = treeContext.currentExpandKeys) == null ? void 0 : _a.includes(nodeKey.value)) && ((_b = visibleNodeList.value) == null ? void 0 : _b.length);\n    });\n    return {\n      classNames,\n      visibleNodeList,\n      show,\n      expanded,\n      onTransitionEnd() {\n        var _a;\n        (_a = treeContext.onExpandEnd) == null ? void 0 : _a.call(treeContext, nodeKey.value);\n      }\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_BaseTreeNode = resolveComponent(\"BaseTreeNode\");\n  const _component_ExpandTransition = resolveComponent(\"ExpandTransition\");\n  return openBlock(), createBlock(_component_ExpandTransition, {\n    expanded: _ctx.expanded,\n    onEnd: _ctx.onTransitionEnd\n  }, {\n    default: withCtx(() => [_ctx.show ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.classNames)\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.visibleNodeList, node => {\n      return openBlock(), createBlock(_component_BaseTreeNode, mergeProps({\n        key: node.key\n      }, node.treeNodeProps), null, 16);\n    }), 128))], 2)) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  }, 8, [\"expanded\", \"onEnd\"]);\n}\nvar TransitionNodeList = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TransitionNodeList as default };","map":{"version":3,"names":["defineComponent","toRefs","computed","resolveComponent","openBlock","createBlock","withCtx","createElementBlock","normalizeClass","Fragment","renderList","mergeProps","createCommentVNode","ExpandTransition","getPrefixCls","useTreeContext","BaseTreeNode","_export_sfc","_sfc_main","name","components","props","nodeKey","type","String","Number","required","setup","prefixCls","classNames","treeContext","expanded","_a","_b","expandedKeys","includes","call","value","visibleNodeList","expandedKeysSet","Set","childNodeList","flattenTreeData","filter","node","_a2","pathParentKeys","filterTreeNode","treeNodeData","every","_key","has","index","indexOf","slice","show","currentExpandKeys","length","onTransitionEnd","onExpandEnd","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_component_BaseTreeNode","_component_ExpandTransition","onEnd","default","key","class","treeNodeProps","_","TransitionNodeList"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/@arco-design/web-vue/es/tree/transition-node-list.js"],"sourcesContent":["import { defineComponent, toRefs, computed, resolveComponent, openBlock, createBlock, withCtx, createElementBlock, normalizeClass, Fragment, renderList, mergeProps, createCommentVNode } from \"vue\";\nimport ExpandTransition from \"./expand-transition.js\";\nimport { getPrefixCls } from \"../_utils/global-config.js\";\nimport useTreeContext from \"./hooks/use-tree-context.js\";\nimport BaseTreeNode from \"./base-node.js\";\nimport _export_sfc from \"../_virtual/plugin-vue_export-helper.js\";\nconst _sfc_main = defineComponent({\n  name: \"TransitionNodeList\",\n  components: {\n    ExpandTransition,\n    BaseTreeNode\n  },\n  props: {\n    nodeKey: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  setup(props) {\n    const prefixCls = getPrefixCls(\"tree\");\n    const classNames = [`${prefixCls}-node-list`];\n    const treeContext = useTreeContext();\n    const { nodeKey } = toRefs(props);\n    const expanded = computed(() => {\n      var _a, _b;\n      return (_b = (_a = treeContext.expandedKeys) == null ? void 0 : _a.includes) == null ? void 0 : _b.call(_a, nodeKey.value);\n    });\n    const visibleNodeList = computed(() => {\n      var _a;\n      const expandedKeysSet = new Set(treeContext.expandedKeys || []);\n      const childNodeList = (_a = treeContext.flattenTreeData) == null ? void 0 : _a.filter((node) => {\n        var _a2, _b;\n        if ((_a2 = node.pathParentKeys) == null ? void 0 : _a2.includes(nodeKey.value)) {\n          return !treeContext.filterTreeNode || ((_b = treeContext.filterTreeNode) == null ? void 0 : _b.call(treeContext, node.treeNodeData));\n        }\n        return false;\n      });\n      return childNodeList == null ? void 0 : childNodeList.filter((node) => {\n        var _a2;\n        if (expanded.value) {\n          return (_a2 = node.pathParentKeys) == null ? void 0 : _a2.every((_key) => expandedKeysSet.has(_key));\n        }\n        const index = node.pathParentKeys.indexOf(nodeKey.value);\n        return node.pathParentKeys.slice(index + 1).every((_key) => expandedKeysSet.has(_key));\n      });\n    });\n    const show = computed(() => {\n      var _a, _b;\n      return ((_a = treeContext.currentExpandKeys) == null ? void 0 : _a.includes(nodeKey.value)) && ((_b = visibleNodeList.value) == null ? void 0 : _b.length);\n    });\n    return {\n      classNames,\n      visibleNodeList,\n      show,\n      expanded,\n      onTransitionEnd() {\n        var _a;\n        (_a = treeContext.onExpandEnd) == null ? void 0 : _a.call(treeContext, nodeKey.value);\n      }\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_BaseTreeNode = resolveComponent(\"BaseTreeNode\");\n  const _component_ExpandTransition = resolveComponent(\"ExpandTransition\");\n  return openBlock(), createBlock(_component_ExpandTransition, {\n    expanded: _ctx.expanded,\n    onEnd: _ctx.onTransitionEnd\n  }, {\n    default: withCtx(() => [\n      _ctx.show ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(_ctx.classNames)\n      }, [\n        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.visibleNodeList, (node) => {\n          return openBlock(), createBlock(_component_BaseTreeNode, mergeProps({\n            key: node.key\n          }, node.treeNodeProps), null, 16);\n        }), 128))\n      ], 2)) : createCommentVNode(\"v-if\", true)\n    ]),\n    _: 1\n  }, 8, [\"expanded\", \"onEnd\"]);\n}\nvar TransitionNodeList = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TransitionNodeList as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}