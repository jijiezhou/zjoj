{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar AbstractCommandsQuickAccessProvider_1, CommandsHistory_1;\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { createSingleCallFunction } from '../../../base/common/functional.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { TfIdfCalculator, normalizeTfIdfScores } from '../../../base/common/tfIdf.js';\nimport { localize } from '../../../nls.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { IStorageService, WillSaveStateReason } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nlet AbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\n  constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n    super(AbstractCommandsQuickAccessProvider_1.PREFIX, options);\n    this.instantiationService = instantiationService;\n    this.keybindingService = keybindingService;\n    this.commandService = commandService;\n    this.telemetryService = telemetryService;\n    this.dialogService = dialogService;\n    this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n    this.options = options;\n  }\n  async _getPicks(filter, _disposables, token, runOptions) {\n    var _a, _b, _c, _d;\n    // Ask subclass for all command picks\n    const allCommandPicks = await this.getCommandPicks(token);\n    if (token.isCancellationRequested) {\n      return [];\n    }\n    const runTfidf = createSingleCallFunction(() => {\n      const tfidf = new TfIdfCalculator();\n      tfidf.updateDocuments(allCommandPicks.map(commandPick => ({\n        key: commandPick.commandId,\n        textChunks: [this.getTfIdfChunk(commandPick)]\n      })));\n      const result = tfidf.calculateScores(filter, token);\n      return normalizeTfIdfScores(result).filter(score => score.score > AbstractCommandsQuickAccessProvider_1.TFIDF_THRESHOLD).slice(0, AbstractCommandsQuickAccessProvider_1.TFIDF_MAX_RESULTS);\n    });\n    // Filter\n    const filteredCommandPicks = [];\n    for (const commandPick of allCommandPicks) {\n      const labelHighlights = (_a = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.label)) !== null && _a !== void 0 ? _a : undefined;\n      const aliasHighlights = commandPick.commandAlias ? (_b = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.commandAlias)) !== null && _b !== void 0 ? _b : undefined : undefined;\n      // Add if matching in label or alias\n      if (labelHighlights || aliasHighlights) {\n        commandPick.highlights = {\n          label: labelHighlights,\n          detail: this.options.showAlias ? aliasHighlights : undefined\n        };\n        filteredCommandPicks.push(commandPick);\n      }\n      // Also add if we have a 100% command ID match\n      else if (filter === commandPick.commandId) {\n        filteredCommandPicks.push(commandPick);\n      }\n      // Handle tf-idf scoring for the rest if there's a filter\n      else if (filter.length >= 3) {\n        const tfidf = runTfidf();\n        if (token.isCancellationRequested) {\n          return [];\n        }\n        // Add if we have a tf-idf score\n        const tfidfScore = tfidf.find(score => score.key === commandPick.commandId);\n        if (tfidfScore) {\n          commandPick.tfIdfScore = tfidfScore.score;\n          filteredCommandPicks.push(commandPick);\n        }\n      }\n    }\n    // Add description to commands that have duplicate labels\n    const mapLabelToCommand = new Map();\n    for (const commandPick of filteredCommandPicks) {\n      const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n      if (existingCommandForLabel) {\n        commandPick.description = commandPick.commandId;\n        existingCommandForLabel.description = existingCommandForLabel.commandId;\n      } else {\n        mapLabelToCommand.set(commandPick.label, commandPick);\n      }\n    }\n    // Sort by MRU order and fallback to name otherwise\n    filteredCommandPicks.sort((commandPickA, commandPickB) => {\n      // If a result came from tf-idf, we want to put that towards the bottom\n      if (commandPickA.tfIdfScore && commandPickB.tfIdfScore) {\n        if (commandPickA.tfIdfScore === commandPickB.tfIdfScore) {\n          return commandPickA.label.localeCompare(commandPickB.label); // prefer lexicographically smaller command\n        }\n        return commandPickB.tfIdfScore - commandPickA.tfIdfScore; // prefer higher tf-idf score\n      } else if (commandPickA.tfIdfScore) {\n        return 1; // first command has a score but other doesn't so other wins\n      } else if (commandPickB.tfIdfScore) {\n        return -1; // other command has a score but first doesn't so first wins\n      }\n      const commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n      const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n      if (commandACounter && commandBCounter) {\n        return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n      }\n      if (commandACounter) {\n        return -1; // first command was used, so it wins over the non used one\n      }\n      if (commandBCounter) {\n        return 1; // other command was used so it wins over the command\n      }\n      if (this.options.suggestedCommandIds) {\n        const commandASuggestion = this.options.suggestedCommandIds.has(commandPickA.commandId);\n        const commandBSuggestion = this.options.suggestedCommandIds.has(commandPickB.commandId);\n        if (commandASuggestion && commandBSuggestion) {\n          return 0; // honor the order of the array\n        }\n        if (commandASuggestion) {\n          return -1; // first command was suggested, so it wins over the non suggested one\n        }\n        if (commandBSuggestion) {\n          return 1; // other command was suggested so it wins over the command\n        }\n      }\n      // both commands were never used, so we sort by name\n      return commandPickA.label.localeCompare(commandPickB.label);\n    });\n    const commandPicks = [];\n    let addOtherSeparator = false;\n    let addSuggestedSeparator = true;\n    let addCommonlyUsedSeparator = !!this.options.suggestedCommandIds;\n    for (let i = 0; i < filteredCommandPicks.length; i++) {\n      const commandPick = filteredCommandPicks[i];\n      // Separator: recently used\n      if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n        commandPicks.push({\n          type: 'separator',\n          label: localize('recentlyUsed', \"recently used\")\n        });\n        addOtherSeparator = true;\n      }\n      if (addSuggestedSeparator && commandPick.tfIdfScore !== undefined) {\n        commandPicks.push({\n          type: 'separator',\n          label: localize('suggested', \"similar commands\")\n        });\n        addSuggestedSeparator = false;\n      }\n      // Separator: commonly used\n      if (addCommonlyUsedSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && ((_c = this.options.suggestedCommandIds) === null || _c === void 0 ? void 0 : _c.has(commandPick.commandId))) {\n        commandPicks.push({\n          type: 'separator',\n          label: localize('commonlyUsed', \"commonly used\")\n        });\n        addOtherSeparator = true;\n        addCommonlyUsedSeparator = false;\n      }\n      // Separator: other commands\n      if (addOtherSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && !((_d = this.options.suggestedCommandIds) === null || _d === void 0 ? void 0 : _d.has(commandPick.commandId))) {\n        commandPicks.push({\n          type: 'separator',\n          label: localize('morecCommands', \"other commands\")\n        });\n        addOtherSeparator = false;\n      }\n      // Command\n      commandPicks.push(this.toCommandPick(commandPick, runOptions));\n    }\n    if (!this.hasAdditionalCommandPicks(filter, token)) {\n      return commandPicks;\n    }\n    return {\n      picks: commandPicks,\n      additionalPicks: (async () => {\n        var _a;\n        const additionalCommandPicks = await this.getAdditionalCommandPicks(allCommandPicks, filteredCommandPicks, filter, token);\n        if (token.isCancellationRequested) {\n          return [];\n        }\n        const commandPicks = additionalCommandPicks.map(commandPick => this.toCommandPick(commandPick, runOptions));\n        // Basically, if we haven't already added a separator, we add one before the additional picks so long\n        // as one hasn't been added to the start of the array.\n        if (addSuggestedSeparator && ((_a = commandPicks[0]) === null || _a === void 0 ? void 0 : _a.type) !== 'separator') {\n          commandPicks.unshift({\n            type: 'separator',\n            label: localize('suggested', \"similar commands\")\n          });\n        }\n        return commandPicks;\n      })()\n    };\n  }\n  toCommandPick(commandPick, runOptions) {\n    if (commandPick.type === 'separator') {\n      return commandPick;\n    }\n    const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n    const ariaLabel = keybinding ? localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) : commandPick.label;\n    return {\n      ...commandPick,\n      ariaLabel,\n      detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n      keybinding,\n      accept: async () => {\n        var _a, _b;\n        // Add to history\n        this.commandsHistory.push(commandPick.commandId);\n        // Telementry\n        this.telemetryService.publicLog2('workbenchActionExecuted', {\n          id: commandPick.commandId,\n          from: (_a = runOptions === null || runOptions === void 0 ? void 0 : runOptions.from) !== null && _a !== void 0 ? _a : 'quick open'\n        });\n        // Run\n        try {\n          ((_b = commandPick.args) === null || _b === void 0 ? void 0 : _b.length) ? await this.commandService.executeCommand(commandPick.commandId, ...commandPick.args) : await this.commandService.executeCommand(commandPick.commandId);\n        } catch (error) {\n          if (!isCancellationError(error)) {\n            this.dialogService.error(localize('canNotRun', \"Command '{0}' resulted in an error\", commandPick.label), toErrorMessage(error));\n          }\n        }\n      }\n    };\n  }\n  // TF-IDF string to be indexed\n  getTfIdfChunk({\n    label,\n    commandAlias,\n    commandDescription\n  }) {\n    let chunk = label;\n    if (commandAlias && commandAlias !== label) {\n      chunk += ` - ${commandAlias}`;\n    }\n    if (commandDescription && commandDescription.value !== label) {\n      // If the original is the same as the value, don't add it\n      chunk += ` - ${commandDescription.value === commandDescription.original ? commandDescription.value : `${commandDescription.value} (${commandDescription.original})`}`;\n    }\n    return chunk;\n  }\n};\nAbstractCommandsQuickAccessProvider.PREFIX = '>';\nAbstractCommandsQuickAccessProvider.TFIDF_THRESHOLD = 0.5;\nAbstractCommandsQuickAccessProvider.TFIDF_MAX_RESULTS = 5;\nAbstractCommandsQuickAccessProvider.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\nAbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = __decorate([__param(1, IInstantiationService), __param(2, IKeybindingService), __param(3, ICommandService), __param(4, ITelemetryService), __param(5, IDialogService)], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nlet CommandsHistory = CommandsHistory_1 = class CommandsHistory extends Disposable {\n  constructor(storageService, configurationService) {\n    super();\n    this.storageService = storageService;\n    this.configurationService = configurationService;\n    this.configuredCommandsHistoryLength = 0;\n    this.updateConfiguration();\n    this.load();\n    this.registerListeners();\n  }\n  registerListeners() {\n    this._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration(e)));\n    this._register(this.storageService.onWillSaveState(e => {\n      if (e.reason === WillSaveStateReason.SHUTDOWN) {\n        // Commands history is very dynamic and so we limit impact\n        // on storage to only save on shutdown. This helps reduce\n        // the overhead of syncing this data across machines.\n        this.saveState();\n      }\n    }));\n  }\n  updateConfiguration(e) {\n    if (e && !e.affectsConfiguration('workbench.commandPalette.history')) {\n      return;\n    }\n    this.configuredCommandsHistoryLength = CommandsHistory_1.getConfiguredCommandHistoryLength(this.configurationService);\n    if (CommandsHistory_1.cache && CommandsHistory_1.cache.limit !== this.configuredCommandsHistoryLength) {\n      CommandsHistory_1.cache.limit = this.configuredCommandsHistoryLength;\n      CommandsHistory_1.hasChanges = true;\n    }\n  }\n  load() {\n    const raw = this.storageService.get(CommandsHistory_1.PREF_KEY_CACHE, 0 /* StorageScope.PROFILE */);\n    let serializedCache;\n    if (raw) {\n      try {\n        serializedCache = JSON.parse(raw);\n      } catch (error) {\n        // invalid data\n      }\n    }\n    const cache = CommandsHistory_1.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n    if (serializedCache) {\n      let entries;\n      if (serializedCache.usesLRU) {\n        entries = serializedCache.entries;\n      } else {\n        entries = serializedCache.entries.sort((a, b) => a.value - b.value);\n      }\n      entries.forEach(entry => cache.set(entry.key, entry.value));\n    }\n    CommandsHistory_1.counter = this.storageService.getNumber(CommandsHistory_1.PREF_KEY_COUNTER, 0 /* StorageScope.PROFILE */, CommandsHistory_1.counter);\n  }\n  push(commandId) {\n    if (!CommandsHistory_1.cache) {\n      return;\n    }\n    CommandsHistory_1.cache.set(commandId, CommandsHistory_1.counter++); // set counter to command\n    CommandsHistory_1.hasChanges = true;\n  }\n  peek(commandId) {\n    var _a;\n    return (_a = CommandsHistory_1.cache) === null || _a === void 0 ? void 0 : _a.peek(commandId);\n  }\n  saveState() {\n    if (!CommandsHistory_1.cache) {\n      return;\n    }\n    if (!CommandsHistory_1.hasChanges) {\n      return;\n    }\n    const serializedCache = {\n      usesLRU: true,\n      entries: []\n    };\n    CommandsHistory_1.cache.forEach((value, key) => serializedCache.entries.push({\n      key,\n      value\n    }));\n    this.storageService.store(CommandsHistory_1.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n    this.storageService.store(CommandsHistory_1.PREF_KEY_COUNTER, CommandsHistory_1.counter, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n    CommandsHistory_1.hasChanges = false;\n  }\n  static getConfiguredCommandHistoryLength(configurationService) {\n    var _a, _b;\n    const config = configurationService.getValue();\n    const configuredCommandHistoryLength = (_b = (_a = config.workbench) === null || _a === void 0 ? void 0 : _a.commandPalette) === null || _b === void 0 ? void 0 : _b.history;\n    if (typeof configuredCommandHistoryLength === 'number') {\n      return configuredCommandHistoryLength;\n    }\n    return CommandsHistory_1.DEFAULT_COMMANDS_HISTORY_LENGTH;\n  }\n};\nCommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\nCommandsHistory.PREF_KEY_CACHE = 'commandPalette.mru.cache';\nCommandsHistory.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\nCommandsHistory.counter = 1;\nCommandsHistory.hasChanges = false;\nCommandsHistory = CommandsHistory_1 = __decorate([__param(0, IStorageService), __param(1, IConfigurationService)], CommandsHistory);\nexport { CommandsHistory };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","AbstractCommandsQuickAccessProvider_1","CommandsHistory_1","toErrorMessage","isCancellationError","matchesContiguousSubString","matchesPrefix","matchesWords","or","createSingleCallFunction","Disposable","LRUCache","TfIdfCalculator","normalizeTfIdfScores","localize","ICommandService","IConfigurationService","IDialogService","IInstantiationService","IKeybindingService","PickerQuickAccessProvider","IStorageService","WillSaveStateReason","ITelemetryService","AbstractCommandsQuickAccessProvider","constructor","options","instantiationService","keybindingService","commandService","telemetryService","dialogService","PREFIX","commandsHistory","_register","createInstance","CommandsHistory","_getPicks","filter","_disposables","token","runOptions","_a","_b","_c","_d","allCommandPicks","getCommandPicks","isCancellationRequested","runTfidf","tfidf","updateDocuments","map","commandPick","commandId","textChunks","getTfIdfChunk","result","calculateScores","score","TFIDF_THRESHOLD","slice","TFIDF_MAX_RESULTS","filteredCommandPicks","labelHighlights","WORD_FILTER","label","undefined","aliasHighlights","commandAlias","highlights","detail","showAlias","push","tfidfScore","find","tfIdfScore","mapLabelToCommand","Map","existingCommandForLabel","get","description","set","sort","commandPickA","commandPickB","localeCompare","commandACounter","peek","commandBCounter","suggestedCommandIds","commandASuggestion","has","commandBSuggestion","commandPicks","addOtherSeparator","addSuggestedSeparator","addCommonlyUsedSeparator","type","toCommandPick","hasAdditionalCommandPicks","picks","additionalPicks","additionalCommandPicks","getAdditionalCommandPicks","unshift","keybinding","lookupKeybinding","ariaLabel","getAriaLabel","accept","publicLog2","id","from","args","executeCommand","error","commandDescription","chunk","value","original","storageService","configurationService","configuredCommandsHistoryLength","updateConfiguration","load","registerListeners","onDidChangeConfiguration","e","onWillSaveState","reason","SHUTDOWN","saveState","affectsConfiguration","getConfiguredCommandHistoryLength","cache","limit","hasChanges","raw","PREF_KEY_CACHE","serializedCache","JSON","parse","entries","usesLRU","a","b","forEach","entry","counter","getNumber","PREF_KEY_COUNTER","store","stringify","config","getValue","configuredCommandHistoryLength","workbench","commandPalette","history","DEFAULT_COMMANDS_HISTORY_LENGTH"],"sources":["/Users/zj/projects/zjoj/zjoj-frontend/node_modules/monaco-editor/esm/vs/platform/quickinput/browser/commandsQuickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar AbstractCommandsQuickAccessProvider_1, CommandsHistory_1;\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { createSingleCallFunction } from '../../../base/common/functional.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { TfIdfCalculator, normalizeTfIdfScores } from '../../../base/common/tfIdf.js';\nimport { localize } from '../../../nls.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { IStorageService, WillSaveStateReason } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nlet AbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\n    constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n        super(AbstractCommandsQuickAccessProvider_1.PREFIX, options);\n        this.instantiationService = instantiationService;\n        this.keybindingService = keybindingService;\n        this.commandService = commandService;\n        this.telemetryService = telemetryService;\n        this.dialogService = dialogService;\n        this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n        this.options = options;\n    }\n    async _getPicks(filter, _disposables, token, runOptions) {\n        var _a, _b, _c, _d;\n        // Ask subclass for all command picks\n        const allCommandPicks = await this.getCommandPicks(token);\n        if (token.isCancellationRequested) {\n            return [];\n        }\n        const runTfidf = createSingleCallFunction(() => {\n            const tfidf = new TfIdfCalculator();\n            tfidf.updateDocuments(allCommandPicks.map(commandPick => ({\n                key: commandPick.commandId,\n                textChunks: [this.getTfIdfChunk(commandPick)]\n            })));\n            const result = tfidf.calculateScores(filter, token);\n            return normalizeTfIdfScores(result)\n                .filter(score => score.score > AbstractCommandsQuickAccessProvider_1.TFIDF_THRESHOLD)\n                .slice(0, AbstractCommandsQuickAccessProvider_1.TFIDF_MAX_RESULTS);\n        });\n        // Filter\n        const filteredCommandPicks = [];\n        for (const commandPick of allCommandPicks) {\n            const labelHighlights = (_a = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.label)) !== null && _a !== void 0 ? _a : undefined;\n            const aliasHighlights = commandPick.commandAlias ? (_b = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.commandAlias)) !== null && _b !== void 0 ? _b : undefined : undefined;\n            // Add if matching in label or alias\n            if (labelHighlights || aliasHighlights) {\n                commandPick.highlights = {\n                    label: labelHighlights,\n                    detail: this.options.showAlias ? aliasHighlights : undefined\n                };\n                filteredCommandPicks.push(commandPick);\n            }\n            // Also add if we have a 100% command ID match\n            else if (filter === commandPick.commandId) {\n                filteredCommandPicks.push(commandPick);\n            }\n            // Handle tf-idf scoring for the rest if there's a filter\n            else if (filter.length >= 3) {\n                const tfidf = runTfidf();\n                if (token.isCancellationRequested) {\n                    return [];\n                }\n                // Add if we have a tf-idf score\n                const tfidfScore = tfidf.find(score => score.key === commandPick.commandId);\n                if (tfidfScore) {\n                    commandPick.tfIdfScore = tfidfScore.score;\n                    filteredCommandPicks.push(commandPick);\n                }\n            }\n        }\n        // Add description to commands that have duplicate labels\n        const mapLabelToCommand = new Map();\n        for (const commandPick of filteredCommandPicks) {\n            const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n            if (existingCommandForLabel) {\n                commandPick.description = commandPick.commandId;\n                existingCommandForLabel.description = existingCommandForLabel.commandId;\n            }\n            else {\n                mapLabelToCommand.set(commandPick.label, commandPick);\n            }\n        }\n        // Sort by MRU order and fallback to name otherwise\n        filteredCommandPicks.sort((commandPickA, commandPickB) => {\n            // If a result came from tf-idf, we want to put that towards the bottom\n            if (commandPickA.tfIdfScore && commandPickB.tfIdfScore) {\n                if (commandPickA.tfIdfScore === commandPickB.tfIdfScore) {\n                    return commandPickA.label.localeCompare(commandPickB.label); // prefer lexicographically smaller command\n                }\n                return commandPickB.tfIdfScore - commandPickA.tfIdfScore; // prefer higher tf-idf score\n            }\n            else if (commandPickA.tfIdfScore) {\n                return 1; // first command has a score but other doesn't so other wins\n            }\n            else if (commandPickB.tfIdfScore) {\n                return -1; // other command has a score but first doesn't so first wins\n            }\n            const commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n            const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n            if (commandACounter && commandBCounter) {\n                return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n            }\n            if (commandACounter) {\n                return -1; // first command was used, so it wins over the non used one\n            }\n            if (commandBCounter) {\n                return 1; // other command was used so it wins over the command\n            }\n            if (this.options.suggestedCommandIds) {\n                const commandASuggestion = this.options.suggestedCommandIds.has(commandPickA.commandId);\n                const commandBSuggestion = this.options.suggestedCommandIds.has(commandPickB.commandId);\n                if (commandASuggestion && commandBSuggestion) {\n                    return 0; // honor the order of the array\n                }\n                if (commandASuggestion) {\n                    return -1; // first command was suggested, so it wins over the non suggested one\n                }\n                if (commandBSuggestion) {\n                    return 1; // other command was suggested so it wins over the command\n                }\n            }\n            // both commands were never used, so we sort by name\n            return commandPickA.label.localeCompare(commandPickB.label);\n        });\n        const commandPicks = [];\n        let addOtherSeparator = false;\n        let addSuggestedSeparator = true;\n        let addCommonlyUsedSeparator = !!this.options.suggestedCommandIds;\n        for (let i = 0; i < filteredCommandPicks.length; i++) {\n            const commandPick = filteredCommandPicks[i];\n            // Separator: recently used\n            if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n                commandPicks.push({ type: 'separator', label: localize('recentlyUsed', \"recently used\") });\n                addOtherSeparator = true;\n            }\n            if (addSuggestedSeparator && commandPick.tfIdfScore !== undefined) {\n                commandPicks.push({ type: 'separator', label: localize('suggested', \"similar commands\") });\n                addSuggestedSeparator = false;\n            }\n            // Separator: commonly used\n            if (addCommonlyUsedSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && ((_c = this.options.suggestedCommandIds) === null || _c === void 0 ? void 0 : _c.has(commandPick.commandId))) {\n                commandPicks.push({ type: 'separator', label: localize('commonlyUsed', \"commonly used\") });\n                addOtherSeparator = true;\n                addCommonlyUsedSeparator = false;\n            }\n            // Separator: other commands\n            if (addOtherSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && !((_d = this.options.suggestedCommandIds) === null || _d === void 0 ? void 0 : _d.has(commandPick.commandId))) {\n                commandPicks.push({ type: 'separator', label: localize('morecCommands', \"other commands\") });\n                addOtherSeparator = false;\n            }\n            // Command\n            commandPicks.push(this.toCommandPick(commandPick, runOptions));\n        }\n        if (!this.hasAdditionalCommandPicks(filter, token)) {\n            return commandPicks;\n        }\n        return {\n            picks: commandPicks,\n            additionalPicks: (async () => {\n                var _a;\n                const additionalCommandPicks = await this.getAdditionalCommandPicks(allCommandPicks, filteredCommandPicks, filter, token);\n                if (token.isCancellationRequested) {\n                    return [];\n                }\n                const commandPicks = additionalCommandPicks.map(commandPick => this.toCommandPick(commandPick, runOptions));\n                // Basically, if we haven't already added a separator, we add one before the additional picks so long\n                // as one hasn't been added to the start of the array.\n                if (addSuggestedSeparator && ((_a = commandPicks[0]) === null || _a === void 0 ? void 0 : _a.type) !== 'separator') {\n                    commandPicks.unshift({ type: 'separator', label: localize('suggested', \"similar commands\") });\n                }\n                return commandPicks;\n            })()\n        };\n    }\n    toCommandPick(commandPick, runOptions) {\n        if (commandPick.type === 'separator') {\n            return commandPick;\n        }\n        const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n        const ariaLabel = keybinding ?\n            localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) :\n            commandPick.label;\n        return {\n            ...commandPick,\n            ariaLabel,\n            detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n            keybinding,\n            accept: async () => {\n                var _a, _b;\n                // Add to history\n                this.commandsHistory.push(commandPick.commandId);\n                // Telementry\n                this.telemetryService.publicLog2('workbenchActionExecuted', {\n                    id: commandPick.commandId,\n                    from: (_a = runOptions === null || runOptions === void 0 ? void 0 : runOptions.from) !== null && _a !== void 0 ? _a : 'quick open'\n                });\n                // Run\n                try {\n                    ((_b = commandPick.args) === null || _b === void 0 ? void 0 : _b.length)\n                        ? await this.commandService.executeCommand(commandPick.commandId, ...commandPick.args)\n                        : await this.commandService.executeCommand(commandPick.commandId);\n                }\n                catch (error) {\n                    if (!isCancellationError(error)) {\n                        this.dialogService.error(localize('canNotRun', \"Command '{0}' resulted in an error\", commandPick.label), toErrorMessage(error));\n                    }\n                }\n            }\n        };\n    }\n    // TF-IDF string to be indexed\n    getTfIdfChunk({ label, commandAlias, commandDescription }) {\n        let chunk = label;\n        if (commandAlias && commandAlias !== label) {\n            chunk += ` - ${commandAlias}`;\n        }\n        if (commandDescription && commandDescription.value !== label) {\n            // If the original is the same as the value, don't add it\n            chunk += ` - ${commandDescription.value === commandDescription.original ? commandDescription.value : `${commandDescription.value} (${commandDescription.original})`}`;\n        }\n        return chunk;\n    }\n};\nAbstractCommandsQuickAccessProvider.PREFIX = '>';\nAbstractCommandsQuickAccessProvider.TFIDF_THRESHOLD = 0.5;\nAbstractCommandsQuickAccessProvider.TFIDF_MAX_RESULTS = 5;\nAbstractCommandsQuickAccessProvider.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\nAbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IKeybindingService),\n    __param(3, ICommandService),\n    __param(4, ITelemetryService),\n    __param(5, IDialogService)\n], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nlet CommandsHistory = CommandsHistory_1 = class CommandsHistory extends Disposable {\n    constructor(storageService, configurationService) {\n        super();\n        this.storageService = storageService;\n        this.configurationService = configurationService;\n        this.configuredCommandsHistoryLength = 0;\n        this.updateConfiguration();\n        this.load();\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration(e)));\n        this._register(this.storageService.onWillSaveState(e => {\n            if (e.reason === WillSaveStateReason.SHUTDOWN) {\n                // Commands history is very dynamic and so we limit impact\n                // on storage to only save on shutdown. This helps reduce\n                // the overhead of syncing this data across machines.\n                this.saveState();\n            }\n        }));\n    }\n    updateConfiguration(e) {\n        if (e && !e.affectsConfiguration('workbench.commandPalette.history')) {\n            return;\n        }\n        this.configuredCommandsHistoryLength = CommandsHistory_1.getConfiguredCommandHistoryLength(this.configurationService);\n        if (CommandsHistory_1.cache && CommandsHistory_1.cache.limit !== this.configuredCommandsHistoryLength) {\n            CommandsHistory_1.cache.limit = this.configuredCommandsHistoryLength;\n            CommandsHistory_1.hasChanges = true;\n        }\n    }\n    load() {\n        const raw = this.storageService.get(CommandsHistory_1.PREF_KEY_CACHE, 0 /* StorageScope.PROFILE */);\n        let serializedCache;\n        if (raw) {\n            try {\n                serializedCache = JSON.parse(raw);\n            }\n            catch (error) {\n                // invalid data\n            }\n        }\n        const cache = CommandsHistory_1.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n        if (serializedCache) {\n            let entries;\n            if (serializedCache.usesLRU) {\n                entries = serializedCache.entries;\n            }\n            else {\n                entries = serializedCache.entries.sort((a, b) => a.value - b.value);\n            }\n            entries.forEach(entry => cache.set(entry.key, entry.value));\n        }\n        CommandsHistory_1.counter = this.storageService.getNumber(CommandsHistory_1.PREF_KEY_COUNTER, 0 /* StorageScope.PROFILE */, CommandsHistory_1.counter);\n    }\n    push(commandId) {\n        if (!CommandsHistory_1.cache) {\n            return;\n        }\n        CommandsHistory_1.cache.set(commandId, CommandsHistory_1.counter++); // set counter to command\n        CommandsHistory_1.hasChanges = true;\n    }\n    peek(commandId) {\n        var _a;\n        return (_a = CommandsHistory_1.cache) === null || _a === void 0 ? void 0 : _a.peek(commandId);\n    }\n    saveState() {\n        if (!CommandsHistory_1.cache) {\n            return;\n        }\n        if (!CommandsHistory_1.hasChanges) {\n            return;\n        }\n        const serializedCache = { usesLRU: true, entries: [] };\n        CommandsHistory_1.cache.forEach((value, key) => serializedCache.entries.push({ key, value }));\n        this.storageService.store(CommandsHistory_1.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n        this.storageService.store(CommandsHistory_1.PREF_KEY_COUNTER, CommandsHistory_1.counter, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n        CommandsHistory_1.hasChanges = false;\n    }\n    static getConfiguredCommandHistoryLength(configurationService) {\n        var _a, _b;\n        const config = configurationService.getValue();\n        const configuredCommandHistoryLength = (_b = (_a = config.workbench) === null || _a === void 0 ? void 0 : _a.commandPalette) === null || _b === void 0 ? void 0 : _b.history;\n        if (typeof configuredCommandHistoryLength === 'number') {\n            return configuredCommandHistoryLength;\n        }\n        return CommandsHistory_1.DEFAULT_COMMANDS_HISTORY_LENGTH;\n    }\n};\nCommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\nCommandsHistory.PREF_KEY_CACHE = 'commandPalette.mru.cache';\nCommandsHistory.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\nCommandsHistory.counter = 1;\nCommandsHistory.hasChanges = false;\nCommandsHistory = CommandsHistory_1 = __decorate([\n    __param(0, IStorageService),\n    __param(1, IConfigurationService)\n], CommandsHistory);\nexport { CommandsHistory };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}